
STM32L053R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800526c  0800526c  0001526c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000010  080052f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  080052f8  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011def  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002812  00000000  00000000  00031e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00035598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001540a  00000000  00000000  000363b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee90  00000000  00000000  0004b7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000813e9  00000000  00000000  0005a652  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dba3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000dbab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005254 	.word	0x08005254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005254 	.word	0x08005254

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8cf 	bl	8000474 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ca 	bl	8000474 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzsi2>:
 8000438:	211c      	movs	r1, #28
 800043a:	2301      	movs	r3, #1
 800043c:	041b      	lsls	r3, r3, #16
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0xe>
 8000442:	0c00      	lsrs	r0, r0, #16
 8000444:	3910      	subs	r1, #16
 8000446:	0a1b      	lsrs	r3, r3, #8
 8000448:	4298      	cmp	r0, r3
 800044a:	d301      	bcc.n	8000450 <__clzsi2+0x18>
 800044c:	0a00      	lsrs	r0, r0, #8
 800044e:	3908      	subs	r1, #8
 8000450:	091b      	lsrs	r3, r3, #4
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0x22>
 8000456:	0900      	lsrs	r0, r0, #4
 8000458:	3904      	subs	r1, #4
 800045a:	a202      	add	r2, pc, #8	; (adr r2, 8000464 <__clzsi2+0x2c>)
 800045c:	5c10      	ldrb	r0, [r2, r0]
 800045e:	1840      	adds	r0, r0, r1
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	02020304 	.word	0x02020304
 8000468:	01010101 	.word	0x01010101
	...

08000474 <__clzdi2>:
 8000474:	b510      	push	{r4, lr}
 8000476:	2900      	cmp	r1, #0
 8000478:	d103      	bne.n	8000482 <__clzdi2+0xe>
 800047a:	f7ff ffdd 	bl	8000438 <__clzsi2>
 800047e:	3020      	adds	r0, #32
 8000480:	e002      	b.n	8000488 <__clzdi2+0x14>
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	f7ff ffd8 	bl	8000438 <__clzsi2>
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000492:	003b      	movs	r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	2308      	movs	r3, #8
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f004 fed2 	bl	8005244 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004a0:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_ADC_Init+0xc0>)
 80004a2:	4a2b      	ldr	r2, [pc, #172]	; (8000550 <MX_ADC_Init+0xc4>)
 80004a4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004a6:	4b29      	ldr	r3, [pc, #164]	; (800054c <MX_ADC_Init+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_ADC_Init+0xc0>)
 80004ae:	2280      	movs	r2, #128	; 0x80
 80004b0:	05d2      	lsls	r2, r2, #23
 80004b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004b4:	4b25      	ldr	r3, [pc, #148]	; (800054c <MX_ADC_Init+0xc0>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_ADC_Init+0xc0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004c0:	4b22      	ldr	r3, [pc, #136]	; (800054c <MX_ADC_Init+0xc0>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_ADC_Init+0xc0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <MX_ADC_Init+0xc0>)
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004d4:	4b1d      	ldr	r3, [pc, #116]	; (800054c <MX_ADC_Init+0xc0>)
 80004d6:	2221      	movs	r2, #33	; 0x21
 80004d8:	2100      	movs	r1, #0
 80004da:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_ADC_Init+0xc0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <MX_ADC_Init+0xc0>)
 80004e4:	22c2      	movs	r2, #194	; 0xc2
 80004e6:	32ff      	adds	r2, #255	; 0xff
 80004e8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ea:	4b18      	ldr	r3, [pc, #96]	; (800054c <MX_ADC_Init+0xc0>)
 80004ec:	222c      	movs	r2, #44	; 0x2c
 80004ee:	2100      	movs	r1, #0
 80004f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f2:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_ADC_Init+0xc0>)
 80004f4:	2204      	movs	r2, #4
 80004f6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_ADC_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_ADC_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_ADC_Init+0xc0>)
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_ADC_Init+0xc0>)
 800050c:	2200      	movs	r2, #0
 800050e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_ADC_Init+0xc0>)
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fe22 	bl	800115c <HAL_ADC_Init>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800051c:	f000 fa34 	bl	8000988 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000520:	003b      	movs	r3, r7
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <MX_ADC_Init+0xc8>)
 8000524:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000526:	003b      	movs	r3, r7
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	0152      	lsls	r2, r2, #5
 800052c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800052e:	003a      	movs	r2, r7
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_ADC_Init+0xc0>)
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f8cf 	bl	80016d8 <HAL_ADC_ConfigChannel>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800053e:	f000 fa23 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000030 	.word	0x20000030
 8000550:	40012400 	.word	0x40012400
 8000554:	10000010 	.word	0x10000010

08000558 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	230c      	movs	r3, #12
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f004 fe6a 	bl	8005244 <memset>
  if(adcHandle->Instance==ADC1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_ADC_MspInit+0x84>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d12b      	bne.n	80005d2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <HAL_ADC_MspInit+0x88>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <HAL_ADC_MspInit+0x88>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0089      	lsls	r1, r1, #2
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <HAL_ADC_MspInit+0x88>)
 800058a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <HAL_ADC_MspInit+0x88>)
 800058e:	2101      	movs	r1, #1
 8000590:	430a      	orrs	r2, r1
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <HAL_ADC_MspInit+0x88>)
 8000596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000598:	2201      	movs	r2, #1
 800059a:	4013      	ands	r3, r2
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005a0:	210c      	movs	r1, #12
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2210      	movs	r2, #16
 80005a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2203      	movs	r2, #3
 80005ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	187a      	adds	r2, r7, r1
 80005b6:	23a0      	movs	r3, #160	; 0xa0
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fbb5 	bl	8001d2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200c      	movs	r0, #12
 80005c8:	f001 faf6 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80005cc:	200c      	movs	r0, #12
 80005ce:	f001 fb08 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b008      	add	sp, #32
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40012400 	.word	0x40012400
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08b      	sub	sp, #44	; 0x2c
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	2414      	movs	r4, #20
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f004 fe25 	bl	8005244 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <MX_GPIO_Init+0x114>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b3e      	ldr	r3, [pc, #248]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000600:	2104      	movs	r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2204      	movs	r2, #4
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b39      	ldr	r3, [pc, #228]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	430a      	orrs	r2, r1
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
 800061e:	4b36      	ldr	r3, [pc, #216]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <MX_GPIO_Init+0x114>)
 800062c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062e:	4b32      	ldr	r3, [pc, #200]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000630:	2101      	movs	r1, #1
 8000632:	430a      	orrs	r2, r1
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000648:	2102      	movs	r1, #2
 800064a:	430a      	orrs	r2, r1
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_GPIO_Init+0x114>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	2202      	movs	r2, #2
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SEL5_Pin|SEL4_Pin|SEL3_Pin, GPIO_PIN_RESET);
 800065a:	23c9      	movs	r3, #201	; 0xc9
 800065c:	0159      	lsls	r1, r3, #5
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2200      	movs	r2, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fcd7 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SEL7_Pin|SEL8_Pin|SEL2_Pin
 800066a:	4924      	ldr	r1, [pc, #144]	; (80006fc <MX_GPIO_Init+0x118>)
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_GPIO_Init+0x11c>)
 800066e:	2200      	movs	r2, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f001 fcd1 	bl	8002018 <HAL_GPIO_WritePin>
                          |SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000676:	0021      	movs	r1, r4
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	0192      	lsls	r2, r2, #6
 800067e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2284      	movs	r2, #132	; 0x84
 8000684:	0392      	lsls	r2, r2, #14
 8000686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	000c      	movs	r4, r1
 8000690:	187b      	adds	r3, r7, r1
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_GPIO_Init+0x120>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f001 fb48 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SEL5_Pin|SEL4_Pin|SEL3_Pin;
 800069c:	0021      	movs	r1, r4
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	22c9      	movs	r2, #201	; 0xc9
 80006a2:	0152      	lsls	r2, r2, #5
 80006a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	000c      	movs	r4, r1
 80006ba:	187a      	adds	r2, r7, r1
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fb32 	bl	8001d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SEL7_Pin|SEL8_Pin|SEL2_Pin
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <MX_GPIO_Init+0x118>)
 80006ce:	601a      	str	r2, [r3, #0]
                          |SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <MX_GPIO_Init+0x11c>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f001 fb1f 	bl	8001d2c <HAL_GPIO_Init>

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b00b      	add	sp, #44	; 0x2c
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000
 80006fc:	00000f04 	.word	0x00000f04
 8000700:	50000400 	.word	0x50000400
 8000704:	50000800 	.word	0x50000800

08000708 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_LPTIM1_Init+0x44>)
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <MX_LPTIM1_Init+0x48>)
 8000710:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_LPTIM1_Init+0x44>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_LPTIM1_Init+0x44>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_LPTIM1_Init+0x44>)
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MX_LPTIM1_Init+0x4c>)
 8000722:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_LPTIM1_Init+0x44>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_LPTIM1_Init+0x44>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_LPTIM1_Init+0x44>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_LPTIM1_Init+0x44>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fc8b 	bl	8002054 <HAL_LPTIM_Init>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8000742:	f000 f921 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40007c00 	.word	0x40007c00
 8000754:	0000ffff 	.word	0x0000ffff

08000758 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_LPTIM_MspInit+0x38>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10e      	bne.n	8000788 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_LPTIM_MspInit+0x3c>)
 800076c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_LPTIM_MspInit+0x3c>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0609      	lsls	r1, r1, #24
 8000774:	430a      	orrs	r2, r1
 8000776:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2100      	movs	r1, #0
 800077c:	200d      	movs	r0, #13
 800077e:	f001 fa1b 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000782:	200d      	movs	r0, #13
 8000784:	f001 fa2d 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40007c00 	.word	0x40007c00
 8000794:	40021000 	.word	0x40021000

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f000 fc4b 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f849 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a6:	f7ff ff1d 	bl	80005e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007aa:	f000 f947 	bl	8000a3c <MX_TIM2_Init>
  MX_TIM21_Init();
 80007ae:	f000 f9e1 	bl	8000b74 <MX_TIM21_Init>
  MX_TIM22_Init();
 80007b2:	f000 fa49 	bl	8000c48 <MX_TIM22_Init>
  MX_ADC_Init();
 80007b6:	f7ff fe69 	bl	800048c <MX_ADC_Init>
  MX_USART1_UART_Init();
 80007ba:	f000 fb97 	bl	8000eec <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 80007be:	f7ff ffa3 	bl	8000708 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, rx_data1, sizeof(rx_data1));
 80007c2:	4917      	ldr	r1, [pc, #92]	; (8000820 <main+0x88>)
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <main+0x8c>)
 80007c6:	220a      	movs	r2, #10
 80007c8:	0018      	movs	r0, r3
 80007ca:	f003 fa17 	bl	8003bfc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, rx_data2, sizeof(rx_data2));
 80007ce:	4916      	ldr	r1, [pc, #88]	; (8000828 <main+0x90>)
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <main+0x8c>)
 80007d2:	220a      	movs	r2, #10
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 fa11 	bl	8003bfc <HAL_UART_Receive_IT>
  for(int i = 0; i<8; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e007      	b.n	80007f0 <main+0x58>
  {
	  data2[i] = 'x';
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <main+0x94>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	2278      	movs	r2, #120	; 0x78
 80007e8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<8; i++)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	ddf4      	ble.n	80007e0 <main+0x48>
  }

  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <main+0x98>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f892 	bl	8001924 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc);
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <main+0x98>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fe1e 	bl	8001444 <HAL_ADC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_UART_Transmit_IT(&huart1, tx_data, sizeof(tx_data));
 8000808:	490a      	ldr	r1, [pc, #40]	; (8000834 <main+0x9c>)
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <main+0x8c>)
 800080c:	2201      	movs	r2, #1
 800080e:	0018      	movs	r0, r3
 8000810:	f003 f976 	bl	8003b00 <HAL_UART_Transmit_IT>

	  HAL_Delay(500);
 8000814:	23fa      	movs	r3, #250	; 0xfa
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc7d 	bl	8001118 <HAL_Delay>
	  HAL_UART_Transmit_IT(&huart1, tx_data, sizeof(tx_data));
 800081e:	e7f3      	b.n	8000808 <main+0x70>
 8000820:	200000d0 	.word	0x200000d0
 8000824:	2000019c 	.word	0x2000019c
 8000828:	200000c4 	.word	0x200000c4
 800082c:	200000bc 	.word	0x200000bc
 8000830:	20000030 	.word	0x20000030
 8000834:	20000000 	.word	0x20000000

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b09d      	sub	sp, #116	; 0x74
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	2438      	movs	r4, #56	; 0x38
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2338      	movs	r3, #56	; 0x38
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f004 fcfb 	bl	8005244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	2324      	movs	r3, #36	; 0x24
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	0018      	movs	r0, r3
 8000854:	2314      	movs	r3, #20
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f004 fcf3 	bl	8005244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085e:	003b      	movs	r3, r7
 8000860:	0018      	movs	r0, r3
 8000862:	2324      	movs	r3, #36	; 0x24
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f004 fcec 	bl	8005244 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <SystemClock_Config+0xe0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <SystemClock_Config+0xe4>)
 8000872:	401a      	ands	r2, r3
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <SystemClock_Config+0xe0>)
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	0109      	lsls	r1, r1, #4
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087e:	0021      	movs	r1, r4
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0252      	lsls	r2, r2, #9
 800088c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2202      	movs	r2, #2
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	0252      	lsls	r2, r2, #9
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	22c0      	movs	r2, #192	; 0xc0
 80008a0:	0312      	lsls	r2, r2, #12
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	03d2      	lsls	r2, r2, #15
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fd36 	bl	8002320 <HAL_RCC_OscConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008b8:	f000 f866 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	2124      	movs	r1, #36	; 0x24
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	220f      	movs	r2, #15
 80008c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2203      	movs	r2, #3
 80008c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2101      	movs	r1, #1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f002 f8e5 	bl	8002ab0 <HAL_RCC_ClockConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80008ea:	f000 f84d 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPTIM1;
 80008ee:	003b      	movs	r3, r7
 80008f0:	2281      	movs	r2, #129	; 0x81
 80008f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000900:	003b      	movs	r3, r7
 8000902:	0018      	movs	r0, r3
 8000904:	f002 faf4 	bl	8002ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800090c:	f000 f83c 	bl	8000988 <Error_Handler>
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b01d      	add	sp, #116	; 0x74
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40007000 	.word	0x40007000
 800091c:	ffffe7ff 	.word	0xffffe7ff

08000920 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, rx_data1, sizeof(rx_data1));
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <HAL_UART_RxCpltCallback+0x28>)
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_UART_RxCpltCallback+0x2c>)
 800092c:	220a      	movs	r2, #10
 800092e:	0018      	movs	r0, r3
 8000930:	f003 f964 	bl	8003bfc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart1, rx_data2, sizeof(rx_data2));
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <HAL_UART_RxCpltCallback+0x30>)
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_UART_RxCpltCallback+0x2c>)
 8000938:	220a      	movs	r2, #10
 800093a:	0018      	movs	r0, r3
 800093c:	f003 f95e 	bl	8003bfc <HAL_UART_Receive_IT>
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000d0 	.word	0x200000d0
 800094c:	2000019c 	.word	0x2000019c
 8000950:	200000c4 	.word	0x200000c4

08000954 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){}
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	adc_val = HAL_ADC_GetValue(&hadc);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fdda 	bl	8001528 <HAL_ADC_GetValue>
 8000974:	0002      	movs	r2, r0
 8000976:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_ADC_ConvCpltCallback+0x20>)
 8000978:	601a      	str	r2, [r3, #0]
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	2000002c 	.word	0x2000002c

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098e:	e7fe      	b.n	800098e <Error_Handler+0x6>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_MspInit+0x24>)
 8000996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x24>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <HAL_MspInit+0x24>)
 80009a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_MspInit+0x24>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0549      	lsls	r1, r1, #21
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 fb80 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <ADC1_COMP_IRQHandler+0x14>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fda6 	bl	8001540 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000030 	.word	0x20000030

08000a00 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <LPTIM1_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 fbb0 	bl	800216c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000008c 	.word	0x2000008c

08000a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <USART1_IRQHandler+0x14>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f003 f952 	bl	8003cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	2000019c 	.word	0x2000019c

08000a30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	2318      	movs	r3, #24
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f004 fbf9 	bl	8005244 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	2310      	movs	r3, #16
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	2308      	movs	r3, #8
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f004 fbf1 	bl	8005244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	2310      	movs	r3, #16
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f004 fbea 	bl	8005244 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a70:	4b3f      	ldr	r3, [pc, #252]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	05d2      	lsls	r2, r2, #23
 8000a76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a80:	2220      	movs	r2, #32
 8000a82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a86:	22fa      	movs	r2, #250	; 0xfa
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	4b37      	ldr	r3, [pc, #220]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fb8c 	bl	80031b8 <HAL_TIM_Base_Init>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000aa4:	f7ff ff70 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa8:	2118      	movs	r1, #24
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0152      	lsls	r2, r2, #5
 8000ab0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f002 fcb9 	bl	8003430 <HAL_TIM_ConfigClockSource>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000ac2:	f7ff ff61 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 fbb5 	bl	8003238 <HAL_TIM_PWM_Init>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ad2:	f7ff ff59 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	187a      	adds	r2, r7, r1
 8000ae6:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 ff5c 	bl	80039a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000af4:	f7ff ff48 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2260      	movs	r2, #96	; 0x60
 8000afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	0039      	movs	r1, r7
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 fbce 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000b20:	f7ff ff32 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b24:	0039      	movs	r1, r7
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 fbc4 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000b34:	f7ff ff28 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b38:	0039      	movs	r1, r7
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fbba 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8000b48:	f7ff ff1e 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4c:	0039      	movs	r1, r7
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000b50:	220c      	movs	r2, #12
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 fbb0 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 8000b5c:	f7ff ff14 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <MX_TIM2_Init+0x134>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f916 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b00a      	add	sp, #40	; 0x28
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000011c 	.word	0x2000011c

08000b74 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2308      	movs	r3, #8
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f004 fb5d 	bl	8005244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2310      	movs	r3, #16
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f004 fb56 	bl	8005244 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <MX_TIM21_Init+0xd0>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000ba6:	2220      	movs	r2, #32
 8000ba8:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 2000;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000bac:	22fa      	movs	r2, #250	; 0xfa
 8000bae:	00d2      	lsls	r2, r2, #3
 8000bb0:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fb39 	bl	8003238 <HAL_TIM_PWM_Init>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM21_Init+0x5a>
  {
    Error_Handler();
 8000bca:	f7ff fedd 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2110      	movs	r1, #16
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000bdc:	187a      	adds	r2, r7, r1
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fee0 	bl	80039a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM21_Init+0x7c>
  {
    Error_Handler();
 8000bec:	f7ff fecc 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2260      	movs	r2, #96	; 0x60
 8000bf4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bf6:	003b      	movs	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfc:	003b      	movs	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c02:	003b      	movs	r3, r7
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c08:	0039      	movs	r1, r7
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fb52 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8000c18:	f7ff feb6 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1c:	0039      	movs	r1, r7
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	0018      	movs	r0, r3
 8000c24:	f002 fb48 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM21_Init+0xbc>
  {
    Error_Handler();
 8000c2c:	f7ff feac 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8000c30:	4b03      	ldr	r3, [pc, #12]	; (8000c40 <MX_TIM21_Init+0xcc>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f8ae 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000015c 	.word	0x2000015c
 8000c44:	40010800 	.word	0x40010800

08000c48 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4e:	2310      	movs	r3, #16
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	0018      	movs	r0, r3
 8000c54:	2308      	movs	r3, #8
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f004 faf3 	bl	8005244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	003b      	movs	r3, r7
 8000c60:	0018      	movs	r0, r3
 8000c62:	2310      	movs	r3, #16
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f004 faec 	bl	8005244 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c6e:	4a2a      	ldr	r2, [pc, #168]	; (8000d18 <MX_TIM22_Init+0xd0>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 2000;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c80:	22fa      	movs	r2, #250	; 0xfa
 8000c82:	00d2      	lsls	r2, r2, #3
 8000c84:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 facf 	bl	8003238 <HAL_TIM_PWM_Init>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM22_Init+0x5a>
  {
    Error_Handler();
 8000c9e:	f7ff fe73 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000cb0:	187a      	adds	r2, r7, r1
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f002 fe76 	bl	80039a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM22_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f7ff fe62 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	2260      	movs	r2, #96	; 0x60
 8000cc8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	0039      	movs	r1, r7
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fae8 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 8000cec:	f7ff fe4c 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf0:	0039      	movs	r1, r7
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 fade 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM22_Init+0xbc>
  {
    Error_Handler();
 8000d00:	f7ff fe42 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <MX_TIM22_Init+0xcc>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 f844 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b006      	add	sp, #24
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000dc 	.word	0x200000dc
 8000d18:	40011400 	.word	0x40011400

08000d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d105      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_TIM_Base_MspInit+0x28>)
 8000d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_TIM_Base_MspInit+0x28>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000

08000d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM21)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <HAL_TIM_PWM_MspInit+0x40>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_TIM_PWM_MspInit+0x44>)
 8000d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_TIM_PWM_MspInit+0x44>)
 8000d60:	2104      	movs	r1, #4
 8000d62:	430a      	orrs	r2, r1
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000d66:	e00a      	b.n	8000d7e <HAL_TIM_PWM_MspInit+0x36>
  else if(tim_pwmHandle->Instance==TIM22)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_TIM_PWM_MspInit+0x48>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d105      	bne.n	8000d7e <HAL_TIM_PWM_MspInit+0x36>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_TIM_PWM_MspInit+0x44>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_TIM_PWM_MspInit+0x44>)
 8000d78:	2120      	movs	r1, #32
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40011400 	.word	0x40011400

08000d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2314      	movs	r3, #20
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f004 fa4c 	bl	8005244 <memset>
  if(timHandle->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d13c      	bne.n	8000e32 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b48      	ldr	r3, [pc, #288]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dbc:	4b47      	ldr	r3, [pc, #284]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc4:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dd0:	2114      	movs	r1, #20
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	220e      	movs	r2, #14
 8000dd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	000c      	movs	r4, r1
 8000df2:	187a      	adds	r2, r7, r1
 8000df4:	23a0      	movs	r3, #160	; 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 ff96 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e00:	0021      	movs	r1, r4
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	0212      	lsls	r2, r2, #8
 8000e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2205      	movs	r2, #5
 8000e20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	187a      	adds	r2, r7, r1
 8000e24:	23a0      	movs	r3, #160	; 0xa0
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 ff7e 	bl	8001d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8000e30:	e050      	b.n	8000ed4 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM21)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <HAL_TIM_MspPostInit+0x14c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d123      	bne.n	8000e84 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e42:	2102      	movs	r1, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000e54:	2114      	movs	r1, #20
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	22c0      	movs	r2, #192	; 0xc0
 8000e5a:	01d2      	lsls	r2, r2, #7
 8000e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2202      	movs	r2, #2
 8000e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2206      	movs	r2, #6
 8000e74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <HAL_TIM_MspPostInit+0x150>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f000 ff55 	bl	8001d2c <HAL_GPIO_Init>
}
 8000e82:	e027      	b.n	8000ed4 <HAL_TIM_MspPostInit+0x140>
  else if(timHandle->Instance==TIM22)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <HAL_TIM_MspPostInit+0x154>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d122      	bne.n	8000ed4 <HAL_TIM_MspPostInit+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e94:	2101      	movs	r1, #1
 8000e96:	430a      	orrs	r2, r1
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_MspPostInit+0x148>)
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea6:	2114      	movs	r1, #20
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	22c0      	movs	r2, #192	; 0xc0
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	187a      	adds	r2, r7, r1
 8000ec8:	23a0      	movs	r3, #160	; 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 ff2c 	bl	8001d2c <HAL_GPIO_Init>
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b00b      	add	sp, #44	; 0x2c
 8000eda:	bd90      	pop	{r4, r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	50000400 	.word	0x50000400
 8000ee8:	40011400 	.word	0x40011400

08000eec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <MX_USART1_UART_Init+0x5c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000ef8:	2296      	movs	r2, #150	; 0x96
 8000efa:	01d2      	lsls	r2, r2, #7
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <MX_USART1_UART_Init+0x58>)
 8000f30:	0018      	movs	r0, r3
 8000f32:	f002 fd91 	bl	8003a58 <HAL_UART_Init>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f7ff fd25 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000019c 	.word	0x2000019c
 8000f48:	40013800 	.word	0x40013800

08000f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	230c      	movs	r3, #12
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f004 f970 	bl	8005244 <memset>
  if(uartHandle->Instance==USART1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_UART_MspInit+0x90>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d132      	bne.n	8000fd4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	01c9      	lsls	r1, r1, #7
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0x94>)
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4013      	ands	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f94:	210c      	movs	r1, #12
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	22c0      	movs	r2, #192	; 0xc0
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2203      	movs	r2, #3
 8000fae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	187a      	adds	r2, r7, r1
 8000fb8:	23a0      	movs	r3, #160	; 0xa0
 8000fba:	05db      	lsls	r3, r3, #23
 8000fbc:	0011      	movs	r1, r2
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 feb4 	bl	8001d2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	201b      	movs	r0, #27
 8000fca:	f000 fdf5 	bl	8001bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fce:	201b      	movs	r0, #27
 8000fd0:	f000 fe07 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b008      	add	sp, #32
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fe6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopForever+0xe>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopForever+0x16>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800100e:	f7ff fd0f 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f004 f8f3 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fbbf 	bl	8000798 <main>

0800101a <LoopForever>:

LoopForever:
    b LoopForever
 800101a:	e7fe      	b.n	800101a <LoopForever>
  ldr   r0, =_estack
 800101c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001028:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 800102c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001030:	20000224 	.word	0x20000224

08001034 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <DMA1_Channel1_IRQHandler>
	...

08001038 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x3c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Init+0x3c>)
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f811 	bl	8001078 <HAL_InitTick>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d003      	beq.n	8001062 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e001      	b.n	8001066 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001062:	f7ff fc95 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
}
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_InitTick+0x5c>)
 8001082:	681c      	ldr	r4, [r3, #0]
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	0019      	movs	r1, r3
 800108a:	23fa      	movs	r3, #250	; 0xfa
 800108c:	0098      	lsls	r0, r3, #2
 800108e:	f7ff f83b 	bl	8000108 <__udivsi3>
 8001092:	0003      	movs	r3, r0
 8001094:	0019      	movs	r1, r3
 8001096:	0020      	movs	r0, r4
 8001098:	f7ff f836 	bl	8000108 <__udivsi3>
 800109c:	0003      	movs	r3, r0
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fdaf 	bl	8001c02 <HAL_SYSTICK_Config>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e00f      	b.n	80010cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d80b      	bhi.n	80010ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2301      	movs	r3, #1
 80010b6:	425b      	negs	r3, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fd7c 	bl	8001bb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_InitTick+0x64>)
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b003      	add	sp, #12
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	20000004 	.word	0x20000004
 80010d8:	2000000c 	.word	0x2000000c
 80010dc:	20000008 	.word	0x20000008

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	18d2      	adds	r2, r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	2000000c 	.word	0x2000000c
 8001100:	20000220 	.word	0x20000220

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	20000220 	.word	0x20000220

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff fff0 	bl	8001104 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_Delay+0x40>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	001a      	movs	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	189b      	adds	r3, r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	f7ff ffe0 	bl	8001104 <HAL_GetTick>
 8001144:	0002      	movs	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b004      	add	sp, #16
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000000c 	.word	0x2000000c

0800115c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e159      	b.n	8001422 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10a      	bne.n	800118c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2250      	movs	r2, #80	; 0x50
 8001180:	2100      	movs	r1, #0
 8001182:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff f9e6 	bl	8000558 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	2b10      	cmp	r3, #16
 8001196:	d005      	beq.n	80011a4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2204      	movs	r2, #4
 80011a0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011a2:	d00b      	beq.n	80011bc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a8:	2210      	movs	r2, #16
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e132      	b.n	8001422 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c0:	4a9a      	ldr	r2, [pc, #616]	; (800142c <HAL_ADC_Init+0x2d0>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	2202      	movs	r2, #2
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d108      	bne.n	80011ec <HAL_ADC_Init+0x90>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d101      	bne.n	80011ec <HAL_ADC_Init+0x90>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_ADC_Init+0x92>
 80011ec:	2300      	movs	r3, #0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d149      	bne.n	8001286 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d00b      	beq.n	8001216 <HAL_ADC_Init+0xba>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	429a      	cmp	r2, r3
 8001208:	d005      	beq.n	8001216 <HAL_ADC_Init+0xba>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	061b      	lsls	r3, r3, #24
 8001212:	429a      	cmp	r2, r3
 8001214:	d111      	bne.n	800123a <HAL_ADC_Init+0xde>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	0892      	lsrs	r2, r2, #2
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6919      	ldr	r1, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	e014      	b.n	8001264 <HAL_ADC_Init+0x108>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	0892      	lsrs	r2, r2, #2
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	4b79      	ldr	r3, [pc, #484]	; (8001430 <HAL_ADC_Init+0x2d4>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b78      	ldr	r3, [pc, #480]	; (8001430 <HAL_ADC_Init+0x2d4>)
 8001250:	4978      	ldr	r1, [pc, #480]	; (8001434 <HAL_ADC_Init+0x2d8>)
 8001252:	400a      	ands	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_ADC_Init+0x2d4>)
 8001258:	6819      	ldr	r1, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <HAL_ADC_Init+0x2d4>)
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2118      	movs	r1, #24
 8001270:	438a      	bics	r2, r1
 8001272:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001286:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_ADC_Init+0x2d4>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b69      	ldr	r3, [pc, #420]	; (8001430 <HAL_ADC_Init+0x2d4>)
 800128c:	496a      	ldr	r1, [pc, #424]	; (8001438 <HAL_ADC_Init+0x2dc>)
 800128e:	400a      	ands	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_ADC_Init+0x2d4>)
 8001294:	6819      	ldr	r1, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	065a      	lsls	r2, r3, #25
 800129c:	4b64      	ldr	r3, [pc, #400]	; (8001430 <HAL_ADC_Init+0x2d4>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	055b      	lsls	r3, r3, #21
 80012ac:	4013      	ands	r3, r2
 80012ae:	d108      	bne.n	80012c2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0549      	lsls	r1, r1, #21
 80012be:	430a      	orrs	r2, r1
 80012c0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	495b      	ldr	r1, [pc, #364]	; (800143c <HAL_ADC_Init+0x2e0>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68d9      	ldr	r1, [r3, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_Init+0x18c>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e000      	b.n	80012ea <HAL_ADC_Init+0x18e>
 80012e8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012ea:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2020      	movs	r0, #32
 80012f0:	5c1b      	ldrb	r3, [r3, r0]
 80012f2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012f4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	202c      	movs	r0, #44	; 0x2c
 80012fa:	5c1b      	ldrb	r3, [r3, r0]
 80012fc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012fe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001304:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800130c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001314:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001322:	23c2      	movs	r3, #194	; 0xc2
 8001324:	33ff      	adds	r3, #255	; 0xff
 8001326:	429a      	cmp	r2, r3
 8001328:	d00b      	beq.n	8001342 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68d9      	ldr	r1, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2221      	movs	r2, #33	; 0x21
 8001346:	5c9b      	ldrb	r3, [r3, r2]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d11a      	bne.n	8001382 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	5c9b      	ldrb	r3, [r3, r2]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	0249      	lsls	r1, r1, #9
 8001364:	430a      	orrs	r2, r1
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	e00b      	b.n	8001382 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136e:	2220      	movs	r2, #32
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d11f      	bne.n	80013ca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	492a      	ldr	r1, [pc, #168]	; (8001440 <HAL_ADC_Init+0x2e4>)
 8001396:	400a      	ands	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013a8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013ae:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	e00e      	b.n	80013e8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2107      	movs	r1, #7
 80013f4:	438a      	bics	r2, r1
 80013f6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6959      	ldr	r1, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001414:	2203      	movs	r2, #3
 8001416:	4393      	bics	r3, r2
 8001418:	2201      	movs	r2, #1
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	fffffefd 	.word	0xfffffefd
 8001430:	40012708 	.word	0x40012708
 8001434:	ffc3ffff 	.word	0xffc3ffff
 8001438:	fdffffff 	.word	0xfdffffff
 800143c:	fffe0219 	.word	0xfffe0219
 8001440:	fffffc03 	.word	0xfffffc03

08001444 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2204      	movs	r2, #4
 800145c:	4013      	ands	r3, r2
 800145e:	d156      	bne.n	800150e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2250      	movs	r2, #80	; 0x50
 8001464:	5c9b      	ldrb	r3, [r3, r2]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start_IT+0x2a>
 800146a:	2302      	movs	r3, #2
 800146c:	e056      	b.n	800151c <HAL_ADC_Start_IT+0xd8>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2250      	movs	r2, #80	; 0x50
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d007      	beq.n	800148e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800147e:	230f      	movs	r3, #15
 8001480:	18fc      	adds	r4, r7, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f9c7 	bl	8001818 <ADC_Enable>
 800148a:	0003      	movs	r3, r0
 800148c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d13e      	bne.n	8001516 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <HAL_ADC_Start_IT+0xe0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	0052      	lsls	r2, r2, #1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	221c      	movs	r2, #28
 80014be:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d110      	bne.n	80014ea <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2104      	movs	r1, #4
 80014d4:	438a      	bics	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2118      	movs	r1, #24
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]
          break;
 80014e8:	e008      	b.n	80014fc <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	211c      	movs	r1, #28
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]
          break;
 80014fa:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2104      	movs	r1, #4
 8001508:	430a      	orrs	r2, r1
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e003      	b.n	8001516 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800150e:	230f      	movs	r3, #15
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	2202      	movs	r2, #2
 8001514:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b005      	add	sp, #20
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	fffff0fe 	.word	0xfffff0fe

08001528 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001536:	0018      	movs	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2204      	movs	r2, #4
 8001550:	4013      	ands	r3, r2
 8001552:	2b04      	cmp	r3, #4
 8001554:	d106      	bne.n	8001564 <HAL_ADC_IRQHandler+0x24>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2204      	movs	r2, #4
 800155e:	4013      	ands	r3, r2
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00d      	beq.n	8001580 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2208      	movs	r2, #8
 800156c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800156e:	2b08      	cmp	r3, #8
 8001570:	d154      	bne.n	800161c <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2208      	movs	r2, #8
 800157a:	4013      	ands	r3, r2
 800157c:	2b08      	cmp	r3, #8
 800157e:	d14d      	bne.n	800161c <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	2210      	movs	r2, #16
 8001586:	4013      	ands	r3, r2
 8001588:	d106      	bne.n	8001598 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d12e      	bne.n	8001604 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d122      	bne.n	8001604 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2204      	movs	r2, #4
 80015c6:	4013      	ands	r3, r2
 80015c8:	d110      	bne.n	80015ec <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	210c      	movs	r1, #12
 80015d6:	438a      	bics	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	4a35      	ldr	r2, [pc, #212]	; (80016b4 <HAL_ADC_IRQHandler+0x174>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	2201      	movs	r2, #1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
 80015ea:	e00b      	b.n	8001604 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	2220      	movs	r2, #32
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff f9ac 	bl	8000964 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d003      	beq.n	800161c <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	220c      	movs	r2, #12
 800161a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	4013      	ands	r3, r2
 8001626:	2b80      	cmp	r3, #128	; 0x80
 8001628:	d115      	bne.n	8001656 <HAL_ADC_IRQHandler+0x116>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	4013      	ands	r3, r2
 8001634:	2b80      	cmp	r3, #128	; 0x80
 8001636:	d10e      	bne.n	8001656 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	0252      	lsls	r2, r2, #9
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	0018      	movs	r0, r3
 800164a:	f000 f835 	bl	80016b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2280      	movs	r2, #128	; 0x80
 8001654:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2210      	movs	r2, #16
 800165e:	4013      	ands	r3, r2
 8001660:	2b10      	cmp	r3, #16
 8001662:	d123      	bne.n	80016ac <HAL_ADC_IRQHandler+0x16c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2210      	movs	r2, #16
 800166c:	4013      	ands	r3, r2
 800166e:	2b10      	cmp	r3, #16
 8001670:	d11c      	bne.n	80016ac <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	2b00      	cmp	r3, #0
 8001678:	d006      	beq.n	8001688 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10d      	bne.n	80016a4 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	2202      	movs	r2, #2
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2210      	movs	r2, #16
 800169a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f812 	bl	80016c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2210      	movs	r2, #16
 80016aa:	601a      	str	r2, [r3, #0]
  }
  
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	fffffefe 	.word	0xfffffefe

080016b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b002      	add	sp, #8
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2250      	movs	r2, #80	; 0x50
 80016e6:	5c9b      	ldrb	r3, [r3, r2]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x18>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e085      	b.n	80017fc <HAL_ADC_ConfigChannel+0x124>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2250      	movs	r2, #80	; 0x50
 80016f4:	2101      	movs	r1, #1
 80016f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2204      	movs	r2, #4
 8001700:	4013      	ands	r3, r2
 8001702:	d00b      	beq.n	800171c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	2220      	movs	r2, #32
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2250      	movs	r2, #80	; 0x50
 8001714:	2100      	movs	r1, #0
 8001716:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e06f      	b.n	80017fc <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	4a38      	ldr	r2, [pc, #224]	; (8001804 <HAL_ADC_ConfigChannel+0x12c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d035      	beq.n	8001792 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	035b      	lsls	r3, r3, #13
 8001732:	0b5a      	lsrs	r2, r3, #13
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	02db      	lsls	r3, r3, #11
 8001744:	4013      	ands	r3, r2
 8001746:	d009      	beq.n	800175c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0409      	lsls	r1, r1, #16
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001756:	200a      	movs	r0, #10
 8001758:	f000 f8c6 	bl	80018e8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	4013      	ands	r3, r2
 8001766:	d006      	beq.n	8001776 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001768:	4b27      	ldr	r3, [pc, #156]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	03c9      	lsls	r1, r1, #15
 8001772:	430a      	orrs	r2, r1
 8001774:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	4013      	ands	r3, r2
 8001780:	d037      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0449      	lsls	r1, r1, #17
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e02f      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	035b      	lsls	r3, r3, #13
 800179e:	0b5b      	lsrs	r3, r3, #13
 80017a0:	43d9      	mvns	r1, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	400a      	ands	r2, r1
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	02db      	lsls	r3, r3, #11
 80017b2:	4013      	ands	r3, r2
 80017b4:	d005      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017bc:	4913      	ldr	r1, [pc, #76]	; (800180c <HAL_ADC_ConfigChannel+0x134>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d005      	beq.n	80017da <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_ADC_ConfigChannel+0x138>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	025b      	lsls	r3, r3, #9
 80017e2:	4013      	ands	r3, r2
 80017e4:	d005      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_ADC_ConfigChannel+0x130>)
 80017ec:	4909      	ldr	r1, [pc, #36]	; (8001814 <HAL_ADC_ConfigChannel+0x13c>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2250      	movs	r2, #80	; 0x50
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	00001001 	.word	0x00001001
 8001808:	40012708 	.word	0x40012708
 800180c:	ff7fffff 	.word	0xff7fffff
 8001810:	ffbfffff 	.word	0xffbfffff
 8001814:	feffffff 	.word	0xfeffffff

08001818 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2203      	movs	r2, #3
 800182c:	4013      	ands	r3, r2
 800182e:	2b01      	cmp	r3, #1
 8001830:	d108      	bne.n	8001844 <ADC_Enable+0x2c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <ADC_Enable+0x2c>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <ADC_Enable+0x2e>
 8001844:	2300      	movs	r3, #0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d146      	bne.n	80018d8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <ADC_Enable+0xcc>)
 8001852:	4013      	ands	r3, r2
 8001854:	d00d      	beq.n	8001872 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	2210      	movs	r2, #16
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	2201      	movs	r2, #1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e033      	b.n	80018da <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2101      	movs	r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001882:	2001      	movs	r0, #1
 8001884:	f000 f830 	bl	80018e8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001888:	f7ff fc3c 	bl	8001104 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001890:	e01b      	b.n	80018ca <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001892:	f7ff fc37 	bl	8001104 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b0a      	cmp	r3, #10
 800189e:	d914      	bls.n	80018ca <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d00d      	beq.n	80018ca <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	2210      	movs	r2, #16
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	2201      	movs	r2, #1
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e007      	b.n	80018da <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d1dc      	bne.n	8001892 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	80000017 	.word	0x80000017

080018e8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <ADC_DelayMicroSecond+0x34>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	490a      	ldr	r1, [pc, #40]	; (8001920 <ADC_DelayMicroSecond+0x38>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f7fe fc06 	bl	8000108 <__udivsi3>
 80018fc:	0003      	movs	r3, r0
 80018fe:	001a      	movs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4353      	muls	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001906:	e002      	b.n	800190e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b004      	add	sp, #16
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000004 	.word	0x20000004
 8001920:	000f4240 	.word	0x000f4240

08001924 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192e:	2317      	movs	r3, #23
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2250      	movs	r2, #80	; 0x50
 8001942:	5c9b      	ldrb	r3, [r3, r2]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADCEx_Calibration_Start+0x28>
 8001948:	2302      	movs	r3, #2
 800194a:	e083      	b.n	8001a54 <HAL_ADCEx_Calibration_Start+0x130>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2250      	movs	r2, #80	; 0x50
 8001950:	2101      	movs	r1, #1
 8001952:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <HAL_ADCEx_Calibration_Start+0x50>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_ADCEx_Calibration_Start+0x50>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_ADCEx_Calibration_Start+0x52>
 8001974:	2300      	movs	r3, #0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d15b      	bne.n	8001a32 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_ADCEx_Calibration_Start+0x138>)
 8001980:	4013      	ands	r3, r2
 8001982:	2202      	movs	r2, #2
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2103      	movs	r1, #3
 80019a2:	438a      	bics	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0609      	lsls	r1, r1, #24
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80019b8:	f7ff fba4 	bl	8001104 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019c0:	e01d      	b.n	80019fe <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80019c2:	f7ff fb9f 	bl	8001104 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b0a      	cmp	r3, #10
 80019ce:	d916      	bls.n	80019fe <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0fdb      	lsrs	r3, r3, #31
 80019d8:	07da      	lsls	r2, r3, #31
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	429a      	cmp	r2, r3
 80019e0:	d10d      	bne.n	80019fe <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e6:	2212      	movs	r2, #18
 80019e8:	4393      	bics	r3, r2
 80019ea:	2210      	movs	r2, #16
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2250      	movs	r2, #80	; 0x50
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e02a      	b.n	8001a54 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	0fdb      	lsrs	r3, r3, #31
 8001a06:	07da      	lsls	r2, r3, #31
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d0d8      	beq.n	80019c2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68d9      	ldr	r1, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	2203      	movs	r2, #3
 8001a26:	4393      	bics	r3, r2
 8001a28:	2201      	movs	r2, #1
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
 8001a30:	e009      	b.n	8001a46 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	2220      	movs	r2, #32
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001a3e:	2317      	movs	r3, #23
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2250      	movs	r2, #80	; 0x50
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a4e:	2317      	movs	r3, #23
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	781b      	ldrb	r3, [r3, #0]
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b006      	add	sp, #24
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	fffffefd 	.word	0xfffffefd

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b7f      	cmp	r3, #127	; 0x7f
 8001a72:	d809      	bhi.n	8001a88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a74:	1dfb      	adds	r3, r7, #7
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	001a      	movs	r2, r3
 8001a7a:	231f      	movs	r3, #31
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_EnableIRQ+0x30>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	4091      	lsls	r1, r2
 8001a84:	000a      	movs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
  }
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8001aa8:	d828      	bhi.n	8001afc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aaa:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <__NVIC_SetPriority+0xd4>)
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	33c0      	adds	r3, #192	; 0xc0
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	589b      	ldr	r3, [r3, r2]
 8001aba:	1dfa      	adds	r2, r7, #7
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	00d2      	lsls	r2, r2, #3
 8001ac6:	21ff      	movs	r1, #255	; 0xff
 8001ac8:	4091      	lsls	r1, r2
 8001aca:	000a      	movs	r2, r1
 8001acc:	43d2      	mvns	r2, r2
 8001ace:	401a      	ands	r2, r3
 8001ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	22ff      	movs	r2, #255	; 0xff
 8001ad8:	401a      	ands	r2, r3
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	4003      	ands	r3, r0
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae8:	481f      	ldr	r0, [pc, #124]	; (8001b68 <__NVIC_SetPriority+0xd4>)
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	430a      	orrs	r2, r1
 8001af4:	33c0      	adds	r3, #192	; 0xc0
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001afa:	e031      	b.n	8001b60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <__NVIC_SetPriority+0xd8>)
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	0019      	movs	r1, r3
 8001b04:	230f      	movs	r3, #15
 8001b06:	400b      	ands	r3, r1
 8001b08:	3b08      	subs	r3, #8
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3306      	adds	r3, #6
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	3304      	adds	r3, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1dfa      	adds	r2, r7, #7
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	400a      	ands	r2, r1
 8001b20:	00d2      	lsls	r2, r2, #3
 8001b22:	21ff      	movs	r1, #255	; 0xff
 8001b24:	4091      	lsls	r1, r2
 8001b26:	000a      	movs	r2, r1
 8001b28:	43d2      	mvns	r2, r2
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	22ff      	movs	r2, #255	; 0xff
 8001b34:	401a      	ands	r2, r3
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	4003      	ands	r3, r0
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <__NVIC_SetPriority+0xd8>)
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	001c      	movs	r4, r3
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	4023      	ands	r3, r4
 8001b50:	3b08      	subs	r3, #8
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	430a      	orrs	r2, r1
 8001b56:	3306      	adds	r3, #6
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	18c3      	adds	r3, r0, r3
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b003      	add	sp, #12
 8001b66:	bd90      	pop	{r4, r7, pc}
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <SysTick_Config+0x40>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b82:	2301      	movs	r3, #1
 8001b84:	e010      	b.n	8001ba8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <SysTick_Config+0x44>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	3a01      	subs	r2, #1
 8001b8c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	425b      	negs	r3, r3
 8001b92:	2103      	movs	r1, #3
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff7d 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SysTick_Config+0x44>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <SysTick_Config+0x44>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	0018      	movs	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	00ffffff 	.word	0x00ffffff
 8001bb4:	e000e010 	.word	0xe000e010

08001bb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	1c02      	adds	r2, r0, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	0002      	movs	r2, r0
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b25b      	sxtb	r3, r3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff33 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff ffaf 	bl	8001b70 <SysTick_Config>
 8001c12:	0003      	movs	r3, r0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	230f      	movs	r3, #15
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2225      	movs	r2, #37	; 0x25
 8001c30:	5c9b      	ldrb	r3, [r3, r2]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d008      	beq.n	8001c4a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2224      	movs	r2, #36	; 0x24
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e024      	b.n	8001c94 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	210e      	movs	r1, #14
 8001c56:	438a      	bics	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	221c      	movs	r2, #28
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2101      	movs	r1, #1
 8001c78:	4091      	lsls	r1, r2
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2225      	movs	r2, #37	; 0x25
 8001c82:	2101      	movs	r1, #1
 8001c84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2224      	movs	r2, #36	; 0x24
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

    return status;
 8001c8e:	230f      	movs	r3, #15
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001c94:	0018      	movs	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	b004      	add	sp, #16
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2225      	movs	r2, #37	; 0x25
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e02a      	b.n	8001d1e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	210e      	movs	r1, #14
 8001cd4:	438a      	bics	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	221c      	movs	r2, #28
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4091      	lsls	r1, r2
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2225      	movs	r2, #37	; 0x25
 8001d00:	2101      	movs	r1, #1
 8001d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2224      	movs	r2, #36	; 0x24
 8001d08:	2100      	movs	r1, #0
 8001d0a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	4798      	blx	r3
    }
  }
  return status;
 8001d1e:	230f      	movs	r3, #15
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b004      	add	sp, #16
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d42:	e14f      	b.n	8001fe4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4091      	lsls	r1, r2
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d100      	bne.n	8001d5c <HAL_GPIO_Init+0x30>
 8001d5a:	e140      	b.n	8001fde <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	43da      	mvns	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	409a      	lsls	r2, r3
 8001d96:	0013      	movs	r3, r2
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	43da      	mvns	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	0092      	lsls	r2, r2, #2
 8001e28:	58d3      	ldr	r3, [r2, r3]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4013      	ands	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2107      	movs	r1, #7
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	6939      	ldr	r1, [r7, #16]
 8001e64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	409a      	lsls	r2, r3
 8001e74:	0013      	movs	r3, r2
 8001e76:	43da      	mvns	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2203      	movs	r2, #3
 8001e84:	401a      	ands	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	23c0      	movs	r3, #192	; 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d100      	bne.n	8001ea8 <HAL_GPIO_Init+0x17c>
 8001ea6:	e09a      	b.n	8001fde <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea8:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_GPIO_Init+0x2d4>)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	589b      	ldr	r3, [r3, r2]
 8001ec0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	0013      	movs	r3, r2
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	23a0      	movs	r3, #160	; 0xa0
 8001edc:	05db      	lsls	r3, r3, #23
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x1ea>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_GPIO_Init+0x2d8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x1e6>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_GPIO_Init+0x2dc>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x1e2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_GPIO_Init+0x2e0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x1de>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_GPIO_Init+0x2e4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x1da>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x1ec>
 8001f16:	2300      	movs	r3, #0
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	2103      	movs	r1, #3
 8001f1c:	400a      	ands	r2, r1
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x2d4>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	025b      	lsls	r3, r3, #9
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	035b      	lsls	r3, r3, #13
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	039b      	lsls	r3, r3, #14
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2e8>)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	40da      	lsrs	r2, r3
 8001fec:	1e13      	subs	r3, r2, #0
 8001fee:	d000      	beq.n	8001ff2 <HAL_GPIO_Init+0x2c6>
 8001ff0:	e6a8      	b.n	8001d44 <HAL_GPIO_Init+0x18>
  }
}
 8001ff2:	46c0      	nop			; (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b006      	add	sp, #24
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	50000400 	.word	0x50000400
 8002008:	50000800 	.word	0x50000800
 800200c:	50000c00 	.word	0x50000c00
 8002010:	50001c00 	.word	0x50001c00
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	0008      	movs	r0, r1
 8002022:	0011      	movs	r1, r2
 8002024:	1cbb      	adds	r3, r7, #2
 8002026:	1c02      	adds	r2, r0, #0
 8002028:	801a      	strh	r2, [r3, #0]
 800202a:	1c7b      	adds	r3, r7, #1
 800202c:	1c0a      	adds	r2, r1, #0
 800202e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002030:	1c7b      	adds	r3, r7, #1
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002038:	1cbb      	adds	r3, r7, #2
 800203a:	881a      	ldrh	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002042:	1cbb      	adds	r3, r7, #2
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	b002      	add	sp, #8
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e078      	b.n	8002158 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	222e      	movs	r2, #46	; 0x2e
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	222d      	movs	r2, #45	; 0x2d
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0018      	movs	r0, r3
 800207e:	f7fe fb6b 	bl	8000758 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	222e      	movs	r2, #46	; 0x2e
 8002086:	2102      	movs	r1, #2
 8002088:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d005      	beq.n	80020a6 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d103      	bne.n	80020ae <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	221e      	movs	r2, #30
 80020aa:	4393      	bics	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_LPTIM_Init+0x10c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d003      	beq.n	80020c0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <HAL_LPTIM_Init+0x110>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <HAL_LPTIM_Init+0x114>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80020d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80020dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80020e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80020fa:	4313      	orrs	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	429a      	cmp	r2, r3
 8002114:	d107      	bne.n	8002126 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800211e:	4313      	orrs	r3, r2
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <HAL_LPTIM_Init+0x10c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00a      	beq.n	8002146 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002138:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800213e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	222e      	movs	r2, #46	; 0x2e
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0000ffff 	.word	0x0000ffff
 8002164:	ffff1f3f 	.word	0xffff1f3f
 8002168:	ff19f1fe 	.word	0xff19f1fe

0800216c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10e      	bne.n	80021a0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f000 f888 	bl	80022b0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d10e      	bne.n	80021cc <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d107      	bne.n	80021cc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2202      	movs	r2, #2
 80021c2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 f87a 	bl	80022c0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d10e      	bne.n	80021f8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2204      	movs	r2, #4
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 f86c 	bl	80022d0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2208      	movs	r2, #8
 8002200:	4013      	ands	r3, r2
 8002202:	2b08      	cmp	r3, #8
 8002204:	d10e      	bne.n	8002224 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2208      	movs	r2, #8
 800220e:	4013      	ands	r3, r2
 8002210:	2b08      	cmp	r3, #8
 8002212:	d107      	bne.n	8002224 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2208      	movs	r2, #8
 800221a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	0018      	movs	r0, r3
 8002220:	f000 f85e 	bl	80022e0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2210      	movs	r2, #16
 800222c:	4013      	ands	r3, r2
 800222e:	2b10      	cmp	r3, #16
 8002230:	d10e      	bne.n	8002250 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2210      	movs	r2, #16
 800223a:	4013      	ands	r3, r2
 800223c:	2b10      	cmp	r3, #16
 800223e:	d107      	bne.n	8002250 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f850 	bl	80022f0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2220      	movs	r2, #32
 8002258:	4013      	ands	r3, r2
 800225a:	2b20      	cmp	r3, #32
 800225c:	d10e      	bne.n	800227c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2220      	movs	r2, #32
 8002266:	4013      	ands	r3, r2
 8002268:	2b20      	cmp	r3, #32
 800226a:	d107      	bne.n	800227c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2220      	movs	r2, #32
 8002272:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f842 	bl	8002300 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	4013      	ands	r3, r2
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d10e      	bne.n	80022a8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4013      	ands	r3, r2
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d107      	bne.n	80022a8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f834 	bl	8002310 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80022d8:	46c0      	nop			; (mov r8, r8)
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002318:	46c0      	nop			; (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 fbb4 	bl	8002a9c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002334:	4bc3      	ldr	r3, [pc, #780]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	220c      	movs	r2, #12
 800233a:	4013      	ands	r3, r2
 800233c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233e:	4bc1      	ldr	r3, [pc, #772]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4013      	ands	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d100      	bne.n	8002356 <HAL_RCC_OscConfig+0x36>
 8002354:	e07e      	b.n	8002454 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d007      	beq.n	800236c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d112      	bne.n	8002388 <HAL_RCC_OscConfig+0x68>
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	025b      	lsls	r3, r3, #9
 8002368:	429a      	cmp	r2, r3
 800236a:	d10d      	bne.n	8002388 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4bb5      	ldr	r3, [pc, #724]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	029b      	lsls	r3, r3, #10
 8002374:	4013      	ands	r3, r2
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x5a>
 8002378:	e06b      	b.n	8002452 <HAL_RCC_OscConfig+0x132>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d167      	bne.n	8002452 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	f000 fb8a 	bl	8002a9c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	025b      	lsls	r3, r3, #9
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <HAL_RCC_OscConfig+0x84>
 8002394:	4bab      	ldr	r3, [pc, #684]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4baa      	ldr	r3, [pc, #680]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0249      	lsls	r1, r1, #9
 800239e:	430a      	orrs	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e027      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	23a0      	movs	r3, #160	; 0xa0
 80023aa:	02db      	lsls	r3, r3, #11
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d10e      	bne.n	80023ce <HAL_RCC_OscConfig+0xae>
 80023b0:	4ba4      	ldr	r3, [pc, #656]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4ba3      	ldr	r3, [pc, #652]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	02c9      	lsls	r1, r1, #11
 80023ba:	430a      	orrs	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	4ba1      	ldr	r3, [pc, #644]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4ba0      	ldr	r3, [pc, #640]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0249      	lsls	r1, r1, #9
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e012      	b.n	80023f4 <HAL_RCC_OscConfig+0xd4>
 80023ce:	4b9d      	ldr	r3, [pc, #628]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b9c      	ldr	r3, [pc, #624]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023d4:	499c      	ldr	r1, [pc, #624]	; (8002648 <HAL_RCC_OscConfig+0x328>)
 80023d6:	400a      	ands	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	4b9a      	ldr	r3, [pc, #616]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	4013      	ands	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4b96      	ldr	r3, [pc, #600]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b95      	ldr	r3, [pc, #596]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80023ee:	4997      	ldr	r1, [pc, #604]	; (800264c <HAL_RCC_OscConfig+0x32c>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fe82 	bl	8001104 <HAL_GetTick>
 8002400:	0003      	movs	r3, r0
 8002402:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002404:	e009      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002406:	f7fe fe7d 	bl	8001104 <HAL_GetTick>
 800240a:	0002      	movs	r2, r0
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d902      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	f000 fb41 	bl	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800241a:	4b8a      	ldr	r3, [pc, #552]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	4013      	ands	r3, r2
 8002424:	d0ef      	beq.n	8002406 <HAL_RCC_OscConfig+0xe6>
 8002426:	e015      	b.n	8002454 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fe6c 	bl	8001104 <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002432:	f7fe fe67 	bl	8001104 <HAL_GetTick>
 8002436:	0002      	movs	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e32b      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002444:	4b7f      	ldr	r3, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	029b      	lsls	r3, r3, #10
 800244c:	4013      	ands	r3, r2
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x112>
 8002450:	e000      	b.n	8002454 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d100      	bne.n	8002460 <HAL_RCC_OscConfig+0x140>
 800245e:	e08c      	b.n	800257a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d13f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d13c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002478:	4b72      	ldr	r3, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2204      	movs	r2, #4
 800247e:	4013      	ands	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_RCC_OscConfig+0x16c>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e307      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a6f      	ldr	r2, [pc, #444]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	021a      	lsls	r2, r3, #8
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024a2:	4b68      	ldr	r3, [pc, #416]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2209      	movs	r2, #9
 80024a8:	4393      	bics	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024b4:	f000 fc44 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 80024b8:	0001      	movs	r1, r0
 80024ba:	4b62      	ldr	r3, [pc, #392]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	220f      	movs	r2, #15
 80024c2:	4013      	ands	r3, r2
 80024c4:	4a63      	ldr	r2, [pc, #396]	; (8002654 <HAL_RCC_OscConfig+0x334>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	000a      	movs	r2, r1
 80024ca:	40da      	lsrs	r2, r3
 80024cc:	4b62      	ldr	r3, [pc, #392]	; (8002658 <HAL_RCC_OscConfig+0x338>)
 80024ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80024d0:	4b62      	ldr	r3, [pc, #392]	; (800265c <HAL_RCC_OscConfig+0x33c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2513      	movs	r5, #19
 80024d6:	197c      	adds	r4, r7, r5
 80024d8:	0018      	movs	r0, r3
 80024da:	f7fe fdcd 	bl	8001078 <HAL_InitTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80024e2:	197b      	adds	r3, r7, r5
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d047      	beq.n	800257a <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80024ea:	2313      	movs	r3, #19
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	e2d4      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d027      	beq.n	8002548 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024f8:	4b52      	ldr	r3, [pc, #328]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2209      	movs	r2, #9
 80024fe:	4393      	bics	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	4b50      	ldr	r3, [pc, #320]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fdfb 	bl	8001104 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe fdf6 	bl	8001104 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2ba      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	d0f1      	beq.n	8002514 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a46      	ldr	r2, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x330>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	021a      	lsls	r2, r3, #8
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e018      	b.n	800257a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002548:	4b3e      	ldr	r3, [pc, #248]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800254e:	2101      	movs	r1, #1
 8002550:	438a      	bics	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7fe fdd6 	bl	8001104 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255e:	f7fe fdd1 	bl	8001104 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e295      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2204      	movs	r2, #4
 8002576:	4013      	ands	r3, r2
 8002578:	d1f1      	bne.n	800255e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2210      	movs	r2, #16
 8002580:	4013      	ands	r3, r2
 8002582:	d100      	bne.n	8002586 <HAL_RCC_OscConfig+0x266>
 8002584:	e0a3      	b.n	80026ce <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d141      	bne.n	8002610 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4013      	ands	r3, r2
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_OscConfig+0x284>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e27b      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <HAL_RCC_OscConfig+0x340>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025b2:	4b24      	ldr	r3, [pc, #144]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	0a19      	lsrs	r1, r3, #8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	061a      	lsls	r2, r3, #24
 80025c6:	4b1f      	ldr	r3, [pc, #124]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	0b5b      	lsrs	r3, r3, #13
 80025d2:	3301      	adds	r3, #1
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	0212      	lsls	r2, r2, #8
 80025d8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025da:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	210f      	movs	r1, #15
 80025e2:	400b      	ands	r3, r1
 80025e4:	491b      	ldr	r1, [pc, #108]	; (8002654 <HAL_RCC_OscConfig+0x334>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x338>)
 80025ec:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x33c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2513      	movs	r5, #19
 80025f4:	197c      	adds	r4, r7, r5
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fe fd3e 	bl	8001078 <HAL_InitTick>
 80025fc:	0003      	movs	r3, r0
 80025fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002600:	197b      	adds	r3, r7, r5
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d062      	beq.n	80026ce <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 8002608:	2313      	movs	r3, #19
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	e245      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d040      	beq.n	800269a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_OscConfig+0x324>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0049      	lsls	r1, r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe fd6d 	bl	8001104 <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800262e:	e019      	b.n	8002664 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002630:	f7fe fd68 	bl	8001104 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d912      	bls.n	8002664 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e22c      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	40021000 	.word	0x40021000
 8002648:	fffeffff 	.word	0xfffeffff
 800264c:	fffbffff 	.word	0xfffbffff
 8002650:	ffffe0ff 	.word	0xffffe0ff
 8002654:	0800526c 	.word	0x0800526c
 8002658:	20000004 	.word	0x20000004
 800265c:	20000008 	.word	0x20000008
 8002660:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002664:	4bc6      	ldr	r3, [pc, #792]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4013      	ands	r3, r2
 800266e:	d0df      	beq.n	8002630 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4bc3      	ldr	r3, [pc, #780]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4ac3      	ldr	r2, [pc, #780]	; (8002984 <HAL_RCC_OscConfig+0x664>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800267e:	4bc0      	ldr	r3, [pc, #768]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002680:	430a      	orrs	r2, r1
 8002682:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002684:	4bbe      	ldr	r3, [pc, #760]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	0a19      	lsrs	r1, r3, #8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	061a      	lsls	r2, r3, #24
 8002692:	4bbb      	ldr	r3, [pc, #748]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	e019      	b.n	80026ce <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800269a:	4bb9      	ldr	r3, [pc, #740]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4bb8      	ldr	r3, [pc, #736]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80026a0:	49b9      	ldr	r1, [pc, #740]	; (8002988 <HAL_RCC_OscConfig+0x668>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fd2d 	bl	8001104 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b0:	f7fe fd28 	bl	8001104 <HAL_GetTick>
 80026b4:	0002      	movs	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1ec      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026c2:	4baf      	ldr	r3, [pc, #700]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4013      	ands	r3, r2
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2208      	movs	r2, #8
 80026d4:	4013      	ands	r3, r2
 80026d6:	d036      	beq.n	8002746 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d019      	beq.n	8002714 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e0:	4ba7      	ldr	r3, [pc, #668]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80026e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026e4:	4ba6      	ldr	r3, [pc, #664]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	430a      	orrs	r2, r1
 80026ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7fe fd0a 	bl	8001104 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fd05 	bl	8001104 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e1c9      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002708:	4b9d      	ldr	r3, [pc, #628]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800270a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d0f1      	beq.n	80026f6 <HAL_RCC_OscConfig+0x3d6>
 8002712:	e018      	b.n	8002746 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002714:	4b9a      	ldr	r3, [pc, #616]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002718:	4b99      	ldr	r3, [pc, #612]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800271a:	2101      	movs	r1, #1
 800271c:	438a      	bics	r2, r1
 800271e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fcf0 	bl	8001104 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272a:	f7fe fceb 	bl	8001104 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1af      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800273c:	4b90      	ldr	r3, [pc, #576]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d1f1      	bne.n	800272a <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2204      	movs	r2, #4
 800274c:	4013      	ands	r3, r2
 800274e:	d100      	bne.n	8002752 <HAL_RCC_OscConfig+0x432>
 8002750:	e0af      	b.n	80028b2 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002752:	2327      	movs	r3, #39	; 0x27
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b89      	ldr	r3, [pc, #548]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800275c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	055b      	lsls	r3, r3, #21
 8002762:	4013      	ands	r3, r2
 8002764:	d10a      	bne.n	800277c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b86      	ldr	r3, [pc, #536]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0549      	lsls	r1, r1, #21
 8002770:	430a      	orrs	r2, r1
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002774:	2327      	movs	r3, #39	; 0x27
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x66c>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4013      	ands	r3, r2
 8002786:	d11a      	bne.n	80027be <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002788:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x66c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b7f      	ldr	r3, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x66c>)
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	0049      	lsls	r1, r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe fcb5 	bl	8001104 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7fe fcb0 	bl	8001104 <HAL_GetTick>
 80027a4:	0002      	movs	r2, r0
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e174      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x66c>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_OscConfig+0x4ba>
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ce:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0049      	lsls	r1, r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	; 0x50
 80027d8:	e031      	b.n	800283e <HAL_RCC_OscConfig+0x51e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x4dc>
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027e8:	4967      	ldr	r1, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x668>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50
 80027ee:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80027f4:	4966      	ldr	r1, [pc, #408]	; (8002990 <HAL_RCC_OscConfig+0x670>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	651a      	str	r2, [r3, #80]	; 0x50
 80027fa:	e020      	b.n	800283e <HAL_RCC_OscConfig+0x51e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	23a0      	movs	r3, #160	; 0xa0
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	429a      	cmp	r2, r3
 8002806:	d10e      	bne.n	8002826 <HAL_RCC_OscConfig+0x506>
 8002808:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800280a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800280c:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	00c9      	lsls	r1, r1, #3
 8002812:	430a      	orrs	r2, r1
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
 8002816:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0049      	lsls	r1, r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	651a      	str	r2, [r3, #80]	; 0x50
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x51e>
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800282a:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800282c:	4956      	ldr	r1, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x668>)
 800282e:	400a      	ands	r2, r1
 8002830:	651a      	str	r2, [r3, #80]	; 0x50
 8002832:	4b53      	ldr	r3, [pc, #332]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002836:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002838:	4955      	ldr	r1, [pc, #340]	; (8002990 <HAL_RCC_OscConfig+0x670>)
 800283a:	400a      	ands	r2, r1
 800283c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7fe fc5d 	bl	8001104 <HAL_GetTick>
 800284a:	0003      	movs	r3, r0
 800284c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800284e:	e009      	b.n	8002864 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7fe fc58 	bl	8001104 <HAL_GetTick>
 8002854:	0002      	movs	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <HAL_RCC_OscConfig+0x674>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e11b      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002864:	4b46      	ldr	r3, [pc, #280]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x530>
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fc47 	bl	8001104 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800287a:	e009      	b.n	8002890 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fc42 	bl	8001104 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	4a43      	ldr	r2, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x674>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e105      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002890:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d1ef      	bne.n	800287c <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800289c:	2327      	movs	r3, #39	; 0x27
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028ac:	493a      	ldr	r1, [pc, #232]	; (8002998 <HAL_RCC_OscConfig+0x678>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2220      	movs	r2, #32
 80028b8:	4013      	ands	r3, r2
 80028ba:	d049      	beq.n	8002950 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d026      	beq.n	8002912 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028ca:	2101      	movs	r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	635a      	str	r2, [r3, #52]	; 0x34
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_RCC_OscConfig+0x67c>)
 80028de:	6a1a      	ldr	r2, [r3, #32]
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCC_OscConfig+0x67c>)
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	0189      	lsls	r1, r1, #6
 80028e6:	430a      	orrs	r2, r1
 80028e8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe fc0b 	bl	8001104 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f4:	f7fe fc06 	bl	8001104 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0ca      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002906:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d0f1      	beq.n	80028f4 <HAL_RCC_OscConfig+0x5d4>
 8002910:	e01e      	b.n	8002950 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002912:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002918:	2101      	movs	r1, #1
 800291a:	438a      	bics	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCC_OscConfig+0x67c>)
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_RCC_OscConfig+0x67c>)
 8002924:	491e      	ldr	r1, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x680>)
 8002926:	400a      	ands	r2, r1
 8002928:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fbeb 	bl	8001104 <HAL_GetTick>
 800292e:	0003      	movs	r3, r0
 8002930:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002934:	f7fe fbe6 	bl	8001104 <HAL_GetTick>
 8002938:	0002      	movs	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0aa      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d1f1      	bne.n	8002934 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d100      	bne.n	800295a <HAL_RCC_OscConfig+0x63a>
 8002958:	e09f      	b.n	8002a9a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d100      	bne.n	8002962 <HAL_RCC_OscConfig+0x642>
 8002960:	e078      	b.n	8002a54 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	2b02      	cmp	r3, #2
 8002968:	d159      	bne.n	8002a1e <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4b04      	ldr	r3, [pc, #16]	; (8002980 <HAL_RCC_OscConfig+0x660>)
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x684>)
 8002972:	400a      	ands	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fbc5 	bl	8001104 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800297e:	e01c      	b.n	80029ba <HAL_RCC_OscConfig+0x69a>
 8002980:	40021000 	.word	0x40021000
 8002984:	ffff1fff 	.word	0xffff1fff
 8002988:	fffffeff 	.word	0xfffffeff
 800298c:	40007000 	.word	0x40007000
 8002990:	fffffbff 	.word	0xfffffbff
 8002994:	00001388 	.word	0x00001388
 8002998:	efffffff 	.word	0xefffffff
 800299c:	40010000 	.word	0x40010000
 80029a0:	ffffdfff 	.word	0xffffdfff
 80029a4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fbac 	bl	8001104 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e070      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	049b      	lsls	r3, r3, #18
 80029c2:	4013      	ands	r3, r2
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4a37      	ldr	r2, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x788>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	431a      	orrs	r2, r3
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0449      	lsls	r1, r1, #17
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb86 	bl	8001104 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe fb81 	bl	8001104 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e045      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	049b      	lsls	r3, r3, #18
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x6de>
 8002a1c:	e03d      	b.n	8002a9a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a24:	4921      	ldr	r1, [pc, #132]	; (8002aac <HAL_RCC_OscConfig+0x78c>)
 8002a26:	400a      	ands	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fb6b 	bl	8001104 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fb66 	bl	8001104 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e02a      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	049b      	lsls	r3, r3, #18
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x714>
 8002a52:	e022      	b.n	8002a9a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	23f0      	movs	r3, #240	; 0xf0
 8002a7a:	039b      	lsls	r3, r3, #14
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	23c0      	movs	r3, #192	; 0xc0
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b00a      	add	sp, #40	; 0x28
 8002aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	ff02ffff 	.word	0xff02ffff
 8002aac:	feffffff 	.word	0xfeffffff

08002ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e129      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d91e      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b93      	ldr	r3, [pc, #588]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	4393      	bics	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	4b90      	ldr	r3, [pc, #576]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fb0e 	bl	8001104 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aec:	e009      	b.n	8002b02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aee:	f7fe fb09 	bl	8001104 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	4a8a      	ldr	r2, [pc, #552]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e10a      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b87      	ldr	r3, [pc, #540]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1ee      	bne.n	8002aee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2202      	movs	r2, #2
 8002b16:	4013      	ands	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1a:	4b83      	ldr	r3, [pc, #524]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	22f0      	movs	r2, #240	; 0xf0
 8002b20:	4393      	bics	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b7f      	ldr	r3, [pc, #508]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d100      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x8a>
 8002b38:	e089      	b.n	8002c4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d107      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	029b      	lsls	r3, r3, #10
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d120      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0e2      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5a:	4b73      	ldr	r3, [pc, #460]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	049b      	lsls	r3, r3, #18
 8002b62:	4013      	ands	r3, r2
 8002b64:	d114      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0d6      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b72:	4b6d      	ldr	r3, [pc, #436]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cb      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b80:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0c3      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b90:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2203      	movs	r2, #3
 8002b96:	4393      	bics	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe faae 	bl	8001104 <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d111      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bb4:	e009      	b.n	8002bca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb6:	f7fe faa5 	bl	8001104 <HAL_GetTick>
 8002bba:	0002      	movs	r2, r0
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	4a58      	ldr	r2, [pc, #352]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0a6      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	220c      	movs	r2, #12
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d1ef      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x106>
 8002bd6:	e03a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d111      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	e009      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7fe fa8f 	bl	8001104 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e090      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf6:	4b4c      	ldr	r3, [pc, #304]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d1ef      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x132>
 8002c02:	e024      	b.n	8002c4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d11b      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0c:	e009      	b.n	8002c22 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7fe fa79 	bl	8001104 <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e07a      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	220c      	movs	r2, #12
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d1ef      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x15e>
 8002c2e:	e00e      	b.n	8002c4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c30:	f7fe fa68 	bl	8001104 <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e069      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	220c      	movs	r2, #12
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4e:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4013      	ands	r3, r2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d21e      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5c:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4393      	bics	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fa49 	bl	8001104 <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	e009      	b.n	8002c8c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c78:	f7fe fa44 	bl	8001104 <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_RCC_ClockConfig+0x274>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_ClockConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d1ee      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x27c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_RCC_ClockConfig+0x280>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	00da      	lsls	r2, r3, #3
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd8:	f000 f832 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cdc:	0001      	movs	r1, r0
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x278>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <HAL_RCC_ClockConfig+0x284>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	000a      	movs	r2, r1
 8002cee:	40da      	lsrs	r2, r3
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_RCC_ClockConfig+0x288>)
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <HAL_RCC_ClockConfig+0x28c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	250b      	movs	r5, #11
 8002cfa:	197c      	adds	r4, r7, r5
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7fe f9bb 	bl	8001078 <HAL_InitTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d06:	197b      	adds	r3, r7, r5
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8002d0e:	230b      	movs	r3, #11
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	e000      	b.n	8002d18 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d20:	40022000 	.word	0x40022000
 8002d24:	00001388 	.word	0x00001388
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	fffff8ff 	.word	0xfffff8ff
 8002d30:	ffffc7ff 	.word	0xffffc7ff
 8002d34:	0800526c 	.word	0x0800526c
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	20000008 	.word	0x20000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b08f      	sub	sp, #60	; 0x3c
 8002d44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4e:	230c      	movs	r3, #12
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d00f      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x36>
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d010      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x3c>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d000      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x20>
 8002d5e:	e073      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d60:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2210      	movs	r2, #16
 8002d66:	4013      	ands	r3, r2
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002d6a:	4b42      	ldr	r3, [pc, #264]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002d6e:	e079      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002d70:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d74:	e076      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d7a:	e073      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	0c9a      	lsrs	r2, r3, #18
 8002d80:	230f      	movs	r3, #15
 8002d82:	401a      	ands	r2, r3
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	0d9a      	lsrs	r2, r3, #22
 8002d8e:	2303      	movs	r3, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	3301      	adds	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	025b      	lsls	r3, r3, #9
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	4a34      	ldr	r2, [pc, #208]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002dac:	2300      	movs	r3, #0
 8002dae:	69b8      	ldr	r0, [r7, #24]
 8002db0:	69f9      	ldr	r1, [r7, #28]
 8002db2:	f7fd fa55 	bl	8000260 <__aeabi_lmul>
 8002db6:	0003      	movs	r3, r0
 8002db8:	000c      	movs	r4, r1
 8002dba:	0018      	movs	r0, r3
 8002dbc:	0021      	movs	r1, r4
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f7fd fa29 	bl	8000220 <__aeabi_uldivmod>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	000c      	movs	r4, r1
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd4:	e035      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d019      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4a22      	ldr	r2, [pc, #136]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8002dea:	2300      	movs	r3, #0
 8002dec:	68b8      	ldr	r0, [r7, #8]
 8002dee:	68f9      	ldr	r1, [r7, #12]
 8002df0:	f7fd fa36 	bl	8000260 <__aeabi_lmul>
 8002df4:	0003      	movs	r3, r0
 8002df6:	000c      	movs	r4, r1
 8002df8:	0018      	movs	r0, r3
 8002dfa:	0021      	movs	r1, r4
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	2300      	movs	r3, #0
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f7fd fa0a 	bl	8000220 <__aeabi_uldivmod>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	000c      	movs	r4, r1
 8002e10:	637b      	str	r3, [r7, #52]	; 0x34
 8002e12:	e016      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	0018      	movs	r0, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f7fd fa1e 	bl	8000260 <__aeabi_lmul>
 8002e24:	0003      	movs	r3, r0
 8002e26:	000c      	movs	r4, r1
 8002e28:	0018      	movs	r0, r3
 8002e2a:	0021      	movs	r1, r4
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	001d      	movs	r5, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	001e      	movs	r6, r3
 8002e34:	002a      	movs	r2, r5
 8002e36:	0033      	movs	r3, r6
 8002e38:	f7fd f9f2 	bl	8000220 <__aeabi_uldivmod>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	000c      	movs	r4, r1
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e46:	e00d      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0b5b      	lsrs	r3, r3, #13
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	3301      	adds	r3, #1
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	0212      	lsls	r2, r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	0013      	movs	r3, r2
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00f      	add	sp, #60	; 0x3c
 8002e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	40021000 	.word	0x40021000
 8002e74:	003d0900 	.word	0x003d0900
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	08005284 	.word	0x08005284

08002e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
}
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	f7ff fff2 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ea0:	0001      	movs	r1, r0
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	4013      	ands	r3, r2
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	40d9      	lsrs	r1, r3
 8002eb2:	000b      	movs	r3, r1
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	0800527c 	.word	0x0800527c

08002ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ec8:	f7ff ffdc 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ecc:	0001      	movs	r1, r0
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0adb      	lsrs	r3, r3, #11
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	40d9      	lsrs	r1, r3
 8002ede:	000b      	movs	r3, r1
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	0800527c 	.word	0x0800527c

08002ef0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ef8:	2317      	movs	r3, #23
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2220      	movs	r2, #32
 8002f06:	4013      	ands	r3, r2
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	d100      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002f16:	e0d9      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f18:	4b9c      	ldr	r3, [pc, #624]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	055b      	lsls	r3, r3, #21
 8002f20:	4013      	ands	r3, r2
 8002f22:	d10a      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f28:	4b98      	ldr	r3, [pc, #608]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	0549      	lsls	r1, r1, #21
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f32:	2317      	movs	r3, #23
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b95      	ldr	r3, [pc, #596]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	d11a      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b91      	ldr	r3, [pc, #580]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0049      	lsls	r1, r1, #1
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f54:	f7fe f8d6 	bl	8001104 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe f8d1 	bl	8001104 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e108      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b87      	ldr	r3, [pc, #540]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f7c:	4b83      	ldr	r3, [pc, #524]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	23c0      	movs	r3, #192	; 0xc0
 8002f82:	039b      	lsls	r3, r3, #14
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	23c0      	movs	r3, #192	; 0xc0
 8002f8e:	039b      	lsls	r3, r3, #14
 8002f90:	4013      	ands	r3, r2
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	23c0      	movs	r3, #192	; 0xc0
 8002f9e:	039b      	lsls	r3, r3, #14
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d013      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	23c0      	movs	r3, #192	; 0xc0
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	23c0      	movs	r3, #192	; 0xc0
 8002fb4:	029b      	lsls	r3, r3, #10
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fba:	4b74      	ldr	r3, [pc, #464]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0d8      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002fd0:	4b6e      	ldr	r3, [pc, #440]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	029b      	lsls	r3, r3, #10
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d049      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	23c0      	movs	r3, #192	; 0xc0
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4013      	ands	r3, r2
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d004      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	23c0      	movs	r3, #192	; 0xc0
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	4013      	ands	r3, r2
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	429a      	cmp	r2, r3
 800300a:	d034      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4013      	ands	r3, r2
 8003016:	d02e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003018:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	4a5d      	ldr	r2, [pc, #372]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003026:	4b59      	ldr	r3, [pc, #356]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	0309      	lsls	r1, r1, #12
 800302c:	430a      	orrs	r2, r1
 800302e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003034:	4b55      	ldr	r3, [pc, #340]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003036:	4958      	ldr	r1, [pc, #352]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003038:	400a      	ands	r2, r1
 800303a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d014      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe f85a 	bl	8001104 <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003054:	e009      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003056:	f7fe f855 	bl	8001104 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	4a4e      	ldr	r2, [pc, #312]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e08b      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800306c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4013      	ands	r3, r2
 8003074:	d0ef      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	401a      	ands	r2, r3
 8003080:	23c0      	movs	r3, #192	; 0xc0
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	429a      	cmp	r2, r3
 8003086:	d10c      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003088:	4b40      	ldr	r3, [pc, #256]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a44      	ldr	r2, [pc, #272]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	23c0      	movs	r3, #192	; 0xc0
 8003098:	039b      	lsls	r3, r3, #14
 800309a:	401a      	ands	r2, r3
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	401a      	ands	r2, r3
 80030b0:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030b6:	2317      	movs	r3, #23
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c4:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030c6:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d6:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030da:	2203      	movs	r2, #3
 80030dc:	4393      	bics	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030e6:	430a      	orrs	r2, r1
 80030e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2202      	movs	r2, #2
 80030f0:	4013      	ands	r3, r2
 80030f2:	d009      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	220c      	movs	r2, #12
 80030fa:	4393      	bics	r3, r2
 80030fc:	0019      	movs	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003104:	430a      	orrs	r2, r1
 8003106:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003112:	4b1e      	ldr	r3, [pc, #120]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003122:	430a      	orrs	r2, r1
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2208      	movs	r2, #8
 800312c:	4013      	ands	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003136:	4013      	ands	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003140:	430a      	orrs	r2, r1
 8003142:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2240      	movs	r2, #64	; 0x40
 800314a:	4013      	ands	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800315e:	430a      	orrs	r2, r1
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	4013      	ands	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	4a10      	ldr	r2, [pc, #64]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800317c:	430a      	orrs	r2, r1
 800317e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b006      	add	sp, #24
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
 8003194:	fffcffff 	.word	0xfffcffff
 8003198:	fff7ffff 	.word	0xfff7ffff
 800319c:	00001388 	.word	0x00001388
 80031a0:	ffcfffff 	.word	0xffcfffff
 80031a4:	efffffff 	.word	0xefffffff
 80031a8:	fffff3ff 	.word	0xfffff3ff
 80031ac:	ffffcfff 	.word	0xffffcfff
 80031b0:	fbffffff 	.word	0xfbffffff
 80031b4:	fff3ffff 	.word	0xfff3ffff

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e032      	b.n	8003230 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2239      	movs	r2, #57	; 0x39
 80031ce:	5c9b      	ldrb	r3, [r3, r2]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d107      	bne.n	80031e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2238      	movs	r2, #56	; 0x38
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7fd fd9b 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2239      	movs	r2, #57	; 0x39
 80031ea:	2102      	movs	r1, #2
 80031ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	0019      	movs	r1, r3
 80031f8:	0010      	movs	r0, r2
 80031fa:	f000 f9e3 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223e      	movs	r2, #62	; 0x3e
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223a      	movs	r2, #58	; 0x3a
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	223b      	movs	r2, #59	; 0x3b
 8003212:	2101      	movs	r1, #1
 8003214:	5499      	strb	r1, [r3, r2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223c      	movs	r2, #60	; 0x3c
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	223d      	movs	r2, #61	; 0x3d
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2239      	movs	r2, #57	; 0x39
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e032      	b.n	80032b0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2239      	movs	r2, #57	; 0x39
 800324e:	5c9b      	ldrb	r3, [r3, r2]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d107      	bne.n	8003266 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2238      	movs	r2, #56	; 0x38
 800325a:	2100      	movs	r1, #0
 800325c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	0018      	movs	r0, r3
 8003262:	f7fd fd71 	bl	8000d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2239      	movs	r2, #57	; 0x39
 800326a:	2102      	movs	r1, #2
 800326c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	0019      	movs	r1, r3
 8003278:	0010      	movs	r0, r2
 800327a:	f000 f9a3 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	223e      	movs	r2, #62	; 0x3e
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	223a      	movs	r2, #58	; 0x3a
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	223b      	movs	r2, #59	; 0x3b
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	223c      	movs	r2, #60	; 0x3c
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223d      	movs	r2, #61	; 0x3d
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2239      	movs	r2, #57	; 0x39
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2317      	movs	r3, #23
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2238      	movs	r2, #56	; 0x38
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_TIM_PWM_ConfigChannel+0x22>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e0a3      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2238      	movs	r2, #56	; 0x38
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d029      	beq.n	800333c <HAL_TIM_PWM_ConfigChannel+0x84>
 80032e8:	d802      	bhi.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x42>
 80032ee:	e08c      	b.n	800340a <HAL_TIM_PWM_ConfigChannel+0x152>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d046      	beq.n	8003382 <HAL_TIM_PWM_ConfigChannel+0xca>
 80032f4:	2b0c      	cmp	r3, #12
 80032f6:	d065      	beq.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x10c>
 80032f8:	e087      	b.n	800340a <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f000 f9b2 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2108      	movs	r1, #8
 8003314:	430a      	orrs	r2, r1
 8003316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2104      	movs	r1, #4
 8003324:	438a      	bics	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6999      	ldr	r1, [r3, #24]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	619a      	str	r2, [r3, #24]
      break;
 800333a:	e06b      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f9cd 	bl	80036e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2180      	movs	r1, #128	; 0x80
 8003356:	0109      	lsls	r1, r1, #4
 8003358:	430a      	orrs	r2, r1
 800335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4931      	ldr	r1, [pc, #196]	; (800342c <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003368:	400a      	ands	r2, r1
 800336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	619a      	str	r2, [r3, #24]
      break;
 8003380:	e048      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f9ec 	bl	8003768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2108      	movs	r1, #8
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2104      	movs	r1, #4
 80033ac:	438a      	bics	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69d9      	ldr	r1, [r3, #28]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]
      break;
 80033c2:	e027      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fa0b 	bl	80037e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2180      	movs	r1, #128	; 0x80
 80033de:	0109      	lsls	r1, r1, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	490f      	ldr	r1, [pc, #60]	; (800342c <HAL_TIM_PWM_ConfigChannel+0x174>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69d9      	ldr	r1, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	021a      	lsls	r2, r3, #8
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
      break;
 8003408:	e004      	b.n	8003414 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
      break;
 8003412:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2238      	movs	r2, #56	; 0x38
 8003418:	2100      	movs	r1, #0
 800341a:	5499      	strb	r1, [r3, r2]

  return status;
 800341c:	2317      	movs	r3, #23
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	781b      	ldrb	r3, [r3, #0]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b006      	add	sp, #24
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	fffffbff 	.word	0xfffffbff

08003430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	230f      	movs	r3, #15
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2238      	movs	r2, #56	; 0x38
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIM_ConfigClockSource+0x20>
 800344c:	2302      	movs	r3, #2
 800344e:	e0b2      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x186>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2238      	movs	r2, #56	; 0x38
 8003454:	2101      	movs	r1, #1
 8003456:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2239      	movs	r2, #57	; 0x39
 800345c:	2102      	movs	r1, #2
 800345e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2277      	movs	r2, #119	; 0x77
 800346c:	4393      	bics	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a53      	ldr	r2, [pc, #332]	; (80035c0 <HAL_TIM_ConfigClockSource+0x190>)
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d100      	bne.n	800348a <HAL_TIM_ConfigClockSource+0x5a>
 8003488:	e06b      	b.n	8003562 <HAL_TIM_ConfigClockSource+0x132>
 800348a:	d80e      	bhi.n	80034aa <HAL_TIM_ConfigClockSource+0x7a>
 800348c:	2b10      	cmp	r3, #16
 800348e:	d100      	bne.n	8003492 <HAL_TIM_ConfigClockSource+0x62>
 8003490:	e077      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x152>
 8003492:	d803      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x6c>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d100      	bne.n	800349a <HAL_TIM_ConfigClockSource+0x6a>
 8003498:	e073      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x152>
 800349a:	e07b      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x164>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d100      	bne.n	80034a2 <HAL_TIM_ConfigClockSource+0x72>
 80034a0:	e06f      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x152>
 80034a2:	2b30      	cmp	r3, #48	; 0x30
 80034a4:	d100      	bne.n	80034a8 <HAL_TIM_ConfigClockSource+0x78>
 80034a6:	e06c      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x152>
 80034a8:	e074      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x164>
 80034aa:	2b70      	cmp	r3, #112	; 0x70
 80034ac:	d00e      	beq.n	80034cc <HAL_TIM_ConfigClockSource+0x9c>
 80034ae:	d804      	bhi.n	80034ba <HAL_TIM_ConfigClockSource+0x8a>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d036      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0xf2>
 80034b4:	2b60      	cmp	r3, #96	; 0x60
 80034b6:	d044      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x112>
 80034b8:	e06c      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x164>
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	0152      	lsls	r2, r2, #5
 80034be:	4293      	cmp	r3, r2
 80034c0:	d06d      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x16e>
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	0192      	lsls	r2, r2, #6
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d017      	beq.n	80034fa <HAL_TIM_ConfigClockSource+0xca>
 80034ca:	e063      	b.n	8003594 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f000 fa44 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2277      	movs	r2, #119	; 0x77
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
      break;
 80034f8:	e052      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f000 fa2d 	bl	8003968 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	01c9      	lsls	r1, r1, #7
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
      break;
 8003520:	e03e      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	001a      	movs	r2, r3
 8003530:	f000 f9a0 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2150      	movs	r1, #80	; 0x50
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f9fa 	bl	8003934 <TIM_ITRx_SetConfig>
      break;
 8003540:	e02e      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	001a      	movs	r2, r3
 8003550:	f000 f9be 	bl	80038d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2160      	movs	r1, #96	; 0x60
 800355a:	0018      	movs	r0, r3
 800355c:	f000 f9ea 	bl	8003934 <TIM_ITRx_SetConfig>
      break;
 8003560:	e01e      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	001a      	movs	r2, r3
 8003570:	f000 f980 	bl	8003874 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2140      	movs	r1, #64	; 0x40
 800357a:	0018      	movs	r0, r3
 800357c:	f000 f9da 	bl	8003934 <TIM_ITRx_SetConfig>
      break;
 8003580:	e00e      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	0019      	movs	r1, r3
 800358c:	0010      	movs	r0, r2
 800358e:	f000 f9d1 	bl	8003934 <TIM_ITRx_SetConfig>
      break;
 8003592:	e005      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8003594:	230f      	movs	r3, #15
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
      break;
 800359c:	e000      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x170>
      break;
 800359e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2239      	movs	r2, #57	; 0x39
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2238      	movs	r2, #56	; 0x38
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

  return status;
 80035b0:	230f      	movs	r3, #15
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	781b      	ldrb	r3, [r3, #0]
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	ffff00ff 	.word	0xffff00ff

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	05db      	lsls	r3, r3, #23
 80035da:	429a      	cmp	r2, r3
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0x2a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1f      	ldr	r2, [pc, #124]	; (8003660 <TIM_Base_SetConfig+0x9c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0x2a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <TIM_Base_SetConfig+0xa0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2270      	movs	r2, #112	; 0x70
 80035f2:	4393      	bics	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	429a      	cmp	r2, r3
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x56>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <TIM_Base_SetConfig+0x9c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x56>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	; (8003664 <TIM_Base_SetConfig+0xa0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a12      	ldr	r2, [pc, #72]	; (8003668 <TIM_Base_SetConfig+0xa4>)
 800361e:	4013      	ands	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	4393      	bics	r3, r2
 8003632:	001a      	movs	r2, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	615a      	str	r2, [r3, #20]
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b004      	add	sp, #16
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40010800 	.word	0x40010800
 8003664:	40011400 	.word	0x40011400
 8003668:	fffffcff 	.word	0xfffffcff

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	2201      	movs	r2, #1
 800367c:	4393      	bics	r3, r2
 800367e:	001a      	movs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2270      	movs	r2, #112	; 0x70
 800369a:	4393      	bics	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4393      	bics	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2202      	movs	r2, #2
 80036b4:	4393      	bics	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b006      	add	sp, #24
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	2210      	movs	r2, #16
 80036f4:	4393      	bics	r3, r2
 80036f6:	001a      	movs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <TIM_OC2_SetConfig+0x7c>)
 8003712:	4013      	ands	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <TIM_OC2_SetConfig+0x80>)
 800371a:	4013      	ands	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2220      	movs	r2, #32
 800372e:	4393      	bics	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffff8fff 	.word	0xffff8fff
 8003764:	fffffcff 	.word	0xfffffcff

08003768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <TIM_OC3_SetConfig+0x78>)
 8003778:	401a      	ands	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2270      	movs	r2, #112	; 0x70
 8003794:	4393      	bics	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2203      	movs	r2, #3
 800379c:	4393      	bics	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <TIM_OC3_SetConfig+0x7c>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b006      	add	sp, #24
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fffffeff 	.word	0xfffffeff
 80037e4:	fffffdff 	.word	0xfffffdff

080037e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <TIM_OC4_SetConfig+0x7c>)
 80037f8:	401a      	ands	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a15      	ldr	r2, [pc, #84]	; (8003868 <TIM_OC4_SetConfig+0x80>)
 8003814:	4013      	ands	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4a14      	ldr	r2, [pc, #80]	; (800386c <TIM_OC4_SetConfig+0x84>)
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4a10      	ldr	r2, [pc, #64]	; (8003870 <TIM_OC4_SetConfig+0x88>)
 8003830:	4013      	ands	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b006      	add	sp, #24
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	ffffefff 	.word	0xffffefff
 8003868:	ffff8fff 	.word	0xffff8fff
 800386c:	fffffcff 	.word	0xfffffcff
 8003870:	ffffdfff 	.word	0xffffdfff

08003874 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	2201      	movs	r2, #1
 800388c:	4393      	bics	r3, r2
 800388e:	001a      	movs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	22f0      	movs	r2, #240	; 0xf0
 800389e:	4393      	bics	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	220a      	movs	r2, #10
 80038b0:	4393      	bics	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b006      	add	sp, #24
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	2210      	movs	r2, #16
 80038e2:	4393      	bics	r3, r2
 80038e4:	001a      	movs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <TIM_TI2_ConfigInputStage+0x60>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	031b      	lsls	r3, r3, #12
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	22a0      	movs	r2, #160	; 0xa0
 800390c:	4393      	bics	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	ffff0fff 	.word	0xffff0fff

08003934 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2270      	movs	r2, #112	; 0x70
 8003948:	4393      	bics	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	2207      	movs	r2, #7
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	609a      	str	r2, [r3, #8]
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <TIM_ETR_SetConfig+0x3c>)
 8003980:	4013      	ands	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	021a      	lsls	r2, r3, #8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	431a      	orrs	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4313      	orrs	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b006      	add	sp, #24
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	ffff00ff 	.word	0xffff00ff

080039a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2238      	movs	r2, #56	; 0x38
 80039b6:	5c9b      	ldrb	r3, [r3, r2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039bc:	2302      	movs	r3, #2
 80039be:	e042      	b.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2238      	movs	r2, #56	; 0x38
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2239      	movs	r2, #57	; 0x39
 80039cc:	2102      	movs	r1, #2
 80039ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2270      	movs	r2, #112	; 0x70
 80039e4:	4393      	bics	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	05db      	lsls	r3, r3, #23
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d009      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10c      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	4393      	bics	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2239      	movs	r2, #57	; 0x39
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2238      	movs	r2, #56	; 0x38
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40010800 	.word	0x40010800
 8003a54:	40011400 	.word	0x40011400

08003a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e044      	b.n	8003af4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d107      	bne.n	8003a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2274      	movs	r2, #116	; 0x74
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f7fd fa65 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	; 0x24
 8003a86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 fbfa 	bl	8004294 <UART_SetConfig>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e024      	b.n	8003af4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 fe8b 	bl	80047d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	490d      	ldr	r1, [pc, #52]	; (8003afc <HAL_UART_Init+0xa4>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	212a      	movs	r1, #42	; 0x2a
 8003ad6:	438a      	bics	r2, r1
 8003ad8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f000 ff23 	bl	8004938 <UART_CheckIdleState>
 8003af2:	0003      	movs	r3, r0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	ffffb7ff 	.word	0xffffb7ff

08003b00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d000      	beq.n	8003b18 <HAL_UART_Transmit_IT+0x18>
 8003b16:	e068      	b.n	8003bea <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_Transmit_IT+0x26>
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e060      	b.n	8003bec <HAL_UART_Transmit_IT+0xec>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	015b      	lsls	r3, r3, #5
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d109      	bne.n	8003b4a <HAL_UART_Transmit_IT+0x4a>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2201      	movs	r2, #1
 8003b42:	4013      	ands	r3, r2
 8003b44:	d001      	beq.n	8003b4a <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e050      	b.n	8003bec <HAL_UART_Transmit_IT+0xec>
      }
    }

    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2274      	movs	r2, #116	; 0x74
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Transmit_IT+0x58>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e049      	b.n	8003bec <HAL_UART_Transmit_IT+0xec>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2274      	movs	r2, #116	; 0x74
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1dba      	adds	r2, r7, #6
 8003b6a:	2150      	movs	r1, #80	; 0x50
 8003b6c:	8812      	ldrh	r2, [r2, #0]
 8003b6e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1dba      	adds	r2, r7, #6
 8003b74:	2152      	movs	r1, #82	; 0x52
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	2100      	movs	r1, #0
 8003b86:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2221      	movs	r2, #33	; 0x21
 8003b8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	2380      	movs	r3, #128	; 0x80
 8003b94:	015b      	lsls	r3, r3, #5
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d107      	bne.n	8003baa <HAL_UART_Transmit_IT+0xaa>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <HAL_UART_Transmit_IT+0xf4>)
 8003ba6:	669a      	str	r2, [r3, #104]	; 0x68
 8003ba8:	e002      	b.n	8003bb0 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_UART_Transmit_IT+0xf8>)
 8003bae:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2274      	movs	r2, #116	; 0x74
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8003bbe:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b008      	add	sp, #32
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08004e2d 	.word	0x08004e2d
 8003bf8:	08004d83 	.word	0x08004d83

08003bfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	1dbb      	adds	r3, r7, #6
 8003c08:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d153      	bne.n	8003cba <HAL_UART_Receive_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_UART_Receive_IT+0x24>
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e04b      	b.n	8003cbc <HAL_UART_Receive_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d109      	bne.n	8003c44 <HAL_UART_Receive_IT+0x48>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e03b      	b.n	8003cbc <HAL_UART_Receive_IT+0xc0>
      }
    }

    __HAL_LOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2274      	movs	r2, #116	; 0x74
 8003c48:	5c9b      	ldrb	r3, [r3, r2]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Receive_IT+0x56>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e034      	b.n	8003cbc <HAL_UART_Receive_IT+0xc0>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2274      	movs	r2, #116	; 0x74
 8003c56:	2101      	movs	r1, #1
 8003c58:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_UART_Receive_IT+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d01e      	beq.n	8003ca8 <HAL_UART_Receive_IT+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	4013      	ands	r3, r2
 8003c76:	d017      	beq.n	8003ca8 <HAL_UART_Receive_IT+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c78:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8003c7e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	2301      	movs	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f383 8810 	msr	PRIMASK, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	04c9      	lsls	r1, r1, #19
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f000 ff47 	bl	8004b44 <UART_Start_Receive_IT>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	e000      	b.n	8003cbc <HAL_UART_Receive_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b008      	add	sp, #32
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40004800 	.word	0x40004800

08003cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0aa      	sub	sp, #168	; 0xa8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	22a4      	movs	r2, #164	; 0xa4
 8003cd8:	18b9      	adds	r1, r7, r2
 8003cda:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	21a0      	movs	r1, #160	; 0xa0
 8003ce4:	1879      	adds	r1, r7, r1
 8003ce6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	219c      	movs	r1, #156	; 0x9c
 8003cf0:	1879      	adds	r1, r7, r1
 8003cf2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cf4:	18bb      	adds	r3, r7, r2
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a99      	ldr	r2, [pc, #612]	; (8003f60 <HAL_UART_IRQHandler+0x298>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2298      	movs	r2, #152	; 0x98
 8003cfe:	18b9      	adds	r1, r7, r2
 8003d00:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 8003d02:	18bb      	adds	r3, r7, r2
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d0a:	23a4      	movs	r3, #164	; 0xa4
 8003d0c:	18fb      	adds	r3, r7, r3
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	4013      	ands	r3, r2
 8003d14:	d010      	beq.n	8003d38 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d16:	23a0      	movs	r3, #160	; 0xa0
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d00a      	beq.n	8003d38 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_UART_IRQHandler+0x64>
 8003d2a:	e28e      	b.n	800424a <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	0010      	movs	r0, r2
 8003d34:	4798      	blx	r3
      }
      return;
 8003d36:	e288      	b.n	800424a <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d38:	2398      	movs	r3, #152	; 0x98
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d100      	bne.n	8003d44 <HAL_UART_IRQHandler+0x7c>
 8003d42:	e113      	b.n	8003f6c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d44:	239c      	movs	r3, #156	; 0x9c
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d106      	bne.n	8003d5e <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d50:	23a0      	movs	r3, #160	; 0xa0
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_UART_IRQHandler+0x29c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <HAL_UART_IRQHandler+0x96>
 8003d5c:	e106      	b.n	8003f6c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d5e:	23a4      	movs	r3, #164	; 0xa4
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2201      	movs	r2, #1
 8003d66:	4013      	ands	r3, r2
 8003d68:	d012      	beq.n	8003d90 <HAL_UART_IRQHandler+0xc8>
 8003d6a:	23a0      	movs	r3, #160	; 0xa0
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4013      	ands	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	2201      	movs	r2, #1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d90:	23a4      	movs	r3, #164	; 0xa4
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d011      	beq.n	8003dc0 <HAL_UART_IRQHandler+0xf8>
 8003d9c:	239c      	movs	r3, #156	; 0x9c
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2202      	movs	r2, #2
 8003dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2280      	movs	r2, #128	; 0x80
 8003db4:	589b      	ldr	r3, [r3, r2]
 8003db6:	2204      	movs	r2, #4
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dc0:	23a4      	movs	r3, #164	; 0xa4
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d011      	beq.n	8003df0 <HAL_UART_IRQHandler+0x128>
 8003dcc:	239c      	movs	r3, #156	; 0x9c
 8003dce:	18fb      	adds	r3, r7, r3
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	589b      	ldr	r3, [r3, r2]
 8003de6:	2202      	movs	r2, #2
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003df0:	23a4      	movs	r3, #164	; 0xa4
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2208      	movs	r2, #8
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d017      	beq.n	8003e2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dfc:	23a0      	movs	r3, #160	; 0xa0
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2220      	movs	r2, #32
 8003e04:	4013      	ands	r3, r2
 8003e06:	d105      	bne.n	8003e14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e08:	239c      	movs	r3, #156	; 0x9c
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e12:	d00b      	beq.n	8003e2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	589b      	ldr	r3, [r3, r2]
 8003e22:	2208      	movs	r2, #8
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e2c:	23a4      	movs	r3, #164	; 0xa4
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	4013      	ands	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_UART_IRQHandler+0x19a>
 8003e3a:	23a0      	movs	r3, #160	; 0xa0
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	04db      	lsls	r3, r3, #19
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00c      	beq.n	8003e62 <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2280      	movs	r2, #128	; 0x80
 8003e56:	589b      	ldr	r3, [r3, r2]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	589b      	ldr	r3, [r3, r2]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <HAL_UART_IRQHandler+0x1a6>
 8003e6c:	e1ef      	b.n	800424e <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e6e:	23a4      	movs	r3, #164	; 0xa4
 8003e70:	18fb      	adds	r3, r7, r3
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2220      	movs	r2, #32
 8003e76:	4013      	ands	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e7a:	23a0      	movs	r3, #160	; 0xa0
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2220      	movs	r2, #32
 8003e82:	4013      	ands	r3, r2
 8003e84:	d008      	beq.n	8003e98 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	589b      	ldr	r3, [r3, r2]
 8003e9e:	2294      	movs	r2, #148	; 0x94
 8003ea0:	18ba      	adds	r2, r7, r2
 8003ea2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb2:	2394      	movs	r3, #148	; 0x94
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2228      	movs	r2, #40	; 0x28
 8003eba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ebc:	d045      	beq.n	8003f4a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 feeb 	bl	8004c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2240      	movs	r2, #64	; 0x40
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b40      	cmp	r3, #64	; 0x40
 8003ed2:	d135      	bne.n	8003f40 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003edc:	2090      	movs	r0, #144	; 0x90
 8003ede:	183a      	adds	r2, r7, r0
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee8:	f383 8810 	msr	PRIMASK, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2140      	movs	r1, #64	; 0x40
 8003ef8:	438a      	bics	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	183b      	adds	r3, r7, r0
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f04:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <HAL_UART_IRQHandler+0x2a0>)
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fd febd 	bl	8001c9c <HAL_DMA_Abort_IT>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d01a      	beq.n	8003f5c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	0018      	movs	r0, r3
 8003f32:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	e012      	b.n	8003f5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f997 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3e:	e00d      	b.n	8003f5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f992 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f48:	e008      	b.n	8003f5c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f98d 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2280      	movs	r2, #128	; 0x80
 8003f56:	2100      	movs	r1, #0
 8003f58:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f5a:	e178      	b.n	800424e <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	46c0      	nop			; (mov r8, r8)
    return;
 8003f5e:	e176      	b.n	800424e <HAL_UART_IRQHandler+0x586>
 8003f60:	0000080f 	.word	0x0000080f
 8003f64:	04000120 	.word	0x04000120
 8003f68:	08004d55 	.word	0x08004d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d000      	beq.n	8003f76 <HAL_UART_IRQHandler+0x2ae>
 8003f74:	e129      	b.n	80041ca <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f76:	23a4      	movs	r3, #164	; 0xa4
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d100      	bne.n	8003f84 <HAL_UART_IRQHandler+0x2bc>
 8003f82:	e122      	b.n	80041ca <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f84:	23a0      	movs	r3, #160	; 0xa0
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <HAL_UART_IRQHandler+0x2ca>
 8003f90:	e11b      	b.n	80041ca <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2210      	movs	r2, #16
 8003f98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2240      	movs	r2, #64	; 0x40
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d000      	beq.n	8003faa <HAL_UART_IRQHandler+0x2e2>
 8003fa8:	e097      	b.n	80040da <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	217e      	movs	r1, #126	; 0x7e
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d100      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x2fa>
 8003fc0:	e147      	b.n	8004252 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2258      	movs	r2, #88	; 0x58
 8003fc6:	5a9b      	ldrh	r3, [r3, r2]
 8003fc8:	227e      	movs	r2, #126	; 0x7e
 8003fca:	18ba      	adds	r2, r7, r2
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d300      	bcc.n	8003fd4 <HAL_UART_IRQHandler+0x30c>
 8003fd2:	e13e      	b.n	8004252 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	227e      	movs	r2, #126	; 0x7e
 8003fd8:	18ba      	adds	r2, r7, r2
 8003fda:	215a      	movs	r1, #90	; 0x5a
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	4013      	ands	r3, r2
 8003fec:	d166      	bne.n	80040bc <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ff6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ffe:	f383 8810 	msr	PRIMASK, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4995      	ldr	r1, [pc, #596]	; (8004264 <HAL_UART_IRQHandler+0x59c>)
 800400e:	400a      	ands	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004014:	63bb      	str	r3, [r7, #56]	; 0x38
 8004016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004018:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401c:	f3ef 8310 	mrs	r3, PRIMASK
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	677b      	str	r3, [r7, #116]	; 0x74
 8004026:	2301      	movs	r3, #1
 8004028:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	f383 8810 	msr	PRIMASK, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	438a      	bics	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004042:	647b      	str	r3, [r7, #68]	; 0x44
 8004044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004046:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004050:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004052:	673b      	str	r3, [r7, #112]	; 0x70
 8004054:	2301      	movs	r3, #1
 8004056:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405a:	f383 8810 	msr	PRIMASK, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	438a      	bics	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004070:	653b      	str	r3, [r7, #80]	; 0x50
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004084:	f3ef 8310 	mrs	r3, PRIMASK
 8004088:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800408a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408e:	2301      	movs	r3, #1
 8004090:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004094:	f383 8810 	msr	PRIMASK, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2110      	movs	r1, #16
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ae:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7fd fdb0 	bl	8001c1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2258      	movs	r2, #88	; 0x58
 80040c0:	5a9a      	ldrh	r2, [r3, r2]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	215a      	movs	r1, #90	; 0x5a
 80040c6:	5a5b      	ldrh	r3, [r3, r1]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0011      	movs	r1, r2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f8d2 	bl	800427c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040d8:	e0bb      	b.n	8004252 <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2258      	movs	r2, #88	; 0x58
 80040de:	5a99      	ldrh	r1, [r3, r2]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	225a      	movs	r2, #90	; 0x5a
 80040e4:	5a9b      	ldrh	r3, [r3, r2]
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	238e      	movs	r3, #142	; 0x8e
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	1a8a      	subs	r2, r1, r2
 80040ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	225a      	movs	r2, #90	; 0x5a
 80040f4:	5a9b      	ldrh	r3, [r3, r2]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d100      	bne.n	80040fe <HAL_UART_IRQHandler+0x436>
 80040fc:	e0ab      	b.n	8004256 <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 80040fe:	238e      	movs	r3, #142	; 0x8e
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d100      	bne.n	800410a <HAL_UART_IRQHandler+0x442>
 8004108:	e0a5      	b.n	8004256 <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410a:	f3ef 8310 	mrs	r3, PRIMASK
 800410e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004110:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004112:	2088      	movs	r0, #136	; 0x88
 8004114:	183a      	adds	r2, r7, r0
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	2301      	movs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f383 8810 	msr	PRIMASK, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	494e      	ldr	r1, [pc, #312]	; (8004268 <HAL_UART_IRQHandler+0x5a0>)
 800412e:	400a      	ands	r2, r1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	183b      	adds	r3, r7, r0
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	61bb      	str	r3, [r7, #24]
  return(result);
 8004144:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	2084      	movs	r0, #132	; 0x84
 8004148:	183a      	adds	r2, r7, r0
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f383 8810 	msr	PRIMASK, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2101      	movs	r1, #1
 8004162:	438a      	bics	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	183b      	adds	r3, r7, r0
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	623b      	str	r3, [r7, #32]
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	2080      	movs	r0, #128	; 0x80
 800418e:	183a      	adds	r2, r7, r0
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	2301      	movs	r3, #1
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	f383 8810 	msr	PRIMASK, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2110      	movs	r1, #16
 80041a8:	438a      	bics	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b8:	238e      	movs	r3, #142	; 0x8e
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f000 f85a 	bl	800427c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041c8:	e045      	b.n	8004256 <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041ca:	23a4      	movs	r3, #164	; 0xa4
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	035b      	lsls	r3, r3, #13
 80041d4:	4013      	ands	r3, r2
 80041d6:	d010      	beq.n	80041fa <HAL_UART_IRQHandler+0x532>
 80041d8:	239c      	movs	r3, #156	; 0x9c
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2380      	movs	r3, #128	; 0x80
 80041e0:	03db      	lsls	r3, r3, #15
 80041e2:	4013      	ands	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2280      	movs	r2, #128	; 0x80
 80041ec:	0352      	lsls	r2, r2, #13
 80041ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 fffa 	bl	80051ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041f8:	e030      	b.n	800425c <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041fa:	23a4      	movs	r3, #164	; 0xa4
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	4013      	ands	r3, r2
 8004204:	d00f      	beq.n	8004226 <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004206:	23a0      	movs	r3, #160	; 0xa0
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	4013      	ands	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01f      	beq.n	800425a <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	0010      	movs	r0, r2
 8004222:	4798      	blx	r3
    }
    return;
 8004224:	e019      	b.n	800425a <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004226:	23a4      	movs	r3, #164	; 0xa4
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2240      	movs	r2, #64	; 0x40
 800422e:	4013      	ands	r3, r2
 8004230:	d014      	beq.n	800425c <HAL_UART_IRQHandler+0x594>
 8004232:	23a0      	movs	r3, #160	; 0xa0
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2240      	movs	r2, #64	; 0x40
 800423a:	4013      	ands	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 fe4d 	bl	8004ee0 <UART_EndTransmit_IT>
    return;
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	e008      	b.n	800425c <HAL_UART_IRQHandler+0x594>
      return;
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	e006      	b.n	800425c <HAL_UART_IRQHandler+0x594>
    return;
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	e004      	b.n	800425c <HAL_UART_IRQHandler+0x594>
      return;
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	e002      	b.n	800425c <HAL_UART_IRQHandler+0x594>
      return;
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	e000      	b.n	800425c <HAL_UART_IRQHandler+0x594>
    return;
 800425a:	46c0      	nop			; (mov r8, r8)
  }

}
 800425c:	46bd      	mov	sp, r7
 800425e:	b02a      	add	sp, #168	; 0xa8
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	fffffeff 	.word	0xfffffeff
 8004268:	fffffedf 	.word	0xfffffedf

0800426c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	b002      	add	sp, #8
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	000a      	movs	r2, r1
 8004286:	1cbb      	adds	r3, r7, #2
 8004288:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b002      	add	sp, #8
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004294:	b5b0      	push	{r4, r5, r7, lr}
 8004296:	b08e      	sub	sp, #56	; 0x38
 8004298:	af00      	add	r7, sp, #0
 800429a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800429c:	231a      	movs	r3, #26
 800429e:	2218      	movs	r2, #24
 80042a0:	4694      	mov	ip, r2
 80042a2:	44bc      	add	ip, r7
 80042a4:	4463      	add	r3, ip
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	4313      	orrs	r3, r2
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4aca      	ldr	r2, [pc, #808]	; (80045f4 <UART_SetConfig+0x360>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	430a      	orrs	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4ac6      	ldr	r2, [pc, #792]	; (80045f8 <UART_SetConfig+0x364>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	0019      	movs	r1, r3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4ac0      	ldr	r2, [pc, #768]	; (80045fc <UART_SetConfig+0x368>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004306:	4313      	orrs	r3, r2
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4abb      	ldr	r2, [pc, #748]	; (8004600 <UART_SetConfig+0x36c>)
 8004312:	4013      	ands	r3, r2
 8004314:	0019      	movs	r1, r3
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4ab7      	ldr	r2, [pc, #732]	; (8004604 <UART_SetConfig+0x370>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d134      	bne.n	8004394 <UART_SetConfig+0x100>
 800432a:	4bb7      	ldr	r3, [pc, #732]	; (8004608 <UART_SetConfig+0x374>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	2203      	movs	r2, #3
 8004330:	4013      	ands	r3, r2
 8004332:	2b01      	cmp	r3, #1
 8004334:	d015      	beq.n	8004362 <UART_SetConfig+0xce>
 8004336:	d304      	bcc.n	8004342 <UART_SetConfig+0xae>
 8004338:	2b02      	cmp	r3, #2
 800433a:	d00a      	beq.n	8004352 <UART_SetConfig+0xbe>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d018      	beq.n	8004372 <UART_SetConfig+0xde>
 8004340:	e01f      	b.n	8004382 <UART_SetConfig+0xee>
 8004342:	231b      	movs	r3, #27
 8004344:	2218      	movs	r2, #24
 8004346:	4694      	mov	ip, r2
 8004348:	44bc      	add	ip, r7
 800434a:	4463      	add	r3, ip
 800434c:	2201      	movs	r2, #1
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e0ab      	b.n	80044aa <UART_SetConfig+0x216>
 8004352:	231b      	movs	r3, #27
 8004354:	2218      	movs	r2, #24
 8004356:	4694      	mov	ip, r2
 8004358:	44bc      	add	ip, r7
 800435a:	4463      	add	r3, ip
 800435c:	2202      	movs	r2, #2
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e0a3      	b.n	80044aa <UART_SetConfig+0x216>
 8004362:	231b      	movs	r3, #27
 8004364:	2218      	movs	r2, #24
 8004366:	4694      	mov	ip, r2
 8004368:	44bc      	add	ip, r7
 800436a:	4463      	add	r3, ip
 800436c:	2204      	movs	r2, #4
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	e09b      	b.n	80044aa <UART_SetConfig+0x216>
 8004372:	231b      	movs	r3, #27
 8004374:	2218      	movs	r2, #24
 8004376:	4694      	mov	ip, r2
 8004378:	44bc      	add	ip, r7
 800437a:	4463      	add	r3, ip
 800437c:	2208      	movs	r2, #8
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e093      	b.n	80044aa <UART_SetConfig+0x216>
 8004382:	231b      	movs	r3, #27
 8004384:	2218      	movs	r2, #24
 8004386:	4694      	mov	ip, r2
 8004388:	44bc      	add	ip, r7
 800438a:	4463      	add	r3, ip
 800438c:	2210      	movs	r2, #16
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	e08a      	b.n	80044aa <UART_SetConfig+0x216>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a9c      	ldr	r2, [pc, #624]	; (800460c <UART_SetConfig+0x378>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d137      	bne.n	800440e <UART_SetConfig+0x17a>
 800439e:	4b9a      	ldr	r3, [pc, #616]	; (8004608 <UART_SetConfig+0x374>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	220c      	movs	r2, #12
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d018      	beq.n	80043dc <UART_SetConfig+0x148>
 80043aa:	d802      	bhi.n	80043b2 <UART_SetConfig+0x11e>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <UART_SetConfig+0x128>
 80043b0:	e024      	b.n	80043fc <UART_SetConfig+0x168>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d00a      	beq.n	80043cc <UART_SetConfig+0x138>
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d018      	beq.n	80043ec <UART_SetConfig+0x158>
 80043ba:	e01f      	b.n	80043fc <UART_SetConfig+0x168>
 80043bc:	231b      	movs	r3, #27
 80043be:	2218      	movs	r2, #24
 80043c0:	4694      	mov	ip, r2
 80043c2:	44bc      	add	ip, r7
 80043c4:	4463      	add	r3, ip
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e06e      	b.n	80044aa <UART_SetConfig+0x216>
 80043cc:	231b      	movs	r3, #27
 80043ce:	2218      	movs	r2, #24
 80043d0:	4694      	mov	ip, r2
 80043d2:	44bc      	add	ip, r7
 80043d4:	4463      	add	r3, ip
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e066      	b.n	80044aa <UART_SetConfig+0x216>
 80043dc:	231b      	movs	r3, #27
 80043de:	2218      	movs	r2, #24
 80043e0:	4694      	mov	ip, r2
 80043e2:	44bc      	add	ip, r7
 80043e4:	4463      	add	r3, ip
 80043e6:	2204      	movs	r2, #4
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e05e      	b.n	80044aa <UART_SetConfig+0x216>
 80043ec:	231b      	movs	r3, #27
 80043ee:	2218      	movs	r2, #24
 80043f0:	4694      	mov	ip, r2
 80043f2:	44bc      	add	ip, r7
 80043f4:	4463      	add	r3, ip
 80043f6:	2208      	movs	r2, #8
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e056      	b.n	80044aa <UART_SetConfig+0x216>
 80043fc:	231b      	movs	r3, #27
 80043fe:	2218      	movs	r2, #24
 8004400:	4694      	mov	ip, r2
 8004402:	44bc      	add	ip, r7
 8004404:	4463      	add	r3, ip
 8004406:	2210      	movs	r2, #16
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	e04d      	b.n	80044aa <UART_SetConfig+0x216>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <UART_SetConfig+0x368>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d141      	bne.n	800449c <UART_SetConfig+0x208>
 8004418:	4b7b      	ldr	r3, [pc, #492]	; (8004608 <UART_SetConfig+0x374>)
 800441a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800441c:	23c0      	movs	r3, #192	; 0xc0
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	4013      	ands	r3, r2
 8004422:	2280      	movs	r2, #128	; 0x80
 8004424:	00d2      	lsls	r2, r2, #3
 8004426:	4293      	cmp	r3, r2
 8004428:	d01f      	beq.n	800446a <UART_SetConfig+0x1d6>
 800442a:	2280      	movs	r2, #128	; 0x80
 800442c:	00d2      	lsls	r2, r2, #3
 800442e:	4293      	cmp	r3, r2
 8004430:	d802      	bhi.n	8004438 <UART_SetConfig+0x1a4>
 8004432:	2b00      	cmp	r3, #0
 8004434:	d009      	beq.n	800444a <UART_SetConfig+0x1b6>
 8004436:	e028      	b.n	800448a <UART_SetConfig+0x1f6>
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	4293      	cmp	r3, r2
 800443e:	d00c      	beq.n	800445a <UART_SetConfig+0x1c6>
 8004440:	22c0      	movs	r2, #192	; 0xc0
 8004442:	0112      	lsls	r2, r2, #4
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <UART_SetConfig+0x1e6>
 8004448:	e01f      	b.n	800448a <UART_SetConfig+0x1f6>
 800444a:	231b      	movs	r3, #27
 800444c:	2218      	movs	r2, #24
 800444e:	4694      	mov	ip, r2
 8004450:	44bc      	add	ip, r7
 8004452:	4463      	add	r3, ip
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e027      	b.n	80044aa <UART_SetConfig+0x216>
 800445a:	231b      	movs	r3, #27
 800445c:	2218      	movs	r2, #24
 800445e:	4694      	mov	ip, r2
 8004460:	44bc      	add	ip, r7
 8004462:	4463      	add	r3, ip
 8004464:	2202      	movs	r2, #2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e01f      	b.n	80044aa <UART_SetConfig+0x216>
 800446a:	231b      	movs	r3, #27
 800446c:	2218      	movs	r2, #24
 800446e:	4694      	mov	ip, r2
 8004470:	44bc      	add	ip, r7
 8004472:	4463      	add	r3, ip
 8004474:	2204      	movs	r2, #4
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e017      	b.n	80044aa <UART_SetConfig+0x216>
 800447a:	231b      	movs	r3, #27
 800447c:	2218      	movs	r2, #24
 800447e:	4694      	mov	ip, r2
 8004480:	44bc      	add	ip, r7
 8004482:	4463      	add	r3, ip
 8004484:	2208      	movs	r2, #8
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e00f      	b.n	80044aa <UART_SetConfig+0x216>
 800448a:	231b      	movs	r3, #27
 800448c:	2218      	movs	r2, #24
 800448e:	4694      	mov	ip, r2
 8004490:	44bc      	add	ip, r7
 8004492:	4463      	add	r3, ip
 8004494:	2210      	movs	r2, #16
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	e006      	b.n	80044aa <UART_SetConfig+0x216>
 800449c:	231b      	movs	r3, #27
 800449e:	2218      	movs	r2, #24
 80044a0:	4694      	mov	ip, r2
 80044a2:	44bc      	add	ip, r7
 80044a4:	4463      	add	r3, ip
 80044a6:	2210      	movs	r2, #16
 80044a8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a53      	ldr	r2, [pc, #332]	; (80045fc <UART_SetConfig+0x368>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d000      	beq.n	80044b6 <UART_SetConfig+0x222>
 80044b4:	e085      	b.n	80045c2 <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b6:	231b      	movs	r3, #27
 80044b8:	2218      	movs	r2, #24
 80044ba:	4694      	mov	ip, r2
 80044bc:	44bc      	add	ip, r7
 80044be:	4463      	add	r3, ip
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d00d      	beq.n	80044e2 <UART_SetConfig+0x24e>
 80044c6:	dc02      	bgt.n	80044ce <UART_SetConfig+0x23a>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <UART_SetConfig+0x244>
 80044cc:	e01d      	b.n	800450a <UART_SetConfig+0x276>
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d012      	beq.n	80044f8 <UART_SetConfig+0x264>
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d015      	beq.n	8004502 <UART_SetConfig+0x26e>
 80044d6:	e018      	b.n	800450a <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7fe fcde 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80044dc:	0003      	movs	r3, r0
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044e0:	e01d      	b.n	800451e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e2:	4b49      	ldr	r3, [pc, #292]	; (8004608 <UART_SetConfig+0x374>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2210      	movs	r2, #16
 80044e8:	4013      	ands	r3, r2
 80044ea:	d002      	beq.n	80044f2 <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80044ec:	4b48      	ldr	r3, [pc, #288]	; (8004610 <UART_SetConfig+0x37c>)
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044f0:	e015      	b.n	800451e <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 80044f2:	4b48      	ldr	r3, [pc, #288]	; (8004614 <UART_SetConfig+0x380>)
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044f6:	e012      	b.n	800451e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f8:	f7fe fc22 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 80044fc:	0003      	movs	r3, r0
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004500:	e00d      	b.n	800451e <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004508:	e009      	b.n	800451e <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800450e:	231a      	movs	r3, #26
 8004510:	2218      	movs	r2, #24
 8004512:	4694      	mov	ip, r2
 8004514:	44bc      	add	ip, r7
 8004516:	4463      	add	r3, ip
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
        break;
 800451c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800451e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004520:	2b00      	cmp	r3, #0
 8004522:	d100      	bne.n	8004526 <UART_SetConfig+0x292>
 8004524:	e139      	b.n	800479a <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	0013      	movs	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	189b      	adds	r3, r3, r2
 8004530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004532:	429a      	cmp	r2, r3
 8004534:	d305      	bcc.n	8004542 <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453e:	429a      	cmp	r2, r3
 8004540:	d907      	bls.n	8004552 <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 8004542:	231a      	movs	r3, #26
 8004544:	2218      	movs	r2, #24
 8004546:	4694      	mov	ip, r2
 8004548:	44bc      	add	ip, r7
 800454a:	4463      	add	r3, ip
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
 8004550:	e123      	b.n	800479a <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	6939      	ldr	r1, [r7, #16]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	000b      	movs	r3, r1
 8004560:	0e1b      	lsrs	r3, r3, #24
 8004562:	0010      	movs	r0, r2
 8004564:	0205      	lsls	r5, r0, #8
 8004566:	431d      	orrs	r5, r3
 8004568:	000b      	movs	r3, r1
 800456a:	021c      	lsls	r4, r3, #8
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	68f9      	ldr	r1, [r7, #12]
 800457c:	1900      	adds	r0, r0, r4
 800457e:	4169      	adcs	r1, r5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f7fb fe47 	bl	8000220 <__aeabi_uldivmod>
 8004592:	0003      	movs	r3, r0
 8004594:	000c      	movs	r4, r1
 8004596:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <UART_SetConfig+0x384>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d908      	bls.n	80045b2 <UART_SetConfig+0x31e>
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <UART_SetConfig+0x388>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d804      	bhi.n	80045b2 <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	e0f3      	b.n	800479a <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 80045b2:	231a      	movs	r3, #26
 80045b4:	2218      	movs	r2, #24
 80045b6:	4694      	mov	ip, r2
 80045b8:	44bc      	add	ip, r7
 80045ba:	4463      	add	r3, ip
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	e0eb      	b.n	800479a <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d000      	beq.n	80045d0 <UART_SetConfig+0x33c>
 80045ce:	e08b      	b.n	80046e8 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80045d0:	231b      	movs	r3, #27
 80045d2:	2218      	movs	r2, #24
 80045d4:	4694      	mov	ip, r2
 80045d6:	44bc      	add	ip, r7
 80045d8:	4463      	add	r3, ip
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d83a      	bhi.n	8004656 <UART_SetConfig+0x3c2>
 80045e0:	009a      	lsls	r2, r3, #2
 80045e2:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <UART_SetConfig+0x38c>)
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045ea:	f7fe fc55 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 80045ee:	0003      	movs	r3, r0
 80045f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045f2:	e03a      	b.n	800466a <UART_SetConfig+0x3d6>
 80045f4:	efff69f3 	.word	0xefff69f3
 80045f8:	ffffcfff 	.word	0xffffcfff
 80045fc:	40004800 	.word	0x40004800
 8004600:	fffff4ff 	.word	0xfffff4ff
 8004604:	40013800 	.word	0x40013800
 8004608:	40021000 	.word	0x40021000
 800460c:	40004400 	.word	0x40004400
 8004610:	003d0900 	.word	0x003d0900
 8004614:	00f42400 	.word	0x00f42400
 8004618:	000002ff 	.word	0x000002ff
 800461c:	000fffff 	.word	0x000fffff
 8004620:	08005290 	.word	0x08005290
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fc4e 	bl	8002ec4 <HAL_RCC_GetPCLK2Freq>
 8004628:	0003      	movs	r3, r0
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800462c:	e01d      	b.n	800466a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800462e:	4b63      	ldr	r3, [pc, #396]	; (80047bc <UART_SetConfig+0x528>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2210      	movs	r2, #16
 8004634:	4013      	ands	r3, r2
 8004636:	d002      	beq.n	800463e <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <UART_SetConfig+0x52c>)
 800463a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800463c:	e015      	b.n	800466a <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 800463e:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <UART_SetConfig+0x530>)
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004642:	e012      	b.n	800466a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004644:	f7fe fb7c 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8004648:	0003      	movs	r3, r0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800464c:	e00d      	b.n	800466a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004654:	e009      	b.n	800466a <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800465a:	231a      	movs	r3, #26
 800465c:	2218      	movs	r2, #24
 800465e:	4694      	mov	ip, r2
 8004660:	44bc      	add	ip, r7
 8004662:	4463      	add	r3, ip
 8004664:	2201      	movs	r2, #1
 8004666:	701a      	strb	r2, [r3, #0]
        break;
 8004668:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d100      	bne.n	8004672 <UART_SetConfig+0x3de>
 8004670:	e093      	b.n	800479a <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	005a      	lsls	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	18d2      	adds	r2, r2, r3
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	0019      	movs	r1, r3
 8004684:	0010      	movs	r0, r2
 8004686:	f7fb fd3f 	bl	8000108 <__udivsi3>
 800468a:	0003      	movs	r3, r0
 800468c:	b29b      	uxth	r3, r3
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d920      	bls.n	80046d8 <UART_SetConfig+0x444>
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <UART_SetConfig+0x534>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d81c      	bhi.n	80046d8 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	200e      	movs	r0, #14
 80046a4:	2418      	movs	r4, #24
 80046a6:	193b      	adds	r3, r7, r4
 80046a8:	181b      	adds	r3, r3, r0
 80046aa:	210f      	movs	r1, #15
 80046ac:	438a      	bics	r2, r1
 80046ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2207      	movs	r2, #7
 80046b8:	4013      	ands	r3, r2
 80046ba:	b299      	uxth	r1, r3
 80046bc:	193b      	adds	r3, r7, r4
 80046be:	181b      	adds	r3, r3, r0
 80046c0:	193a      	adds	r2, r7, r4
 80046c2:	1812      	adds	r2, r2, r0
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	193a      	adds	r2, r7, r4
 80046d0:	1812      	adds	r2, r2, r0
 80046d2:	8812      	ldrh	r2, [r2, #0]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	e060      	b.n	800479a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 80046d8:	231a      	movs	r3, #26
 80046da:	2218      	movs	r2, #24
 80046dc:	4694      	mov	ip, r2
 80046de:	44bc      	add	ip, r7
 80046e0:	4463      	add	r3, ip
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e058      	b.n	800479a <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046e8:	231b      	movs	r3, #27
 80046ea:	2218      	movs	r2, #24
 80046ec:	4694      	mov	ip, r2
 80046ee:	44bc      	add	ip, r7
 80046f0:	4463      	add	r3, ip
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d822      	bhi.n	800473e <UART_SetConfig+0x4aa>
 80046f8:	009a      	lsls	r2, r3, #2
 80046fa:	4b34      	ldr	r3, [pc, #208]	; (80047cc <UART_SetConfig+0x538>)
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004702:	f7fe fbc9 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 8004706:	0003      	movs	r3, r0
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800470a:	e022      	b.n	8004752 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800470c:	f7fe fbda 	bl	8002ec4 <HAL_RCC_GetPCLK2Freq>
 8004710:	0003      	movs	r3, r0
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004714:	e01d      	b.n	8004752 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <UART_SetConfig+0x528>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2210      	movs	r2, #16
 800471c:	4013      	ands	r3, r2
 800471e:	d002      	beq.n	8004726 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <UART_SetConfig+0x52c>)
 8004722:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004724:	e015      	b.n	8004752 <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 8004726:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <UART_SetConfig+0x530>)
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800472a:	e012      	b.n	8004752 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472c:	f7fe fb08 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8004730:	0003      	movs	r3, r0
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004734:	e00d      	b.n	8004752 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800473c:	e009      	b.n	8004752 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004742:	231a      	movs	r3, #26
 8004744:	2218      	movs	r2, #24
 8004746:	4694      	mov	ip, r2
 8004748:	44bc      	add	ip, r7
 800474a:	4463      	add	r3, ip
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
        break;
 8004750:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	085a      	lsrs	r2, r3, #1
 800475e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004760:	18d2      	adds	r2, r2, r3
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0019      	movs	r1, r3
 8004768:	0010      	movs	r0, r2
 800476a:	f7fb fccd 	bl	8000108 <__udivsi3>
 800476e:	0003      	movs	r3, r0
 8004770:	b29b      	uxth	r3, r3
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	2b0f      	cmp	r3, #15
 8004778:	d908      	bls.n	800478c <UART_SetConfig+0x4f8>
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <UART_SetConfig+0x534>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d804      	bhi.n	800478c <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e006      	b.n	800479a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 800478c:	231a      	movs	r3, #26
 800478e:	2218      	movs	r2, #24
 8004790:	4694      	mov	ip, r2
 8004792:	44bc      	add	ip, r7
 8004794:	4463      	add	r3, ip
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2200      	movs	r2, #0
 800479e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2200      	movs	r2, #0
 80047a4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047a6:	231a      	movs	r3, #26
 80047a8:	2218      	movs	r2, #24
 80047aa:	4694      	mov	ip, r2
 80047ac:	44bc      	add	ip, r7
 80047ae:	4463      	add	r3, ip
 80047b0:	781b      	ldrb	r3, [r3, #0]
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b00e      	add	sp, #56	; 0x38
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	40021000 	.word	0x40021000
 80047c0:	003d0900 	.word	0x003d0900
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	0000ffff 	.word	0x0000ffff
 80047cc:	080052b4 	.word	0x080052b4

080047d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2201      	movs	r2, #1
 80047de:	4013      	ands	r3, r2
 80047e0:	d00b      	beq.n	80047fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a4a      	ldr	r2, [pc, #296]	; (8004914 <UART_AdvFeatureConfig+0x144>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	0019      	movs	r1, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2202      	movs	r2, #2
 8004800:	4013      	ands	r3, r2
 8004802:	d00b      	beq.n	800481c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4a43      	ldr	r2, [pc, #268]	; (8004918 <UART_AdvFeatureConfig+0x148>)
 800480c:	4013      	ands	r3, r2
 800480e:	0019      	movs	r1, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2204      	movs	r2, #4
 8004822:	4013      	ands	r3, r2
 8004824:	d00b      	beq.n	800483e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	4a3b      	ldr	r2, [pc, #236]	; (800491c <UART_AdvFeatureConfig+0x14c>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2208      	movs	r2, #8
 8004844:	4013      	ands	r3, r2
 8004846:	d00b      	beq.n	8004860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4a34      	ldr	r2, [pc, #208]	; (8004920 <UART_AdvFeatureConfig+0x150>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	2210      	movs	r2, #16
 8004866:	4013      	ands	r3, r2
 8004868:	d00b      	beq.n	8004882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a2c      	ldr	r2, [pc, #176]	; (8004924 <UART_AdvFeatureConfig+0x154>)
 8004872:	4013      	ands	r3, r2
 8004874:	0019      	movs	r1, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2220      	movs	r2, #32
 8004888:	4013      	ands	r3, r2
 800488a:	d00b      	beq.n	80048a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4a25      	ldr	r2, [pc, #148]	; (8004928 <UART_AdvFeatureConfig+0x158>)
 8004894:	4013      	ands	r3, r2
 8004896:	0019      	movs	r1, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	4013      	ands	r3, r2
 80048ac:	d01d      	beq.n	80048ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4a1d      	ldr	r2, [pc, #116]	; (800492c <UART_AdvFeatureConfig+0x15c>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	0019      	movs	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	035b      	lsls	r3, r3, #13
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d10b      	bne.n	80048ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <UART_AdvFeatureConfig+0x160>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2280      	movs	r2, #128	; 0x80
 80048f0:	4013      	ands	r3, r2
 80048f2:	d00b      	beq.n	800490c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <UART_AdvFeatureConfig+0x164>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	0019      	movs	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	b002      	add	sp, #8
 8004912:	bd80      	pop	{r7, pc}
 8004914:	fffdffff 	.word	0xfffdffff
 8004918:	fffeffff 	.word	0xfffeffff
 800491c:	fffbffff 	.word	0xfffbffff
 8004920:	ffff7fff 	.word	0xffff7fff
 8004924:	ffffefff 	.word	0xffffefff
 8004928:	ffffdfff 	.word	0xffffdfff
 800492c:	ffefffff 	.word	0xffefffff
 8004930:	ff9fffff 	.word	0xff9fffff
 8004934:	fff7ffff 	.word	0xfff7ffff

08004938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	2100      	movs	r1, #0
 8004946:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004948:	f7fc fbdc 	bl	8001104 <HAL_GetTick>
 800494c:	0003      	movs	r3, r0
 800494e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2208      	movs	r2, #8
 8004958:	4013      	ands	r3, r2
 800495a:	2b08      	cmp	r3, #8
 800495c:	d10d      	bne.n	800497a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	0399      	lsls	r1, r3, #14
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <UART_CheckIdleState+0x90>)
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	0013      	movs	r3, r2
 800496c:	2200      	movs	r2, #0
 800496e:	f000 f82d 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8004972:	1e03      	subs	r3, r0, #0
 8004974:	d001      	beq.n	800497a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e022      	b.n	80049c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2204      	movs	r2, #4
 8004982:	4013      	ands	r3, r2
 8004984:	2b04      	cmp	r3, #4
 8004986:	d10d      	bne.n	80049a4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	03d9      	lsls	r1, r3, #15
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <UART_CheckIdleState+0x90>)
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	0013      	movs	r3, r2
 8004996:	2200      	movs	r2, #0
 8004998:	f000 f818 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 800499c:	1e03      	subs	r3, r0, #0
 800499e:	d001      	beq.n	80049a4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e00d      	b.n	80049c0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2274      	movs	r2, #116	; 0x74
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b004      	add	sp, #16
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	01ffffff 	.word	0x01ffffff

080049cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b094      	sub	sp, #80	; 0x50
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	1dfb      	adds	r3, r7, #7
 80049da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	e09b      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049e0:	3301      	adds	r3, #1
 80049e2:	d100      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80049e4:	e097      	b.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fc fb8d 	bl	8001104 <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <UART_WaitOnFlagUntilTimeout+0x30>
 80049f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d139      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	2301      	movs	r3, #1
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	f383 8810 	msr	PRIMASK, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4949      	ldr	r1, [pc, #292]	; (8004b40 <UART_WaitOnFlagUntilTimeout+0x174>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a32:	643b      	str	r3, [r7, #64]	; 0x40
 8004a34:	2301      	movs	r3, #1
 8004a36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3a:	f383 8810 	msr	PRIMASK, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	438a      	bics	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2274      	movs	r2, #116	; 0x74
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e063      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2204      	movs	r2, #4
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d04c      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	401a      	ands	r2, r3
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d142      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9e:	613b      	str	r3, [r7, #16]
  return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f383 8810 	msr	PRIMASK, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4921      	ldr	r1, [pc, #132]	; (8004b40 <UART_WaitOnFlagUntilTimeout+0x174>)
 8004aba:	400a      	ands	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ace:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	438a      	bics	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2280      	movs	r2, #128	; 0x80
 8004b06:	2120      	movs	r1, #32
 8004b08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2274      	movs	r2, #116	; 0x74
 8004b0e:	2100      	movs	r1, #0
 8004b10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e010      	b.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	425a      	negs	r2, r3
 8004b26:	4153      	adcs	r3, r2
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d100      	bne.n	8004b36 <UART_WaitOnFlagUntilTimeout+0x16a>
 8004b34:	e753      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b014      	add	sp, #80	; 0x50
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	fffffe5f 	.word	0xfffffe5f

08004b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1dba      	adds	r2, r7, #6
 8004b5c:	2158      	movs	r1, #88	; 0x58
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1dba      	adds	r2, r7, #6
 8004b66:	215a      	movs	r1, #90	; 0x5a
 8004b68:	8812      	ldrh	r2, [r2, #0]
 8004b6a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	015b      	lsls	r3, r3, #5
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d10d      	bne.n	8004b9a <UART_Start_Receive_IT+0x56>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <UART_Start_Receive_IT+0x4c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	225c      	movs	r2, #92	; 0x5c
 8004b8a:	4941      	ldr	r1, [pc, #260]	; (8004c90 <UART_Start_Receive_IT+0x14c>)
 8004b8c:	5299      	strh	r1, [r3, r2]
 8004b8e:	e02e      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	21ff      	movs	r1, #255	; 0xff
 8004b96:	5299      	strh	r1, [r3, r2]
 8004b98:	e029      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <UART_Start_Receive_IT+0x7a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <UART_Start_Receive_IT+0x70>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	225c      	movs	r2, #92	; 0x5c
 8004bae:	21ff      	movs	r1, #255	; 0xff
 8004bb0:	5299      	strh	r1, [r3, r2]
 8004bb2:	e01c      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	225c      	movs	r2, #92	; 0x5c
 8004bb8:	217f      	movs	r1, #127	; 0x7f
 8004bba:	5299      	strh	r1, [r3, r2]
 8004bbc:	e017      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	055b      	lsls	r3, r3, #21
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d10d      	bne.n	8004be6 <UART_Start_Receive_IT+0xa2>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d104      	bne.n	8004bdc <UART_Start_Receive_IT+0x98>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	225c      	movs	r2, #92	; 0x5c
 8004bd6:	217f      	movs	r1, #127	; 0x7f
 8004bd8:	5299      	strh	r1, [r3, r2]
 8004bda:	e008      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	225c      	movs	r2, #92	; 0x5c
 8004be0:	213f      	movs	r1, #63	; 0x3f
 8004be2:	5299      	strh	r1, [r3, r2]
 8004be4:	e003      	b.n	8004bee <UART_Start_Receive_IT+0xaa>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	225c      	movs	r2, #92	; 0x5c
 8004bea:	2100      	movs	r1, #0
 8004bec:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2280      	movs	r2, #128	; 0x80
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2222      	movs	r2, #34	; 0x22
 8004bfa:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004c00:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c02:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c06:	2301      	movs	r3, #1
 8004c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f383 8810 	msr	PRIMASK, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	015b      	lsls	r3, r3, #5
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d107      	bne.n	8004c46 <UART_Start_Receive_IT+0x102>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <UART_Start_Receive_IT+0x150>)
 8004c42:	665a      	str	r2, [r3, #100]	; 0x64
 8004c44:	e002      	b.n	8004c4c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <UART_Start_Receive_IT+0x154>)
 8004c4a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2274      	movs	r2, #116	; 0x74
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c54:	f3ef 8310 	mrs	r3, PRIMASK
 8004c58:	613b      	str	r3, [r7, #16]
  return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5e:	2301      	movs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f383 8810 	msr	PRIMASK, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2190      	movs	r1, #144	; 0x90
 8004c74:	0049      	lsls	r1, r1, #1
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	0018      	movs	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b00c      	add	sp, #48	; 0x30
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	000001ff 	.word	0x000001ff
 8004c94:	08005091 	.word	0x08005091
 8004c98:	08004f35 	.word	0x08004f35

08004c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4923      	ldr	r1, [pc, #140]	; (8004d50 <UART_EndRxTransfer+0xb4>)
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	61fb      	str	r3, [r7, #28]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd6:	623b      	str	r3, [r7, #32]
  return(result);
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	2301      	movs	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f383 8810 	msr	PRIMASK, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d116      	bne.n	8004d36 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d08:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d12:	2301      	movs	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f383 8810 	msr	PRIMASK, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2110      	movs	r1, #16
 8004d28:	438a      	bics	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004d48:	46c0      	nop			; (mov r8, r8)
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b00e      	add	sp, #56	; 0x38
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fffffedf 	.word	0xfffffedf

08004d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	225a      	movs	r2, #90	; 0x5a
 8004d66:	2100      	movs	r1, #0
 8004d68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2252      	movs	r2, #82	; 0x52
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff fa79 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b08a      	sub	sp, #40	; 0x28
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d8e:	2b21      	cmp	r3, #33	; 0x21
 8004d90:	d148      	bne.n	8004e24 <UART_TxISR_8BIT+0xa2>
  {
    if (huart->TxXferCount == 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2252      	movs	r2, #82	; 0x52
 8004d96:	5a9b      	ldrh	r3, [r3, r2]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d12e      	bne.n	8004dfc <UART_TxISR_8BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004da2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004da4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
 8004da8:	2301      	movs	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f383 8810 	msr	PRIMASK, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	438a      	bics	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004dd2:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f383 8810 	msr	PRIMASK, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2140      	movs	r1, #64	; 0x40
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004dfa:	e013      	b.n	8004e24 <UART_TxISR_8BIT+0xa2>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2252      	movs	r2, #82	; 0x52
 8004e16:	5a9b      	ldrh	r3, [r3, r2]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b299      	uxth	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2252      	movs	r2, #82	; 0x52
 8004e22:	5299      	strh	r1, [r3, r2]
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b00a      	add	sp, #40	; 0x28
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e38:	2b21      	cmp	r3, #33	; 0x21
 8004e3a:	d14d      	bne.n	8004ed8 <UART_TxISR_16BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2252      	movs	r2, #82	; 0x52
 8004e40:	5a9b      	ldrh	r3, [r3, r2]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d12e      	bne.n	8004ea6 <UART_TxISR_16BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e48:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e52:	2301      	movs	r3, #1
 8004e54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f383 8810 	msr	PRIMASK, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	438a      	bics	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	2301      	movs	r3, #1
 8004e82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f383 8810 	msr	PRIMASK, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	; 0x40
 8004e96:	430a      	orrs	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ea4:	e018      	b.n	8004ed8 <UART_TxISR_16BIT+0xac>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	05d2      	lsls	r2, r2, #23
 8004eb8:	0dd2      	lsrs	r2, r2, #23
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2252      	movs	r2, #82	; 0x52
 8004eca:	5a9b      	ldrh	r3, [r3, r2]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b299      	uxth	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2252      	movs	r2, #82	; 0x52
 8004ed6:	5299      	strh	r1, [r3, r2]
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b00c      	add	sp, #48	; 0x30
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8004eec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eee:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f383 8810 	msr	PRIMASK, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2140      	movs	r1, #64	; 0x40
 8004f08:	438a      	bics	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fb fd15 	bl	8000954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	b006      	add	sp, #24
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b090      	sub	sp, #64	; 0x40
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f3c:	233e      	movs	r3, #62	; 0x3e
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	215c      	movs	r1, #92	; 0x5c
 8004f44:	5a52      	ldrh	r2, [r2, r1]
 8004f46:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	2b22      	cmp	r3, #34	; 0x22
 8004f4e:	d000      	beq.n	8004f52 <UART_RxISR_8BIT+0x1e>
 8004f50:	e090      	b.n	8005074 <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f58:	213c      	movs	r1, #60	; 0x3c
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	233e      	movs	r3, #62	; 0x3e
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b2d9      	uxtb	r1, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	400a      	ands	r2, r1
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	225a      	movs	r2, #90	; 0x5a
 8004f84:	5a9b      	ldrh	r3, [r3, r2]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b299      	uxth	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	225a      	movs	r2, #90	; 0x5a
 8004f90:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	225a      	movs	r2, #90	; 0x5a
 8004f96:	5a9b      	ldrh	r3, [r3, r2]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d172      	bne.n	8005084 <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa8:	2301      	movs	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f383 8810 	msr	PRIMASK, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4933      	ldr	r1, [pc, #204]	; (800508c <UART_RxISR_8BIT+0x158>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	f383 8810 	msr	PRIMASK, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2101      	movs	r1, #1
 8004fec:	438a      	bics	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	2b01      	cmp	r3, #1
 800500c:	d12d      	bne.n	800506a <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005014:	f3ef 8310 	mrs	r3, PRIMASK
 8005018:	60fb      	str	r3, [r7, #12]
  return(result);
 800501a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	633b      	str	r3, [r7, #48]	; 0x30
 800501e:	2301      	movs	r3, #1
 8005020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f383 8810 	msr	PRIMASK, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2110      	movs	r1, #16
 8005034:	438a      	bics	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	2210      	movs	r2, #16
 800504a:	4013      	ands	r3, r2
 800504c:	2b10      	cmp	r3, #16
 800504e:	d103      	bne.n	8005058 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2210      	movs	r2, #16
 8005056:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2258      	movs	r2, #88	; 0x58
 800505c:	5a9a      	ldrh	r2, [r3, r2]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0011      	movs	r1, r2
 8005062:	0018      	movs	r0, r3
 8005064:	f7ff f90a 	bl	800427c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005068:	e00c      	b.n	8005084 <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fb fc57 	bl	8000920 <HAL_UART_RxCpltCallback>
}
 8005072:	e007      	b.n	8005084 <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2108      	movs	r1, #8
 8005080:	430a      	orrs	r2, r1
 8005082:	619a      	str	r2, [r3, #24]
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b010      	add	sp, #64	; 0x40
 800508a:	bd80      	pop	{r7, pc}
 800508c:	fffffedf 	.word	0xfffffedf

08005090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b090      	sub	sp, #64	; 0x40
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005098:	233e      	movs	r3, #62	; 0x3e
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	215c      	movs	r1, #92	; 0x5c
 80050a0:	5a52      	ldrh	r2, [r2, r1]
 80050a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a8:	2b22      	cmp	r3, #34	; 0x22
 80050aa:	d000      	beq.n	80050ae <UART_RxISR_16BIT+0x1e>
 80050ac:	e090      	b.n	80051d0 <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b4:	213c      	movs	r1, #60	; 0x3c
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	223e      	movs	r2, #62	; 0x3e
 80050c4:	18ba      	adds	r2, r7, r2
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	8812      	ldrh	r2, [r2, #0]
 80050ca:	4013      	ands	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	225a      	movs	r2, #90	; 0x5a
 80050e0:	5a9b      	ldrh	r3, [r3, r2]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b299      	uxth	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	225a      	movs	r2, #90	; 0x5a
 80050ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	225a      	movs	r2, #90	; 0x5a
 80050f2:	5a9b      	ldrh	r3, [r3, r2]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d172      	bne.n	80051e0 <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fa:	f3ef 8310 	mrs	r3, PRIMASK
 80050fe:	617b      	str	r3, [r7, #20]
  return(result);
 8005100:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
 8005104:	2301      	movs	r3, #1
 8005106:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f383 8810 	msr	PRIMASK, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4933      	ldr	r1, [pc, #204]	; (80051e8 <UART_RxISR_16BIT+0x158>)
 800511a:	400a      	ands	r2, r1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005128:	f3ef 8310 	mrs	r3, PRIMASK
 800512c:	623b      	str	r3, [r7, #32]
  return(result);
 800512e:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
 8005132:	2301      	movs	r3, #1
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	f383 8810 	msr	PRIMASK, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2101      	movs	r1, #1
 8005148:	438a      	bics	r2, r1
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005166:	2b01      	cmp	r3, #1
 8005168:	d12d      	bne.n	80051c6 <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005170:	f3ef 8310 	mrs	r3, PRIMASK
 8005174:	60bb      	str	r3, [r7, #8]
  return(result);
 8005176:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517a:	2301      	movs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f383 8810 	msr	PRIMASK, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2110      	movs	r1, #16
 8005190:	438a      	bics	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d103      	bne.n	80051b4 <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2210      	movs	r2, #16
 80051b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2258      	movs	r2, #88	; 0x58
 80051b8:	5a9a      	ldrh	r2, [r3, r2]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff f85c 	bl	800427c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051c4:	e00c      	b.n	80051e0 <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f7fb fba9 	bl	8000920 <HAL_UART_RxCpltCallback>
}
 80051ce:	e007      	b.n	80051e0 <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2108      	movs	r1, #8
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b010      	add	sp, #64	; 0x40
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffffedf 	.word	0xfffffedf

080051ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051f4:	46c0      	nop			; (mov r8, r8)
 80051f6:	46bd      	mov	sp, r7
 80051f8:	b002      	add	sp, #8
 80051fa:	bd80      	pop	{r7, pc}

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	2600      	movs	r6, #0
 8005200:	4d0c      	ldr	r5, [pc, #48]	; (8005234 <__libc_init_array+0x38>)
 8005202:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	2600      	movs	r6, #0
 800520e:	f000 f821 	bl	8005254 <_init>
 8005212:	4d0a      	ldr	r5, [pc, #40]	; (800523c <__libc_init_array+0x40>)
 8005214:	4c0a      	ldr	r4, [pc, #40]	; (8005240 <__libc_init_array+0x44>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	00b3      	lsls	r3, r6, #2
 8005222:	58eb      	ldr	r3, [r5, r3]
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	00b3      	lsls	r3, r6, #2
 800522c:	58eb      	ldr	r3, [r5, r3]
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	080052e0 	.word	0x080052e0
 8005238:	080052e0 	.word	0x080052e0
 800523c:	080052e0 	.word	0x080052e0
 8005240:	080052e4 	.word	0x080052e4

08005244 <memset>:
 8005244:	0003      	movs	r3, r0
 8005246:	1812      	adds	r2, r2, r0
 8005248:	4293      	cmp	r3, r2
 800524a:	d100      	bne.n	800524e <memset+0xa>
 800524c:	4770      	bx	lr
 800524e:	7019      	strb	r1, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	e7f9      	b.n	8005248 <memset+0x4>

08005254 <_init>:
 8005254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525a:	bc08      	pop	{r3}
 800525c:	469e      	mov	lr, r3
 800525e:	4770      	bx	lr

08005260 <_fini>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr
