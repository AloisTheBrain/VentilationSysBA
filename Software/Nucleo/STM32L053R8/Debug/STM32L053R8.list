
STM32L053R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006698  08006698  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066a0  080066a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000078  08006720  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08006720  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014582  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d03  00000000  00000000  00034622  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f68  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00038290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f4b  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f921  00000000  00000000  0004efd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080f8c  00000000  00000000  0005e8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003830  00000000  00000000  000df8fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080065a0 	.word	0x080065a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080065a0 	.word	0x080065a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb67 	bl	80008fc <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fae9 	bl	8000810 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb59 	bl	80008fc <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb4f 	bl	80008fc <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 faf7 	bl	8000860 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faed 	bl	8000860 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	1c08      	adds	r0, r1, #0
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f848 	bl	8000358 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	0415      	lsls	r5, r2, #16
 80002dc:	0c2d      	lsrs	r5, r5, #16
 80002de:	002e      	movs	r6, r5
 80002e0:	b580      	push	{r7, lr}
 80002e2:	0407      	lsls	r7, r0, #16
 80002e4:	0c14      	lsrs	r4, r2, #16
 80002e6:	0c3f      	lsrs	r7, r7, #16
 80002e8:	4699      	mov	r9, r3
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	437e      	muls	r6, r7
 80002ee:	435d      	muls	r5, r3
 80002f0:	4367      	muls	r7, r4
 80002f2:	4363      	muls	r3, r4
 80002f4:	197f      	adds	r7, r7, r5
 80002f6:	0c34      	lsrs	r4, r6, #16
 80002f8:	19e4      	adds	r4, r4, r7
 80002fa:	469c      	mov	ip, r3
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d903      	bls.n	8000308 <__aeabi_lmul+0x34>
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	4698      	mov	r8, r3
 8000306:	44c4      	add	ip, r8
 8000308:	464b      	mov	r3, r9
 800030a:	4343      	muls	r3, r0
 800030c:	4351      	muls	r1, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	0436      	lsls	r6, r6, #16
 8000312:	4465      	add	r5, ip
 8000314:	0c36      	lsrs	r6, r6, #16
 8000316:	0424      	lsls	r4, r4, #16
 8000318:	19a4      	adds	r4, r4, r6
 800031a:	195b      	adds	r3, r3, r5
 800031c:	1859      	adds	r1, r3, r1
 800031e:	0020      	movs	r0, r4
 8000320:	bc0c      	pop	{r2, r3}
 8000322:	4690      	mov	r8, r2
 8000324:	4699      	mov	r9, r3
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000328 <__aeabi_f2uiz>:
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	b510      	push	{r4, lr}
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	1c04      	adds	r4, r0, #0
 8000330:	f7ff ffa6 	bl	8000280 <__aeabi_fcmpge>
 8000334:	2800      	cmp	r0, #0
 8000336:	d103      	bne.n	8000340 <__aeabi_f2uiz+0x18>
 8000338:	1c20      	adds	r0, r4, #0
 800033a:	f000 fe25 	bl	8000f88 <__aeabi_f2iz>
 800033e:	bd10      	pop	{r4, pc}
 8000340:	219e      	movs	r1, #158	; 0x9e
 8000342:	1c20      	adds	r0, r4, #0
 8000344:	05c9      	lsls	r1, r1, #23
 8000346:	f000 fc5b 	bl	8000c00 <__aeabi_fsub>
 800034a:	f000 fe1d 	bl	8000f88 <__aeabi_f2iz>
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	061b      	lsls	r3, r3, #24
 8000352:	469c      	mov	ip, r3
 8000354:	4460      	add	r0, ip
 8000356:	e7f2      	b.n	800033e <__aeabi_f2uiz+0x16>

08000358 <__udivmoddi4>:
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	464f      	mov	r7, r9
 800035c:	4646      	mov	r6, r8
 800035e:	46d6      	mov	lr, sl
 8000360:	b5c0      	push	{r6, r7, lr}
 8000362:	0004      	movs	r4, r0
 8000364:	b082      	sub	sp, #8
 8000366:	000d      	movs	r5, r1
 8000368:	4691      	mov	r9, r2
 800036a:	4698      	mov	r8, r3
 800036c:	428b      	cmp	r3, r1
 800036e:	d82f      	bhi.n	80003d0 <__udivmoddi4+0x78>
 8000370:	d02c      	beq.n	80003cc <__udivmoddi4+0x74>
 8000372:	4641      	mov	r1, r8
 8000374:	4648      	mov	r0, r9
 8000376:	f000 fecf 	bl	8001118 <__clzdi2>
 800037a:	0029      	movs	r1, r5
 800037c:	0006      	movs	r6, r0
 800037e:	0020      	movs	r0, r4
 8000380:	f000 feca 	bl	8001118 <__clzdi2>
 8000384:	1a33      	subs	r3, r6, r0
 8000386:	469c      	mov	ip, r3
 8000388:	3b20      	subs	r3, #32
 800038a:	469a      	mov	sl, r3
 800038c:	d500      	bpl.n	8000390 <__udivmoddi4+0x38>
 800038e:	e076      	b.n	800047e <__udivmoddi4+0x126>
 8000390:	464b      	mov	r3, r9
 8000392:	4652      	mov	r2, sl
 8000394:	4093      	lsls	r3, r2
 8000396:	001f      	movs	r7, r3
 8000398:	464b      	mov	r3, r9
 800039a:	4662      	mov	r2, ip
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d828      	bhi.n	80003f6 <__udivmoddi4+0x9e>
 80003a4:	d025      	beq.n	80003f2 <__udivmoddi4+0x9a>
 80003a6:	4653      	mov	r3, sl
 80003a8:	1ba4      	subs	r4, r4, r6
 80003aa:	41bd      	sbcs	r5, r7
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	da00      	bge.n	80003b2 <__udivmoddi4+0x5a>
 80003b0:	e07b      	b.n	80004aa <__udivmoddi4+0x152>
 80003b2:	2200      	movs	r2, #0
 80003b4:	2300      	movs	r3, #0
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	4652      	mov	r2, sl
 80003be:	4093      	lsls	r3, r2
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4662      	mov	r2, ip
 80003c6:	4093      	lsls	r3, r2
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	e018      	b.n	80003fe <__udivmoddi4+0xa6>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	d9d0      	bls.n	8000372 <__udivmoddi4+0x1a>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <__udivmoddi4+0x8a>
 80003de:	601c      	str	r4, [r3, #0]
 80003e0:	605d      	str	r5, [r3, #4]
 80003e2:	9800      	ldr	r0, [sp, #0]
 80003e4:	9901      	ldr	r1, [sp, #4]
 80003e6:	b002      	add	sp, #8
 80003e8:	bc1c      	pop	{r2, r3, r4}
 80003ea:	4690      	mov	r8, r2
 80003ec:	4699      	mov	r9, r3
 80003ee:	46a2      	mov	sl, r4
 80003f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f2:	42a3      	cmp	r3, r4
 80003f4:	d9d7      	bls.n	80003a6 <__udivmoddi4+0x4e>
 80003f6:	2200      	movs	r2, #0
 80003f8:	2300      	movs	r3, #0
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	4663      	mov	r3, ip
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0e9      	beq.n	80003d8 <__udivmoddi4+0x80>
 8000404:	07fb      	lsls	r3, r7, #31
 8000406:	4698      	mov	r8, r3
 8000408:	4641      	mov	r1, r8
 800040a:	0872      	lsrs	r2, r6, #1
 800040c:	430a      	orrs	r2, r1
 800040e:	087b      	lsrs	r3, r7, #1
 8000410:	4666      	mov	r6, ip
 8000412:	e00e      	b.n	8000432 <__udivmoddi4+0xda>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d101      	bne.n	800041c <__udivmoddi4+0xc4>
 8000418:	42a2      	cmp	r2, r4
 800041a:	d80c      	bhi.n	8000436 <__udivmoddi4+0xde>
 800041c:	1aa4      	subs	r4, r4, r2
 800041e:	419d      	sbcs	r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	1924      	adds	r4, r4, r4
 8000424:	416d      	adcs	r5, r5
 8000426:	2100      	movs	r1, #0
 8000428:	3e01      	subs	r6, #1
 800042a:	1824      	adds	r4, r4, r0
 800042c:	414d      	adcs	r5, r1
 800042e:	2e00      	cmp	r6, #0
 8000430:	d006      	beq.n	8000440 <__udivmoddi4+0xe8>
 8000432:	42ab      	cmp	r3, r5
 8000434:	d9ee      	bls.n	8000414 <__udivmoddi4+0xbc>
 8000436:	3e01      	subs	r6, #1
 8000438:	1924      	adds	r4, r4, r4
 800043a:	416d      	adcs	r5, r5
 800043c:	2e00      	cmp	r6, #0
 800043e:	d1f8      	bne.n	8000432 <__udivmoddi4+0xda>
 8000440:	9800      	ldr	r0, [sp, #0]
 8000442:	9901      	ldr	r1, [sp, #4]
 8000444:	4653      	mov	r3, sl
 8000446:	1900      	adds	r0, r0, r4
 8000448:	4169      	adcs	r1, r5
 800044a:	2b00      	cmp	r3, #0
 800044c:	db23      	blt.n	8000496 <__udivmoddi4+0x13e>
 800044e:	002b      	movs	r3, r5
 8000450:	4652      	mov	r2, sl
 8000452:	40d3      	lsrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4664      	mov	r4, ip
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	4653      	mov	r3, sl
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	db2d      	blt.n	80004c0 <__udivmoddi4+0x168>
 8000464:	0026      	movs	r6, r4
 8000466:	4657      	mov	r7, sl
 8000468:	40be      	lsls	r6, r7
 800046a:	0033      	movs	r3, r6
 800046c:	0026      	movs	r6, r4
 800046e:	4667      	mov	r7, ip
 8000470:	40be      	lsls	r6, r7
 8000472:	0032      	movs	r2, r6
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	4199      	sbcs	r1, r3
 8000478:	9000      	str	r0, [sp, #0]
 800047a:	9101      	str	r1, [sp, #4]
 800047c:	e7ac      	b.n	80003d8 <__udivmoddi4+0x80>
 800047e:	4662      	mov	r2, ip
 8000480:	2320      	movs	r3, #32
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	464a      	mov	r2, r9
 8000486:	40da      	lsrs	r2, r3
 8000488:	4661      	mov	r1, ip
 800048a:	0013      	movs	r3, r2
 800048c:	4642      	mov	r2, r8
 800048e:	408a      	lsls	r2, r1
 8000490:	0017      	movs	r7, r2
 8000492:	431f      	orrs	r7, r3
 8000494:	e780      	b.n	8000398 <__udivmoddi4+0x40>
 8000496:	4662      	mov	r2, ip
 8000498:	2320      	movs	r3, #32
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	002a      	movs	r2, r5
 800049e:	4666      	mov	r6, ip
 80004a0:	409a      	lsls	r2, r3
 80004a2:	0023      	movs	r3, r4
 80004a4:	40f3      	lsrs	r3, r6
 80004a6:	4313      	orrs	r3, r2
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0xfc>
 80004aa:	4662      	mov	r2, ip
 80004ac:	2320      	movs	r3, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	2200      	movs	r2, #0
 80004b4:	9100      	str	r1, [sp, #0]
 80004b6:	9201      	str	r2, [sp, #4]
 80004b8:	2201      	movs	r2, #1
 80004ba:	40da      	lsrs	r2, r3
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	e780      	b.n	80003c2 <__udivmoddi4+0x6a>
 80004c0:	2320      	movs	r3, #32
 80004c2:	4662      	mov	r2, ip
 80004c4:	0026      	movs	r6, r4
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	40de      	lsrs	r6, r3
 80004ca:	002f      	movs	r7, r5
 80004cc:	46b0      	mov	r8, r6
 80004ce:	4666      	mov	r6, ip
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	4646      	mov	r6, r8
 80004d4:	003b      	movs	r3, r7
 80004d6:	4333      	orrs	r3, r6
 80004d8:	e7c8      	b.n	800046c <__udivmoddi4+0x114>
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fadd>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	4647      	mov	r7, r8
 80004e0:	46ce      	mov	lr, r9
 80004e2:	0243      	lsls	r3, r0, #9
 80004e4:	0a5b      	lsrs	r3, r3, #9
 80004e6:	0044      	lsls	r4, r0, #1
 80004e8:	0fc2      	lsrs	r2, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0048      	lsls	r0, r1, #1
 80004ee:	00dd      	lsls	r5, r3, #3
 80004f0:	024b      	lsls	r3, r1, #9
 80004f2:	0e24      	lsrs	r4, r4, #24
 80004f4:	0a5b      	lsrs	r3, r3, #9
 80004f6:	0e00      	lsrs	r0, r0, #24
 80004f8:	b580      	push	{r7, lr}
 80004fa:	4698      	mov	r8, r3
 80004fc:	0026      	movs	r6, r4
 80004fe:	4691      	mov	r9, r2
 8000500:	0fc9      	lsrs	r1, r1, #31
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	1a27      	subs	r7, r4, r0
 8000506:	428a      	cmp	r2, r1
 8000508:	d029      	beq.n	800055e <__aeabi_fadd+0x82>
 800050a:	2f00      	cmp	r7, #0
 800050c:	dd15      	ble.n	800053a <__aeabi_fadd+0x5e>
 800050e:	2800      	cmp	r0, #0
 8000510:	d14a      	bne.n	80005a8 <__aeabi_fadd+0xcc>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x3c>
 8000516:	e095      	b.n	8000644 <__aeabi_fadd+0x168>
 8000518:	08ed      	lsrs	r5, r5, #3
 800051a:	2cff      	cmp	r4, #255	; 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x44>
 800051e:	e088      	b.n	8000632 <__aeabi_fadd+0x156>
 8000520:	026b      	lsls	r3, r5, #9
 8000522:	0a5b      	lsrs	r3, r3, #9
 8000524:	b2e6      	uxtb	r6, r4
 8000526:	025b      	lsls	r3, r3, #9
 8000528:	05f6      	lsls	r6, r6, #23
 800052a:	0a58      	lsrs	r0, r3, #9
 800052c:	4330      	orrs	r0, r6
 800052e:	07d2      	lsls	r2, r2, #31
 8000530:	4310      	orrs	r0, r2
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4690      	mov	r8, r2
 8000536:	4699      	mov	r9, r3
 8000538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800053a:	2f00      	cmp	r7, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fadd+0x64>
 800053e:	e087      	b.n	8000650 <__aeabi_fadd+0x174>
 8000540:	1c60      	adds	r0, r4, #1
 8000542:	b2c0      	uxtb	r0, r0
 8000544:	2801      	cmp	r0, #1
 8000546:	dc00      	bgt.n	800054a <__aeabi_fadd+0x6e>
 8000548:	e0b6      	b.n	80006b8 <__aeabi_fadd+0x1dc>
 800054a:	1aee      	subs	r6, r5, r3
 800054c:	0172      	lsls	r2, r6, #5
 800054e:	d500      	bpl.n	8000552 <__aeabi_fadd+0x76>
 8000550:	e0c5      	b.n	80006de <__aeabi_fadd+0x202>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d13d      	bne.n	80005d2 <__aeabi_fadd+0xf6>
 8000556:	2200      	movs	r2, #0
 8000558:	2600      	movs	r6, #0
 800055a:	2300      	movs	r3, #0
 800055c:	e7e3      	b.n	8000526 <__aeabi_fadd+0x4a>
 800055e:	2f00      	cmp	r7, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0x88>
 8000562:	e096      	b.n	8000692 <__aeabi_fadd+0x1b6>
 8000564:	2800      	cmp	r0, #0
 8000566:	d05d      	beq.n	8000624 <__aeabi_fadd+0x148>
 8000568:	2cff      	cmp	r4, #255	; 0xff
 800056a:	d060      	beq.n	800062e <__aeabi_fadd+0x152>
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	04d2      	lsls	r2, r2, #19
 8000570:	4313      	orrs	r3, r2
 8000572:	2f1b      	cmp	r7, #27
 8000574:	dd00      	ble.n	8000578 <__aeabi_fadd+0x9c>
 8000576:	e0ec      	b.n	8000752 <__aeabi_fadd+0x276>
 8000578:	2220      	movs	r2, #32
 800057a:	1bd2      	subs	r2, r2, r7
 800057c:	0018      	movs	r0, r3
 800057e:	4093      	lsls	r3, r2
 8000580:	40f8      	lsrs	r0, r7
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	4193      	sbcs	r3, r2
 8000586:	4303      	orrs	r3, r0
 8000588:	18ed      	adds	r5, r5, r3
 800058a:	016b      	lsls	r3, r5, #5
 800058c:	d57b      	bpl.n	8000686 <__aeabi_fadd+0x1aa>
 800058e:	3401      	adds	r4, #1
 8000590:	2cff      	cmp	r4, #255	; 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0xba>
 8000594:	e0b7      	b.n	8000706 <__aeabi_fadd+0x22a>
 8000596:	2201      	movs	r2, #1
 8000598:	2607      	movs	r6, #7
 800059a:	402a      	ands	r2, r5
 800059c:	086b      	lsrs	r3, r5, #1
 800059e:	4d9a      	ldr	r5, [pc, #616]	; (8000808 <__aeabi_fadd+0x32c>)
 80005a0:	401d      	ands	r5, r3
 80005a2:	4315      	orrs	r5, r2
 80005a4:	402e      	ands	r6, r5
 80005a6:	e029      	b.n	80005fc <__aeabi_fadd+0x120>
 80005a8:	2cff      	cmp	r4, #255	; 0xff
 80005aa:	d0b5      	beq.n	8000518 <__aeabi_fadd+0x3c>
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	04d2      	lsls	r2, r2, #19
 80005b0:	4313      	orrs	r3, r2
 80005b2:	2f1b      	cmp	r7, #27
 80005b4:	dd00      	ble.n	80005b8 <__aeabi_fadd+0xdc>
 80005b6:	e0b2      	b.n	800071e <__aeabi_fadd+0x242>
 80005b8:	2220      	movs	r2, #32
 80005ba:	1bd2      	subs	r2, r2, r7
 80005bc:	0019      	movs	r1, r3
 80005be:	4093      	lsls	r3, r2
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	4193      	sbcs	r3, r2
 80005c6:	430b      	orrs	r3, r1
 80005c8:	1aed      	subs	r5, r5, r3
 80005ca:	016b      	lsls	r3, r5, #5
 80005cc:	d55b      	bpl.n	8000686 <__aeabi_fadd+0x1aa>
 80005ce:	01ad      	lsls	r5, r5, #6
 80005d0:	09ae      	lsrs	r6, r5, #6
 80005d2:	0030      	movs	r0, r6
 80005d4:	f000 fd82 	bl	80010dc <__clzsi2>
 80005d8:	3805      	subs	r0, #5
 80005da:	4086      	lsls	r6, r0
 80005dc:	4284      	cmp	r4, r0
 80005de:	dc65      	bgt.n	80006ac <__aeabi_fadd+0x1d0>
 80005e0:	1b04      	subs	r4, r0, r4
 80005e2:	0033      	movs	r3, r6
 80005e4:	2020      	movs	r0, #32
 80005e6:	3401      	adds	r4, #1
 80005e8:	40e3      	lsrs	r3, r4
 80005ea:	1b04      	subs	r4, r0, r4
 80005ec:	40a6      	lsls	r6, r4
 80005ee:	1e75      	subs	r5, r6, #1
 80005f0:	41ae      	sbcs	r6, r5
 80005f2:	4333      	orrs	r3, r6
 80005f4:	2607      	movs	r6, #7
 80005f6:	001d      	movs	r5, r3
 80005f8:	2400      	movs	r4, #0
 80005fa:	401e      	ands	r6, r3
 80005fc:	2201      	movs	r2, #1
 80005fe:	464b      	mov	r3, r9
 8000600:	401a      	ands	r2, r3
 8000602:	2e00      	cmp	r6, #0
 8000604:	d004      	beq.n	8000610 <__aeabi_fadd+0x134>
 8000606:	230f      	movs	r3, #15
 8000608:	402b      	ands	r3, r5
 800060a:	2b04      	cmp	r3, #4
 800060c:	d000      	beq.n	8000610 <__aeabi_fadd+0x134>
 800060e:	3504      	adds	r5, #4
 8000610:	016b      	lsls	r3, r5, #5
 8000612:	d400      	bmi.n	8000616 <__aeabi_fadd+0x13a>
 8000614:	e780      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000616:	3401      	adds	r4, #1
 8000618:	b2e6      	uxtb	r6, r4
 800061a:	2cff      	cmp	r4, #255	; 0xff
 800061c:	d12f      	bne.n	800067e <__aeabi_fadd+0x1a2>
 800061e:	26ff      	movs	r6, #255	; 0xff
 8000620:	2300      	movs	r3, #0
 8000622:	e780      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d152      	bne.n	80006ce <__aeabi_fadd+0x1f2>
 8000628:	2cff      	cmp	r4, #255	; 0xff
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0x152>
 800062c:	e774      	b.n	8000518 <__aeabi_fadd+0x3c>
 800062e:	000a      	movs	r2, r1
 8000630:	08ed      	lsrs	r5, r5, #3
 8000632:	2d00      	cmp	r5, #0
 8000634:	d0f3      	beq.n	800061e <__aeabi_fadd+0x142>
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	03db      	lsls	r3, r3, #15
 800063a:	432b      	orrs	r3, r5
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	26ff      	movs	r6, #255	; 0xff
 8000642:	e770      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000644:	3f01      	subs	r7, #1
 8000646:	2f00      	cmp	r7, #0
 8000648:	d0be      	beq.n	80005c8 <__aeabi_fadd+0xec>
 800064a:	2cff      	cmp	r4, #255	; 0xff
 800064c:	d1b1      	bne.n	80005b2 <__aeabi_fadd+0xd6>
 800064e:	e763      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000650:	2c00      	cmp	r4, #0
 8000652:	d047      	beq.n	80006e4 <__aeabi_fadd+0x208>
 8000654:	28ff      	cmp	r0, #255	; 0xff
 8000656:	d069      	beq.n	800072c <__aeabi_fadd+0x250>
 8000658:	2480      	movs	r4, #128	; 0x80
 800065a:	04e4      	lsls	r4, r4, #19
 800065c:	427a      	negs	r2, r7
 800065e:	4325      	orrs	r5, r4
 8000660:	2a1b      	cmp	r2, #27
 8000662:	dd00      	ble.n	8000666 <__aeabi_fadd+0x18a>
 8000664:	e0c5      	b.n	80007f2 <__aeabi_fadd+0x316>
 8000666:	002c      	movs	r4, r5
 8000668:	2620      	movs	r6, #32
 800066a:	40d4      	lsrs	r4, r2
 800066c:	1ab2      	subs	r2, r6, r2
 800066e:	4095      	lsls	r5, r2
 8000670:	1e6a      	subs	r2, r5, #1
 8000672:	4195      	sbcs	r5, r2
 8000674:	4325      	orrs	r5, r4
 8000676:	1b5d      	subs	r5, r3, r5
 8000678:	0004      	movs	r4, r0
 800067a:	4689      	mov	r9, r1
 800067c:	e7a5      	b.n	80005ca <__aeabi_fadd+0xee>
 800067e:	01ab      	lsls	r3, r5, #6
 8000680:	0a5b      	lsrs	r3, r3, #9
 8000682:	e750      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000684:	2400      	movs	r4, #0
 8000686:	2201      	movs	r2, #1
 8000688:	464b      	mov	r3, r9
 800068a:	401a      	ands	r2, r3
 800068c:	076b      	lsls	r3, r5, #29
 800068e:	d1ba      	bne.n	8000606 <__aeabi_fadd+0x12a>
 8000690:	e742      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000692:	2f00      	cmp	r7, #0
 8000694:	d13b      	bne.n	800070e <__aeabi_fadd+0x232>
 8000696:	3401      	adds	r4, #1
 8000698:	b2e0      	uxtb	r0, r4
 800069a:	2801      	cmp	r0, #1
 800069c:	dd4a      	ble.n	8000734 <__aeabi_fadd+0x258>
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d0bd      	beq.n	800061e <__aeabi_fadd+0x142>
 80006a2:	2607      	movs	r6, #7
 80006a4:	18ed      	adds	r5, r5, r3
 80006a6:	086d      	lsrs	r5, r5, #1
 80006a8:	402e      	ands	r6, r5
 80006aa:	e7a7      	b.n	80005fc <__aeabi_fadd+0x120>
 80006ac:	2307      	movs	r3, #7
 80006ae:	4d57      	ldr	r5, [pc, #348]	; (800080c <__aeabi_fadd+0x330>)
 80006b0:	1a24      	subs	r4, r4, r0
 80006b2:	4035      	ands	r5, r6
 80006b4:	401e      	ands	r6, r3
 80006b6:	e7a1      	b.n	80005fc <__aeabi_fadd+0x120>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d11b      	bne.n	80006f4 <__aeabi_fadd+0x218>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d16e      	bne.n	800079e <__aeabi_fadd+0x2c2>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x1ea>
 80006c4:	e09a      	b.n	80007fc <__aeabi_fadd+0x320>
 80006c6:	000a      	movs	r2, r1
 80006c8:	001d      	movs	r5, r3
 80006ca:	003c      	movs	r4, r7
 80006cc:	e724      	b.n	8000518 <__aeabi_fadd+0x3c>
 80006ce:	3f01      	subs	r7, #1
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x1fa>
 80006d4:	e758      	b.n	8000588 <__aeabi_fadd+0xac>
 80006d6:	2cff      	cmp	r4, #255	; 0xff
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x200>
 80006da:	e74a      	b.n	8000572 <__aeabi_fadd+0x96>
 80006dc:	e7a7      	b.n	800062e <__aeabi_fadd+0x152>
 80006de:	1b5e      	subs	r6, r3, r5
 80006e0:	4689      	mov	r9, r1
 80006e2:	e776      	b.n	80005d2 <__aeabi_fadd+0xf6>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d11c      	bne.n	8000722 <__aeabi_fadd+0x246>
 80006e8:	000a      	movs	r2, r1
 80006ea:	28ff      	cmp	r0, #255	; 0xff
 80006ec:	d01f      	beq.n	800072e <__aeabi_fadd+0x252>
 80006ee:	0004      	movs	r4, r0
 80006f0:	001d      	movs	r5, r3
 80006f2:	e711      	b.n	8000518 <__aeabi_fadd+0x3c>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d15d      	bne.n	80007b4 <__aeabi_fadd+0x2d8>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d117      	bne.n	800072c <__aeabi_fadd+0x250>
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	2200      	movs	r2, #0
 8000700:	03db      	lsls	r3, r3, #15
 8000702:	26ff      	movs	r6, #255	; 0xff
 8000704:	e70f      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000706:	000a      	movs	r2, r1
 8000708:	26ff      	movs	r6, #255	; 0xff
 800070a:	2300      	movs	r3, #0
 800070c:	e70b      	b.n	8000526 <__aeabi_fadd+0x4a>
 800070e:	2c00      	cmp	r4, #0
 8000710:	d121      	bne.n	8000756 <__aeabi_fadd+0x27a>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d166      	bne.n	80007e4 <__aeabi_fadd+0x308>
 8000716:	28ff      	cmp	r0, #255	; 0xff
 8000718:	d1e9      	bne.n	80006ee <__aeabi_fadd+0x212>
 800071a:	001d      	movs	r5, r3
 800071c:	e787      	b.n	800062e <__aeabi_fadd+0x152>
 800071e:	2301      	movs	r3, #1
 8000720:	e752      	b.n	80005c8 <__aeabi_fadd+0xec>
 8000722:	1c7a      	adds	r2, r7, #1
 8000724:	d0a7      	beq.n	8000676 <__aeabi_fadd+0x19a>
 8000726:	43fa      	mvns	r2, r7
 8000728:	28ff      	cmp	r0, #255	; 0xff
 800072a:	d199      	bne.n	8000660 <__aeabi_fadd+0x184>
 800072c:	000a      	movs	r2, r1
 800072e:	001d      	movs	r5, r3
 8000730:	24ff      	movs	r4, #255	; 0xff
 8000732:	e6f1      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d121      	bne.n	800077c <__aeabi_fadd+0x2a0>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d04f      	beq.n	80007dc <__aeabi_fadd+0x300>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d04c      	beq.n	80007da <__aeabi_fadd+0x2fe>
 8000740:	18ed      	adds	r5, r5, r3
 8000742:	016b      	lsls	r3, r5, #5
 8000744:	d59e      	bpl.n	8000684 <__aeabi_fadd+0x1a8>
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <__aeabi_fadd+0x330>)
 8000748:	3607      	adds	r6, #7
 800074a:	402e      	ands	r6, r5
 800074c:	2401      	movs	r4, #1
 800074e:	401d      	ands	r5, r3
 8000750:	e754      	b.n	80005fc <__aeabi_fadd+0x120>
 8000752:	2301      	movs	r3, #1
 8000754:	e718      	b.n	8000588 <__aeabi_fadd+0xac>
 8000756:	28ff      	cmp	r0, #255	; 0xff
 8000758:	d0df      	beq.n	800071a <__aeabi_fadd+0x23e>
 800075a:	2480      	movs	r4, #128	; 0x80
 800075c:	04e4      	lsls	r4, r4, #19
 800075e:	427f      	negs	r7, r7
 8000760:	4325      	orrs	r5, r4
 8000762:	2f1b      	cmp	r7, #27
 8000764:	dc4d      	bgt.n	8000802 <__aeabi_fadd+0x326>
 8000766:	2620      	movs	r6, #32
 8000768:	1bf6      	subs	r6, r6, r7
 800076a:	002c      	movs	r4, r5
 800076c:	40b5      	lsls	r5, r6
 800076e:	40fc      	lsrs	r4, r7
 8000770:	1e6a      	subs	r2, r5, #1
 8000772:	4195      	sbcs	r5, r2
 8000774:	4325      	orrs	r5, r4
 8000776:	18ed      	adds	r5, r5, r3
 8000778:	0004      	movs	r4, r0
 800077a:	e706      	b.n	800058a <__aeabi_fadd+0xae>
 800077c:	2d00      	cmp	r5, #0
 800077e:	d0cc      	beq.n	800071a <__aeabi_fadd+0x23e>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x2aa>
 8000784:	e753      	b.n	800062e <__aeabi_fadd+0x152>
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4660      	mov	r0, ip
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	4208      	tst	r0, r1
 800078e:	d003      	beq.n	8000798 <__aeabi_fadd+0x2bc>
 8000790:	4640      	mov	r0, r8
 8000792:	4208      	tst	r0, r1
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2bc>
 8000796:	001d      	movs	r5, r3
 8000798:	2101      	movs	r1, #1
 800079a:	4011      	ands	r1, r2
 800079c:	e747      	b.n	800062e <__aeabi_fadd+0x152>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x2c8>
 80007a2:	e6b9      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007a4:	1aea      	subs	r2, r5, r3
 80007a6:	0150      	lsls	r0, r2, #5
 80007a8:	d525      	bpl.n	80007f6 <__aeabi_fadd+0x31a>
 80007aa:	2607      	movs	r6, #7
 80007ac:	1b5d      	subs	r5, r3, r5
 80007ae:	402e      	ands	r6, r5
 80007b0:	4689      	mov	r9, r1
 80007b2:	e723      	b.n	80005fc <__aeabi_fadd+0x120>
 80007b4:	24ff      	movs	r4, #255	; 0xff
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x2e0>
 80007ba:	e6ad      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	4660      	mov	r0, ip
 80007c0:	03d2      	lsls	r2, r2, #15
 80007c2:	4210      	tst	r0, r2
 80007c4:	d004      	beq.n	80007d0 <__aeabi_fadd+0x2f4>
 80007c6:	4640      	mov	r0, r8
 80007c8:	4210      	tst	r0, r2
 80007ca:	d101      	bne.n	80007d0 <__aeabi_fadd+0x2f4>
 80007cc:	001d      	movs	r5, r3
 80007ce:	4689      	mov	r9, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	464b      	mov	r3, r9
 80007d4:	24ff      	movs	r4, #255	; 0xff
 80007d6:	401a      	ands	r2, r3
 80007d8:	e69e      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007da:	002b      	movs	r3, r5
 80007dc:	08dd      	lsrs	r5, r3, #3
 80007de:	000a      	movs	r2, r1
 80007e0:	2400      	movs	r4, #0
 80007e2:	e69d      	b.n	8000520 <__aeabi_fadd+0x44>
 80007e4:	1c7a      	adds	r2, r7, #1
 80007e6:	d0c6      	beq.n	8000776 <__aeabi_fadd+0x29a>
 80007e8:	43ff      	mvns	r7, r7
 80007ea:	28ff      	cmp	r0, #255	; 0xff
 80007ec:	d1b9      	bne.n	8000762 <__aeabi_fadd+0x286>
 80007ee:	001d      	movs	r5, r3
 80007f0:	e71d      	b.n	800062e <__aeabi_fadd+0x152>
 80007f2:	2501      	movs	r5, #1
 80007f4:	e73f      	b.n	8000676 <__aeabi_fadd+0x19a>
 80007f6:	1e15      	subs	r5, r2, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_fadd+0x320>
 80007fa:	e744      	b.n	8000686 <__aeabi_fadd+0x1aa>
 80007fc:	2200      	movs	r2, #0
 80007fe:	2300      	movs	r3, #0
 8000800:	e691      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000802:	2501      	movs	r5, #1
 8000804:	e7b7      	b.n	8000776 <__aeabi_fadd+0x29a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	7dffffff 	.word	0x7dffffff
 800080c:	fbffffff 	.word	0xfbffffff

08000810 <__eqsf2>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	0042      	lsls	r2, r0, #1
 8000814:	024e      	lsls	r6, r1, #9
 8000816:	004c      	lsls	r4, r1, #1
 8000818:	0245      	lsls	r5, r0, #9
 800081a:	0a6d      	lsrs	r5, r5, #9
 800081c:	0e12      	lsrs	r2, r2, #24
 800081e:	0fc3      	lsrs	r3, r0, #31
 8000820:	0a76      	lsrs	r6, r6, #9
 8000822:	0e24      	lsrs	r4, r4, #24
 8000824:	0fc9      	lsrs	r1, r1, #31
 8000826:	2aff      	cmp	r2, #255	; 0xff
 8000828:	d00f      	beq.n	800084a <__eqsf2+0x3a>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d011      	beq.n	8000852 <__eqsf2+0x42>
 800082e:	2001      	movs	r0, #1
 8000830:	42a2      	cmp	r2, r4
 8000832:	d000      	beq.n	8000836 <__eqsf2+0x26>
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	42b5      	cmp	r5, r6
 8000838:	d1fc      	bne.n	8000834 <__eqsf2+0x24>
 800083a:	428b      	cmp	r3, r1
 800083c:	d00d      	beq.n	800085a <__eqsf2+0x4a>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d1f8      	bne.n	8000834 <__eqsf2+0x24>
 8000842:	0028      	movs	r0, r5
 8000844:	1e45      	subs	r5, r0, #1
 8000846:	41a8      	sbcs	r0, r5
 8000848:	e7f4      	b.n	8000834 <__eqsf2+0x24>
 800084a:	2001      	movs	r0, #1
 800084c:	2d00      	cmp	r5, #0
 800084e:	d1f1      	bne.n	8000834 <__eqsf2+0x24>
 8000850:	e7eb      	b.n	800082a <__eqsf2+0x1a>
 8000852:	2001      	movs	r0, #1
 8000854:	2e00      	cmp	r6, #0
 8000856:	d1ed      	bne.n	8000834 <__eqsf2+0x24>
 8000858:	e7e9      	b.n	800082e <__eqsf2+0x1e>
 800085a:	2000      	movs	r0, #0
 800085c:	e7ea      	b.n	8000834 <__eqsf2+0x24>
 800085e:	46c0      	nop			; (mov r8, r8)

08000860 <__gesf2>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	004a      	lsls	r2, r1, #1
 8000864:	024e      	lsls	r6, r1, #9
 8000866:	0245      	lsls	r5, r0, #9
 8000868:	0044      	lsls	r4, r0, #1
 800086a:	0a6d      	lsrs	r5, r5, #9
 800086c:	0e24      	lsrs	r4, r4, #24
 800086e:	0fc3      	lsrs	r3, r0, #31
 8000870:	0a76      	lsrs	r6, r6, #9
 8000872:	0e12      	lsrs	r2, r2, #24
 8000874:	0fc9      	lsrs	r1, r1, #31
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d015      	beq.n	80008a6 <__gesf2+0x46>
 800087a:	2aff      	cmp	r2, #255	; 0xff
 800087c:	d00e      	beq.n	800089c <__gesf2+0x3c>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d115      	bne.n	80008ae <__gesf2+0x4e>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d101      	bne.n	800088a <__gesf2+0x2a>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d01c      	beq.n	80008c4 <__gesf2+0x64>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d014      	beq.n	80008b8 <__gesf2+0x58>
 800088e:	428b      	cmp	r3, r1
 8000890:	d027      	beq.n	80008e2 <__gesf2+0x82>
 8000892:	2002      	movs	r0, #2
 8000894:	3b01      	subs	r3, #1
 8000896:	4018      	ands	r0, r3
 8000898:	3801      	subs	r0, #1
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	2e00      	cmp	r6, #0
 800089e:	d0ee      	beq.n	800087e <__gesf2+0x1e>
 80008a0:	2002      	movs	r0, #2
 80008a2:	4240      	negs	r0, r0
 80008a4:	e7f9      	b.n	800089a <__gesf2+0x3a>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d1fa      	bne.n	80008a0 <__gesf2+0x40>
 80008aa:	2aff      	cmp	r2, #255	; 0xff
 80008ac:	d00e      	beq.n	80008cc <__gesf2+0x6c>
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d10e      	bne.n	80008d0 <__gesf2+0x70>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0ed      	beq.n	8000892 <__gesf2+0x32>
 80008b6:	e00b      	b.n	80008d0 <__gesf2+0x70>
 80008b8:	2301      	movs	r3, #1
 80008ba:	3901      	subs	r1, #1
 80008bc:	4399      	bics	r1, r3
 80008be:	0008      	movs	r0, r1
 80008c0:	3001      	adds	r0, #1
 80008c2:	e7ea      	b.n	800089a <__gesf2+0x3a>
 80008c4:	2000      	movs	r0, #0
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d0e7      	beq.n	800089a <__gesf2+0x3a>
 80008ca:	e7e2      	b.n	8000892 <__gesf2+0x32>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d1e7      	bne.n	80008a0 <__gesf2+0x40>
 80008d0:	428b      	cmp	r3, r1
 80008d2:	d1de      	bne.n	8000892 <__gesf2+0x32>
 80008d4:	4294      	cmp	r4, r2
 80008d6:	dd05      	ble.n	80008e4 <__gesf2+0x84>
 80008d8:	2102      	movs	r1, #2
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	4008      	ands	r0, r1
 80008de:	3801      	subs	r0, #1
 80008e0:	e7db      	b.n	800089a <__gesf2+0x3a>
 80008e2:	2400      	movs	r4, #0
 80008e4:	42a2      	cmp	r2, r4
 80008e6:	dc04      	bgt.n	80008f2 <__gesf2+0x92>
 80008e8:	42b5      	cmp	r5, r6
 80008ea:	d8d2      	bhi.n	8000892 <__gesf2+0x32>
 80008ec:	2000      	movs	r0, #0
 80008ee:	42b5      	cmp	r5, r6
 80008f0:	d2d3      	bcs.n	800089a <__gesf2+0x3a>
 80008f2:	1e58      	subs	r0, r3, #1
 80008f4:	2301      	movs	r3, #1
 80008f6:	4398      	bics	r0, r3
 80008f8:	3001      	adds	r0, #1
 80008fa:	e7ce      	b.n	800089a <__gesf2+0x3a>

080008fc <__lesf2>:
 80008fc:	b530      	push	{r4, r5, lr}
 80008fe:	0042      	lsls	r2, r0, #1
 8000900:	0244      	lsls	r4, r0, #9
 8000902:	024d      	lsls	r5, r1, #9
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0048      	lsls	r0, r1, #1
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	0e12      	lsrs	r2, r2, #24
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e00      	lsrs	r0, r0, #24
 8000910:	0fc9      	lsrs	r1, r1, #31
 8000912:	2aff      	cmp	r2, #255	; 0xff
 8000914:	d012      	beq.n	800093c <__lesf2+0x40>
 8000916:	28ff      	cmp	r0, #255	; 0xff
 8000918:	d00c      	beq.n	8000934 <__lesf2+0x38>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d112      	bne.n	8000944 <__lesf2+0x48>
 800091e:	2800      	cmp	r0, #0
 8000920:	d119      	bne.n	8000956 <__lesf2+0x5a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d117      	bne.n	8000956 <__lesf2+0x5a>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d02b      	beq.n	8000982 <__lesf2+0x86>
 800092a:	2002      	movs	r0, #2
 800092c:	3b01      	subs	r3, #1
 800092e:	4018      	ands	r0, r3
 8000930:	3801      	subs	r0, #1
 8000932:	e026      	b.n	8000982 <__lesf2+0x86>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d0f0      	beq.n	800091a <__lesf2+0x1e>
 8000938:	2002      	movs	r0, #2
 800093a:	e022      	b.n	8000982 <__lesf2+0x86>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d1fb      	bne.n	8000938 <__lesf2+0x3c>
 8000940:	28ff      	cmp	r0, #255	; 0xff
 8000942:	d01f      	beq.n	8000984 <__lesf2+0x88>
 8000944:	2800      	cmp	r0, #0
 8000946:	d11f      	bne.n	8000988 <__lesf2+0x8c>
 8000948:	2d00      	cmp	r5, #0
 800094a:	d11d      	bne.n	8000988 <__lesf2+0x8c>
 800094c:	2002      	movs	r0, #2
 800094e:	3b01      	subs	r3, #1
 8000950:	4018      	ands	r0, r3
 8000952:	3801      	subs	r0, #1
 8000954:	e015      	b.n	8000982 <__lesf2+0x86>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d00e      	beq.n	8000978 <__lesf2+0x7c>
 800095a:	428b      	cmp	r3, r1
 800095c:	d1e5      	bne.n	800092a <__lesf2+0x2e>
 800095e:	2200      	movs	r2, #0
 8000960:	4290      	cmp	r0, r2
 8000962:	dc04      	bgt.n	800096e <__lesf2+0x72>
 8000964:	42ac      	cmp	r4, r5
 8000966:	d8e0      	bhi.n	800092a <__lesf2+0x2e>
 8000968:	2000      	movs	r0, #0
 800096a:	42ac      	cmp	r4, r5
 800096c:	d209      	bcs.n	8000982 <__lesf2+0x86>
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	2301      	movs	r3, #1
 8000972:	4398      	bics	r0, r3
 8000974:	3001      	adds	r0, #1
 8000976:	e004      	b.n	8000982 <__lesf2+0x86>
 8000978:	2301      	movs	r3, #1
 800097a:	3901      	subs	r1, #1
 800097c:	4399      	bics	r1, r3
 800097e:	0008      	movs	r0, r1
 8000980:	3001      	adds	r0, #1
 8000982:	bd30      	pop	{r4, r5, pc}
 8000984:	2d00      	cmp	r5, #0
 8000986:	d1d7      	bne.n	8000938 <__lesf2+0x3c>
 8000988:	428b      	cmp	r3, r1
 800098a:	d1ce      	bne.n	800092a <__lesf2+0x2e>
 800098c:	4282      	cmp	r2, r0
 800098e:	dde7      	ble.n	8000960 <__lesf2+0x64>
 8000990:	2102      	movs	r1, #2
 8000992:	1e58      	subs	r0, r3, #1
 8000994:	4008      	ands	r0, r1
 8000996:	3801      	subs	r0, #1
 8000998:	e7f3      	b.n	8000982 <__lesf2+0x86>
 800099a:	46c0      	nop			; (mov r8, r8)

0800099c <__aeabi_fmul>:
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	464e      	mov	r6, r9
 80009a0:	4657      	mov	r7, sl
 80009a2:	4645      	mov	r5, r8
 80009a4:	46de      	mov	lr, fp
 80009a6:	b5e0      	push	{r5, r6, r7, lr}
 80009a8:	0243      	lsls	r3, r0, #9
 80009aa:	0a5b      	lsrs	r3, r3, #9
 80009ac:	0045      	lsls	r5, r0, #1
 80009ae:	b083      	sub	sp, #12
 80009b0:	1c0f      	adds	r7, r1, #0
 80009b2:	4699      	mov	r9, r3
 80009b4:	0e2d      	lsrs	r5, r5, #24
 80009b6:	0fc6      	lsrs	r6, r0, #31
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d057      	beq.n	8000a6c <__aeabi_fmul+0xd0>
 80009bc:	2dff      	cmp	r5, #255	; 0xff
 80009be:	d024      	beq.n	8000a0a <__aeabi_fmul+0x6e>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	04c0      	lsls	r0, r0, #19
 80009c6:	4318      	orrs	r0, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	4681      	mov	r9, r0
 80009cc:	469a      	mov	sl, r3
 80009ce:	469b      	mov	fp, r3
 80009d0:	3d7f      	subs	r5, #127	; 0x7f
 80009d2:	027c      	lsls	r4, r7, #9
 80009d4:	007a      	lsls	r2, r7, #1
 80009d6:	0ffb      	lsrs	r3, r7, #31
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	0e12      	lsrs	r2, r2, #24
 80009dc:	4698      	mov	r8, r3
 80009de:	d023      	beq.n	8000a28 <__aeabi_fmul+0x8c>
 80009e0:	2aff      	cmp	r2, #255	; 0xff
 80009e2:	d04b      	beq.n	8000a7c <__aeabi_fmul+0xe0>
 80009e4:	00e3      	lsls	r3, r4, #3
 80009e6:	2480      	movs	r4, #128	; 0x80
 80009e8:	2000      	movs	r0, #0
 80009ea:	04e4      	lsls	r4, r4, #19
 80009ec:	3a7f      	subs	r2, #127	; 0x7f
 80009ee:	431c      	orrs	r4, r3
 80009f0:	18ad      	adds	r5, r5, r2
 80009f2:	1c6b      	adds	r3, r5, #1
 80009f4:	4647      	mov	r7, r8
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4653      	mov	r3, sl
 80009fa:	4077      	eors	r7, r6
 80009fc:	003a      	movs	r2, r7
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d848      	bhi.n	8000a94 <__aeabi_fmul+0xf8>
 8000a02:	497d      	ldr	r1, [pc, #500]	; (8000bf8 <__aeabi_fmul+0x25c>)
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	58cb      	ldr	r3, [r1, r3]
 8000a08:	469f      	mov	pc, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fmul+0x74>
 8000a0e:	e085      	b.n	8000b1c <__aeabi_fmul+0x180>
 8000a10:	3308      	adds	r3, #8
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b06      	subs	r3, #6
 8000a16:	469b      	mov	fp, r3
 8000a18:	027c      	lsls	r4, r7, #9
 8000a1a:	007a      	lsls	r2, r7, #1
 8000a1c:	0ffb      	lsrs	r3, r7, #31
 8000a1e:	25ff      	movs	r5, #255	; 0xff
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	0e12      	lsrs	r2, r2, #24
 8000a24:	4698      	mov	r8, r3
 8000a26:	d1db      	bne.n	80009e0 <__aeabi_fmul+0x44>
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x92>
 8000a2c:	e090      	b.n	8000b50 <__aeabi_fmul+0x1b4>
 8000a2e:	4652      	mov	r2, sl
 8000a30:	2301      	movs	r3, #1
 8000a32:	431a      	orrs	r2, r3
 8000a34:	4692      	mov	sl, r2
 8000a36:	2001      	movs	r0, #1
 8000a38:	e7db      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000a3a:	464c      	mov	r4, r9
 8000a3c:	4658      	mov	r0, fp
 8000a3e:	0017      	movs	r7, r2
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d024      	beq.n	8000a8e <__aeabi_fmul+0xf2>
 8000a44:	2803      	cmp	r0, #3
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fmul+0xae>
 8000a48:	e0cf      	b.n	8000bea <__aeabi_fmul+0x24e>
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2801      	cmp	r0, #1
 8000a50:	d14d      	bne.n	8000aee <__aeabi_fmul+0x152>
 8000a52:	0258      	lsls	r0, r3, #9
 8000a54:	05d2      	lsls	r2, r2, #23
 8000a56:	0a40      	lsrs	r0, r0, #9
 8000a58:	07ff      	lsls	r7, r7, #31
 8000a5a:	4310      	orrs	r0, r2
 8000a5c:	4338      	orrs	r0, r7
 8000a5e:	b003      	add	sp, #12
 8000a60:	bc3c      	pop	{r2, r3, r4, r5}
 8000a62:	4690      	mov	r8, r2
 8000a64:	4699      	mov	r9, r3
 8000a66:	46a2      	mov	sl, r4
 8000a68:	46ab      	mov	fp, r5
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d15b      	bne.n	8000b28 <__aeabi_fmul+0x18c>
 8000a70:	2304      	movs	r3, #4
 8000a72:	469a      	mov	sl, r3
 8000a74:	3b03      	subs	r3, #3
 8000a76:	2500      	movs	r5, #0
 8000a78:	469b      	mov	fp, r3
 8000a7a:	e7aa      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000a7c:	35ff      	adds	r5, #255	; 0xff
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d160      	bne.n	8000b44 <__aeabi_fmul+0x1a8>
 8000a82:	4652      	mov	r2, sl
 8000a84:	2302      	movs	r3, #2
 8000a86:	431a      	orrs	r2, r3
 8000a88:	4692      	mov	sl, r2
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	e7b1      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000a8e:	22ff      	movs	r2, #255	; 0xff
 8000a90:	2300      	movs	r3, #0
 8000a92:	e7de      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000a94:	464b      	mov	r3, r9
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	469c      	mov	ip, r3
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	0426      	lsls	r6, r4, #16
 8000a9e:	0c36      	lsrs	r6, r6, #16
 8000aa0:	0418      	lsls	r0, r3, #16
 8000aa2:	4661      	mov	r1, ip
 8000aa4:	0033      	movs	r3, r6
 8000aa6:	0c22      	lsrs	r2, r4, #16
 8000aa8:	4664      	mov	r4, ip
 8000aaa:	0c00      	lsrs	r0, r0, #16
 8000aac:	4343      	muls	r3, r0
 8000aae:	434e      	muls	r6, r1
 8000ab0:	4350      	muls	r0, r2
 8000ab2:	4354      	muls	r4, r2
 8000ab4:	1980      	adds	r0, r0, r6
 8000ab6:	0c1a      	lsrs	r2, r3, #16
 8000ab8:	1812      	adds	r2, r2, r0
 8000aba:	4296      	cmp	r6, r2
 8000abc:	d903      	bls.n	8000ac6 <__aeabi_fmul+0x12a>
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	0249      	lsls	r1, r1, #9
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4464      	add	r4, ip
 8000ac6:	041b      	lsls	r3, r3, #16
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	0410      	lsls	r0, r2, #16
 8000acc:	18c0      	adds	r0, r0, r3
 8000ace:	0183      	lsls	r3, r0, #6
 8000ad0:	1e5e      	subs	r6, r3, #1
 8000ad2:	41b3      	sbcs	r3, r6
 8000ad4:	0e80      	lsrs	r0, r0, #26
 8000ad6:	4318      	orrs	r0, r3
 8000ad8:	0c13      	lsrs	r3, r2, #16
 8000ada:	191b      	adds	r3, r3, r4
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	4303      	orrs	r3, r0
 8000ae0:	001c      	movs	r4, r3
 8000ae2:	0123      	lsls	r3, r4, #4
 8000ae4:	d579      	bpl.n	8000bda <__aeabi_fmul+0x23e>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	0862      	lsrs	r2, r4, #1
 8000aea:	401c      	ands	r4, r3
 8000aec:	4314      	orrs	r4, r2
 8000aee:	9a01      	ldr	r2, [sp, #4]
 8000af0:	327f      	adds	r2, #127	; 0x7f
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	dd4d      	ble.n	8000b92 <__aeabi_fmul+0x1f6>
 8000af6:	0763      	lsls	r3, r4, #29
 8000af8:	d004      	beq.n	8000b04 <__aeabi_fmul+0x168>
 8000afa:	230f      	movs	r3, #15
 8000afc:	4023      	ands	r3, r4
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fmul+0x168>
 8000b02:	3404      	adds	r4, #4
 8000b04:	0123      	lsls	r3, r4, #4
 8000b06:	d503      	bpl.n	8000b10 <__aeabi_fmul+0x174>
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <__aeabi_fmul+0x260>)
 8000b0a:	9a01      	ldr	r2, [sp, #4]
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	3280      	adds	r2, #128	; 0x80
 8000b10:	2afe      	cmp	r2, #254	; 0xfe
 8000b12:	dcbc      	bgt.n	8000a8e <__aeabi_fmul+0xf2>
 8000b14:	01a3      	lsls	r3, r4, #6
 8000b16:	0a5b      	lsrs	r3, r3, #9
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	e79a      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	469a      	mov	sl, r3
 8000b20:	3b09      	subs	r3, #9
 8000b22:	25ff      	movs	r5, #255	; 0xff
 8000b24:	469b      	mov	fp, r3
 8000b26:	e754      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fad7 	bl	80010dc <__clzsi2>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1f43      	subs	r3, r0, #5
 8000b32:	2576      	movs	r5, #118	; 0x76
 8000b34:	409a      	lsls	r2, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	426d      	negs	r5, r5
 8000b3a:	4691      	mov	r9, r2
 8000b3c:	1a2d      	subs	r5, r5, r0
 8000b3e:	469a      	mov	sl, r3
 8000b40:	469b      	mov	fp, r3
 8000b42:	e746      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000b44:	4652      	mov	r2, sl
 8000b46:	2303      	movs	r3, #3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4692      	mov	sl, r2
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e750      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000b50:	0020      	movs	r0, r4
 8000b52:	f000 fac3 	bl	80010dc <__clzsi2>
 8000b56:	1f43      	subs	r3, r0, #5
 8000b58:	1a2d      	subs	r5, r5, r0
 8000b5a:	409c      	lsls	r4, r3
 8000b5c:	3d76      	subs	r5, #118	; 0x76
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e747      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	2700      	movs	r7, #0
 8000b66:	03db      	lsls	r3, r3, #15
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	e772      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b6c:	4642      	mov	r2, r8
 8000b6e:	e766      	b.n	8000a3e <__aeabi_fmul+0xa2>
 8000b70:	464c      	mov	r4, r9
 8000b72:	0032      	movs	r2, r6
 8000b74:	4658      	mov	r0, fp
 8000b76:	e762      	b.n	8000a3e <__aeabi_fmul+0xa2>
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	464a      	mov	r2, r9
 8000b7c:	03db      	lsls	r3, r3, #15
 8000b7e:	421a      	tst	r2, r3
 8000b80:	d022      	beq.n	8000bc8 <__aeabi_fmul+0x22c>
 8000b82:	421c      	tst	r4, r3
 8000b84:	d120      	bne.n	8000bc8 <__aeabi_fmul+0x22c>
 8000b86:	4323      	orrs	r3, r4
 8000b88:	025b      	lsls	r3, r3, #9
 8000b8a:	0a5b      	lsrs	r3, r3, #9
 8000b8c:	4647      	mov	r7, r8
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	e75f      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b92:	2301      	movs	r3, #1
 8000b94:	1a9a      	subs	r2, r3, r2
 8000b96:	2a1b      	cmp	r2, #27
 8000b98:	dc21      	bgt.n	8000bde <__aeabi_fmul+0x242>
 8000b9a:	0023      	movs	r3, r4
 8000b9c:	9901      	ldr	r1, [sp, #4]
 8000b9e:	40d3      	lsrs	r3, r2
 8000ba0:	319e      	adds	r1, #158	; 0x9e
 8000ba2:	408c      	lsls	r4, r1
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	1e5c      	subs	r4, r3, #1
 8000baa:	41a3      	sbcs	r3, r4
 8000bac:	4313      	orrs	r3, r2
 8000bae:	075a      	lsls	r2, r3, #29
 8000bb0:	d004      	beq.n	8000bbc <__aeabi_fmul+0x220>
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	2a04      	cmp	r2, #4
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fmul+0x220>
 8000bba:	3304      	adds	r3, #4
 8000bbc:	015a      	lsls	r2, r3, #5
 8000bbe:	d411      	bmi.n	8000be4 <__aeabi_fmul+0x248>
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	0a5b      	lsrs	r3, r3, #9
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	e744      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	464a      	mov	r2, r9
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	0037      	movs	r7, r6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	e73b      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bda:	9501      	str	r5, [sp, #4]
 8000bdc:	e787      	b.n	8000aee <__aeabi_fmul+0x152>
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	e736      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000be4:	2201      	movs	r2, #1
 8000be6:	2300      	movs	r3, #0
 8000be8:	e733      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	03db      	lsls	r3, r3, #15
 8000bee:	4323      	orrs	r3, r4
 8000bf0:	025b      	lsls	r3, r3, #9
 8000bf2:	0a5b      	lsrs	r3, r3, #9
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	e72c      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bf8:	080065b8 	.word	0x080065b8
 8000bfc:	f7ffffff 	.word	0xf7ffffff

08000c00 <__aeabi_fsub>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	4647      	mov	r7, r8
 8000c04:	46ce      	mov	lr, r9
 8000c06:	0044      	lsls	r4, r0, #1
 8000c08:	0fc2      	lsrs	r2, r0, #31
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	0247      	lsls	r7, r0, #9
 8000c0e:	0248      	lsls	r0, r1, #9
 8000c10:	0a40      	lsrs	r0, r0, #9
 8000c12:	4684      	mov	ip, r0
 8000c14:	4666      	mov	r6, ip
 8000c16:	0048      	lsls	r0, r1, #1
 8000c18:	0a7f      	lsrs	r7, r7, #9
 8000c1a:	0e24      	lsrs	r4, r4, #24
 8000c1c:	00f6      	lsls	r6, r6, #3
 8000c1e:	0025      	movs	r5, r4
 8000c20:	4690      	mov	r8, r2
 8000c22:	00fb      	lsls	r3, r7, #3
 8000c24:	0e00      	lsrs	r0, r0, #24
 8000c26:	0fc9      	lsrs	r1, r1, #31
 8000c28:	46b1      	mov	r9, r6
 8000c2a:	28ff      	cmp	r0, #255	; 0xff
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x30>
 8000c2e:	e085      	b.n	8000d3c <__aeabi_fsub+0x13c>
 8000c30:	2601      	movs	r6, #1
 8000c32:	4071      	eors	r1, r6
 8000c34:	1a26      	subs	r6, r4, r0
 8000c36:	4291      	cmp	r1, r2
 8000c38:	d057      	beq.n	8000cea <__aeabi_fsub+0xea>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	dd43      	ble.n	8000cc6 <__aeabi_fsub+0xc6>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_fsub+0x44>
 8000c42:	e07f      	b.n	8000d44 <__aeabi_fsub+0x144>
 8000c44:	4649      	mov	r1, r9
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0x4c>
 8000c4a:	e0aa      	b.n	8000da2 <__aeabi_fsub+0x1a2>
 8000c4c:	3e01      	subs	r6, #1
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d000      	beq.n	8000c54 <__aeabi_fsub+0x54>
 8000c52:	e0f7      	b.n	8000e44 <__aeabi_fsub+0x244>
 8000c54:	1a5b      	subs	r3, r3, r1
 8000c56:	015a      	lsls	r2, r3, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x5c>
 8000c5a:	e08b      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	099c      	lsrs	r4, r3, #6
 8000c60:	0020      	movs	r0, r4
 8000c62:	f000 fa3b 	bl	80010dc <__clzsi2>
 8000c66:	3805      	subs	r0, #5
 8000c68:	4084      	lsls	r4, r0
 8000c6a:	4285      	cmp	r5, r0
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_fsub+0x70>
 8000c6e:	e0d3      	b.n	8000e18 <__aeabi_fsub+0x218>
 8000c70:	1b45      	subs	r5, r0, r5
 8000c72:	0023      	movs	r3, r4
 8000c74:	2020      	movs	r0, #32
 8000c76:	3501      	adds	r5, #1
 8000c78:	40eb      	lsrs	r3, r5
 8000c7a:	1b45      	subs	r5, r0, r5
 8000c7c:	40ac      	lsls	r4, r5
 8000c7e:	1e62      	subs	r2, r4, #1
 8000c80:	4194      	sbcs	r4, r2
 8000c82:	4323      	orrs	r3, r4
 8000c84:	2407      	movs	r4, #7
 8000c86:	2500      	movs	r5, #0
 8000c88:	401c      	ands	r4, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4641      	mov	r1, r8
 8000c8e:	400a      	ands	r2, r1
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d004      	beq.n	8000c9e <__aeabi_fsub+0x9e>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4019      	ands	r1, r3
 8000c98:	2904      	cmp	r1, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fsub+0x9e>
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	0159      	lsls	r1, r3, #5
 8000ca0:	d400      	bmi.n	8000ca4 <__aeabi_fsub+0xa4>
 8000ca2:	e080      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	b2ec      	uxtb	r4, r5
 8000ca8:	2dff      	cmp	r5, #255	; 0xff
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0xae>
 8000cac:	e0a3      	b.n	8000df6 <__aeabi_fsub+0x1f6>
 8000cae:	24ff      	movs	r4, #255	; 0xff
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	05e4      	lsls	r4, r4, #23
 8000cb6:	0a58      	lsrs	r0, r3, #9
 8000cb8:	07d2      	lsls	r2, r2, #31
 8000cba:	4320      	orrs	r0, r4
 8000cbc:	4310      	orrs	r0, r2
 8000cbe:	bc0c      	pop	{r2, r3}
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d174      	bne.n	8000db4 <__aeabi_fsub+0x1b4>
 8000cca:	1c60      	adds	r0, r4, #1
 8000ccc:	b2c0      	uxtb	r0, r0
 8000cce:	2801      	cmp	r0, #1
 8000cd0:	dc00      	bgt.n	8000cd4 <__aeabi_fsub+0xd4>
 8000cd2:	e0a7      	b.n	8000e24 <__aeabi_fsub+0x224>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	1a9c      	subs	r4, r3, r2
 8000cd8:	0162      	lsls	r2, r4, #5
 8000cda:	d500      	bpl.n	8000cde <__aeabi_fsub+0xde>
 8000cdc:	e0b6      	b.n	8000e4c <__aeabi_fsub+0x24c>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1be      	bne.n	8000c60 <__aeabi_fsub+0x60>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e7e3      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_fsub+0xf0>
 8000cee:	e085      	b.n	8000dfc <__aeabi_fsub+0x1fc>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d046      	beq.n	8000d82 <__aeabi_fsub+0x182>
 8000cf4:	2cff      	cmp	r4, #255	; 0xff
 8000cf6:	d049      	beq.n	8000d8c <__aeabi_fsub+0x18c>
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	04d2      	lsls	r2, r2, #19
 8000cfe:	4310      	orrs	r0, r2
 8000d00:	4681      	mov	r9, r0
 8000d02:	2201      	movs	r2, #1
 8000d04:	2e1b      	cmp	r6, #27
 8000d06:	dc09      	bgt.n	8000d1c <__aeabi_fsub+0x11c>
 8000d08:	2020      	movs	r0, #32
 8000d0a:	464c      	mov	r4, r9
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	4084      	lsls	r4, r0
 8000d10:	464a      	mov	r2, r9
 8000d12:	0020      	movs	r0, r4
 8000d14:	40f2      	lsrs	r2, r6
 8000d16:	1e44      	subs	r4, r0, #1
 8000d18:	41a0      	sbcs	r0, r4
 8000d1a:	4302      	orrs	r2, r0
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	015a      	lsls	r2, r3, #5
 8000d20:	d528      	bpl.n	8000d74 <__aeabi_fsub+0x174>
 8000d22:	3501      	adds	r5, #1
 8000d24:	2dff      	cmp	r5, #255	; 0xff
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x12a>
 8000d28:	e0a8      	b.n	8000e7c <__aeabi_fsub+0x27c>
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2407      	movs	r4, #7
 8000d2e:	4994      	ldr	r1, [pc, #592]	; (8000f80 <__aeabi_fsub+0x380>)
 8000d30:	401a      	ands	r2, r3
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	400b      	ands	r3, r1
 8000d36:	4313      	orrs	r3, r2
 8000d38:	401c      	ands	r4, r3
 8000d3a:	e7a6      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0x142>
 8000d40:	e778      	b.n	8000c34 <__aeabi_fsub+0x34>
 8000d42:	e775      	b.n	8000c30 <__aeabi_fsub+0x30>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d054      	beq.n	8000df2 <__aeabi_fsub+0x1f2>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	4649      	mov	r1, r9
 8000d4c:	04d2      	lsls	r2, r2, #19
 8000d4e:	4311      	orrs	r1, r2
 8000d50:	4689      	mov	r9, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	2e1b      	cmp	r6, #27
 8000d56:	dc09      	bgt.n	8000d6c <__aeabi_fsub+0x16c>
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	1b89      	subs	r1, r1, r6
 8000d5e:	4088      	lsls	r0, r1
 8000d60:	464a      	mov	r2, r9
 8000d62:	0001      	movs	r1, r0
 8000d64:	40f2      	lsrs	r2, r6
 8000d66:	1e48      	subs	r0, r1, #1
 8000d68:	4181      	sbcs	r1, r0
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	015a      	lsls	r2, r3, #5
 8000d70:	d500      	bpl.n	8000d74 <__aeabi_fsub+0x174>
 8000d72:	e773      	b.n	8000c5c <__aeabi_fsub+0x5c>
 8000d74:	2201      	movs	r2, #1
 8000d76:	4641      	mov	r1, r8
 8000d78:	400a      	ands	r2, r1
 8000d7a:	0759      	lsls	r1, r3, #29
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0x180>
 8000d7e:	e789      	b.n	8000c94 <__aeabi_fsub+0x94>
 8000d80:	e011      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000d82:	4648      	mov	r0, r9
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d158      	bne.n	8000e3a <__aeabi_fsub+0x23a>
 8000d88:	2cff      	cmp	r4, #255	; 0xff
 8000d8a:	d10c      	bne.n	8000da6 <__aeabi_fsub+0x1a6>
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_fsub+0x194>
 8000d92:	e78c      	b.n	8000cae <__aeabi_fsub+0xae>
 8000d94:	2080      	movs	r0, #128	; 0x80
 8000d96:	03c0      	lsls	r0, r0, #15
 8000d98:	4303      	orrs	r3, r0
 8000d9a:	025b      	lsls	r3, r3, #9
 8000d9c:	0a5b      	lsrs	r3, r3, #9
 8000d9e:	24ff      	movs	r4, #255	; 0xff
 8000da0:	e787      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000da2:	2cff      	cmp	r4, #255	; 0xff
 8000da4:	d025      	beq.n	8000df2 <__aeabi_fsub+0x1f2>
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d0f0      	beq.n	8000d8e <__aeabi_fsub+0x18e>
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	b2ec      	uxtb	r4, r5
 8000db2:	e77e      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d04d      	beq.n	8000e54 <__aeabi_fsub+0x254>
 8000db8:	28ff      	cmp	r0, #255	; 0xff
 8000dba:	d018      	beq.n	8000dee <__aeabi_fsub+0x1ee>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	04e4      	lsls	r4, r4, #19
 8000dc0:	4272      	negs	r2, r6
 8000dc2:	4323      	orrs	r3, r4
 8000dc4:	2a1b      	cmp	r2, #27
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_fsub+0x1ca>
 8000dc8:	e0c4      	b.n	8000f54 <__aeabi_fsub+0x354>
 8000dca:	001c      	movs	r4, r3
 8000dcc:	2520      	movs	r5, #32
 8000dce:	40d4      	lsrs	r4, r2
 8000dd0:	1aaa      	subs	r2, r5, r2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	4193      	sbcs	r3, r2
 8000dd8:	4323      	orrs	r3, r4
 8000dda:	464a      	mov	r2, r9
 8000ddc:	0005      	movs	r5, r0
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4688      	mov	r8, r1
 8000de2:	e738      	b.n	8000c56 <__aeabi_fsub+0x56>
 8000de4:	1c72      	adds	r2, r6, #1
 8000de6:	d0f8      	beq.n	8000dda <__aeabi_fsub+0x1da>
 8000de8:	43f2      	mvns	r2, r6
 8000dea:	28ff      	cmp	r0, #255	; 0xff
 8000dec:	d1ea      	bne.n	8000dc4 <__aeabi_fsub+0x1c4>
 8000dee:	000a      	movs	r2, r1
 8000df0:	464b      	mov	r3, r9
 8000df2:	25ff      	movs	r5, #255	; 0xff
 8000df4:	e7d7      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000df6:	019b      	lsls	r3, r3, #6
 8000df8:	0a5b      	lsrs	r3, r3, #9
 8000dfa:	e75a      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d141      	bne.n	8000e84 <__aeabi_fsub+0x284>
 8000e00:	1c65      	adds	r5, r4, #1
 8000e02:	b2e9      	uxtb	r1, r5
 8000e04:	2901      	cmp	r1, #1
 8000e06:	dd45      	ble.n	8000e94 <__aeabi_fsub+0x294>
 8000e08:	2dff      	cmp	r5, #255	; 0xff
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x20e>
 8000e0c:	e74f      	b.n	8000cae <__aeabi_fsub+0xae>
 8000e0e:	2407      	movs	r4, #7
 8000e10:	444b      	add	r3, r9
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	401c      	ands	r4, r3
 8000e16:	e738      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000e18:	2207      	movs	r2, #7
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <__aeabi_fsub+0x384>)
 8000e1c:	1a2d      	subs	r5, r5, r0
 8000e1e:	4023      	ands	r3, r4
 8000e20:	4014      	ands	r4, r2
 8000e22:	e732      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d11d      	bne.n	8000e64 <__aeabi_fsub+0x264>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d17a      	bne.n	8000f22 <__aeabi_fsub+0x322>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x234>
 8000e32:	e091      	b.n	8000f58 <__aeabi_fsub+0x358>
 8000e34:	000a      	movs	r2, r1
 8000e36:	2500      	movs	r5, #0
 8000e38:	e7b5      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e3a:	3e01      	subs	r6, #1
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d119      	bne.n	8000e74 <__aeabi_fsub+0x274>
 8000e40:	444b      	add	r3, r9
 8000e42:	e76c      	b.n	8000d1e <__aeabi_fsub+0x11e>
 8000e44:	2cff      	cmp	r4, #255	; 0xff
 8000e46:	d184      	bne.n	8000d52 <__aeabi_fsub+0x152>
 8000e48:	25ff      	movs	r5, #255	; 0xff
 8000e4a:	e7ac      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e4c:	464a      	mov	r2, r9
 8000e4e:	4688      	mov	r8, r1
 8000e50:	1ad4      	subs	r4, r2, r3
 8000e52:	e705      	b.n	8000c60 <__aeabi_fsub+0x60>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1c5      	bne.n	8000de4 <__aeabi_fsub+0x1e4>
 8000e58:	000a      	movs	r2, r1
 8000e5a:	28ff      	cmp	r0, #255	; 0xff
 8000e5c:	d0c8      	beq.n	8000df0 <__aeabi_fsub+0x1f0>
 8000e5e:	0005      	movs	r5, r0
 8000e60:	464b      	mov	r3, r9
 8000e62:	e7a0      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d149      	bne.n	8000efc <__aeabi_fsub+0x2fc>
 8000e68:	464b      	mov	r3, r9
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d077      	beq.n	8000f5e <__aeabi_fsub+0x35e>
 8000e6e:	000a      	movs	r2, r1
 8000e70:	25ff      	movs	r5, #255	; 0xff
 8000e72:	e798      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e74:	2cff      	cmp	r4, #255	; 0xff
 8000e76:	d000      	beq.n	8000e7a <__aeabi_fsub+0x27a>
 8000e78:	e743      	b.n	8000d02 <__aeabi_fsub+0x102>
 8000e7a:	e787      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	24ff      	movs	r4, #255	; 0xff
 8000e80:	2300      	movs	r3, #0
 8000e82:	e716      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d115      	bne.n	8000eb4 <__aeabi_fsub+0x2b4>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d157      	bne.n	8000f3c <__aeabi_fsub+0x33c>
 8000e8c:	28ff      	cmp	r0, #255	; 0xff
 8000e8e:	d1e6      	bne.n	8000e5e <__aeabi_fsub+0x25e>
 8000e90:	464b      	mov	r3, r9
 8000e92:	e77b      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d120      	bne.n	8000eda <__aeabi_fsub+0x2da>
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d057      	beq.n	8000f4c <__aeabi_fsub+0x34c>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d053      	beq.n	8000f4a <__aeabi_fsub+0x34a>
 8000ea2:	444b      	add	r3, r9
 8000ea4:	015a      	lsls	r2, r3, #5
 8000ea6:	d568      	bpl.n	8000f7a <__aeabi_fsub+0x37a>
 8000ea8:	2407      	movs	r4, #7
 8000eaa:	4a36      	ldr	r2, [pc, #216]	; (8000f84 <__aeabi_fsub+0x384>)
 8000eac:	401c      	ands	r4, r3
 8000eae:	2501      	movs	r5, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	e6ea      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000eb4:	28ff      	cmp	r0, #255	; 0xff
 8000eb6:	d0eb      	beq.n	8000e90 <__aeabi_fsub+0x290>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	04d2      	lsls	r2, r2, #19
 8000ebc:	4276      	negs	r6, r6
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	2e1b      	cmp	r6, #27
 8000ec2:	dc53      	bgt.n	8000f6c <__aeabi_fsub+0x36c>
 8000ec4:	2520      	movs	r5, #32
 8000ec6:	1bad      	subs	r5, r5, r6
 8000ec8:	001a      	movs	r2, r3
 8000eca:	40ab      	lsls	r3, r5
 8000ecc:	40f2      	lsrs	r2, r6
 8000ece:	1e5c      	subs	r4, r3, #1
 8000ed0:	41a3      	sbcs	r3, r4
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	444b      	add	r3, r9
 8000ed6:	0005      	movs	r5, r0
 8000ed8:	e721      	b.n	8000d1e <__aeabi_fsub+0x11e>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0d8      	beq.n	8000e90 <__aeabi_fsub+0x290>
 8000ede:	4649      	mov	r1, r9
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x2e6>
 8000ee4:	e752      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	03c9      	lsls	r1, r1, #15
 8000eea:	420f      	tst	r7, r1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x2f0>
 8000eee:	e74d      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	4208      	tst	r0, r1
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_fsub+0x2f8>
 8000ef6:	e749      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	e747      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000efc:	4648      	mov	r0, r9
 8000efe:	25ff      	movs	r5, #255	; 0xff
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x306>
 8000f04:	e74f      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	03d2      	lsls	r2, r2, #15
 8000f0a:	4217      	tst	r7, r2
 8000f0c:	d004      	beq.n	8000f18 <__aeabi_fsub+0x318>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	4210      	tst	r0, r2
 8000f12:	d101      	bne.n	8000f18 <__aeabi_fsub+0x318>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4688      	mov	r8, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	25ff      	movs	r5, #255	; 0xff
 8000f1e:	400a      	ands	r2, r1
 8000f20:	e741      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f22:	4648      	mov	r0, r9
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d01f      	beq.n	8000f68 <__aeabi_fsub+0x368>
 8000f28:	1a1a      	subs	r2, r3, r0
 8000f2a:	0150      	lsls	r0, r2, #5
 8000f2c:	d520      	bpl.n	8000f70 <__aeabi_fsub+0x370>
 8000f2e:	464a      	mov	r2, r9
 8000f30:	2407      	movs	r4, #7
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	401c      	ands	r4, r3
 8000f36:	4688      	mov	r8, r1
 8000f38:	2500      	movs	r5, #0
 8000f3a:	e6a6      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000f3c:	1c74      	adds	r4, r6, #1
 8000f3e:	d0c9      	beq.n	8000ed4 <__aeabi_fsub+0x2d4>
 8000f40:	43f6      	mvns	r6, r6
 8000f42:	28ff      	cmp	r0, #255	; 0xff
 8000f44:	d1bc      	bne.n	8000ec0 <__aeabi_fsub+0x2c0>
 8000f46:	464b      	mov	r3, r9
 8000f48:	e720      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	464b      	mov	r3, r9
 8000f4e:	2500      	movs	r5, #0
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	e72b      	b.n	8000dac <__aeabi_fsub+0x1ac>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e740      	b.n	8000dda <__aeabi_fsub+0x1da>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e6a9      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	2200      	movs	r2, #0
 8000f62:	03db      	lsls	r3, r3, #15
 8000f64:	24ff      	movs	r4, #255	; 0xff
 8000f66:	e6a4      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000f68:	2500      	movs	r5, #0
 8000f6a:	e71c      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e7b1      	b.n	8000ed4 <__aeabi_fsub+0x2d4>
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	d0f1      	beq.n	8000f58 <__aeabi_fsub+0x358>
 8000f74:	0013      	movs	r3, r2
 8000f76:	2500      	movs	r5, #0
 8000f78:	e6fc      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e6fa      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7dffffff 	.word	0x7dffffff
 8000f84:	fbffffff 	.word	0xfbffffff

08000f88 <__aeabi_f2iz>:
 8000f88:	0241      	lsls	r1, r0, #9
 8000f8a:	0042      	lsls	r2, r0, #1
 8000f8c:	0fc3      	lsrs	r3, r0, #31
 8000f8e:	0a49      	lsrs	r1, r1, #9
 8000f90:	0e12      	lsrs	r2, r2, #24
 8000f92:	2000      	movs	r0, #0
 8000f94:	2a7e      	cmp	r2, #126	; 0x7e
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000f98:	2a9d      	cmp	r2, #157	; 0x9d
 8000f9a:	d80c      	bhi.n	8000fb6 <__aeabi_f2iz+0x2e>
 8000f9c:	2080      	movs	r0, #128	; 0x80
 8000f9e:	0400      	lsls	r0, r0, #16
 8000fa0:	4301      	orrs	r1, r0
 8000fa2:	2a95      	cmp	r2, #149	; 0x95
 8000fa4:	dc0a      	bgt.n	8000fbc <__aeabi_f2iz+0x34>
 8000fa6:	2096      	movs	r0, #150	; 0x96
 8000fa8:	1a82      	subs	r2, r0, r2
 8000faa:	40d1      	lsrs	r1, r2
 8000fac:	4248      	negs	r0, r1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000fb2:	0008      	movs	r0, r1
 8000fb4:	4770      	bx	lr
 8000fb6:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <__aeabi_f2iz+0x3c>)
 8000fb8:	1898      	adds	r0, r3, r2
 8000fba:	e7fb      	b.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000fbc:	3a96      	subs	r2, #150	; 0x96
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	e7f4      	b.n	8000fac <__aeabi_f2iz+0x24>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	7fffffff 	.word	0x7fffffff

08000fc8 <__aeabi_i2f>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d03d      	beq.n	800104a <__aeabi_i2f+0x82>
 8000fce:	17c3      	asrs	r3, r0, #31
 8000fd0:	18c5      	adds	r5, r0, r3
 8000fd2:	405d      	eors	r5, r3
 8000fd4:	0fc4      	lsrs	r4, r0, #31
 8000fd6:	0028      	movs	r0, r5
 8000fd8:	f000 f880 	bl	80010dc <__clzsi2>
 8000fdc:	229e      	movs	r2, #158	; 0x9e
 8000fde:	1a12      	subs	r2, r2, r0
 8000fe0:	2a96      	cmp	r2, #150	; 0x96
 8000fe2:	dc07      	bgt.n	8000ff4 <__aeabi_i2f+0x2c>
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	2808      	cmp	r0, #8
 8000fe8:	dd33      	ble.n	8001052 <__aeabi_i2f+0x8a>
 8000fea:	3808      	subs	r0, #8
 8000fec:	4085      	lsls	r5, r0
 8000fee:	0268      	lsls	r0, r5, #9
 8000ff0:	0a40      	lsrs	r0, r0, #9
 8000ff2:	e023      	b.n	800103c <__aeabi_i2f+0x74>
 8000ff4:	2a99      	cmp	r2, #153	; 0x99
 8000ff6:	dd0b      	ble.n	8001010 <__aeabi_i2f+0x48>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	0029      	movs	r1, r5
 8000ffc:	1a1b      	subs	r3, r3, r0
 8000ffe:	40d9      	lsrs	r1, r3
 8001000:	0003      	movs	r3, r0
 8001002:	331b      	adds	r3, #27
 8001004:	409d      	lsls	r5, r3
 8001006:	002b      	movs	r3, r5
 8001008:	1e5d      	subs	r5, r3, #1
 800100a:	41ab      	sbcs	r3, r5
 800100c:	4319      	orrs	r1, r3
 800100e:	000d      	movs	r5, r1
 8001010:	2805      	cmp	r0, #5
 8001012:	dd01      	ble.n	8001018 <__aeabi_i2f+0x50>
 8001014:	1f43      	subs	r3, r0, #5
 8001016:	409d      	lsls	r5, r3
 8001018:	002b      	movs	r3, r5
 800101a:	490f      	ldr	r1, [pc, #60]	; (8001058 <__aeabi_i2f+0x90>)
 800101c:	400b      	ands	r3, r1
 800101e:	076e      	lsls	r6, r5, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_i2f+0x6e>
 8001022:	260f      	movs	r6, #15
 8001024:	4035      	ands	r5, r6
 8001026:	2d04      	cmp	r5, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_i2f+0x6e>
 800102a:	3304      	adds	r3, #4
 800102c:	015d      	lsls	r5, r3, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_i2f+0x6e>
 8001030:	229f      	movs	r2, #159	; 0x9f
 8001032:	400b      	ands	r3, r1
 8001034:	1a12      	subs	r2, r2, r0
 8001036:	019b      	lsls	r3, r3, #6
 8001038:	0a58      	lsrs	r0, r3, #9
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	0240      	lsls	r0, r0, #9
 800103e:	05d2      	lsls	r2, r2, #23
 8001040:	0a40      	lsrs	r0, r0, #9
 8001042:	07e4      	lsls	r4, r4, #31
 8001044:	4310      	orrs	r0, r2
 8001046:	4320      	orrs	r0, r4
 8001048:	bd70      	pop	{r4, r5, r6, pc}
 800104a:	2400      	movs	r4, #0
 800104c:	2200      	movs	r2, #0
 800104e:	2000      	movs	r0, #0
 8001050:	e7f4      	b.n	800103c <__aeabi_i2f+0x74>
 8001052:	0268      	lsls	r0, r5, #9
 8001054:	0a40      	lsrs	r0, r0, #9
 8001056:	e7f1      	b.n	800103c <__aeabi_i2f+0x74>
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_ui2f>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	1e04      	subs	r4, r0, #0
 8001060:	d034      	beq.n	80010cc <__aeabi_ui2f+0x70>
 8001062:	f000 f83b 	bl	80010dc <__clzsi2>
 8001066:	229e      	movs	r2, #158	; 0x9e
 8001068:	1a12      	subs	r2, r2, r0
 800106a:	2a96      	cmp	r2, #150	; 0x96
 800106c:	dc07      	bgt.n	800107e <__aeabi_ui2f+0x22>
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	2808      	cmp	r0, #8
 8001072:	dd2e      	ble.n	80010d2 <__aeabi_ui2f+0x76>
 8001074:	3808      	subs	r0, #8
 8001076:	4084      	lsls	r4, r0
 8001078:	0260      	lsls	r0, r4, #9
 800107a:	0a40      	lsrs	r0, r0, #9
 800107c:	e021      	b.n	80010c2 <__aeabi_ui2f+0x66>
 800107e:	2a99      	cmp	r2, #153	; 0x99
 8001080:	dd09      	ble.n	8001096 <__aeabi_ui2f+0x3a>
 8001082:	0003      	movs	r3, r0
 8001084:	0021      	movs	r1, r4
 8001086:	331b      	adds	r3, #27
 8001088:	4099      	lsls	r1, r3
 800108a:	1e4b      	subs	r3, r1, #1
 800108c:	4199      	sbcs	r1, r3
 800108e:	2305      	movs	r3, #5
 8001090:	1a1b      	subs	r3, r3, r0
 8001092:	40dc      	lsrs	r4, r3
 8001094:	430c      	orrs	r4, r1
 8001096:	2805      	cmp	r0, #5
 8001098:	dd01      	ble.n	800109e <__aeabi_ui2f+0x42>
 800109a:	1f43      	subs	r3, r0, #5
 800109c:	409c      	lsls	r4, r3
 800109e:	0023      	movs	r3, r4
 80010a0:	490d      	ldr	r1, [pc, #52]	; (80010d8 <__aeabi_ui2f+0x7c>)
 80010a2:	400b      	ands	r3, r1
 80010a4:	0765      	lsls	r5, r4, #29
 80010a6:	d009      	beq.n	80010bc <__aeabi_ui2f+0x60>
 80010a8:	250f      	movs	r5, #15
 80010aa:	402c      	ands	r4, r5
 80010ac:	2c04      	cmp	r4, #4
 80010ae:	d005      	beq.n	80010bc <__aeabi_ui2f+0x60>
 80010b0:	3304      	adds	r3, #4
 80010b2:	015c      	lsls	r4, r3, #5
 80010b4:	d502      	bpl.n	80010bc <__aeabi_ui2f+0x60>
 80010b6:	229f      	movs	r2, #159	; 0x9f
 80010b8:	400b      	ands	r3, r1
 80010ba:	1a12      	subs	r2, r2, r0
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	0a58      	lsrs	r0, r3, #9
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	0240      	lsls	r0, r0, #9
 80010c4:	05d2      	lsls	r2, r2, #23
 80010c6:	0a40      	lsrs	r0, r0, #9
 80010c8:	4310      	orrs	r0, r2
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	2200      	movs	r2, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	e7f7      	b.n	80010c2 <__aeabi_ui2f+0x66>
 80010d2:	0260      	lsls	r0, r4, #9
 80010d4:	0a40      	lsrs	r0, r0, #9
 80010d6:	e7f4      	b.n	80010c2 <__aeabi_ui2f+0x66>
 80010d8:	fbffffff 	.word	0xfbffffff

080010dc <__clzsi2>:
 80010dc:	211c      	movs	r1, #28
 80010de:	2301      	movs	r3, #1
 80010e0:	041b      	lsls	r3, r3, #16
 80010e2:	4298      	cmp	r0, r3
 80010e4:	d301      	bcc.n	80010ea <__clzsi2+0xe>
 80010e6:	0c00      	lsrs	r0, r0, #16
 80010e8:	3910      	subs	r1, #16
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	4298      	cmp	r0, r3
 80010ee:	d301      	bcc.n	80010f4 <__clzsi2+0x18>
 80010f0:	0a00      	lsrs	r0, r0, #8
 80010f2:	3908      	subs	r1, #8
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d301      	bcc.n	80010fe <__clzsi2+0x22>
 80010fa:	0900      	lsrs	r0, r0, #4
 80010fc:	3904      	subs	r1, #4
 80010fe:	a202      	add	r2, pc, #8	; (adr r2, 8001108 <__clzsi2+0x2c>)
 8001100:	5c10      	ldrb	r0, [r2, r0]
 8001102:	1840      	adds	r0, r0, r1
 8001104:	4770      	bx	lr
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	02020304 	.word	0x02020304
 800110c:	01010101 	.word	0x01010101
	...

08001118 <__clzdi2>:
 8001118:	b510      	push	{r4, lr}
 800111a:	2900      	cmp	r1, #0
 800111c:	d103      	bne.n	8001126 <__clzdi2+0xe>
 800111e:	f7ff ffdd 	bl	80010dc <__clzsi2>
 8001122:	3020      	adds	r0, #32
 8001124:	e002      	b.n	800112c <__clzdi2+0x14>
 8001126:	1c08      	adds	r0, r1, #0
 8001128:	f7ff ffd8 	bl	80010dc <__clzsi2>
 800112c:	bd10      	pop	{r4, pc}
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <pi_controller>:




uint16_t pi_controller(uint8_t process_variable)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]

	static float error_integral = 0;
	uint16_t bias = min_pwm_val;
 800113c:	230c      	movs	r3, #12
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <pi_controller+0x15c>)
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	801a      	strh	r2, [r3, #0]
	float error = setpoint_humidity - process_variable;
 8001146:	4b52      	ldr	r3, [pc, #328]	; (8001290 <pi_controller+0x160>)
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff3a 	bl	8000fc8 <__aeabi_i2f>
 8001154:	1c03      	adds	r3, r0, #0
 8001156:	1c19      	adds	r1, r3, #0
 8001158:	1c20      	adds	r0, r4, #0
 800115a:	f7ff fd51 	bl	8000c00 <__aeabi_fsub>
 800115e:	1c03      	adds	r3, r0, #0
 8001160:	60bb      	str	r3, [r7, #8]
	error_integral += error * pi_param.dt;
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <pi_controller+0x164>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ff2e 	bl	8000fc8 <__aeabi_i2f>
 800116c:	1c03      	adds	r3, r0, #0
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	1c18      	adds	r0, r3, #0
 8001172:	f7ff fc13 	bl	800099c <__aeabi_fmul>
 8001176:	1c03      	adds	r3, r0, #0
 8001178:	1c1a      	adds	r2, r3, #0
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <pi_controller+0x168>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1c19      	adds	r1, r3, #0
 8001180:	1c10      	adds	r0, r2, #0
 8001182:	f7ff f9ab 	bl	80004dc <__aeabi_fadd>
 8001186:	1c03      	adds	r3, r0, #0
 8001188:	1c1a      	adds	r2, r3, #0
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <pi_controller+0x168>)
 800118c:	601a      	str	r2, [r3, #0]

	//Integralfehler begrenzen (Anti-Windup)
	if(error_integral > max_error_integral){
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <pi_controller+0x16c>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff ff18 	bl	8000fc8 <__aeabi_i2f>
 8001198:	1c02      	adds	r2, r0, #0
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <pi_controller+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c19      	adds	r1, r3, #0
 80011a0:	1c10      	adds	r0, r2, #0
 80011a2:	f7ff f84f 	bl	8000244 <__aeabi_fcmplt>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d008      	beq.n	80011bc <pi_controller+0x8c>
		error_integral = max_error_integral;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <pi_controller+0x16c>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff54 	bl	800105c <__aeabi_ui2f>
 80011b4:	1c02      	adds	r2, r0, #0
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <pi_controller+0x168>)
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e015      	b.n	80011e8 <pi_controller+0xb8>
	}
	else if(error_integral < min_error_integral ){
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <pi_controller+0x170>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff01 	bl	8000fc8 <__aeabi_i2f>
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <pi_controller+0x168>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c19      	adds	r1, r3, #0
 80011ce:	1c10      	adds	r0, r2, #0
 80011d0:	f7ff f84c 	bl	800026c <__aeabi_fcmpgt>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d007      	beq.n	80011e8 <pi_controller+0xb8>
		error_integral = min_error_integral;
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <pi_controller+0x170>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff3d 	bl	800105c <__aeabi_ui2f>
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <pi_controller+0x168>)
 80011e6:	601a      	str	r2, [r3, #0]
	}

	uint16_t pi_output = ((pi_param.kp * error) + (pi_param.ki * error_integral)) * (-1);
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <pi_controller+0x164>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff feeb 	bl	8000fc8 <__aeabi_i2f>
 80011f2:	1c03      	adds	r3, r0, #0
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	1c18      	adds	r0, r3, #0
 80011f8:	f7ff fbd0 	bl	800099c <__aeabi_fmul>
 80011fc:	1c03      	adds	r3, r0, #0
 80011fe:	1c1c      	adds	r4, r3, #0
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <pi_controller+0x164>)
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fedf 	bl	8000fc8 <__aeabi_i2f>
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <pi_controller+0x168>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c19      	adds	r1, r3, #0
 8001212:	1c10      	adds	r0, r2, #0
 8001214:	f7ff fbc2 	bl	800099c <__aeabi_fmul>
 8001218:	1c03      	adds	r3, r0, #0
 800121a:	1c19      	adds	r1, r3, #0
 800121c:	1c20      	adds	r0, r4, #0
 800121e:	f7ff f95d 	bl	80004dc <__aeabi_fadd>
 8001222:	1c03      	adds	r3, r0, #0
 8001224:	1c1a      	adds	r2, r3, #0
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	061b      	lsls	r3, r3, #24
 800122a:	4053      	eors	r3, r2
 800122c:	200e      	movs	r0, #14
 800122e:	0005      	movs	r5, r0
 8001230:	183c      	adds	r4, r7, r0
 8001232:	1c18      	adds	r0, r3, #0
 8001234:	f7ff f878 	bl	8000328 <__aeabi_f2uiz>
 8001238:	0003      	movs	r3, r0
 800123a:	8023      	strh	r3, [r4, #0]
	pi_output += bias;
 800123c:	0028      	movs	r0, r5
 800123e:	183b      	adds	r3, r7, r0
 8001240:	1839      	adds	r1, r7, r0
 8001242:	220c      	movs	r2, #12
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	8809      	ldrh	r1, [r1, #0]
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	188a      	adds	r2, r1, r2
 800124c:	801a      	strh	r2, [r3, #0]
	//Stellgröße (PWM) begrenzen
	if(pi_output > htim2.Init.Period){
 800124e:	183b      	adds	r3, r7, r0
 8001250:	881a      	ldrh	r2, [r3, #0]
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <pi_controller+0x174>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	429a      	cmp	r2, r3
 8001258:	d905      	bls.n	8001266 <pi_controller+0x136>
		pi_output = htim2.Init.Period;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <pi_controller+0x174>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	230e      	movs	r3, #14
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	e00b      	b.n	800127e <pi_controller+0x14e>
	}
	else if(pi_output < min_pwm_val){
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <pi_controller+0x15c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	220e      	movs	r2, #14
 800126c:	18ba      	adds	r2, r7, r2
 800126e:	8812      	ldrh	r2, [r2, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d204      	bcs.n	800127e <pi_controller+0x14e>
		pi_output = min_pwm_val;
 8001274:	230e      	movs	r3, #14
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <pi_controller+0x15c>)
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	801a      	strh	r2, [r3, #0]
	}
	return pi_output;
 800127e:	230e      	movs	r3, #14
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	881b      	ldrh	r3, [r3, #0]
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bdb0      	pop	{r4, r5, r7, pc}
 800128c:	080065fa 	.word	0x080065fa
 8001290:	080065fc 	.word	0x080065fc
 8001294:	20000000 	.word	0x20000000
 8001298:	20000094 	.word	0x20000094
 800129c:	08006600 	.word	0x08006600
 80012a0:	08006602 	.word	0x08006602
 80012a4:	20000168 	.word	0x20000168

080012a8 <adjust_pwm_value>:



void adjust_pwm_value(uint16_t new_duty){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_duty);
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <adjust_pwm_value+0x34>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1dba      	adds	r2, r7, #6
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, new_duty);
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <adjust_pwm_value+0x34>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1dba      	adds	r2, r7, #6
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, new_duty);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <adjust_pwm_value+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1dba      	adds	r2, r7, #6
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000168 	.word	0x20000168

080012e0 <start_timers>:

void start_timers(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <start_timers+0x6c>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f002 ffcf 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <start_timers+0x6c>)
 80012f0:	2104      	movs	r1, #4
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 ffca 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <start_timers+0x6c>)
 80012fa:	2108      	movs	r1, #8
 80012fc:	0018      	movs	r0, r3
 80012fe:	f002 ffc5 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <start_timers+0x6c>)
 8001304:	210c      	movs	r1, #12
 8001306:	0018      	movs	r0, r3
 8001308:	f002 ffc0 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <start_timers+0x70>)
 800130e:	2100      	movs	r1, #0
 8001310:	0018      	movs	r0, r3
 8001312:	f002 ffbb 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_2);
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <start_timers+0x70>)
 8001318:	2104      	movs	r1, #4
 800131a:	0018      	movs	r0, r3
 800131c:	f002 ffb6 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <start_timers+0x74>)
 8001322:	2100      	movs	r1, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 ffb1 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <start_timers+0x74>)
 800132c:	2104      	movs	r1, #4
 800132e:	0018      	movs	r0, r3
 8001330:	f002 ffac 	bl	800428c <HAL_TIM_PWM_Start>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <start_timers+0x78>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	001a      	movs	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <start_timers+0x7c>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f001 fd5a 	bl	8002df8 <HAL_LPTIM_Counter_Start_IT>

}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000168 	.word	0x20000168
 8001350:	200001a8 	.word	0x200001a8
 8001354:	20000128 	.word	0x20000128
 8001358:	080065f8 	.word	0x080065f8
 800135c:	200000f4 	.word	0x200000f4

08001360 <reset_all_pwm>:

void reset_all_pwm(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af04      	add	r7, sp, #16
	set_pwm(0, 0, 0, 0, 0, 0, 0, 0);
 8001366:	2300      	movs	r3, #0
 8001368:	9303      	str	r3, [sp, #12]
 800136a:	2300      	movs	r3, #0
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f837 	bl	80013f0 <set_pwm>
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <stop_timers>:

void stop_timers(void){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <stop_timers+0x5c>)
 800138e:	2100      	movs	r1, #0
 8001390:	0018      	movs	r0, r3
 8001392:	f003 f807 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <stop_timers+0x5c>)
 8001398:	2104      	movs	r1, #4
 800139a:	0018      	movs	r0, r3
 800139c:	f003 f802 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <stop_timers+0x5c>)
 80013a2:	2108      	movs	r1, #8
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 fffd 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <stop_timers+0x5c>)
 80013ac:	210c      	movs	r1, #12
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 fff8 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_1);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <stop_timers+0x60>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f002 fff3 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_2);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <stop_timers+0x60>)
 80013c0:	2104      	movs	r1, #4
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 ffee 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_1);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <stop_timers+0x64>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f002 ffe9 	bl	80043a4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_2);
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <stop_timers+0x64>)
 80013d4:	2104      	movs	r1, #4
 80013d6:	0018      	movs	r0, r3
 80013d8:	f002 ffe4 	bl	80043a4 <HAL_TIM_PWM_Stop>
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000168 	.word	0x20000168
 80013e8:	200001a8 	.word	0x200001a8
 80013ec:	20000128 	.word	0x20000128

080013f0 <set_pwm>:

void set_pwm(int TIM2_CH1, int TIM2_CH2, int TIM2_CH3, int TIM2_CH4, int TIM21_CH1, int TIM21_CH2, int TIM22_CH1, int TIM22_CH2){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH1);
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <set_pwm+0x58>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH2);
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <set_pwm+0x58>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH3);
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <set_pwm+0x58>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH4);
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <set_pwm+0x58>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH1);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <set_pwm+0x58>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH2);
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <set_pwm+0x58>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH1);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <set_pwm+0x58>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a3a      	ldr	r2, [r7, #32]
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH2);
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <set_pwm+0x58>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000168 	.word	0x20000168

0800144c <switch_direction>:

void switch_direction(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	reset_all_pwm();
 8001450:	f7ff ff86 	bl	8001360 <reset_all_pwm>
	HAL_Delay(1000);
 8001454:	23fa      	movs	r3, #250	; 0xfa
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	0018      	movs	r0, r3
 800145a:	f001 f90b 	bl	8002674 <HAL_Delay>
	toggle_all_gpio();
 800145e:	f000 f803 	bl	8001468 <toggle_all_gpio>

}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <toggle_all_gpio>:

void toggle_all_gpio(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	005a      	lsls	r2, r3, #1
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f001 fc17 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	011a      	lsls	r2, r3, #4
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	0011      	movs	r1, r2
 8001486:	0018      	movs	r0, r3
 8001488:	f001 fc0f 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	0011      	movs	r1, r2
 8001496:	0018      	movs	r0, r3
 8001498:	f001 fc07 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <toggle_all_gpio+0x74>)
 80014a2:	0019      	movs	r1, r3
 80014a4:	0010      	movs	r0, r2
 80014a6:	f001 fc00 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <toggle_all_gpio+0x74>)
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f001 fbf9 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <toggle_all_gpio+0x74>)
 80014be:	0019      	movs	r1, r3
 80014c0:	0010      	movs	r0, r2
 80014c2:	f001 fbf2 	bl	8002caa <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <toggle_all_gpio+0x78>)
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f001 fbeb 	bl	8002caa <HAL_GPIO_TogglePin>
	//einer fehlt wegen nucleo board
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	50000400 	.word	0x50000400
 80014e0:	50000800 	.word	0x50000800

080014e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08b      	sub	sp, #44	; 0x2c
 80014e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	2414      	movs	r4, #20
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	2314      	movs	r3, #20
 80014f2:	001a      	movs	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	f004 ff8f 	bl	8006418 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b4d      	ldr	r3, [pc, #308]	; (8001630 <MX_GPIO_Init+0x14c>)
 80014fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fe:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001500:	2104      	movs	r1, #4
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2204      	movs	r2, #4
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4b46      	ldr	r3, [pc, #280]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	430a      	orrs	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <MX_GPIO_Init+0x14c>)
 800152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800152e:	4b40      	ldr	r3, [pc, #256]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001530:	2101      	movs	r1, #1
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	2201      	movs	r2, #1
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001546:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001548:	2102      	movs	r1, #2
 800154a:	430a      	orrs	r2, r1
 800154c:	62da      	str	r2, [r3, #44]	; 0x2c
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	2202      	movs	r2, #2
 8001554:	4013      	ands	r3, r2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SEL5_Pin|SEL4_Pin|SEL3_Pin, GPIO_PIN_RESET);
 800155a:	23c9      	movs	r3, #201	; 0xc9
 800155c:	0159      	lsls	r1, r3, #5
 800155e:	23a0      	movs	r3, #160	; 0xa0
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	2200      	movs	r2, #0
 8001564:	0018      	movs	r0, r3
 8001566:	f001 fb83 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SEL8_Pin|SEL2_Pin|SEL1_Pin, GPIO_PIN_RESET);
 800156a:	4932      	ldr	r1, [pc, #200]	; (8001634 <MX_GPIO_Init+0x150>)
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <MX_GPIO_Init+0x154>)
 800156e:	2200      	movs	r2, #0
 8001570:	0018      	movs	r0, r3
 8001572:	f001 fb7d 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL7_GPIO_Port, SEL7_Pin, GPIO_PIN_RESET);
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4830      	ldr	r0, [pc, #192]	; (800163c <MX_GPIO_Init+0x158>)
 800157c:	2200      	movs	r2, #0
 800157e:	0019      	movs	r1, r3
 8001580:	f001 fb76 	bl	8002c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001584:	0021      	movs	r1, r4
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0192      	lsls	r2, r2, #6
 800158c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2284      	movs	r2, #132	; 0x84
 8001592:	0392      	lsls	r2, r2, #14
 8001594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159c:	000c      	movs	r4, r1
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <MX_GPIO_Init+0x158>)
 80015a2:	0019      	movs	r1, r3
 80015a4:	0010      	movs	r0, r2
 80015a6:	f001 f9ed 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SEL5_Pin|SEL4_Pin|SEL3_Pin;
 80015aa:	0021      	movs	r1, r4
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	22c9      	movs	r2, #201	; 0xc9
 80015b0:	0152      	lsls	r2, r2, #5
 80015b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	2201      	movs	r2, #1
 80015b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	187b      	adds	r3, r7, r1
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	187b      	adds	r3, r7, r1
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	000c      	movs	r4, r1
 80015c8:	187a      	adds	r2, r7, r1
 80015ca:	23a0      	movs	r3, #160	; 0xa0
 80015cc:	05db      	lsls	r3, r3, #23
 80015ce:	0011      	movs	r1, r2
 80015d0:	0018      	movs	r0, r3
 80015d2:	f001 f9d7 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SEL8_Pin|SEL2_Pin|SEL1_Pin;
 80015d6:	0021      	movs	r1, r4
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <MX_GPIO_Init+0x150>)
 80015dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2201      	movs	r2, #1
 80015e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	187b      	adds	r3, r7, r1
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	000c      	movs	r4, r1
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <MX_GPIO_Init+0x154>)
 80015f6:	0019      	movs	r1, r3
 80015f8:	0010      	movs	r0, r2
 80015fa:	f001 f9c3 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEL7_Pin;
 80015fe:	0021      	movs	r1, r4
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2201      	movs	r2, #1
 800160c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SEL7_GPIO_Port, &GPIO_InitStruct);
 800161a:	187b      	adds	r3, r7, r1
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <MX_GPIO_Init+0x158>)
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f001 f9af 	bl	8002984 <HAL_GPIO_Init>

}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b00b      	add	sp, #44	; 0x2c
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	00000b04 	.word	0x00000b04
 8001638:	50000400 	.word	0x50000400
 800163c:	50000800 	.word	0x50000800

08001640 <is_knx_controlbyte>:



uint8_t listen_group_address_counter = 0;

bool is_knx_controlbyte(uint8_t byte){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	701a      	strb	r2, [r3, #0]
  return ((byte | 0b00101100) == 0b10111100 ); // Ignore repeat flag and priority flag
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	222c      	movs	r2, #44	; 0x2c
 8001652:	4313      	orrs	r3, r2
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3bbc      	subs	r3, #188	; 0xbc
 8001658:	425a      	negs	r2, r3
 800165a:	4153      	adcs	r3, r2
 800165c:	b2db      	uxtb	r3, r3
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}

08001666 <get_payload_length>:

uint8_t get_payload_length(uint8_t *address_buffer){
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  uint8_t length = (address_buffer[4] & 0b00001111) + 1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	220f      	movs	r2, #15
 8001676:	4013      	ands	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	210f      	movs	r1, #15
 800167c:	187b      	adds	r3, r7, r1
 800167e:	3201      	adds	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
  return length;
 8001682:	187b      	adds	r3, r7, r1
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}

0800168e <is_target_group>:

bool is_target_group(uint8_t *address_buffer){
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return address_buffer[4] & 0b10000000; 	//Letztes bit von zielbyte auslesen, wenn 1 dann gruppenadresse
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	001a      	movs	r2, r3
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	4013      	ands	r3, r2
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	4193      	sbcs	r3, r2
 80016a6:	b2db      	uxtb	r3, r3
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <get_target_maingroup>:

uint8_t get_target_maingroup(uint8_t *address_buffer){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return ((address_buffer[2] & 0b01111000) >> 3);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3302      	adds	r3, #2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	10db      	asrs	r3, r3, #3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	220f      	movs	r2, #15
 80016c4:	4013      	ands	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <get_target_middlegroup>:

uint8_t get_target_middlegroup(uint8_t *address_buffer){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  return (address_buffer[2] & 0b00000111);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3302      	adds	r3, #2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2207      	movs	r2, #7
 80016e0:	4013      	ands	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <get_target_subgroup>:

uint8_t get_target_subgroup(uint8_t *address_buffer){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return address_buffer[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	78db      	ldrb	r3, [r3, #3]
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <check_interest>:

bool check_interest(uint8_t *address_buffer){
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	uint8_t maingroup = get_target_maingroup(address_buffer);
 8001708:	230f      	movs	r3, #15
 800170a:	18fc      	adds	r4, r7, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff ffce 	bl	80016b0 <get_target_maingroup>
 8001714:	0003      	movs	r3, r0
 8001716:	7023      	strb	r3, [r4, #0]
	uint8_t middlegroup = get_target_middlegroup(address_buffer);
 8001718:	230e      	movs	r3, #14
 800171a:	18fc      	adds	r4, r7, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff ffd6 	bl	80016d0 <get_target_middlegroup>
 8001724:	0003      	movs	r3, r0
 8001726:	7023      	strb	r3, [r4, #0]
	uint8_t subgroup = get_target_subgroup(address_buffer);
 8001728:	230d      	movs	r3, #13
 800172a:	18fc      	adds	r4, r7, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ffdc 	bl	80016ec <get_target_subgroup>
 8001734:	0003      	movs	r3, r0
 8001736:	7023      	strb	r3, [r4, #0]
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0018      	movs	r0, r3
 800173c:	f7ff ffa7 	bl	800168e <is_target_group>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d00f      	beq.n	8001764 <check_interest+0x64>
 8001744:	230f      	movs	r3, #15
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	7818      	ldrb	r0, [r3, #0]
 800174a:	230e      	movs	r3, #14
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	7819      	ldrb	r1, [r3, #0]
 8001750:	230d      	movs	r3, #13
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	f000 f82c 	bl	80017b4 <is_listening_to_group_address>
 800175c:	1e03      	subs	r3, r0, #0
 800175e:	d001      	beq.n	8001764 <check_interest+0x64>
 8001760:	2201      	movs	r2, #1
 8001762:	e000      	b.n	8001766 <check_interest+0x66>
 8001764:	2200      	movs	r2, #0
 8001766:	200c      	movs	r0, #12
 8001768:	183b      	adds	r3, r7, r0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	2101      	movs	r1, #1
 8001770:	400a      	ands	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
	return interested;
 8001774:	183b      	adds	r3, r7, r0
 8001776:	781b      	ldrb	r3, [r3, #0]
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b005      	add	sp, #20
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <clear_flags>:

void clear_flags(void){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	flag_controlbyte_receive_started 	= FLAG_FALSE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <clear_flags+0x24>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	flag_address_receive_started 		= FLAG_FALSE;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <clear_flags+0x28>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
	flag_payload_receive_started 		= FLAG_FALSE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <clear_flags+0x2c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
	flag_checksum_receive_started		= FLAG_FALSE;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <clear_flags+0x30>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	20000099 	.word	0x20000099
 80017a8:	2000009a 	.word	0x2000009a
 80017ac:	2000009b 	.word	0x2000009b
 80017b0:	2000009c 	.word	0x2000009c

080017b4 <is_listening_to_group_address>:
	listen_group_addresses[listen_group_address_counter][1] = atoi(substring2);
	listen_group_addresses[listen_group_address_counter][2] = substring3;
	listen_group_address_counter++;
}

bool is_listening_to_group_address(int maingroup, int middlegroup, int subgroup){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < listen_group_address_counter; i++){
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e026      	b.n	8001814 <is_listening_to_group_address+0x60>
    if ((listen_group_addresses[i][0] == maingroup)
 80017c6:	4919      	ldr	r1, [pc, #100]	; (800182c <is_listening_to_group_address+0x78>)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	0013      	movs	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	5c5b      	ldrb	r3, [r3, r1]
 80017d2:	001a      	movs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d119      	bne.n	800180e <is_listening_to_group_address+0x5a>
         && (listen_group_addresses[i][1] == middlegroup)
 80017da:	4914      	ldr	r1, [pc, #80]	; (800182c <is_listening_to_group_address+0x78>)
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	0013      	movs	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	18cb      	adds	r3, r1, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	001a      	movs	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10d      	bne.n	800180e <is_listening_to_group_address+0x5a>
         && (listen_group_addresses[i][2] == subgroup)){
 80017f2:	490e      	ldr	r1, [pc, #56]	; (800182c <is_listening_to_group_address+0x78>)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	0013      	movs	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	189b      	adds	r3, r3, r2
 80017fc:	18cb      	adds	r3, r1, r3
 80017fe:	3302      	adds	r3, #2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	001a      	movs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <is_listening_to_group_address+0x5a>
      return true;
 800180a:	2301      	movs	r3, #1
 800180c:	e009      	b.n	8001822 <is_listening_to_group_address+0x6e>
  for (int i = 0; i < listen_group_address_counter; i++){
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <is_listening_to_group_address+0x7c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	001a      	movs	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4293      	cmp	r3, r2
 800181e:	dbd2      	blt.n	80017c6 <is_listening_to_group_address+0x12>
    }
  }
  return false;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b006      	add	sp, #24
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	200000c0 	.word	0x200000c0
 8001830:	200000a8 	.word	0x200000a8

08001834 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_LPTIM1_Init+0x48>)
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <MX_LPTIM1_Init+0x4c>)
 800183c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_LPTIM1_Init+0x48>)
 8001840:	2200      	movs	r2, #0
 8001842:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <MX_LPTIM1_Init+0x48>)
 8001846:	22e0      	movs	r2, #224	; 0xe0
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_LPTIM1_Init+0x48>)
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <MX_LPTIM1_Init+0x50>)
 8001850:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_LPTIM1_Init+0x48>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_LPTIM1_Init+0x48>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_LPTIM1_Init+0x48>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <MX_LPTIM1_Init+0x48>)
 8001866:	0018      	movs	r0, r3
 8001868:	f001 fa3a 	bl	8002ce0 <HAL_LPTIM_Init>
 800186c:	1e03      	subs	r3, r0, #0
 800186e:	d001      	beq.n	8001874 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8001870:	f000 f8ec 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	200000f4 	.word	0x200000f4
 8001880:	40007c00 	.word	0x40007c00
 8001884:	0000ffff 	.word	0x0000ffff

08001888 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_LPTIM_MspInit+0x38>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10e      	bne.n	80018b8 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_LPTIM_MspInit+0x3c>)
 800189c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_LPTIM_MspInit+0x3c>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0609      	lsls	r1, r1, #24
 80018a4:	430a      	orrs	r2, r1
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	200d      	movs	r0, #13
 80018ae:	f000 ffaf 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80018b2:	200d      	movs	r0, #13
 80018b4:	f000 ffc1 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40007c00 	.word	0x40007c00
 80018c4:	40021000 	.word	0x40021000

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f000 fe62 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f812 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f7ff fe06 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018d8:	f000 fb5c 	bl	8001f94 <MX_TIM2_Init>
  MX_TIM21_Init();
 80018dc:	f000 fbec 	bl	80020b8 <MX_TIM21_Init>
  MX_TIM22_Init();
 80018e0:	f000 fc54 	bl	800218c <MX_TIM22_Init>
  MX_LPTIM1_Init();
 80018e4:	f7ff ffa6 	bl	8001834 <MX_LPTIM1_Init>
  MX_USART2_UART_Init();
 80018e8:	f000 fdae 	bl	8002448 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  statemachine_process();
 80018ec:	f000 f8b2 	bl	8001a54 <statemachine_process>
	  extract_data();
 80018f0:	f000 faac 	bl	8001e4c <extract_data>
	  statemachine_process();
 80018f4:	e7fa      	b.n	80018ec <main+0x24>
	...

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b09d      	sub	sp, #116	; 0x74
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	2438      	movs	r4, #56	; 0x38
 8001900:	193b      	adds	r3, r7, r4
 8001902:	0018      	movs	r0, r3
 8001904:	2338      	movs	r3, #56	; 0x38
 8001906:	001a      	movs	r2, r3
 8001908:	2100      	movs	r1, #0
 800190a:	f004 fd85 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190e:	2324      	movs	r3, #36	; 0x24
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	0018      	movs	r0, r3
 8001914:	2314      	movs	r3, #20
 8001916:	001a      	movs	r2, r3
 8001918:	2100      	movs	r1, #0
 800191a:	f004 fd7d 	bl	8006418 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191e:	003b      	movs	r3, r7
 8001920:	0018      	movs	r0, r3
 8001922:	2324      	movs	r3, #36	; 0x24
 8001924:	001a      	movs	r2, r3
 8001926:	2100      	movs	r1, #0
 8001928:	f004 fd76 	bl	8006418 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <SystemClock_Config+0xec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <SystemClock_Config+0xf0>)
 8001932:	401a      	ands	r2, r3
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <SystemClock_Config+0xec>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0109      	lsls	r1, r1, #4
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800193e:	0021      	movs	r1, r4
 8001940:	187b      	adds	r3, r7, r1
 8001942:	220a      	movs	r2, #10
 8001944:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2201      	movs	r2, #1
 800194a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2210      	movs	r2, #16
 8001950:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2201      	movs	r2, #1
 8001956:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2202      	movs	r2, #2
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	02d2      	lsls	r2, r2, #11
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	03d2      	lsls	r2, r2, #15
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	187b      	adds	r3, r7, r1
 8001976:	0018      	movs	r0, r3
 8001978:	f001 fcbc 	bl	80032f4 <HAL_RCC_OscConfig>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001980:	f000 f864 	bl	8001a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001984:	2124      	movs	r1, #36	; 0x24
 8001986:	187b      	adds	r3, r7, r1
 8001988:	220f      	movs	r2, #15
 800198a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2203      	movs	r2, #3
 8001990:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001998:	187b      	adds	r3, r7, r1
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2101      	movs	r1, #1
 80019a8:	0018      	movs	r0, r3
 80019aa:	f002 f86b 	bl	8003a84 <HAL_RCC_ClockConfig>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80019b2:	f000 f84b 	bl	8001a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80019b6:	003b      	movs	r3, r7
 80019b8:	2282      	movs	r2, #130	; 0x82
 80019ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019bc:	003b      	movs	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80019c2:	003b      	movs	r3, r7
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	02d2      	lsls	r2, r2, #11
 80019c8:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ca:	003b      	movs	r3, r7
 80019cc:	0018      	movs	r0, r3
 80019ce:	f002 fa79 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80019d6:	f000 f839 	bl	8001a4c <Error_Handler>
  }
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b01d      	add	sp, #116	; 0x74
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40007000 	.word	0x40007000
 80019e8:	ffffe7ff 	.word	0xffffe7ff

080019ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

	statemachine_uart();
 80019f4:	f000 f926 	bl	8001c44 <statemachine_uart>
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	__NOP();
 8001a08:	46c0      	nop			; (mov r8, r8)
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	__NOP();
 8001a1a:	46c0      	nop			; (mov r8, r8)
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 fa58 	bl	8002ee4 <HAL_LPTIM_Counter_Stop_IT>
	flag_lptim_interrupt = FLAG_TRUE;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	200000f4 	.word	0x200000f4
 8001a48:	20000098 	.word	0x20000098

08001a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <Error_Handler+0x6>

08001a54 <statemachine_process>:

uint8_t statemachine_process_state = STANDBY_STATE;


void statemachine_process ()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	switch(statemachine_process_state)
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <statemachine_process+0x3c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d813      	bhi.n	8001a88 <statemachine_process+0x34>
 8001a60:	009a      	lsls	r2, r3, #2
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <statemachine_process+0x40>)
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	469f      	mov	pc, r3
	{

	case STANDBY_STATE:
		statemachine_standby_state();
 8001a6a:	f000 f815 	bl	8001a98 <statemachine_standby_state>
		break;
 8001a6e:	e00c      	b.n	8001a8a <statemachine_process+0x36>

	case INIT_STATE:
		statemachine_init_state();
 8001a70:	f000 f820 	bl	8001ab4 <statemachine_init_state>
		break;
 8001a74:	e009      	b.n	8001a8a <statemachine_process+0x36>

	case SET_STATE:
		statemachine_set_state();
 8001a76:	f000 f83b 	bl	8001af0 <statemachine_set_state>
		break;
 8001a7a:	e006      	b.n	8001a8a <statemachine_process+0x36>

	case STANDARD_STATE:
		statemachine_standard_state();
 8001a7c:	f000 f868 	bl	8001b50 <statemachine_standard_state>
		break;
 8001a80:	e003      	b.n	8001a8a <statemachine_process+0x36>

	case CONTROLLED_STATE:
		statemachine_controlled_state();
 8001a82:	f000 f899 	bl	8001bb8 <statemachine_controlled_state>
		break;
 8001a86:	e000      	b.n	8001a8a <statemachine_process+0x36>

	default:
		break;
 8001a88:	46c0      	nop			; (mov r8, r8)
	}
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000b0 	.word	0x200000b0
 8001a94:	08006604 	.word	0x08006604

08001a98 <statemachine_standby_state>:



void statemachine_standby_state(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	reset_all_pwm();
 8001a9c:	f7ff fc60 	bl	8001360 <reset_all_pwm>
	stop_timers();
 8001aa0:	f7ff fc72 	bl	8001388 <stop_timers>
	statemachine_process_state = INIT_STATE;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <statemachine_standby_state+0x18>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000b0 	.word	0x200000b0

08001ab4 <statemachine_init_state>:


void statemachine_init_state(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001ab8:	4909      	ldr	r1, [pc, #36]	; (8001ae0 <statemachine_init_state+0x2c>)
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <statemachine_init_state+0x30>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f003 f974 	bl	8004dac <HAL_UART_Receive_IT>
	flag_controlbyte_receive_started = FLAG_TRUE;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <statemachine_init_state+0x34>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
	start_timers();
 8001aca:	f7ff fc09 	bl	80012e0 <start_timers>
	reset_all_pwm();
 8001ace:	f7ff fc47 	bl	8001360 <reset_all_pwm>
	statemachine_process_state = SET_STATE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <statemachine_init_state+0x38>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	701a      	strb	r2, [r3, #0]
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	200000e0 	.word	0x200000e0
 8001ae4:	200001e8 	.word	0x200001e8
 8001ae8:	20000099 	.word	0x20000099
 8001aec:	200000b0 	.word	0x200000b0

08001af0 <statemachine_set_state>:


void statemachine_set_state(){
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af04      	add	r7, sp, #16
	set_pwm(min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val);
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <statemachine_set_state+0x58>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	001c      	movs	r4, r3
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <statemachine_set_state+0x58>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	001d      	movs	r5, r3
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <statemachine_set_state+0x58>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	001e      	movs	r6, r3
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <statemachine_set_state+0x58>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <statemachine_set_state+0x58>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	001a      	movs	r2, r3
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <statemachine_set_state+0x58>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	0019      	movs	r1, r3
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <statemachine_set_state+0x58>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <statemachine_set_state+0x58>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	9303      	str	r3, [sp, #12]
 8001b26:	9002      	str	r0, [sp, #8]
 8001b28:	9101      	str	r1, [sp, #4]
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0032      	movs	r2, r6
 8001b30:	0029      	movs	r1, r5
 8001b32:	0020      	movs	r0, r4
 8001b34:	f7ff fc5c 	bl	80013f0 <set_pwm>
	statemachine_process_state = STANDARD_STATE;
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <statemachine_set_state+0x5c>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b003      	add	sp, #12
 8001b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	080065fa 	.word	0x080065fa
 8001b4c:	200000b0 	.word	0x200000b0

08001b50 <statemachine_standard_state>:


void statemachine_standard_state(){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	if(humidity >= max_humidity_allowed){
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <statemachine_standard_state+0x50>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <statemachine_standard_state+0x54>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c19      	adds	r1, r3, #0
 8001b5e:	1c10      	adds	r0, r2, #0
 8001b60:	f7fe fb8e 	bl	8000280 <__aeabi_fcmpge>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d003      	beq.n	8001b70 <statemachine_standard_state+0x20>
		statemachine_process_state = CONTROLLED_STATE;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <statemachine_standard_state+0x58>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	701a      	strb	r2, [r3, #0]
		switch_direction();
		flag_lptim_interrupt = FLAG_FALSE;
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
		statemachine_process_state = SET_STATE;
	}
}
 8001b6e:	e013      	b.n	8001b98 <statemachine_standard_state+0x48>
	else if(flag_lptim_interrupt == FLAG_TRUE){
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <statemachine_standard_state+0x5c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00f      	beq.n	8001b98 <statemachine_standard_state+0x48>
		switch_direction();
 8001b78:	f7ff fc68 	bl	800144c <switch_direction>
		flag_lptim_interrupt = FLAG_FALSE;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <statemachine_standard_state+0x5c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <statemachine_standard_state+0x60>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	001a      	movs	r2, r3
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <statemachine_standard_state+0x64>)
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f001 f933 	bl	8002df8 <HAL_LPTIM_Counter_Start_IT>
		statemachine_process_state = SET_STATE;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <statemachine_standard_state+0x58>)
 8001b94:	2203      	movs	r2, #3
 8001b96:	701a      	strb	r2, [r3, #0]
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	200000ac 	.word	0x200000ac
 8001ba4:	20000124 	.word	0x20000124
 8001ba8:	200000b0 	.word	0x200000b0
 8001bac:	20000098 	.word	0x20000098
 8001bb0:	080065f8 	.word	0x080065f8
 8001bb4:	200000f4 	.word	0x200000f4

08001bb8 <statemachine_controlled_state>:


void statemachine_controlled_state(){
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0

	uint16_t new_dutycycle = pi_controller(actual_humidity);
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <statemachine_controlled_state+0x70>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	1c18      	adds	r0, r3, #0
 8001bc4:	f7fe fbb0 	bl	8000328 <__aeabi_f2uiz>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	1dbc      	adds	r4, r7, #6
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f7ff faae 	bl	8001130 <pi_controller>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	8023      	strh	r3, [r4, #0]
	adjust_pwm_value(new_dutycycle);
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fb63 	bl	80012a8 <adjust_pwm_value>
	if(flag_lptim_interrupt == FLAG_TRUE){
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <statemachine_controlled_state+0x74>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <statemachine_controlled_state+0x4c>
		switch_direction();
 8001bea:	f7ff fc2f 	bl	800144c <switch_direction>
		flag_lptim_interrupt = FLAG_FALSE;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <statemachine_controlled_state+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <statemachine_controlled_state+0x78>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <statemachine_controlled_state+0x7c>)
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 f8fa 	bl	8002df8 <HAL_LPTIM_Counter_Start_IT>

	}
	if(humidity <= max_humidity_allowed){
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <statemachine_controlled_state+0x80>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <statemachine_controlled_state+0x84>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c19      	adds	r1, r3, #0
 8001c0e:	1c10      	adds	r0, r2, #0
 8001c10:	f7fe fb22 	bl	8000258 <__aeabi_fcmple>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d100      	bne.n	8001c1a <statemachine_controlled_state+0x62>
		statemachine_process_state = STANDARD_STATE;
	}

}
 8001c18:	e002      	b.n	8001c20 <statemachine_controlled_state+0x68>
		statemachine_process_state = STANDARD_STATE;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <statemachine_controlled_state+0x88>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b003      	add	sp, #12
 8001c26:	bd90      	pop	{r4, r7, pc}
 8001c28:	200000a0 	.word	0x200000a0
 8001c2c:	20000098 	.word	0x20000098
 8001c30:	080065f8 	.word	0x080065f8
 8001c34:	200000f4 	.word	0x200000f4
 8001c38:	200000ac 	.word	0x200000ac
 8001c3c:	20000124 	.word	0x20000124
 8001c40:	200000b0 	.word	0x200000b0

08001c44 <statemachine_uart>:
uint8_t get_payload_lenght(uint8_t *buffer_knx_address);



void statemachine_uart()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	switch(statemachine_uart_state)
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <statemachine_uart+0x3c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d813      	bhi.n	8001c78 <statemachine_uart+0x34>
 8001c50:	009a      	lsls	r2, r3, #2
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <statemachine_uart+0x40>)
 8001c54:	18d3      	adds	r3, r2, r3
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	469f      	mov	pc, r3
	{

	case CONTROLBYTE_STATE:
		statemachine_controlbyte_state();
 8001c5a:	f000 f815 	bl	8001c88 <statemachine_controlbyte_state>
		break;
 8001c5e:	e00c      	b.n	8001c7a <statemachine_uart+0x36>

	case ADDRESS_STATE:
		statemachine_address_state();
 8001c60:	f000 f846 	bl	8001cf0 <statemachine_address_state>
		break;
 8001c64:	e009      	b.n	8001c7a <statemachine_uart+0x36>

	case PAYLOAD_STATE:
		statemachine_payload_state();
 8001c66:	f000 f865 	bl	8001d34 <statemachine_payload_state>
		break;
 8001c6a:	e006      	b.n	8001c7a <statemachine_uart+0x36>

	case CHECKSUM_STATE:
		statemachine_checksum_state();
 8001c6c:	f000 f89a 	bl	8001da4 <statemachine_checksum_state>
		break;
 8001c70:	e003      	b.n	8001c7a <statemachine_uart+0x36>

	case ACK_STATE:
		statemachine_ack_state();
 8001c72:	f000 f8b9 	bl	8001de8 <statemachine_ack_state>
		break;
 8001c76:	e000      	b.n	8001c7a <statemachine_uart+0x36>

	default:
		break;
 8001c78:	46c0      	nop			; (mov r8, r8)
	}
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200000b2 	.word	0x200000b2
 8001c84:	08006618 	.word	0x08006618

08001c88 <statemachine_controlbyte_state>:

void statemachine_controlbyte_state(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	//einmaliger start uart am anfang des progammes nicht vergessen
	if(flag_controlbyte_receive_started == FLAG_FALSE && flag_data_processed == FLAG_TRUE){
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <statemachine_controlbyte_state+0x54>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4053      	eors	r3, r2
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <statemachine_controlbyte_state+0x2c>
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <statemachine_controlbyte_state+0x58>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <statemachine_controlbyte_state+0x2c>
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001ca2:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <statemachine_controlbyte_state+0x5c>)
 8001ca4:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <statemachine_controlbyte_state+0x60>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f003 f87f 	bl	8004dac <HAL_UART_Receive_IT>
		flag_controlbyte_receive_started = FLAG_TRUE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <statemachine_controlbyte_state+0x54>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
	}
	//auf knx message prüfen
	if(is_knx_controlbyte(knx_controlbyte)){
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <statemachine_controlbyte_state+0x5c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fcc1 	bl	8001640 <is_knx_controlbyte>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d003      	beq.n	8001cca <statemachine_controlbyte_state+0x42>
		statemachine_uart_state = ADDRESS_STATE;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <statemachine_controlbyte_state+0x64>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
	}
	else{
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
	}
}
 8001cc8:	e005      	b.n	8001cd6 <statemachine_controlbyte_state+0x4e>
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001cca:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <statemachine_controlbyte_state+0x5c>)
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <statemachine_controlbyte_state+0x60>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f003 f86b 	bl	8004dac <HAL_UART_Receive_IT>
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000099 	.word	0x20000099
 8001ce0:	2000009d 	.word	0x2000009d
 8001ce4:	200000e0 	.word	0x200000e0
 8001ce8:	200001e8 	.word	0x200001e8
 8001cec:	200000b2 	.word	0x200000b2

08001cf0 <statemachine_address_state>:


//Richtiges controllbyte wurde empfangen
void statemachine_address_state(){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

	if (flag_address_receive_started == FLAG_FALSE){
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <statemachine_address_state+0x34>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4053      	eors	r3, r2
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <statemachine_address_state+0x26>
		HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 8001d02:	4909      	ldr	r1, [pc, #36]	; (8001d28 <statemachine_address_state+0x38>)
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <statemachine_address_state+0x3c>)
 8001d06:	2205      	movs	r2, #5
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f003 f84f 	bl	8004dac <HAL_UART_Receive_IT>
		flag_address_receive_started = FLAG_TRUE;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <statemachine_address_state+0x34>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = PAYLOAD_STATE;
	}

}
 8001d14:	e002      	b.n	8001d1c <statemachine_address_state+0x2c>
		statemachine_uart_state = PAYLOAD_STATE;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <statemachine_address_state+0x40>)
 8001d18:	2202      	movs	r2, #2
 8001d1a:	701a      	strb	r2, [r3, #0]
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	2000009a 	.word	0x2000009a
 8001d28:	200000ec 	.word	0x200000ec
 8001d2c:	200001e8 	.word	0x200001e8
 8001d30:	200000b2 	.word	0x200000b2

08001d34 <statemachine_payload_state>:

void statemachine_payload_state(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0

	payload_length = get_payload_length(buffer_knx_address);
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <statemachine_payload_state+0x58>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fc93 	bl	8001666 <get_payload_length>
 8001d40:	0003      	movs	r3, r0
 8001d42:	001a      	movs	r2, r3
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <statemachine_payload_state+0x5c>)
 8001d46:	701a      	strb	r2, [r3, #0]

	if(flag_payload_receive_started == FLAG_FALSE){
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <statemachine_payload_state+0x60>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4053      	eors	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d013      	beq.n	8001d7e <statemachine_payload_state+0x4a>
		buffer_knx_payload = malloc(sizeof(uint8_t) * payload_length);			//speicher nach auswertung freigeben
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <statemachine_payload_state+0x5c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f004 fb48 	bl	80063f0 <malloc>
 8001d60:	0003      	movs	r3, r0
 8001d62:	001a      	movs	r2, r3
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <statemachine_payload_state+0x64>)
 8001d66:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, buffer_knx_payload, sizeof(buffer_knx_payload));
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <statemachine_payload_state+0x64>)
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <statemachine_payload_state+0x68>)
 8001d6e:	2204      	movs	r2, #4
 8001d70:	0018      	movs	r0, r3
 8001d72:	f003 f81b 	bl	8004dac <HAL_UART_Receive_IT>
		flag_payload_receive_started = FLAG_TRUE;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <statemachine_payload_state+0x60>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = CHECKSUM_STATE;
	}
}
 8001d7c:	e002      	b.n	8001d84 <statemachine_payload_state+0x50>
		statemachine_uart_state = CHECKSUM_STATE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <statemachine_payload_state+0x6c>)
 8001d80:	2203      	movs	r2, #3
 8001d82:	701a      	strb	r2, [r3, #0]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	200000ec 	.word	0x200000ec
 8001d90:	200000b1 	.word	0x200000b1
 8001d94:	2000009b 	.word	0x2000009b
 8001d98:	200000a4 	.word	0x200000a4
 8001d9c:	200001e8 	.word	0x200001e8
 8001da0:	200000b2 	.word	0x200000b2

08001da4 <statemachine_checksum_state>:

void statemachine_checksum_state(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	if(flag_checksum_receive_started == FLAG_FALSE){
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <statemachine_checksum_state+0x34>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4053      	eors	r3, r2
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <statemachine_checksum_state+0x26>
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 8001db6:	4909      	ldr	r1, [pc, #36]	; (8001ddc <statemachine_checksum_state+0x38>)
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <statemachine_checksum_state+0x3c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f002 fff5 	bl	8004dac <HAL_UART_Receive_IT>
		flag_checksum_receive_started = FLAG_TRUE;
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <statemachine_checksum_state+0x34>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = ACK_STATE;
	}
}
 8001dc8:	e002      	b.n	8001dd0 <statemachine_checksum_state+0x2c>
		statemachine_uart_state = ACK_STATE;
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <statemachine_checksum_state+0x40>)
 8001dcc:	2204      	movs	r2, #4
 8001dce:	701a      	strb	r2, [r3, #0]
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	2000009c 	.word	0x2000009c
 8001ddc:	200000ea 	.word	0x200000ea
 8001de0:	200001e8 	.word	0x200001e8
 8001de4:	200000b2 	.word	0x200000b2

08001de8 <statemachine_ack_state>:

void statemachine_ack_state(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
	if(check_interest(buffer_knx_address)){
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <statemachine_ack_state+0x48>)
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7ff fc86 	bl	8001700 <check_interest>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d00c      	beq.n	8001e12 <statemachine_ack_state+0x2a>
		HAL_UART_Transmit_IT(&huart2, &interested_byte, sizeof(interested_byte));
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <statemachine_ack_state+0x4c>)
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <statemachine_ack_state+0x50>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f002 ff56 	bl	8004cb0 <HAL_UART_Transmit_IT>
		flag_uart_reception_complete = FLAG_TRUE;
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <statemachine_ack_state+0x54>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
		flag_data_processed = FLAG_FALSE;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <statemachine_ack_state+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	e005      	b.n	8001e1e <statemachine_ack_state+0x36>
	}
	else{
		HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
 8001e12:	490c      	ldr	r1, [pc, #48]	; (8001e44 <statemachine_ack_state+0x5c>)
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <statemachine_ack_state+0x50>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f002 ff49 	bl	8004cb0 <HAL_UART_Transmit_IT>
	}
	clear_flags();
 8001e1e:	f7ff fcaf 	bl	8001780 <clear_flags>
	statemachine_uart_state = CONTROLBYTE_STATE;
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <statemachine_ack_state+0x60>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	200000ec 	.word	0x200000ec
 8001e34:	20000004 	.word	0x20000004
 8001e38:	200001e8 	.word	0x200001e8
 8001e3c:	2000009e 	.word	0x2000009e
 8001e40:	2000009d 	.word	0x2000009d
 8001e44:	20000005 	.word	0x20000005
 8001e48:	200000b2 	.word	0x200000b2

08001e4c <extract_data>:

void extract_data(void){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	if(flag_uart_reception_complete == FLAG_TRUE){
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <extract_data+0x38>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00f      	beq.n	8001e7a <extract_data+0x2e>
		// to do aus buffer_knx_payload feuchtigkeit extrahieren
		float humidity = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
		flag_data_processed = FLAG_TRUE;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <extract_data+0x3c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
		flag_uart_reception_complete = FLAG_FALSE;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <extract_data+0x38>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
		actual_humidity = humidity;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <extract_data+0x40>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	601a      	str	r2, [r3, #0]
		free(buffer_knx_payload);
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <extract_data+0x44>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f004 fac5 	bl	8006404 <free>
	  }
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	2000009e 	.word	0x2000009e
 8001e88:	2000009d 	.word	0x2000009d
 8001e8c:	200000a0 	.word	0x200000a0
 8001e90:	200000a4 	.word	0x200000a4

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e98:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <HAL_MspInit+0x24>)
 8001e9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_MspInit+0x24>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_MspInit+0x24>)
 8001ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_MspInit+0x24>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0549      	lsls	r1, r1, #21
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 fbac 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <LPTIM1_IRQHandler+0x14>)
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f001 f82e 	bl	8002f54 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001ef8:	46c0      	nop			; (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	200000f4 	.word	0x200000f4

08001f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <USART2_IRQHandler+0x14>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 ffb4 	bl	8004e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	200001e8 	.word	0x200001e8

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f004 fa26 	bl	800639c <__errno>
 8001f50:	0003      	movs	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	425b      	negs	r3, r3
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	18d2      	adds	r2, r2, r3
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b006      	add	sp, #24
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20002000 	.word	0x20002000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	200000b4 	.word	0x200000b4
 8001f84:	20000278 	.word	0x20000278

08001f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9a:	2318      	movs	r3, #24
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f004 fa37 	bl	8006418 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001faa:	2310      	movs	r3, #16
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	0018      	movs	r0, r3
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	f004 fa2f 	bl	8006418 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fba:	003b      	movs	r3, r7
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	2310      	movs	r3, #16
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f004 fa28 	bl	8006418 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	05d2      	lsls	r2, r2, #23
 8001fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fd8:	2220      	movs	r2, #32
 8001fda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fde:	22fa      	movs	r2, #250	; 0xfa
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <MX_TIM2_Init+0x120>)
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f002 f8ca 	bl	800418c <HAL_TIM_Base_Init>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001ffc:	f7ff fd26 	bl	8001a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002000:	2118      	movs	r1, #24
 8002002:	187b      	adds	r3, r7, r1
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0152      	lsls	r2, r2, #5
 8002008:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200a:	187a      	adds	r2, r7, r1
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <MX_TIM2_Init+0x120>)
 800200e:	0011      	movs	r1, r2
 8002010:	0018      	movs	r0, r3
 8002012:	f002 fac1 	bl	8004598 <HAL_TIM_ConfigClockSource>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800201a:	f7ff fd17 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <MX_TIM2_Init+0x120>)
 8002020:	0018      	movs	r0, r3
 8002022:	f002 f8f3 	bl	800420c <HAL_TIM_PWM_Init>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800202a:	f7ff fd0f 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202e:	2110      	movs	r1, #16
 8002030:	187b      	adds	r3, r7, r1
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2200      	movs	r2, #0
 800203a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800203c:	187a      	adds	r2, r7, r1
 800203e:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <MX_TIM2_Init+0x120>)
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f002 fd88 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800204c:	f7ff fcfe 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002050:	003b      	movs	r3, r7
 8002052:	2260      	movs	r2, #96	; 0x60
 8002054:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002056:	003b      	movs	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205c:	003b      	movs	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002062:	003b      	movs	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002068:	0039      	movs	r1, r7
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_TIM2_Init+0x120>)
 800206c:	2200      	movs	r2, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f002 f9d6 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002078:	f7ff fce8 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800207c:	0039      	movs	r1, r7
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <MX_TIM2_Init+0x120>)
 8002080:	2204      	movs	r2, #4
 8002082:	0018      	movs	r0, r3
 8002084:	f002 f9cc 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 800208c:	f7ff fcde 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002090:	0039      	movs	r1, r7
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_TIM2_Init+0x120>)
 8002094:	2208      	movs	r2, #8
 8002096:	0018      	movs	r0, r3
 8002098:	f002 f9c2 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 80020a0:	f7ff fcd4 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <MX_TIM2_Init+0x120>)
 80020a6:	0018      	movs	r0, r3
 80020a8:	f000 f916 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b00a      	add	sp, #40	; 0x28
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000168 	.word	0x20000168

080020b8 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	2310      	movs	r3, #16
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	0018      	movs	r0, r3
 80020c4:	2308      	movs	r3, #8
 80020c6:	001a      	movs	r2, r3
 80020c8:	2100      	movs	r1, #0
 80020ca:	f004 f9a5 	bl	8006418 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	003b      	movs	r3, r7
 80020d0:	0018      	movs	r0, r3
 80020d2:	2310      	movs	r3, #16
 80020d4:	001a      	movs	r2, r3
 80020d6:	2100      	movs	r1, #0
 80020d8:	f004 f99e 	bl	8006418 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020de:	4a2a      	ldr	r2, [pc, #168]	; (8002188 <MX_TIM21_Init+0xd0>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020e8:	4b26      	ldr	r3, [pc, #152]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020ea:	2220      	movs	r2, #32
 80020ec:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 4000;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020f0:	22fa      	movs	r2, #250	; 0xfa
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_TIM21_Init+0xcc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MX_TIM21_Init+0xcc>)
 8002104:	0018      	movs	r0, r3
 8002106:	f002 f881 	bl	800420c <HAL_TIM_PWM_Init>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM21_Init+0x5a>
  {
    Error_Handler();
 800210e:	f7ff fc9d 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002112:	2110      	movs	r1, #16
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002120:	187a      	adds	r2, r7, r1
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_TIM21_Init+0xcc>)
 8002124:	0011      	movs	r1, r2
 8002126:	0018      	movs	r0, r3
 8002128:	f002 fd16 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM21_Init+0x7c>
  {
    Error_Handler();
 8002130:	f7ff fc8c 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002134:	003b      	movs	r3, r7
 8002136:	2260      	movs	r2, #96	; 0x60
 8002138:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800213a:	003b      	movs	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	003b      	movs	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002146:	003b      	movs	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214c:	0039      	movs	r1, r7
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <MX_TIM21_Init+0xcc>)
 8002150:	2200      	movs	r2, #0
 8002152:	0018      	movs	r0, r3
 8002154:	f002 f964 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8002158:	1e03      	subs	r3, r0, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 800215c:	f7ff fc76 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002160:	0039      	movs	r1, r7
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_TIM21_Init+0xcc>)
 8002164:	2204      	movs	r2, #4
 8002166:	0018      	movs	r0, r3
 8002168:	f002 f95a 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM21_Init+0xbc>
  {
    Error_Handler();
 8002170:	f7ff fc6c 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <MX_TIM21_Init+0xcc>)
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f8ae 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b006      	add	sp, #24
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200001a8 	.word	0x200001a8
 8002188:	40010800 	.word	0x40010800

0800218c <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002192:	2310      	movs	r3, #16
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	0018      	movs	r0, r3
 8002198:	2308      	movs	r3, #8
 800219a:	001a      	movs	r2, r3
 800219c:	2100      	movs	r1, #0
 800219e:	f004 f93b 	bl	8006418 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a2:	003b      	movs	r3, r7
 80021a4:	0018      	movs	r0, r3
 80021a6:	2310      	movs	r3, #16
 80021a8:	001a      	movs	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	f004 f934 	bl	8006418 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021b2:	4a2a      	ldr	r2, [pc, #168]	; (800225c <MX_TIM22_Init+0xd0>)
 80021b4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80021bc:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021be:	2220      	movs	r2, #32
 80021c0:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 4000;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021c4:	22fa      	movs	r2, #250	; 0xfa
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f002 f817 	bl	800420c <HAL_TIM_PWM_Init>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM22_Init+0x5a>
  {
    Error_Handler();
 80021e2:	f7ff fc33 	bl	8001a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e6:	2110      	movs	r1, #16
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80021f4:	187a      	adds	r2, r7, r1
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <MX_TIM22_Init+0xcc>)
 80021f8:	0011      	movs	r1, r2
 80021fa:	0018      	movs	r0, r3
 80021fc:	f002 fcac 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8002200:	1e03      	subs	r3, r0, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM22_Init+0x7c>
  {
    Error_Handler();
 8002204:	f7ff fc22 	bl	8001a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002208:	003b      	movs	r3, r7
 800220a:	2260      	movs	r2, #96	; 0x60
 800220c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800220e:	003b      	movs	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	003b      	movs	r3, r7
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	003b      	movs	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002220:	0039      	movs	r1, r7
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <MX_TIM22_Init+0xcc>)
 8002224:	2200      	movs	r2, #0
 8002226:	0018      	movs	r0, r3
 8002228:	f002 f8fa 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 8002230:	f7ff fc0c 	bl	8001a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002234:	0039      	movs	r1, r7
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_TIM22_Init+0xcc>)
 8002238:	2204      	movs	r2, #4
 800223a:	0018      	movs	r0, r3
 800223c:	f002 f8f0 	bl	8004420 <HAL_TIM_PWM_ConfigChannel>
 8002240:	1e03      	subs	r3, r0, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM22_Init+0xbc>
  {
    Error_Handler();
 8002244:	f7ff fc02 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <MX_TIM22_Init+0xcc>)
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f844 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b006      	add	sp, #24
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000128 	.word	0x20000128
 800225c:	40011400 	.word	0x40011400

08002260 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	05db      	lsls	r3, r3, #23
 8002270:	429a      	cmp	r2, r3
 8002272:	d105      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002274:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_TIM_Base_MspInit+0x28>)
 8002276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_TIM_Base_MspInit+0x28>)
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM21)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <HAL_TIM_PWM_MspInit+0x40>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d106      	bne.n	80022ac <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_TIM_PWM_MspInit+0x44>)
 80022a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_TIM_PWM_MspInit+0x44>)
 80022a4:	2104      	movs	r1, #4
 80022a6:	430a      	orrs	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 80022aa:	e00a      	b.n	80022c2 <HAL_TIM_PWM_MspInit+0x36>
  else if(tim_pwmHandle->Instance==TIM22)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_TIM_PWM_MspInit+0x48>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d105      	bne.n	80022c2 <HAL_TIM_PWM_MspInit+0x36>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_TIM_PWM_MspInit+0x44>)
 80022b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_TIM_PWM_MspInit+0x44>)
 80022bc:	2120      	movs	r1, #32
 80022be:	430a      	orrs	r2, r1
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	40010800 	.word	0x40010800
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40011400 	.word	0x40011400

080022d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b08d      	sub	sp, #52	; 0x34
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	231c      	movs	r3, #28
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	0018      	movs	r0, r3
 80022e6:	2314      	movs	r3, #20
 80022e8:	001a      	movs	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f004 f894 	bl	8006418 <memset>
  if(timHandle->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	05db      	lsls	r3, r3, #23
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d147      	bne.n	800238c <HAL_TIM_MspPostInit+0xb4>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fc:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 80022fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 8002302:	2101      	movs	r1, #1
 8002304:	430a      	orrs	r2, r1
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 800231a:	2102      	movs	r1, #2
 800231c:	430a      	orrs	r2, r1
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002320:	4b45      	ldr	r3, [pc, #276]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2202      	movs	r2, #2
 8002326:	4013      	ands	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800232c:	211c      	movs	r1, #28
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2202      	movs	r2, #2
 8002338:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	187b      	adds	r3, r7, r1
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	187b      	adds	r3, r7, r1
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002346:	187b      	adds	r3, r7, r1
 8002348:	2202      	movs	r2, #2
 800234a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	000c      	movs	r4, r1
 800234e:	187a      	adds	r2, r7, r1
 8002350:	23a0      	movs	r3, #160	; 0xa0
 8002352:	05db      	lsls	r3, r3, #23
 8002354:	0011      	movs	r1, r2
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fb14 	bl	8002984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800235c:	0021      	movs	r1, r4
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2281      	movs	r2, #129	; 0x81
 8002362:	00d2      	lsls	r2, r2, #3
 8002364:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	187b      	adds	r3, r7, r1
 8002368:	2202      	movs	r2, #2
 800236a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2202      	movs	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237e:	187b      	adds	r3, r7, r1
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_TIM_MspPostInit+0x164>)
 8002382:	0019      	movs	r1, r3
 8002384:	0010      	movs	r0, r2
 8002386:	f000 fafd 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800238a:	e050      	b.n	800242e <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM21)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_TIM_MspPostInit+0x168>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d123      	bne.n	80023de <HAL_TIM_MspPostInit+0x106>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 8002398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 800239c:	2102      	movs	r1, #2
 800239e:	430a      	orrs	r2, r1
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80023ae:	211c      	movs	r1, #28
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	22c0      	movs	r2, #192	; 0xc0
 80023b4:	01d2      	lsls	r2, r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	2202      	movs	r2, #2
 80023bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	2206      	movs	r2, #6
 80023ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_TIM_MspPostInit+0x164>)
 80023d4:	0019      	movs	r1, r3
 80023d6:	0010      	movs	r0, r2
 80023d8:	f000 fad4 	bl	8002984 <HAL_GPIO_Init>
}
 80023dc:	e027      	b.n	800242e <HAL_TIM_MspPostInit+0x156>
  else if(timHandle->Instance==TIM22)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_TIM_MspPostInit+0x16c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d122      	bne.n	800242e <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_TIM_MspPostInit+0x160>)
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002400:	211c      	movs	r1, #28
 8002402:	187b      	adds	r3, r7, r1
 8002404:	22c0      	movs	r2, #192	; 0xc0
 8002406:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2202      	movs	r2, #2
 800240c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	187b      	adds	r3, r7, r1
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 800241a:	187b      	adds	r3, r7, r1
 800241c:	2205      	movs	r2, #5
 800241e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	187a      	adds	r2, r7, r1
 8002422:	23a0      	movs	r3, #160	; 0xa0
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	0011      	movs	r1, r2
 8002428:	0018      	movs	r0, r3
 800242a:	f000 faab 	bl	8002984 <HAL_GPIO_Init>
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b00d      	add	sp, #52	; 0x34
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	50000400 	.word	0x50000400
 8002440:	40010800 	.word	0x40010800
 8002444:	40011400 	.word	0x40011400

08002448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <MX_USART2_UART_Init+0x5c>)
 8002450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002454:	2296      	movs	r2, #150	; 0x96
 8002456:	01d2      	lsls	r2, r2, #7
 8002458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <MX_USART2_UART_Init+0x58>)
 800248c:	0018      	movs	r0, r3
 800248e:	f002 fbbb 	bl	8004c08 <HAL_UART_Init>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002496:	f7ff fad9 	bl	8001a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200001e8 	.word	0x200001e8
 80024a4:	40004400 	.word	0x40004400

080024a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	230c      	movs	r3, #12
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	0018      	movs	r0, r3
 80024b6:	2314      	movs	r3, #20
 80024b8:	001a      	movs	r2, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	f003 ffac 	bl	8006418 <memset>
  if(uartHandle->Instance==USART2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_UART_MspInit+0x90>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d131      	bne.n	800252e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_UART_MspInit+0x94>)
 80024cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_UART_MspInit+0x94>)
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0289      	lsls	r1, r1, #10
 80024d4:	430a      	orrs	r2, r1
 80024d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_UART_MspInit+0x94>)
 80024da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <HAL_UART_MspInit+0x94>)
 80024de:	2101      	movs	r1, #1
 80024e0:	430a      	orrs	r2, r1
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_UART_MspInit+0x94>)
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024f0:	210c      	movs	r1, #12
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	220c      	movs	r2, #12
 80024f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2202      	movs	r2, #2
 80024fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2203      	movs	r2, #3
 8002508:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2204      	movs	r2, #4
 800250e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	187a      	adds	r2, r7, r1
 8002512:	23a0      	movs	r3, #160	; 0xa0
 8002514:	05db      	lsls	r3, r3, #23
 8002516:	0011      	movs	r1, r2
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fa33 	bl	8002984 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	201c      	movs	r0, #28
 8002524:	f000 f974 	bl	8002810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002528:	201c      	movs	r0, #28
 800252a:	f000 f986 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b008      	add	sp, #32
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	40004400 	.word	0x40004400
 800253c:	40021000 	.word	0x40021000

08002540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002540:	480d      	ldr	r0, [pc, #52]	; (8002578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002542:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480d      	ldr	r0, [pc, #52]	; (800257c <LoopForever+0x6>)
  ldr r1, =_edata
 8002546:	490e      	ldr	r1, [pc, #56]	; (8002580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <LoopForever+0xe>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800255c:	4c0b      	ldr	r4, [pc, #44]	; (800258c <LoopForever+0x16>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800256a:	f7ff fd0d 	bl	8001f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800256e:	f003 ff1b 	bl	80063a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002572:	f7ff f9a9 	bl	80018c8 <main>

08002576 <LoopForever>:

LoopForever:
    b LoopForever
 8002576:	e7fe      	b.n	8002576 <LoopForever>
  ldr   r0, =_estack
 8002578:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002584:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8002588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800258c:	20000274 	.word	0x20000274

08002590 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_COMP_IRQHandler>
	...

08002594 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800259a:	1dfb      	adds	r3, r7, #7
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_Init+0x3c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_Init+0x3c>)
 80025a6:	2140      	movs	r1, #64	; 0x40
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 f811 	bl	80025d4 <HAL_InitTick>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d003      	beq.n	80025be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e001      	b.n	80025c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025be:	f7ff fc69 	bl	8001e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	781b      	ldrb	r3, [r3, #0]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b002      	add	sp, #8
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HAL_InitTick+0x5c>)
 80025de:	681c      	ldr	r4, [r3, #0]
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HAL_InitTick+0x60>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	0019      	movs	r1, r3
 80025e6:	23fa      	movs	r3, #250	; 0xfa
 80025e8:	0098      	lsls	r0, r3, #2
 80025ea:	f7fd fd8d 	bl	8000108 <__udivsi3>
 80025ee:	0003      	movs	r3, r0
 80025f0:	0019      	movs	r1, r3
 80025f2:	0020      	movs	r0, r4
 80025f4:	f7fd fd88 	bl	8000108 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 f92d 	bl	800285a <HAL_SYSTICK_Config>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d001      	beq.n	8002608 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e00f      	b.n	8002628 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d80b      	bhi.n	8002626 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	2301      	movs	r3, #1
 8002612:	425b      	negs	r3, r3
 8002614:	2200      	movs	r2, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f000 f8fa 	bl	8002810 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_InitTick+0x64>)
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b003      	add	sp, #12
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	20000008 	.word	0x20000008
 8002634:	20000010 	.word	0x20000010
 8002638:	2000000c 	.word	0x2000000c

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <HAL_IncTick+0x1c>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	001a      	movs	r2, r3
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_IncTick+0x20>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	18d2      	adds	r2, r2, r3
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_IncTick+0x20>)
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	20000010 	.word	0x20000010
 800265c:	2000026c 	.word	0x2000026c

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_GetTick+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	2000026c 	.word	0x2000026c

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fff0 	bl	8002660 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3301      	adds	r3, #1
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_Delay+0x40>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	001a      	movs	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	189b      	adds	r3, r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	f7ff ffe0 	bl	8002660 <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b004      	add	sp, #16
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000010 	.word	0x20000010

080026b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	0002      	movs	r2, r0
 80026c0:	1dfb      	adds	r3, r7, #7
 80026c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	1dfb      	adds	r3, r7, #7
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b7f      	cmp	r3, #127	; 0x7f
 80026ca:	d809      	bhi.n	80026e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	001a      	movs	r2, r3
 80026d2:	231f      	movs	r3, #31
 80026d4:	401a      	ands	r2, r3
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <__NVIC_EnableIRQ+0x30>)
 80026d8:	2101      	movs	r1, #1
 80026da:	4091      	lsls	r1, r2
 80026dc:	000a      	movs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
  }
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	0002      	movs	r2, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	1dfb      	adds	r3, r7, #7
 80026f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002700:	d828      	bhi.n	8002754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <__NVIC_SetPriority+0xd4>)
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b25b      	sxtb	r3, r3
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	33c0      	adds	r3, #192	; 0xc0
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	589b      	ldr	r3, [r3, r2]
 8002712:	1dfa      	adds	r2, r7, #7
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	0011      	movs	r1, r2
 8002718:	2203      	movs	r2, #3
 800271a:	400a      	ands	r2, r1
 800271c:	00d2      	lsls	r2, r2, #3
 800271e:	21ff      	movs	r1, #255	; 0xff
 8002720:	4091      	lsls	r1, r2
 8002722:	000a      	movs	r2, r1
 8002724:	43d2      	mvns	r2, r2
 8002726:	401a      	ands	r2, r3
 8002728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	401a      	ands	r2, r3
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	0018      	movs	r0, r3
 8002738:	2303      	movs	r3, #3
 800273a:	4003      	ands	r3, r0
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002740:	481f      	ldr	r0, [pc, #124]	; (80027c0 <__NVIC_SetPriority+0xd4>)
 8002742:	1dfb      	adds	r3, r7, #7
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b25b      	sxtb	r3, r3
 8002748:	089b      	lsrs	r3, r3, #2
 800274a:	430a      	orrs	r2, r1
 800274c:	33c0      	adds	r3, #192	; 0xc0
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002752:	e031      	b.n	80027b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <__NVIC_SetPriority+0xd8>)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0019      	movs	r1, r3
 800275c:	230f      	movs	r3, #15
 800275e:	400b      	ands	r3, r1
 8002760:	3b08      	subs	r3, #8
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3306      	adds	r3, #6
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	3304      	adds	r3, #4
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	2203      	movs	r2, #3
 8002776:	400a      	ands	r2, r1
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	21ff      	movs	r1, #255	; 0xff
 800277c:	4091      	lsls	r1, r2
 800277e:	000a      	movs	r2, r1
 8002780:	43d2      	mvns	r2, r2
 8002782:	401a      	ands	r2, r3
 8002784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	22ff      	movs	r2, #255	; 0xff
 800278c:	401a      	ands	r2, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	2303      	movs	r3, #3
 8002796:	4003      	ands	r3, r0
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <__NVIC_SetPriority+0xd8>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	001c      	movs	r4, r3
 80027a4:	230f      	movs	r3, #15
 80027a6:	4023      	ands	r3, r4
 80027a8:	3b08      	subs	r3, #8
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	430a      	orrs	r2, r1
 80027ae:	3306      	adds	r3, #6
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	18c3      	adds	r3, r0, r3
 80027b4:	3304      	adds	r3, #4
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b003      	add	sp, #12
 80027be:	bd90      	pop	{r4, r7, pc}
 80027c0:	e000e100 	.word	0xe000e100
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <SysTick_Config+0x40>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e010      	b.n	8002800 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <SysTick_Config+0x44>)
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	3a01      	subs	r2, #1
 80027e4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	2301      	movs	r3, #1
 80027e8:	425b      	negs	r3, r3
 80027ea:	2103      	movs	r1, #3
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7ff ff7d 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <SysTick_Config+0x44>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <SysTick_Config+0x44>)
 80027fa:	2207      	movs	r2, #7
 80027fc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}
 8002808:	00ffffff 	.word	0x00ffffff
 800280c:	e000e010 	.word	0xe000e010

08002810 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	210f      	movs	r1, #15
 800281c:	187b      	adds	r3, r7, r1
 800281e:	1c02      	adds	r2, r0, #0
 8002820:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	187b      	adds	r3, r7, r1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b25b      	sxtb	r3, r3
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff ff5d 	bl	80026ec <__NVIC_SetPriority>
}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	0002      	movs	r2, r0
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b25b      	sxtb	r3, r3
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff ff33 	bl	80026b8 <__NVIC_EnableIRQ>
}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	46bd      	mov	sp, r7
 8002856:	b002      	add	sp, #8
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ffaf 	bl	80027c8 <SysTick_Config>
 800286a:	0003      	movs	r3, r0
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b002      	add	sp, #8
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	230f      	movs	r3, #15
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2225      	movs	r2, #37	; 0x25
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2204      	movs	r2, #4
 8002894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2224      	movs	r2, #36	; 0x24
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e024      	b.n	80028ec <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	210e      	movs	r1, #14
 80028ae:	438a      	bics	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2101      	movs	r1, #1
 80028be:	438a      	bics	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	221c      	movs	r2, #28
 80028c8:	401a      	ands	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2101      	movs	r1, #1
 80028d0:	4091      	lsls	r1, r2
 80028d2:	000a      	movs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2225      	movs	r2, #37	; 0x25
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2224      	movs	r2, #36	; 0x24
 80028e2:	2100      	movs	r1, #0
 80028e4:	5499      	strb	r1, [r3, r2]

    return status;
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2225      	movs	r2, #37	; 0x25
 8002908:	5c9b      	ldrb	r3, [r3, r2]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d007      	beq.n	8002920 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2204      	movs	r2, #4
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002916:	230f      	movs	r3, #15
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e02a      	b.n	8002976 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	210e      	movs	r1, #14
 800292c:	438a      	bics	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	438a      	bics	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	221c      	movs	r2, #28
 8002946:	401a      	ands	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	2101      	movs	r1, #1
 800294e:	4091      	lsls	r1, r2
 8002950:	000a      	movs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2225      	movs	r2, #37	; 0x25
 8002958:	2101      	movs	r1, #1
 800295a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	2100      	movs	r1, #0
 8002962:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	0010      	movs	r0, r2
 8002974:	4798      	blx	r3
    }
  }
  return status;
 8002976:	230f      	movs	r3, #15
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	781b      	ldrb	r3, [r3, #0]
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800299a:	e14f      	b.n	8002c3c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4091      	lsls	r1, r2
 80029a6:	000a      	movs	r2, r1
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d100      	bne.n	80029b4 <HAL_GPIO_Init+0x30>
 80029b2:	e140      	b.n	8002c36 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d005      	beq.n	80029cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d130      	bne.n	8002a2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	43da      	mvns	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	0013      	movs	r3, r2
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a02:	2201      	movs	r2, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	2201      	movs	r2, #1
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	0013      	movs	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d017      	beq.n	8002a6a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	0013      	movs	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d123      	bne.n	8002abe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	58d3      	ldr	r3, [r2, r3]
 8002a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2207      	movs	r2, #7
 8002a88:	4013      	ands	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	220f      	movs	r2, #15
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	0013      	movs	r3, r2
 8002a92:	43da      	mvns	r2, r3
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691a      	ldr	r2, [r3, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2107      	movs	r1, #7
 8002aa2:	400b      	ands	r3, r1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	6939      	ldr	r1, [r7, #16]
 8002abc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	409a      	lsls	r2, r3
 8002acc:	0013      	movs	r3, r2
 8002ace:	43da      	mvns	r2, r3
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	401a      	ands	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	0013      	movs	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	23c0      	movs	r3, #192	; 0xc0
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	4013      	ands	r3, r2
 8002afc:	d100      	bne.n	8002b00 <HAL_GPIO_Init+0x17c>
 8002afe:	e09a      	b.n	8002c36 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b00:	4b54      	ldr	r3, [pc, #336]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <HAL_GPIO_Init+0x2d0>)
 8002b06:	2101      	movs	r1, #1
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_GPIO_Init+0x2d4>)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	3302      	adds	r3, #2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	589b      	ldr	r3, [r3, r2]
 8002b18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	409a      	lsls	r2, r3
 8002b26:	0013      	movs	r3, r2
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	23a0      	movs	r3, #160	; 0xa0
 8002b34:	05db      	lsls	r3, r3, #23
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x1ea>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_GPIO_Init+0x2d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x1e6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a46      	ldr	r2, [pc, #280]	; (8002c60 <HAL_GPIO_Init+0x2dc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x1e2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a45      	ldr	r2, [pc, #276]	; (8002c64 <HAL_GPIO_Init+0x2e0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x1de>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a44      	ldr	r2, [pc, #272]	; (8002c68 <HAL_GPIO_Init+0x2e4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x1da>
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	e008      	b.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x1ec>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	2103      	movs	r1, #3
 8002b74:	400a      	ands	r2, r1
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b80:	4935      	ldr	r1, [pc, #212]	; (8002c58 <HAL_GPIO_Init+0x2d4>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8e:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	035b      	lsls	r3, r3, #13
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	2380      	movs	r3, #128	; 0x80
 8002c22:	039b      	lsls	r3, r3, #14
 8002c24:	4013      	ands	r3, r2
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <HAL_GPIO_Init+0x2e8>)
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	40da      	lsrs	r2, r3
 8002c44:	1e13      	subs	r3, r2, #0
 8002c46:	d000      	beq.n	8002c4a <HAL_GPIO_Init+0x2c6>
 8002c48:	e6a8      	b.n	800299c <HAL_GPIO_Init+0x18>
  }
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	50000400 	.word	0x50000400
 8002c60:	50000800 	.word	0x50000800
 8002c64:	50000c00 	.word	0x50000c00
 8002c68:	50001c00 	.word	0x50001c00
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	0008      	movs	r0, r1
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	1cbb      	adds	r3, r7, #2
 8002c7e:	1c02      	adds	r2, r0, #0
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	1c7b      	adds	r3, r7, #1
 8002c84:	1c0a      	adds	r2, r1, #0
 8002c86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c88:	1c7b      	adds	r3, r7, #1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c90:	1cbb      	adds	r3, r7, #2
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c9a:	1cbb      	adds	r3, r7, #2
 8002c9c:	881a      	ldrh	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	000a      	movs	r2, r1
 8002cb4:	1cbb      	adds	r3, r7, #2
 8002cb6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cbe:	1cbb      	adds	r3, r7, #2
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	041a      	lsls	r2, r3, #16
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	1cb9      	adds	r1, r7, #2
 8002cce:	8809      	ldrh	r1, [r1, #0]
 8002cd0:	400b      	ands	r3, r1
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e078      	b.n	8002de4 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	222e      	movs	r2, #46	; 0x2e
 8002cf6:	5c9b      	ldrb	r3, [r3, r2]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	222d      	movs	r2, #45	; 0x2d
 8002d02:	2100      	movs	r1, #0
 8002d04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7fe fdbd 	bl	8001888 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	222e      	movs	r2, #46	; 0x2e
 8002d12:	2102      	movs	r1, #2
 8002d14:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d103      	bne.n	8002d3a <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	221e      	movs	r2, #30
 8002d36:	4393      	bics	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <HAL_LPTIM_Init+0x10c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_LPTIM_Init+0x110>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_LPTIM_Init+0x114>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002d5c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002d62:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002d68:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002d6e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d005      	beq.n	8002da2 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002daa:	4313      	orrs	r3, r2
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_LPTIM_Init+0x10c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00a      	beq.n	8002dd2 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002dc4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002dca:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	222e      	movs	r2, #46	; 0x2e
 8002dde:	2101      	movs	r1, #1
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	0000ffff 	.word	0x0000ffff
 8002df0:	ffff1f3f 	.word	0xffff1f3f
 8002df4:	ff19f1fe 	.word	0xff19f1fe

08002df8 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	222e      	movs	r2, #46	; 0x2e
 8002e06:	2102      	movs	r1, #2
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0589      	lsls	r1, r1, #22
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d00d      	beq.n	8002e3c <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	492a      	ldr	r1, [pc, #168]	; (8002ee0 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002e38:	400a      	ands	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2101      	movs	r1, #1
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2110      	movs	r1, #16
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f955 	bl	8003110 <LPTIM_WaitForFlag>
 8002e66:	0003      	movs	r3, r0
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d101      	bne.n	8002e70 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e031      	b.n	8002ed4 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f984 	bl	8003180 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f93c 	bl	80030f8 <HAL_LPTIM_GetState>
 8002e80:	0003      	movs	r3, r0
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d101      	bne.n	8002e8a <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e024      	b.n	8002ed4 <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2110      	movs	r1, #16
 8002e96:	430a      	orrs	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2104      	movs	r1, #4
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	222e      	movs	r2, #46	; 0x2e
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010400 	.word	0x40010400
 8002ee0:	fffff1ff 	.word	0xfffff1ff

08002ee4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	222e      	movs	r2, #46	; 0x2e
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8002ef4:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_LPTIM_Counter_Stop_IT+0x68>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_LPTIM_Counter_Stop_IT+0x68>)
 8002efa:	4915      	ldr	r1, [pc, #84]	; (8002f50 <HAL_LPTIM_Counter_Stop_IT+0x6c>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f000 f93c 	bl	8003180 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f000 f8f4 	bl	80030f8 <HAL_LPTIM_GetState>
 8002f10:	0003      	movs	r3, r0
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d101      	bne.n	8002f1a <HAL_LPTIM_Counter_Stop_IT+0x36>
  {
    return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e014      	b.n	8002f44 <HAL_LPTIM_Counter_Stop_IT+0x60>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2110      	movs	r1, #16
 8002f26:	438a      	bics	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2102      	movs	r1, #2
 8002f36:	438a      	bics	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	222e      	movs	r2, #46	; 0x2e
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40010400 	.word	0x40010400
 8002f50:	dfffffff 	.word	0xdfffffff

08002f54 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2201      	movs	r2, #1
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f888 	bl	8003098 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d10e      	bne.n	8002fb4 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7fe fd38 	bl	8001a24 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f864 	bl	80030a8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d10e      	bne.n	800300c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d107      	bne.n	800300c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f856 	bl	80030b8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	4013      	ands	r3, r2
 8003016:	2b10      	cmp	r3, #16
 8003018:	d10e      	bne.n	8003038 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2210      	movs	r2, #16
 8003022:	4013      	ands	r3, r2
 8003024:	2b10      	cmp	r3, #16
 8003026:	d107      	bne.n	8003038 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2210      	movs	r2, #16
 800302e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f848 	bl	80030c8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2220      	movs	r2, #32
 8003040:	4013      	ands	r3, r2
 8003042:	2b20      	cmp	r3, #32
 8003044:	d10e      	bne.n	8003064 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2220      	movs	r2, #32
 800304e:	4013      	ands	r3, r2
 8003050:	2b20      	cmp	r3, #32
 8003052:	d107      	bne.n	8003064 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2220      	movs	r2, #32
 800305a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f83a 	bl	80030d8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	4013      	ands	r3, r2
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d10e      	bne.n	8003090 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	4013      	ands	r3, r2
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d107      	bne.n	8003090 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f82c 	bl	80030e8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b002      	add	sp, #8
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	222e      	movs	r2, #46	; 0x2e
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	b2db      	uxtb	r3, r3
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b002      	add	sp, #8
 800310e:	bd80      	pop	{r7, pc}

08003110 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800311a:	230f      	movs	r3, #15
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2200      	movs	r2, #0
 8003120:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <LPTIM_WaitForFlag+0x68>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4915      	ldr	r1, [pc, #84]	; (800317c <LPTIM_WaitForFlag+0x6c>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fc ffed 	bl	8000108 <__udivsi3>
 800312e:	0003      	movs	r3, r0
 8003130:	001a      	movs	r2, r3
 8003132:	0013      	movs	r3, r2
 8003134:	015b      	lsls	r3, r3, #5
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	189b      	adds	r3, r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3b01      	subs	r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 800314c:	230f      	movs	r3, #15
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2203      	movs	r2, #3
 8003152:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	4013      	ands	r3, r2
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d002      	beq.n	800316a <LPTIM_WaitForFlag+0x5a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ea      	bne.n	8003140 <LPTIM_WaitForFlag+0x30>

  return result;
 800316a:	230f      	movs	r3, #15
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	781b      	ldrb	r3, [r3, #0]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b004      	add	sp, #16
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000008 	.word	0x20000008
 800317c:	00004e20 	.word	0x00004e20

08003180 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	001a      	movs	r2, r3
 8003194:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <LPTIM_Disable+0x168>)
 8003196:	429a      	cmp	r2, r3
 8003198:	d000      	beq.n	800319c <LPTIM_Disable+0x1c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
      break;
    default:
      break;
 800319a:	e006      	b.n	80031aa <LPTIM_Disable+0x2a>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <LPTIM_Disable+0x16c>)
 800319e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a0:	23c0      	movs	r3, #192	; 0xc0
 80031a2:	031b      	lsls	r3, r3, #12
 80031a4:	4013      	ands	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
      break;
 80031a8:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	001a      	movs	r2, r3
 80031d0:	4b45      	ldr	r3, [pc, #276]	; (80032e8 <LPTIM_Disable+0x168>)
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d000      	beq.n	80031d8 <LPTIM_Disable+0x58>
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
      __HAL_RCC_LPTIM1_RELEASE_RESET();
      break;
    default:
      break;
 80031d6:	e00d      	b.n	80031f4 <LPTIM_Disable+0x74>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80031d8:	4b44      	ldr	r3, [pc, #272]	; (80032ec <LPTIM_Disable+0x16c>)
 80031da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031dc:	4b43      	ldr	r3, [pc, #268]	; (80032ec <LPTIM_Disable+0x16c>)
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	0609      	lsls	r1, r1, #24
 80031e2:	430a      	orrs	r2, r1
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <LPTIM_Disable+0x16c>)
 80031e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ea:	4b40      	ldr	r3, [pc, #256]	; (80032ec <LPTIM_Disable+0x16c>)
 80031ec:	0052      	lsls	r2, r2, #1
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80031f2:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <LPTIM_Disable+0x80>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05c      	beq.n	80032ba <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	001a      	movs	r2, r3
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <LPTIM_Disable+0x168>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d000      	beq.n	800320e <LPTIM_Disable+0x8e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
        break;
      default:
        break;
 800320c:	e006      	b.n	800321c <LPTIM_Disable+0x9c>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <LPTIM_Disable+0x16c>)
 8003210:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003212:	4b36      	ldr	r3, [pc, #216]	; (80032ec <LPTIM_Disable+0x16c>)
 8003214:	4936      	ldr	r1, [pc, #216]	; (80032f0 <LPTIM_Disable+0x170>)
 8003216:	400a      	ands	r2, r1
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800321a:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01b      	beq.n	800325a <LPTIM_Disable+0xda>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2108      	movs	r1, #8
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff ff66 	bl	8003110 <LPTIM_WaitForFlag>
 8003244:	0003      	movs	r3, r0
 8003246:	2b03      	cmp	r3, #3
 8003248:	d103      	bne.n	8003252 <LPTIM_Disable+0xd2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	222e      	movs	r2, #46	; 0x2e
 800324e:	2103      	movs	r1, #3
 8003250:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2208      	movs	r2, #8
 8003258:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01b      	beq.n	8003298 <LPTIM_Disable+0x118>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2101      	movs	r1, #1
 800326c:	430a      	orrs	r2, r1
 800326e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2110      	movs	r1, #16
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff47 	bl	8003110 <LPTIM_WaitForFlag>
 8003282:	0003      	movs	r3, r0
 8003284:	2b03      	cmp	r3, #3
 8003286:	d103      	bne.n	8003290 <LPTIM_Disable+0x110>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	222e      	movs	r2, #46	; 0x2e
 800328c:	2103      	movs	r1, #3
 800328e:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2210      	movs	r2, #16
 8003296:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	001a      	movs	r2, r3
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <LPTIM_Disable+0x168>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d000      	beq.n	80032a6 <LPTIM_Disable+0x126>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
      default:
        break;
 80032a4:	e00a      	b.n	80032bc <LPTIM_Disable+0x13c>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <LPTIM_Disable+0x16c>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <LPTIM_Disable+0x170>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <LPTIM_Disable+0x16c>)
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80032b8:	e000      	b.n	80032bc <LPTIM_Disable+0x13c>
    }
  }
 80032ba:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2101      	movs	r1, #1
 80032c8:	438a      	bics	r2, r1
 80032ca:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80032dc:	b662      	cpsie	i

  __enable_irq();
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b008      	add	sp, #32
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40007c00 	.word	0x40007c00
 80032ec:	40021000 	.word	0x40021000
 80032f0:	fff3ffff 	.word	0xfff3ffff

080032f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f000 fbb4 	bl	8003a70 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003308:	4bc3      	ldr	r3, [pc, #780]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	220c      	movs	r2, #12
 800330e:	4013      	ands	r3, r2
 8003310:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003312:	4bc1      	ldr	r3, [pc, #772]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	025b      	lsls	r3, r3, #9
 800331a:	4013      	ands	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d100      	bne.n	800332a <HAL_RCC_OscConfig+0x36>
 8003328:	e07e      	b.n	8003428 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d007      	beq.n	8003340 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d112      	bne.n	800335c <HAL_RCC_OscConfig+0x68>
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	025b      	lsls	r3, r3, #9
 800333c:	429a      	cmp	r2, r3
 800333e:	d10d      	bne.n	800335c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4bb5      	ldr	r3, [pc, #724]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	029b      	lsls	r3, r3, #10
 8003348:	4013      	ands	r3, r2
 800334a:	d100      	bne.n	800334e <HAL_RCC_OscConfig+0x5a>
 800334c:	e06b      	b.n	8003426 <HAL_RCC_OscConfig+0x132>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d167      	bne.n	8003426 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 fb8a 	bl	8003a70 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	025b      	lsls	r3, r3, #9
 8003364:	429a      	cmp	r2, r3
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x84>
 8003368:	4bab      	ldr	r3, [pc, #684]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4baa      	ldr	r3, [pc, #680]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	0249      	lsls	r1, r1, #9
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	e027      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	23a0      	movs	r3, #160	; 0xa0
 800337e:	02db      	lsls	r3, r3, #11
 8003380:	429a      	cmp	r2, r3
 8003382:	d10e      	bne.n	80033a2 <HAL_RCC_OscConfig+0xae>
 8003384:	4ba4      	ldr	r3, [pc, #656]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4ba3      	ldr	r3, [pc, #652]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	02c9      	lsls	r1, r1, #11
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	4ba1      	ldr	r3, [pc, #644]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4ba0      	ldr	r3, [pc, #640]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0249      	lsls	r1, r1, #9
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e012      	b.n	80033c8 <HAL_RCC_OscConfig+0xd4>
 80033a2:	4b9d      	ldr	r3, [pc, #628]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b9c      	ldr	r3, [pc, #624]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033a8:	499c      	ldr	r1, [pc, #624]	; (800361c <HAL_RCC_OscConfig+0x328>)
 80033aa:	400a      	ands	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b9a      	ldr	r3, [pc, #616]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	025b      	lsls	r3, r3, #9
 80033b6:	4013      	ands	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4b96      	ldr	r3, [pc, #600]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b95      	ldr	r3, [pc, #596]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033c2:	4997      	ldr	r1, [pc, #604]	; (8003620 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f946 	bl	8002660 <HAL_GetTick>
 80033d4:	0003      	movs	r3, r0
 80033d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033d8:	e009      	b.n	80033ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033da:	f7ff f941 	bl	8002660 <HAL_GetTick>
 80033de:	0002      	movs	r2, r0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	; 0x64
 80033e6:	d902      	bls.n	80033ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f000 fb41 	bl	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ee:	4b8a      	ldr	r3, [pc, #552]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	029b      	lsls	r3, r3, #10
 80033f6:	4013      	ands	r3, r2
 80033f8:	d0ef      	beq.n	80033da <HAL_RCC_OscConfig+0xe6>
 80033fa:	e015      	b.n	8003428 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff f930 	bl	8002660 <HAL_GetTick>
 8003400:	0003      	movs	r3, r0
 8003402:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003406:	f7ff f92b 	bl	8002660 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b64      	cmp	r3, #100	; 0x64
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e32b      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003418:	4b7f      	ldr	r3, [pc, #508]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x112>
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	d100      	bne.n	8003434 <HAL_RCC_OscConfig+0x140>
 8003432:	e08c      	b.n	800354e <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d005      	beq.n	800344c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d13f      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d13c      	bne.n	80034c6 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800344c:	4b72      	ldr	r3, [pc, #456]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2204      	movs	r2, #4
 8003452:	4013      	ands	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_RCC_OscConfig+0x16c>
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e307      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x330>)
 8003466:	4013      	ands	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	021a      	lsls	r2, r3, #8
 8003470:	4b69      	ldr	r3, [pc, #420]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2209      	movs	r2, #9
 800347c:	4393      	bics	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003488:	f000 fc44 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 800348c:	0001      	movs	r1, r0
 800348e:	4b62      	ldr	r3, [pc, #392]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	220f      	movs	r2, #15
 8003496:	4013      	ands	r3, r2
 8003498:	4a63      	ldr	r2, [pc, #396]	; (8003628 <HAL_RCC_OscConfig+0x334>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	000a      	movs	r2, r1
 800349e:	40da      	lsrs	r2, r3
 80034a0:	4b62      	ldr	r3, [pc, #392]	; (800362c <HAL_RCC_OscConfig+0x338>)
 80034a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80034a4:	4b62      	ldr	r3, [pc, #392]	; (8003630 <HAL_RCC_OscConfig+0x33c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2513      	movs	r5, #19
 80034aa:	197c      	adds	r4, r7, r5
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff f891 	bl	80025d4 <HAL_InitTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80034b6:	197b      	adds	r3, r7, r5
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d047      	beq.n	800354e <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80034be:	2313      	movs	r3, #19
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	e2d4      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d027      	beq.n	800351c <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034cc:	4b52      	ldr	r3, [pc, #328]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2209      	movs	r2, #9
 80034d2:	4393      	bics	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7ff f8bf 	bl	8002660 <HAL_GetTick>
 80034e2:	0003      	movs	r3, r0
 80034e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7ff f8ba 	bl	8002660 <HAL_GetTick>
 80034ec:	0002      	movs	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e2ba      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2204      	movs	r2, #4
 8003500:	4013      	ands	r3, r2
 8003502:	d0f1      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003504:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4a46      	ldr	r2, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x330>)
 800350a:	4013      	ands	r3, r2
 800350c:	0019      	movs	r1, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	021a      	lsls	r2, r3, #8
 8003514:	4b40      	ldr	r3, [pc, #256]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	e018      	b.n	800354e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003522:	2101      	movs	r1, #1
 8003524:	438a      	bics	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff f89a 	bl	8002660 <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7ff f895 	bl	8002660 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e295      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003544:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2204      	movs	r2, #4
 800354a:	4013      	ands	r3, r2
 800354c:	d1f1      	bne.n	8003532 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2210      	movs	r2, #16
 8003554:	4013      	ands	r3, r2
 8003556:	d100      	bne.n	800355a <HAL_RCC_OscConfig+0x266>
 8003558:	e0a3      	b.n	80036a2 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d141      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4013      	ands	r3, r2
 800356a:	d005      	beq.n	8003578 <HAL_RCC_OscConfig+0x284>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e27b      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_RCC_OscConfig+0x340>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 8003588:	430a      	orrs	r2, r1
 800358a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	0a19      	lsrs	r1, r3, #8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	061a      	lsls	r2, r3, #24
 800359a:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	0b5b      	lsrs	r3, r3, #13
 80035a6:	3301      	adds	r3, #1
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	0212      	lsls	r2, r2, #8
 80035ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	210f      	movs	r1, #15
 80035b6:	400b      	ands	r3, r1
 80035b8:	491b      	ldr	r1, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x334>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x338>)
 80035c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x33c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2513      	movs	r5, #19
 80035c8:	197c      	adds	r4, r7, r5
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7ff f802 	bl	80025d4 <HAL_InitTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80035d4:	197b      	adds	r3, r7, r5
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d062      	beq.n	80036a2 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80035dc:	2313      	movs	r3, #19
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	e245      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d040      	beq.n	800366e <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_OscConfig+0x324>)
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	0049      	lsls	r1, r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7ff f831 	bl	8002660 <HAL_GetTick>
 80035fe:	0003      	movs	r3, r0
 8003600:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003602:	e019      	b.n	8003638 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003604:	f7ff f82c 	bl	8002660 <HAL_GetTick>
 8003608:	0002      	movs	r2, r0
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d912      	bls.n	8003638 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e22c      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	40021000 	.word	0x40021000
 800361c:	fffeffff 	.word	0xfffeffff
 8003620:	fffbffff 	.word	0xfffbffff
 8003624:	ffffe0ff 	.word	0xffffe0ff
 8003628:	0800662c 	.word	0x0800662c
 800362c:	20000008 	.word	0x20000008
 8003630:	2000000c 	.word	0x2000000c
 8003634:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003638:	4bc6      	ldr	r3, [pc, #792]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4013      	ands	r3, r2
 8003642:	d0df      	beq.n	8003604 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003644:	4bc3      	ldr	r3, [pc, #780]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4ac3      	ldr	r2, [pc, #780]	; (8003958 <HAL_RCC_OscConfig+0x664>)
 800364a:	4013      	ands	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003652:	4bc0      	ldr	r3, [pc, #768]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4bbe      	ldr	r3, [pc, #760]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	0a19      	lsrs	r1, r3, #8
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	061a      	lsls	r2, r3, #24
 8003666:	4bbb      	ldr	r3, [pc, #748]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e019      	b.n	80036a2 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800366e:	4bb9      	ldr	r3, [pc, #740]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4bb8      	ldr	r3, [pc, #736]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003674:	49b9      	ldr	r1, [pc, #740]	; (800395c <HAL_RCC_OscConfig+0x668>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fe fff1 	bl	8002660 <HAL_GetTick>
 800367e:	0003      	movs	r3, r0
 8003680:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003684:	f7fe ffec 	bl	8002660 <HAL_GetTick>
 8003688:	0002      	movs	r2, r0
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e1ec      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003696:	4baf      	ldr	r3, [pc, #700]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2208      	movs	r2, #8
 80036a8:	4013      	ands	r3, r2
 80036aa:	d036      	beq.n	800371a <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d019      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b4:	4ba7      	ldr	r3, [pc, #668]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80036b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036b8:	4ba6      	ldr	r3, [pc, #664]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80036ba:	2101      	movs	r1, #1
 80036bc:	430a      	orrs	r2, r1
 80036be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fe ffce 	bl	8002660 <HAL_GetTick>
 80036c4:	0003      	movs	r3, r0
 80036c6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ca:	f7fe ffc9 	bl	8002660 <HAL_GetTick>
 80036ce:	0002      	movs	r2, r0
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1c9      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036dc:	4b9d      	ldr	r3, [pc, #628]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	2202      	movs	r2, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	d0f1      	beq.n	80036ca <HAL_RCC_OscConfig+0x3d6>
 80036e6:	e018      	b.n	800371a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e8:	4b9a      	ldr	r3, [pc, #616]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80036ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ec:	4b99      	ldr	r3, [pc, #612]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	438a      	bics	r2, r1
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f4:	f7fe ffb4 	bl	8002660 <HAL_GetTick>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fe:	f7fe ffaf 	bl	8002660 <HAL_GetTick>
 8003702:	0002      	movs	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e1af      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003710:	4b90      	ldr	r3, [pc, #576]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	d1f1      	bne.n	80036fe <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d100      	bne.n	8003726 <HAL_RCC_OscConfig+0x432>
 8003724:	e0af      	b.n	8003886 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2327      	movs	r3, #39	; 0x27
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	2200      	movs	r2, #0
 800372c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372e:	4b89      	ldr	r3, [pc, #548]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	055b      	lsls	r3, r3, #21
 8003736:	4013      	ands	r3, r2
 8003738:	d10a      	bne.n	8003750 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4b86      	ldr	r3, [pc, #536]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800373c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373e:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0549      	lsls	r1, r1, #21
 8003744:	430a      	orrs	r2, r1
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003748:	2327      	movs	r3, #39	; 0x27
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b83      	ldr	r3, [pc, #524]	; (8003960 <HAL_RCC_OscConfig+0x66c>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	; 0x80
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4013      	ands	r3, r2
 800375a:	d11a      	bne.n	8003792 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375c:	4b80      	ldr	r3, [pc, #512]	; (8003960 <HAL_RCC_OscConfig+0x66c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b7f      	ldr	r3, [pc, #508]	; (8003960 <HAL_RCC_OscConfig+0x66c>)
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	0049      	lsls	r1, r1, #1
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376a:	f7fe ff79 	bl	8002660 <HAL_GetTick>
 800376e:	0003      	movs	r3, r0
 8003770:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003774:	f7fe ff74 	bl	8002660 <HAL_GetTick>
 8003778:	0002      	movs	r2, r0
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e174      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b76      	ldr	r3, [pc, #472]	; (8003960 <HAL_RCC_OscConfig+0x66c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4013      	ands	r3, r2
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	429a      	cmp	r2, r3
 800379c:	d107      	bne.n	80037ae <HAL_RCC_OscConfig+0x4ba>
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037a2:	4b6c      	ldr	r3, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	0049      	lsls	r1, r1, #1
 80037a8:	430a      	orrs	r2, r1
 80037aa:	651a      	str	r2, [r3, #80]	; 0x50
 80037ac:	e031      	b.n	8003812 <HAL_RCC_OscConfig+0x51e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x4dc>
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ba:	4b66      	ldr	r3, [pc, #408]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037bc:	4967      	ldr	r1, [pc, #412]	; (800395c <HAL_RCC_OscConfig+0x668>)
 80037be:	400a      	ands	r2, r1
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c6:	4b63      	ldr	r3, [pc, #396]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037c8:	4966      	ldr	r1, [pc, #408]	; (8003964 <HAL_RCC_OscConfig+0x670>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50
 80037ce:	e020      	b.n	8003812 <HAL_RCC_OscConfig+0x51e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	23a0      	movs	r3, #160	; 0xa0
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10e      	bne.n	80037fa <HAL_RCC_OscConfig+0x506>
 80037dc:	4b5d      	ldr	r3, [pc, #372]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037e0:	4b5c      	ldr	r3, [pc, #368]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	00c9      	lsls	r1, r1, #3
 80037e6:	430a      	orrs	r2, r1
 80037e8:	651a      	str	r2, [r3, #80]	; 0x50
 80037ea:	4b5a      	ldr	r3, [pc, #360]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ee:	4b59      	ldr	r3, [pc, #356]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0049      	lsls	r1, r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	651a      	str	r2, [r3, #80]	; 0x50
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0x51e>
 80037fa:	4b56      	ldr	r3, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80037fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003800:	4956      	ldr	r1, [pc, #344]	; (800395c <HAL_RCC_OscConfig+0x668>)
 8003802:	400a      	ands	r2, r1
 8003804:	651a      	str	r2, [r3, #80]	; 0x50
 8003806:	4b53      	ldr	r3, [pc, #332]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800380a:	4b52      	ldr	r3, [pc, #328]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800380c:	4955      	ldr	r1, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x670>)
 800380e:	400a      	ands	r2, r1
 8003810:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d015      	beq.n	8003846 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fe ff21 	bl	8002660 <HAL_GetTick>
 800381e:	0003      	movs	r3, r0
 8003820:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fe ff1c 	bl	8002660 <HAL_GetTick>
 8003828:	0002      	movs	r2, r0
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	4a4e      	ldr	r2, [pc, #312]	; (8003968 <HAL_RCC_OscConfig+0x674>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e11b      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800383a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800383c:	2380      	movs	r3, #128	; 0x80
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4013      	ands	r3, r2
 8003842:	d0ef      	beq.n	8003824 <HAL_RCC_OscConfig+0x530>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe ff0b 	bl	8002660 <HAL_GetTick>
 800384a:	0003      	movs	r3, r0
 800384c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800384e:	e009      	b.n	8003864 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fe ff06 	bl	8002660 <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	4a43      	ldr	r2, [pc, #268]	; (8003968 <HAL_RCC_OscConfig+0x674>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e105      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003864:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d1ef      	bne.n	8003850 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003870:	2327      	movs	r3, #39	; 0x27
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b36      	ldr	r3, [pc, #216]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	4b35      	ldr	r3, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003880:	493a      	ldr	r1, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x678>)
 8003882:	400a      	ands	r2, r1
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2220      	movs	r2, #32
 800388c:	4013      	ands	r3, r2
 800388e:	d049      	beq.n	8003924 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d026      	beq.n	80038e6 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	4b2d      	ldr	r3, [pc, #180]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800389e:	2101      	movs	r1, #1
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80038a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a8:	4b2a      	ldr	r3, [pc, #168]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	430a      	orrs	r2, r1
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34
 80038b0:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <HAL_RCC_OscConfig+0x67c>)
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	4b2e      	ldr	r3, [pc, #184]	; (8003970 <HAL_RCC_OscConfig+0x67c>)
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	0189      	lsls	r1, r1, #6
 80038ba:	430a      	orrs	r2, r1
 80038bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7fe fecf 	bl	8002660 <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038c8:	f7fe feca 	bl	8002660 <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e0ca      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2202      	movs	r2, #2
 80038e0:	4013      	ands	r3, r2
 80038e2:	d0f1      	beq.n	80038c8 <HAL_RCC_OscConfig+0x5d4>
 80038e4:	e01e      	b.n	8003924 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 80038ec:	2101      	movs	r1, #1
 80038ee:	438a      	bics	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <HAL_RCC_OscConfig+0x67c>)
 80038f4:	6a1a      	ldr	r2, [r3, #32]
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <HAL_RCC_OscConfig+0x67c>)
 80038f8:	491e      	ldr	r1, [pc, #120]	; (8003974 <HAL_RCC_OscConfig+0x680>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe feaf 	bl	8002660 <HAL_GetTick>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003908:	f7fe feaa 	bl	8002660 <HAL_GetTick>
 800390c:	0002      	movs	r2, r0
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0aa      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2202      	movs	r2, #2
 8003920:	4013      	ands	r3, r2
 8003922:	d1f1      	bne.n	8003908 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	d100      	bne.n	800392e <HAL_RCC_OscConfig+0x63a>
 800392c:	e09f      	b.n	8003a6e <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	2b0c      	cmp	r3, #12
 8003932:	d100      	bne.n	8003936 <HAL_RCC_OscConfig+0x642>
 8003934:	e078      	b.n	8003a28 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	2b02      	cmp	r3, #2
 800393c:	d159      	bne.n	80039f2 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_RCC_OscConfig+0x660>)
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x684>)
 8003946:	400a      	ands	r2, r1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe fe89 	bl	8002660 <HAL_GetTick>
 800394e:	0003      	movs	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003952:	e01c      	b.n	800398e <HAL_RCC_OscConfig+0x69a>
 8003954:	40021000 	.word	0x40021000
 8003958:	ffff1fff 	.word	0xffff1fff
 800395c:	fffffeff 	.word	0xfffffeff
 8003960:	40007000 	.word	0x40007000
 8003964:	fffffbff 	.word	0xfffffbff
 8003968:	00001388 	.word	0x00001388
 800396c:	efffffff 	.word	0xefffffff
 8003970:	40010000 	.word	0x40010000
 8003974:	ffffdfff 	.word	0xffffdfff
 8003978:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7fe fe70 	bl	8002660 <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e070      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800398e:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	049b      	lsls	r3, r3, #18
 8003996:	4013      	ands	r3, r2
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4a37      	ldr	r2, [pc, #220]	; (8003a7c <HAL_RCC_OscConfig+0x788>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	0019      	movs	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	431a      	orrs	r2, r3
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b2e      	ldr	r3, [pc, #184]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	0449      	lsls	r1, r1, #17
 80039c4:	430a      	orrs	r2, r1
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fe fe4a 	bl	8002660 <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fe45 	bl	8002660 <HAL_GetTick>
 80039d6:	0002      	movs	r2, r0
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e045      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80039e4:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	049b      	lsls	r3, r3, #18
 80039ec:	4013      	ands	r3, r2
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x6de>
 80039f0:	e03d      	b.n	8003a6e <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 80039f8:	4921      	ldr	r1, [pc, #132]	; (8003a80 <HAL_RCC_OscConfig+0x78c>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fe2f 	bl	8002660 <HAL_GetTick>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe fe2a 	bl	8002660 <HAL_GetTick>
 8003a0c:	0002      	movs	r2, r0
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e02a      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a1a:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	049b      	lsls	r3, r3, #18
 8003a22:	4013      	ands	r3, r2
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x714>
 8003a26:	e022      	b.n	8003a6e <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e01d      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a34:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_RCC_OscConfig+0x784>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	025b      	lsls	r3, r3, #9
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	23f0      	movs	r3, #240	; 0xf0
 8003a4e:	039b      	lsls	r3, r3, #14
 8003a50:	401a      	ands	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	23c0      	movs	r3, #192	; 0xc0
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	401a      	ands	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b00a      	add	sp, #40	; 0x28
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	ff02ffff 	.word	0xff02ffff
 8003a80:	feffffff 	.word	0xfeffffff

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b5b0      	push	{r4, r5, r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e129      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b96      	ldr	r3, [pc, #600]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d91e      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b93      	ldr	r3, [pc, #588]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4393      	bics	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	4b90      	ldr	r3, [pc, #576]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ab8:	f7fe fdd2 	bl	8002660 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac0:	e009      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac2:	f7fe fdcd 	bl	8002660 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	4a8a      	ldr	r2, [pc, #552]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e10a      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b87      	ldr	r3, [pc, #540]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d1ee      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aee:	4b83      	ldr	r3, [pc, #524]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	22f0      	movs	r2, #240	; 0xf0
 8003af4:	4393      	bics	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003afe:	430a      	orrs	r2, r1
 8003b00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2201      	movs	r2, #1
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d100      	bne.n	8003b0e <HAL_RCC_ClockConfig+0x8a>
 8003b0c:	e089      	b.n	8003c22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b16:	4b79      	ldr	r3, [pc, #484]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d120      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e0e2      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	049b      	lsls	r3, r3, #18
 8003b36:	4013      	ands	r3, r2
 8003b38:	d114      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0d6      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d106      	bne.n	8003b54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b46:	4b6d      	ldr	r3, [pc, #436]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0cb      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b54:	4b69      	ldr	r3, [pc, #420]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0c3      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b64:	4b65      	ldr	r3, [pc, #404]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	4b62      	ldr	r3, [pc, #392]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fd72 	bl	8002660 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d111      	bne.n	8003bac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b88:	e009      	b.n	8003b9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8a:	f7fe fd69 	bl	8002660 <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0a6      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b9e:	4b57      	ldr	r3, [pc, #348]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	220c      	movs	r2, #12
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d1ef      	bne.n	8003b8a <HAL_RCC_ClockConfig+0x106>
 8003baa:	e03a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb4:	e009      	b.n	8003bca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb6:	f7fe fd53 	bl	8002660 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e090      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bca:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	220c      	movs	r2, #12
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d1ef      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x132>
 8003bd6:	e024      	b.n	8003c22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d11b      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003be0:	e009      	b.n	8003bf6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be2:	f7fe fd3d 	bl	8002660 <HAL_GetTick>
 8003be6:	0002      	movs	r2, r0
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e07a      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d1ef      	bne.n	8003be2 <HAL_RCC_ClockConfig+0x15e>
 8003c02:	e00e      	b.n	8003c22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7fe fd2c 	bl	8002660 <HAL_GetTick>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	4a3a      	ldr	r2, [pc, #232]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e069      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c18:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	220c      	movs	r2, #12
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c22:	4b34      	ldr	r3, [pc, #208]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2201      	movs	r2, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d21e      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c30:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	4393      	bics	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c42:	f7fe fd0d 	bl	8002660 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	e009      	b.n	8003c60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe fd08 	bl	8002660 <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	4a28      	ldr	r2, [pc, #160]	; (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e045      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2201      	movs	r2, #1
 8003c66:	4013      	ands	r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2204      	movs	r2, #4
 8003c74:	4013      	ands	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <HAL_RCC_ClockConfig+0x27c>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2208      	movs	r2, #8
 8003c92:	4013      	ands	r3, r2
 8003c94:	d00a      	beq.n	8003cac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_RCC_ClockConfig+0x280>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	00da      	lsls	r2, r3, #3
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cac:	f000 f832 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cb0:	0001      	movs	r1, r0
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	220f      	movs	r2, #15
 8003cba:	4013      	ands	r3, r2
 8003cbc:	4a12      	ldr	r2, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x284>)
 8003cbe:	5cd3      	ldrb	r3, [r2, r3]
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	40da      	lsrs	r2, r3
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_ClockConfig+0x288>)
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCC_ClockConfig+0x28c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	250b      	movs	r5, #11
 8003cce:	197c      	adds	r4, r7, r5
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7fe fc7f 	bl	80025d4 <HAL_InitTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003cda:	197b      	adds	r3, r7, r5
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8003ce2:	230b      	movs	r3, #11
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	e000      	b.n	8003cec <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	00001388 	.word	0x00001388
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	fffff8ff 	.word	0xfffff8ff
 8003d04:	ffffc7ff 	.word	0xffffc7ff
 8003d08:	0800662c 	.word	0x0800662c
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	2000000c 	.word	0x2000000c

08003d14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b08f      	sub	sp, #60	; 0x3c
 8003d18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	230c      	movs	r3, #12
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d00f      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x36>
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	d010      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0x3c>
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d000      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x20>
 8003d32:	e073      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003d34:	4b43      	ldr	r3, [pc, #268]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x134>)
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003d42:	e079      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8003d44:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x138>)
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d48:	e076      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d4a:	4b41      	ldr	r3, [pc, #260]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d4e:	e073      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	0c9a      	lsrs	r2, r3, #18
 8003d54:	230f      	movs	r3, #15
 8003d56:	401a      	ands	r2, r3
 8003d58:	4b3e      	ldr	r3, [pc, #248]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x140>)
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	0d9a      	lsrs	r2, r3, #22
 8003d62:	2303      	movs	r3, #3
 8003d64:	4013      	ands	r3, r2
 8003d66:	3301      	adds	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x130>)
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	2380      	movs	r3, #128	; 0x80
 8003d70:	025b      	lsls	r3, r3, #9
 8003d72:	4013      	ands	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	4a34      	ldr	r2, [pc, #208]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d80:	2300      	movs	r3, #0
 8003d82:	69b8      	ldr	r0, [r7, #24]
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	f7fc faa5 	bl	80002d4 <__aeabi_lmul>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	000c      	movs	r4, r1
 8003d8e:	0018      	movs	r0, r3
 8003d90:	0021      	movs	r1, r4
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f7fc fa79 	bl	8000294 <__aeabi_uldivmod>
 8003da2:	0003      	movs	r3, r0
 8003da4:	000c      	movs	r4, r1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	e035      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x130>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2210      	movs	r2, #16
 8003db0:	4013      	ands	r3, r2
 8003db2:	d019      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x134>)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	68b8      	ldr	r0, [r7, #8]
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	f7fc fa86 	bl	80002d4 <__aeabi_lmul>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	000c      	movs	r4, r1
 8003dcc:	0018      	movs	r0, r3
 8003dce:	0021      	movs	r1, r4
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f7fc fa5a 	bl	8000294 <__aeabi_uldivmod>
 8003de0:	0003      	movs	r3, r0
 8003de2:	000c      	movs	r4, r1
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
 8003de6:	e016      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	0018      	movs	r0, r3
 8003dec:	2300      	movs	r3, #0
 8003dee:	0019      	movs	r1, r3
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x138>)
 8003df2:	2300      	movs	r3, #0
 8003df4:	f7fc fa6e 	bl	80002d4 <__aeabi_lmul>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	000c      	movs	r4, r1
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	0021      	movs	r1, r4
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	001d      	movs	r5, r3
 8003e04:	2300      	movs	r3, #0
 8003e06:	001e      	movs	r6, r3
 8003e08:	002a      	movs	r2, r5
 8003e0a:	0033      	movs	r3, r6
 8003e0c:	f7fc fa42 	bl	8000294 <__aeabi_uldivmod>
 8003e10:	0003      	movs	r3, r0
 8003e12:	000c      	movs	r4, r1
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e1a:	e00d      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x130>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0b5b      	lsrs	r3, r3, #13
 8003e22:	2207      	movs	r2, #7
 8003e24:	4013      	ands	r3, r2
 8003e26:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	0212      	lsls	r2, r2, #8
 8003e30:	409a      	lsls	r2, r3
 8003e32:	0013      	movs	r3, r2
 8003e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b00f      	add	sp, #60	; 0x3c
 8003e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	40021000 	.word	0x40021000
 8003e48:	003d0900 	.word	0x003d0900
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	007a1200 	.word	0x007a1200
 8003e54:	08006644 	.word	0x08006644

08003e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e5c:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	20000008 	.word	0x20000008

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e70:	f7ff fff2 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003e74:	0001      	movs	r1, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	4013      	ands	r3, r2
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	40d9      	lsrs	r1, r3
 8003e86:	000b      	movs	r3, r1
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	40021000 	.word	0x40021000
 8003e94:	0800663c 	.word	0x0800663c

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffdc 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003ea0:	0001      	movs	r1, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	4013      	ands	r3, r2
 8003eac:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eae:	5cd3      	ldrb	r3, [r2, r3]
 8003eb0:	40d9      	lsrs	r1, r3
 8003eb2:	000b      	movs	r3, r1
}
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	0800663c 	.word	0x0800663c

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003ecc:	2317      	movs	r3, #23
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	4013      	ands	r3, r2
 8003edc:	d106      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d100      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003eea:	e0d9      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eec:	4b9c      	ldr	r3, [pc, #624]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	055b      	lsls	r3, r3, #21
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d10a      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b99      	ldr	r3, [pc, #612]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	4b98      	ldr	r3, [pc, #608]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	0549      	lsls	r1, r1, #21
 8003f02:	430a      	orrs	r2, r1
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003f06:	2317      	movs	r3, #23
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0e:	4b95      	ldr	r3, [pc, #596]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4013      	ands	r3, r2
 8003f18:	d11a      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1a:	4b92      	ldr	r3, [pc, #584]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b91      	ldr	r3, [pc, #580]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	0049      	lsls	r1, r1, #1
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f28:	f7fe fb9a 	bl	8002660 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fe fb95 	bl	8002660 <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	; 0x64
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e108      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b87      	ldr	r3, [pc, #540]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003f50:	4b83      	ldr	r3, [pc, #524]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	23c0      	movs	r3, #192	; 0xc0
 8003f56:	039b      	lsls	r3, r3, #14
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	23c0      	movs	r3, #192	; 0xc0
 8003f62:	039b      	lsls	r3, r3, #14
 8003f64:	4013      	ands	r3, r2
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	23c0      	movs	r3, #192	; 0xc0
 8003f72:	039b      	lsls	r3, r3, #14
 8003f74:	4013      	ands	r3, r2
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	23c0      	movs	r3, #192	; 0xc0
 8003f82:	029b      	lsls	r3, r3, #10
 8003f84:	401a      	ands	r2, r3
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	029b      	lsls	r3, r3, #10
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f8e:	4b74      	ldr	r3, [pc, #464]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	029b      	lsls	r3, r3, #10
 8003f96:	401a      	ands	r2, r3
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0d8      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003fa4:	4b6e      	ldr	r3, [pc, #440]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fa6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fa8:	23c0      	movs	r3, #192	; 0xc0
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d049      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	23c0      	movs	r3, #192	; 0xc0
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d004      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	23c0      	movs	r3, #192	; 0xc0
 8003fd6:	029b      	lsls	r3, r3, #10
 8003fd8:	4013      	ands	r3, r2
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d034      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d02e      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003fec:	4b5c      	ldr	r3, [pc, #368]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ff6:	4b5a      	ldr	r3, [pc, #360]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ffa:	4b59      	ldr	r3, [pc, #356]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003ffc:	2180      	movs	r1, #128	; 0x80
 8003ffe:	0309      	lsls	r1, r1, #12
 8004000:	430a      	orrs	r2, r1
 8004002:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004004:	4b56      	ldr	r3, [pc, #344]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004008:	4b55      	ldr	r3, [pc, #340]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800400a:	4958      	ldr	r1, [pc, #352]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800400c:	400a      	ands	r2, r1
 800400e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d014      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe fb1e 	bl	8002660 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004028:	e009      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402a:	f7fe fb19 	bl	8002660 <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	4a4e      	ldr	r2, [pc, #312]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e08b      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800403e:	4b48      	ldr	r3, [pc, #288]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4013      	ands	r3, r2
 8004048:	d0ef      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	23c0      	movs	r3, #192	; 0xc0
 8004050:	029b      	lsls	r3, r3, #10
 8004052:	401a      	ands	r2, r3
 8004054:	23c0      	movs	r3, #192	; 0xc0
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	429a      	cmp	r2, r3
 800405a:	d10c      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800405c:	4b40      	ldr	r3, [pc, #256]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a44      	ldr	r2, [pc, #272]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004062:	4013      	ands	r3, r2
 8004064:	0019      	movs	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	23c0      	movs	r3, #192	; 0xc0
 800406c:	039b      	lsls	r3, r3, #14
 800406e:	401a      	ands	r2, r3
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004078:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	23c0      	movs	r3, #192	; 0xc0
 8004080:	029b      	lsls	r3, r3, #10
 8004082:	401a      	ands	r2, r3
 8004084:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004086:	430a      	orrs	r2, r1
 8004088:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800408a:	2317      	movs	r3, #23
 800408c:	18fb      	adds	r3, r7, r3
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b32      	ldr	r3, [pc, #200]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004098:	4b31      	ldr	r3, [pc, #196]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800409a:	4937      	ldr	r1, [pc, #220]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800409c:	400a      	ands	r2, r1
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	d009      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	2203      	movs	r2, #3
 80040b0:	4393      	bics	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040ba:	430a      	orrs	r2, r1
 80040bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040cc:	220c      	movs	r2, #12
 80040ce:	4393      	bics	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2204      	movs	r2, #4
 80040e2:	4013      	ands	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	4a24      	ldr	r2, [pc, #144]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	0019      	movs	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695a      	ldr	r2, [r3, #20]
 80040f4:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80040f6:	430a      	orrs	r2, r1
 80040f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2208      	movs	r2, #8
 8004100:	4013      	ands	r3, r2
 8004102:	d009      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004114:	430a      	orrs	r2, r1
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2240      	movs	r2, #64	; 0x40
 800411e:	4013      	ands	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004126:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004128:	4013      	ands	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004132:	430a      	orrs	r2, r1
 8004134:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	4013      	ands	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004140:	4b07      	ldr	r3, [pc, #28]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004150:	430a      	orrs	r2, r1
 8004152:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b006      	add	sp, #24
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	40021000 	.word	0x40021000
 8004164:	40007000 	.word	0x40007000
 8004168:	fffcffff 	.word	0xfffcffff
 800416c:	fff7ffff 	.word	0xfff7ffff
 8004170:	00001388 	.word	0x00001388
 8004174:	ffcfffff 	.word	0xffcfffff
 8004178:	efffffff 	.word	0xefffffff
 800417c:	fffff3ff 	.word	0xfffff3ff
 8004180:	ffffcfff 	.word	0xffffcfff
 8004184:	fbffffff 	.word	0xfbffffff
 8004188:	fff3ffff 	.word	0xfff3ffff

0800418c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e032      	b.n	8004204 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2239      	movs	r2, #57	; 0x39
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2238      	movs	r2, #56	; 0x38
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7fe f853 	bl	8002260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2239      	movs	r2, #57	; 0x39
 80041be:	2102      	movs	r1, #2
 80041c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	0019      	movs	r1, r3
 80041cc:	0010      	movs	r0, r2
 80041ce:	f000 faad 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	223e      	movs	r2, #62	; 0x3e
 80041d6:	2101      	movs	r1, #1
 80041d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	223a      	movs	r2, #58	; 0x3a
 80041de:	2101      	movs	r1, #1
 80041e0:	5499      	strb	r1, [r3, r2]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	223b      	movs	r2, #59	; 0x3b
 80041e6:	2101      	movs	r1, #1
 80041e8:	5499      	strb	r1, [r3, r2]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	223c      	movs	r2, #60	; 0x3c
 80041ee:	2101      	movs	r1, #1
 80041f0:	5499      	strb	r1, [r3, r2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	223d      	movs	r2, #61	; 0x3d
 80041f6:	2101      	movs	r1, #1
 80041f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2239      	movs	r2, #57	; 0x39
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e032      	b.n	8004284 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2239      	movs	r2, #57	; 0x39
 8004222:	5c9b      	ldrb	r3, [r3, r2]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2238      	movs	r2, #56	; 0x38
 800422e:	2100      	movs	r1, #0
 8004230:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f7fe f829 	bl	800228c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2239      	movs	r2, #57	; 0x39
 800423e:	2102      	movs	r1, #2
 8004240:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	0019      	movs	r1, r3
 800424c:	0010      	movs	r0, r2
 800424e:	f000 fa6d 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	223e      	movs	r2, #62	; 0x3e
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	223a      	movs	r2, #58	; 0x3a
 800425e:	2101      	movs	r1, #1
 8004260:	5499      	strb	r1, [r3, r2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	223b      	movs	r2, #59	; 0x3b
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	223c      	movs	r2, #60	; 0x3c
 800426e:	2101      	movs	r1, #1
 8004270:	5499      	strb	r1, [r3, r2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	223d      	movs	r2, #61	; 0x3d
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2239      	movs	r2, #57	; 0x39
 800427e:	2101      	movs	r1, #1
 8004280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b002      	add	sp, #8
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <HAL_TIM_PWM_Start+0x22>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	223a      	movs	r2, #58	; 0x3a
 80042a0:	5c9b      	ldrb	r3, [r3, r2]
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	1e5a      	subs	r2, r3, #1
 80042a8:	4193      	sbcs	r3, r2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	e01f      	b.n	80042ee <HAL_TIM_PWM_Start+0x62>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d108      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x3a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223b      	movs	r2, #59	; 0x3b
 80042b8:	5c9b      	ldrb	r3, [r3, r2]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	3b01      	subs	r3, #1
 80042be:	1e5a      	subs	r2, r3, #1
 80042c0:	4193      	sbcs	r3, r2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	e013      	b.n	80042ee <HAL_TIM_PWM_Start+0x62>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d108      	bne.n	80042de <HAL_TIM_PWM_Start+0x52>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223c      	movs	r2, #60	; 0x3c
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	4193      	sbcs	r3, r2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e007      	b.n	80042ee <HAL_TIM_PWM_Start+0x62>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	223d      	movs	r2, #61	; 0x3d
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	4193      	sbcs	r3, r2
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e04d      	b.n	8004392 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x7a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223a      	movs	r2, #58	; 0x3a
 8004300:	2102      	movs	r1, #2
 8004302:	5499      	strb	r1, [r3, r2]
 8004304:	e013      	b.n	800432e <HAL_TIM_PWM_Start+0xa2>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	223b      	movs	r2, #59	; 0x3b
 8004310:	2102      	movs	r1, #2
 8004312:	5499      	strb	r1, [r3, r2]
 8004314:	e00b      	b.n	800432e <HAL_TIM_PWM_Start+0xa2>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0x9a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	223c      	movs	r2, #60	; 0x3c
 8004320:	2102      	movs	r1, #2
 8004322:	5499      	strb	r1, [r3, r2]
 8004324:	e003      	b.n	800432e <HAL_TIM_PWM_Start+0xa2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	223d      	movs	r2, #61	; 0x3d
 800432a:	2102      	movs	r1, #2
 800432c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	2201      	movs	r2, #1
 8004336:	0018      	movs	r0, r3
 8004338:	f000 fbea 	bl	8004b10 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	05db      	lsls	r3, r3, #23
 8004344:	429a      	cmp	r2, r3
 8004346:	d009      	beq.n	800435c <HAL_TIM_PWM_Start+0xd0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a13      	ldr	r2, [pc, #76]	; (800439c <HAL_TIM_PWM_Start+0x110>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d004      	beq.n	800435c <HAL_TIM_PWM_Start+0xd0>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <HAL_TIM_PWM_Start+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d111      	bne.n	8004380 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2207      	movs	r2, #7
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b06      	cmp	r3, #6
 800436c:	d010      	beq.n	8004390 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437e:	e007      	b.n	8004390 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b004      	add	sp, #16
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	40010800 	.word	0x40010800
 80043a0:	40011400 	.word	0x40011400

080043a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6839      	ldr	r1, [r7, #0]
 80043b4:	2200      	movs	r2, #0
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 fbaa 	bl	8004b10 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <HAL_TIM_PWM_Stop+0x78>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_PWM_Stop+0x34>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2101      	movs	r1, #1
 80043d4:	438a      	bics	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <HAL_TIM_PWM_Stop+0x44>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	223a      	movs	r2, #58	; 0x3a
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
 80043e6:	e013      	b.n	8004410 <HAL_TIM_PWM_Stop+0x6c>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d104      	bne.n	80043f8 <HAL_TIM_PWM_Stop+0x54>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	223b      	movs	r2, #59	; 0x3b
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]
 80043f6:	e00b      	b.n	8004410 <HAL_TIM_PWM_Stop+0x6c>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d104      	bne.n	8004408 <HAL_TIM_PWM_Stop+0x64>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223c      	movs	r2, #60	; 0x3c
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]
 8004406:	e003      	b.n	8004410 <HAL_TIM_PWM_Stop+0x6c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223d      	movs	r2, #61	; 0x3d
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	00001111 	.word	0x00001111

08004420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2317      	movs	r3, #23
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2238      	movs	r2, #56	; 0x38
 8004438:	5c9b      	ldrb	r3, [r3, r2]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_ConfigChannel+0x22>
 800443e:	2302      	movs	r3, #2
 8004440:	e0a3      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2238      	movs	r2, #56	; 0x38
 8004446:	2101      	movs	r1, #1
 8004448:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d029      	beq.n	80044a4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004450:	d802      	bhi.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_TIM_PWM_ConfigChannel+0x42>
 8004456:	e08c      	b.n	8004572 <HAL_TIM_PWM_ConfigChannel+0x152>
 8004458:	2b08      	cmp	r3, #8
 800445a:	d046      	beq.n	80044ea <HAL_TIM_PWM_ConfigChannel+0xca>
 800445c:	2b0c      	cmp	r3, #12
 800445e:	d065      	beq.n	800452c <HAL_TIM_PWM_ConfigChannel+0x10c>
 8004460:	e087      	b.n	8004572 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f9b2 	bl	80047d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2108      	movs	r1, #8
 800447c:	430a      	orrs	r2, r1
 800447e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2104      	movs	r1, #4
 800448c:	438a      	bics	r2, r1
 800448e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	619a      	str	r2, [r3, #24]
      break;
 80044a2:	e06b      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	0011      	movs	r1, r2
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 f9cd 	bl	800484c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	0109      	lsls	r1, r1, #4
 80044c0:	430a      	orrs	r2, r1
 80044c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4931      	ldr	r1, [pc, #196]	; (8004594 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80044d0:	400a      	ands	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6999      	ldr	r1, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	021a      	lsls	r2, r3, #8
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	619a      	str	r2, [r3, #24]
      break;
 80044e8:	e048      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 f9ec 	bl	80048d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2108      	movs	r1, #8
 8004504:	430a      	orrs	r2, r1
 8004506:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69da      	ldr	r2, [r3, #28]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2104      	movs	r1, #4
 8004514:	438a      	bics	r2, r1
 8004516:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69d9      	ldr	r1, [r3, #28]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	61da      	str	r2, [r3, #28]
      break;
 800452a:	e027      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	0011      	movs	r1, r2
 8004534:	0018      	movs	r0, r3
 8004536:	f000 fa0b 	bl	8004950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0109      	lsls	r1, r1, #4
 8004548:	430a      	orrs	r2, r1
 800454a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	490f      	ldr	r1, [pc, #60]	; (8004594 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004558:	400a      	ands	r2, r1
 800455a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69d9      	ldr	r1, [r3, #28]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
      break;
 8004570:	e004      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8004572:	2317      	movs	r3, #23
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
      break;
 800457a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2238      	movs	r2, #56	; 0x38
 8004580:	2100      	movs	r1, #0
 8004582:	5499      	strb	r1, [r3, r2]

  return status;
 8004584:	2317      	movs	r3, #23
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	781b      	ldrb	r3, [r3, #0]
}
 800458a:	0018      	movs	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	b006      	add	sp, #24
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	fffffbff 	.word	0xfffffbff

08004598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2238      	movs	r2, #56	; 0x38
 80045ae:	5c9b      	ldrb	r3, [r3, r2]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x20>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0b2      	b.n	800471e <HAL_TIM_ConfigClockSource+0x186>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2238      	movs	r2, #56	; 0x38
 80045bc:	2101      	movs	r1, #1
 80045be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2239      	movs	r2, #57	; 0x39
 80045c4:	2102      	movs	r1, #2
 80045c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2277      	movs	r2, #119	; 0x77
 80045d4:	4393      	bics	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a53      	ldr	r2, [pc, #332]	; (8004728 <HAL_TIM_ConfigClockSource+0x190>)
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d100      	bne.n	80045f2 <HAL_TIM_ConfigClockSource+0x5a>
 80045f0:	e06b      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x132>
 80045f2:	d80e      	bhi.n	8004612 <HAL_TIM_ConfigClockSource+0x7a>
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d100      	bne.n	80045fa <HAL_TIM_ConfigClockSource+0x62>
 80045f8:	e077      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x152>
 80045fa:	d803      	bhi.n	8004604 <HAL_TIM_ConfigClockSource+0x6c>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d100      	bne.n	8004602 <HAL_TIM_ConfigClockSource+0x6a>
 8004600:	e073      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x152>
 8004602:	e07b      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x164>
 8004604:	2b20      	cmp	r3, #32
 8004606:	d100      	bne.n	800460a <HAL_TIM_ConfigClockSource+0x72>
 8004608:	e06f      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x152>
 800460a:	2b30      	cmp	r3, #48	; 0x30
 800460c:	d100      	bne.n	8004610 <HAL_TIM_ConfigClockSource+0x78>
 800460e:	e06c      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x152>
 8004610:	e074      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x164>
 8004612:	2b70      	cmp	r3, #112	; 0x70
 8004614:	d00e      	beq.n	8004634 <HAL_TIM_ConfigClockSource+0x9c>
 8004616:	d804      	bhi.n	8004622 <HAL_TIM_ConfigClockSource+0x8a>
 8004618:	2b50      	cmp	r3, #80	; 0x50
 800461a:	d036      	beq.n	800468a <HAL_TIM_ConfigClockSource+0xf2>
 800461c:	2b60      	cmp	r3, #96	; 0x60
 800461e:	d044      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x112>
 8004620:	e06c      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x164>
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	0152      	lsls	r2, r2, #5
 8004626:	4293      	cmp	r3, r2
 8004628:	d06d      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0x16e>
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	0192      	lsls	r2, r2, #6
 800462e:	4293      	cmp	r3, r2
 8004630:	d017      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xca>
 8004632:	e063      	b.n	80046fc <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f000 fa44 	bl	8004ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2277      	movs	r2, #119	; 0x77
 8004654:	4313      	orrs	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e052      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f000 fa2d 	bl	8004ad0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	01c9      	lsls	r1, r1, #7
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
      break;
 8004688:	e03e      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	001a      	movs	r2, r3
 8004698:	f000 f9a0 	bl	80049dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2150      	movs	r1, #80	; 0x50
 80046a2:	0018      	movs	r0, r3
 80046a4:	f000 f9fa 	bl	8004a9c <TIM_ITRx_SetConfig>
      break;
 80046a8:	e02e      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	001a      	movs	r2, r3
 80046b8:	f000 f9be 	bl	8004a38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2160      	movs	r1, #96	; 0x60
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 f9ea 	bl	8004a9c <TIM_ITRx_SetConfig>
      break;
 80046c8:	e01e      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	001a      	movs	r2, r3
 80046d8:	f000 f980 	bl	80049dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2140      	movs	r1, #64	; 0x40
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f9da 	bl	8004a9c <TIM_ITRx_SetConfig>
      break;
 80046e8:	e00e      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0019      	movs	r1, r3
 80046f4:	0010      	movs	r0, r2
 80046f6:	f000 f9d1 	bl	8004a9c <TIM_ITRx_SetConfig>
      break;
 80046fa:	e005      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 80046fc:	230f      	movs	r3, #15
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	2201      	movs	r2, #1
 8004702:	701a      	strb	r2, [r3, #0]
      break;
 8004704:	e000      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x170>
      break;
 8004706:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2239      	movs	r2, #57	; 0x39
 800470c:	2101      	movs	r1, #1
 800470e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2238      	movs	r2, #56	; 0x38
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

  return status;
 8004718:	230f      	movs	r3, #15
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	ffff00ff 	.word	0xffff00ff

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0x2a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <TIM_Base_SetConfig+0x9c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0x2a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <TIM_Base_SetConfig+0xa0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2270      	movs	r2, #112	; 0x70
 800475a:	4393      	bics	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	429a      	cmp	r2, r3
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x56>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_Base_SetConfig+0x9c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x56>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_Base_SetConfig+0xa0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <TIM_Base_SetConfig+0xa4>)
 8004786:	4013      	ands	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2280      	movs	r2, #128	; 0x80
 8004798:	4393      	bics	r3, r2
 800479a:	001a      	movs	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	615a      	str	r2, [r3, #20]
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40010800 	.word	0x40010800
 80047cc:	40011400 	.word	0x40011400
 80047d0:	fffffcff 	.word	0xfffffcff

080047d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	2201      	movs	r2, #1
 80047e4:	4393      	bics	r3, r2
 80047e6:	001a      	movs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2270      	movs	r2, #112	; 0x70
 8004802:	4393      	bics	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2203      	movs	r2, #3
 800480a:	4393      	bics	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2202      	movs	r2, #2
 800481c:	4393      	bics	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b006      	add	sp, #24
 800484a:	bd80      	pop	{r7, pc}

0800484c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	2210      	movs	r2, #16
 800485c:	4393      	bics	r3, r2
 800485e:	001a      	movs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <TIM_OC2_SetConfig+0x7c>)
 800487a:	4013      	ands	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a12      	ldr	r2, [pc, #72]	; (80048cc <TIM_OC2_SetConfig+0x80>)
 8004882:	4013      	ands	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2220      	movs	r2, #32
 8004896:	4393      	bics	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b006      	add	sp, #24
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	ffff8fff 	.word	0xffff8fff
 80048cc:	fffffcff 	.word	0xfffffcff

080048d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4a1a      	ldr	r2, [pc, #104]	; (8004948 <TIM_OC3_SetConfig+0x78>)
 80048e0:	401a      	ands	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2270      	movs	r2, #112	; 0x70
 80048fc:	4393      	bics	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2203      	movs	r2, #3
 8004904:	4393      	bics	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4a0d      	ldr	r2, [pc, #52]	; (800494c <TIM_OC3_SetConfig+0x7c>)
 8004916:	4013      	ands	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	621a      	str	r2, [r3, #32]
}
 8004940:	46c0      	nop			; (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b006      	add	sp, #24
 8004946:	bd80      	pop	{r7, pc}
 8004948:	fffffeff 	.word	0xfffffeff
 800494c:	fffffdff 	.word	0xfffffdff

08004950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <TIM_OC4_SetConfig+0x7c>)
 8004960:	401a      	ands	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <TIM_OC4_SetConfig+0x80>)
 800497c:	4013      	ands	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <TIM_OC4_SetConfig+0x84>)
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <TIM_OC4_SetConfig+0x88>)
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	031b      	lsls	r3, r3, #12
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b006      	add	sp, #24
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	ffffefff 	.word	0xffffefff
 80049d0:	ffff8fff 	.word	0xffff8fff
 80049d4:	fffffcff 	.word	0xfffffcff
 80049d8:	ffffdfff 	.word	0xffffdfff

080049dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	2201      	movs	r2, #1
 80049f4:	4393      	bics	r3, r2
 80049f6:	001a      	movs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	22f0      	movs	r2, #240	; 0xf0
 8004a06:	4393      	bics	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	220a      	movs	r2, #10
 8004a18:	4393      	bics	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	b006      	add	sp, #24
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	2210      	movs	r2, #16
 8004a4a:	4393      	bics	r3, r2
 8004a4c:	001a      	movs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <TIM_TI2_ConfigInputStage+0x60>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	22a0      	movs	r2, #160	; 0xa0
 8004a74:	4393      	bics	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b006      	add	sp, #24
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	ffff0fff 	.word	0xffff0fff

08004a9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2270      	movs	r2, #112	; 0x70
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	2207      	movs	r2, #7
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	609a      	str	r2, [r3, #8]
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b004      	add	sp, #16
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <TIM_ETR_SetConfig+0x3c>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	609a      	str	r2, [r3, #8]
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	ffff00ff 	.word	0xffff00ff

08004b10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	221f      	movs	r2, #31
 8004b20:	4013      	ands	r3, r2
 8004b22:	2201      	movs	r2, #1
 8004b24:	409a      	lsls	r2, r3
 8004b26:	0013      	movs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	43d2      	mvns	r2, r2
 8004b32:	401a      	ands	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	211f      	movs	r1, #31
 8004b40:	400b      	ands	r3, r1
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4099      	lsls	r1, r3
 8004b46:	000b      	movs	r3, r1
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b006      	add	sp, #24
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2238      	movs	r2, #56	; 0x38
 8004b66:	5c9b      	ldrb	r3, [r3, r2]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e042      	b.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2238      	movs	r2, #56	; 0x38
 8004b74:	2101      	movs	r1, #1
 8004b76:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2239      	movs	r2, #57	; 0x39
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2270      	movs	r2, #112	; 0x70
 8004b94:	4393      	bics	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d009      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a11      	ldr	r2, [pc, #68]	; (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a0f      	ldr	r2, [pc, #60]	; (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10c      	bne.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2280      	movs	r2, #128	; 0x80
 8004bce:	4393      	bics	r3, r2
 8004bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2239      	movs	r2, #57	; 0x39
 8004be8:	2101      	movs	r1, #1
 8004bea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2238      	movs	r2, #56	; 0x38
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b004      	add	sp, #16
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	40010800 	.word	0x40010800
 8004c04:	40011400 	.word	0x40011400

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e044      	b.n	8004ca4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d107      	bne.n	8004c32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2274      	movs	r2, #116	; 0x74
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fd fc3b 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2224      	movs	r2, #36	; 0x24
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2101      	movs	r1, #1
 8004c44:	438a      	bics	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fbf2 	bl	8005434 <UART_SetConfig>
 8004c50:	0003      	movs	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e024      	b.n	8004ca4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 fe83 	bl	8005970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	490d      	ldr	r1, [pc, #52]	; (8004cac <HAL_UART_Init+0xa4>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	212a      	movs	r1, #42	; 0x2a
 8004c86:	438a      	bics	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f000 ff1b 	bl	8005ad8 <UART_CheckIdleState>
 8004ca2:	0003      	movs	r3, r0
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	ffffb7ff 	.word	0xffffb7ff

08004cb0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	1dbb      	adds	r3, r7, #6
 8004cbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d000      	beq.n	8004cc8 <HAL_UART_Transmit_IT+0x18>
 8004cc6:	e068      	b.n	8004d9a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_UART_Transmit_IT+0x26>
 8004cce:	1dbb      	adds	r3, r7, #6
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e060      	b.n	8004d9c <HAL_UART_Transmit_IT+0xec>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	015b      	lsls	r3, r3, #5
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d109      	bne.n	8004cfa <HAL_UART_Transmit_IT+0x4a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d105      	bne.n	8004cfa <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	d001      	beq.n	8004cfa <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e050      	b.n	8004d9c <HAL_UART_Transmit_IT+0xec>
      }
    }

    __HAL_LOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2274      	movs	r2, #116	; 0x74
 8004cfe:	5c9b      	ldrb	r3, [r3, r2]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Transmit_IT+0x58>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e049      	b.n	8004d9c <HAL_UART_Transmit_IT+0xec>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2274      	movs	r2, #116	; 0x74
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1dba      	adds	r2, r7, #6
 8004d1a:	2150      	movs	r1, #80	; 0x50
 8004d1c:	8812      	ldrh	r2, [r2, #0]
 8004d1e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1dba      	adds	r2, r7, #6
 8004d24:	2152      	movs	r1, #82	; 0x52
 8004d26:	8812      	ldrh	r2, [r2, #0]
 8004d28:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	2100      	movs	r1, #0
 8004d36:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2221      	movs	r2, #33	; 0x21
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	015b      	lsls	r3, r3, #5
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d107      	bne.n	8004d5a <HAL_UART_Transmit_IT+0xaa>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_UART_Transmit_IT+0xf4>)
 8004d56:	669a      	str	r2, [r3, #104]	; 0x68
 8004d58:	e002      	b.n	8004d60 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <HAL_UART_Transmit_IT+0xf8>)
 8004d5e:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2274      	movs	r2, #116	; 0x74
 8004d64:	2100      	movs	r1, #0
 8004d66:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	613b      	str	r3, [r7, #16]
  return(result);
 8004d6e:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	2301      	movs	r3, #1
 8004d74:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f383 8810 	msr	PRIMASK, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2180      	movs	r1, #128	; 0x80
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	61bb      	str	r3, [r7, #24]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b008      	add	sp, #32
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	08005fcd 	.word	0x08005fcd
 8004da8:	08005f23 	.word	0x08005f23

08004dac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	1dbb      	adds	r3, r7, #6
 8004db8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d153      	bne.n	8004e6a <HAL_UART_Receive_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_UART_Receive_IT+0x24>
 8004dc8:	1dbb      	adds	r3, r7, #6
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04b      	b.n	8004e6c <HAL_UART_Receive_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	015b      	lsls	r3, r3, #5
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d109      	bne.n	8004df4 <HAL_UART_Receive_IT+0x48>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2201      	movs	r2, #1
 8004dec:	4013      	ands	r3, r2
 8004dee:	d001      	beq.n	8004df4 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e03b      	b.n	8004e6c <HAL_UART_Receive_IT+0xc0>
      }
    }

    __HAL_LOCK(huart);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2274      	movs	r2, #116	; 0x74
 8004df8:	5c9b      	ldrb	r3, [r3, r2]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Receive_IT+0x56>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e034      	b.n	8004e6c <HAL_UART_Receive_IT+0xc0>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2274      	movs	r2, #116	; 0x74
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_UART_Receive_IT+0xc8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01e      	beq.n	8004e58 <HAL_UART_Receive_IT+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	041b      	lsls	r3, r3, #16
 8004e24:	4013      	ands	r3, r2
 8004e26:	d017      	beq.n	8004e58 <HAL_UART_Receive_IT+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e28:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	2301      	movs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f383 8810 	msr	PRIMASK, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2180      	movs	r1, #128	; 0x80
 8004e48:	04c9      	lsls	r1, r1, #19
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e58:	1dbb      	adds	r3, r7, #6
 8004e5a:	881a      	ldrh	r2, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f000 ff3f 	bl	8005ce4 <UART_Start_Receive_IT>
 8004e66:	0003      	movs	r3, r0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Receive_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b008      	add	sp, #32
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40004800 	.word	0x40004800

08004e78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0aa      	sub	sp, #168	; 0xa8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	22a4      	movs	r2, #164	; 0xa4
 8004e88:	18b9      	adds	r1, r7, r2
 8004e8a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	21a0      	movs	r1, #160	; 0xa0
 8004e94:	1879      	adds	r1, r7, r1
 8004e96:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	219c      	movs	r1, #156	; 0x9c
 8004ea0:	1879      	adds	r1, r7, r1
 8004ea2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ea4:	18bb      	adds	r3, r7, r2
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a99      	ldr	r2, [pc, #612]	; (8005110 <HAL_UART_IRQHandler+0x298>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2298      	movs	r2, #152	; 0x98
 8004eae:	18b9      	adds	r1, r7, r2
 8004eb0:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 8004eb2:	18bb      	adds	r3, r7, r2
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eba:	23a4      	movs	r3, #164	; 0xa4
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d010      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ec6:	23a0      	movs	r3, #160	; 0xa0
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d100      	bne.n	8004edc <HAL_UART_IRQHandler+0x64>
 8004eda:	e28e      	b.n	80053fa <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	4798      	blx	r3
      }
      return;
 8004ee6:	e288      	b.n	80053fa <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ee8:	2398      	movs	r3, #152	; 0x98
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d100      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x7c>
 8004ef2:	e113      	b.n	800511c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ef4:	239c      	movs	r3, #156	; 0x9c
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	4013      	ands	r3, r2
 8004efe:	d106      	bne.n	8004f0e <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f00:	23a0      	movs	r3, #160	; 0xa0
 8004f02:	18fb      	adds	r3, r7, r3
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a83      	ldr	r2, [pc, #524]	; (8005114 <HAL_UART_IRQHandler+0x29c>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d100      	bne.n	8004f0e <HAL_UART_IRQHandler+0x96>
 8004f0c:	e106      	b.n	800511c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f0e:	23a4      	movs	r3, #164	; 0xa4
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2201      	movs	r2, #1
 8004f16:	4013      	ands	r3, r2
 8004f18:	d012      	beq.n	8004f40 <HAL_UART_IRQHandler+0xc8>
 8004f1a:	23a0      	movs	r3, #160	; 0xa0
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	589b      	ldr	r3, [r3, r2]
 8004f36:	2201      	movs	r2, #1
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f40:	23a4      	movs	r3, #164	; 0xa4
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2202      	movs	r2, #2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d011      	beq.n	8004f70 <HAL_UART_IRQHandler+0xf8>
 8004f4c:	239c      	movs	r3, #156	; 0x9c
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2201      	movs	r2, #1
 8004f54:	4013      	ands	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	589b      	ldr	r3, [r3, r2]
 8004f66:	2204      	movs	r2, #4
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2180      	movs	r1, #128	; 0x80
 8004f6e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f70:	23a4      	movs	r3, #164	; 0xa4
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2204      	movs	r2, #4
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d011      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x128>
 8004f7c:	239c      	movs	r3, #156	; 0x9c
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	589b      	ldr	r3, [r3, r2]
 8004f96:	2202      	movs	r2, #2
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fa0:	23a4      	movs	r3, #164	; 0xa4
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d017      	beq.n	8004fdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fac:	23a0      	movs	r3, #160	; 0xa0
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d105      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004fb8:	239c      	movs	r3, #156	; 0x9c
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004fc2:	d00b      	beq.n	8004fdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2208      	movs	r2, #8
 8004fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2280      	movs	r2, #128	; 0x80
 8004fd0:	589b      	ldr	r3, [r3, r2]
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fdc:	23a4      	movs	r3, #164	; 0xa4
 8004fde:	18fb      	adds	r3, r7, r3
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2380      	movs	r3, #128	; 0x80
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_UART_IRQHandler+0x19a>
 8004fea:	23a0      	movs	r3, #160	; 0xa0
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	04db      	lsls	r3, r3, #19
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00c      	beq.n	8005012 <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	0112      	lsls	r2, r2, #4
 8005000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2280      	movs	r2, #128	; 0x80
 8005006:	589b      	ldr	r3, [r3, r2]
 8005008:	2220      	movs	r2, #32
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2180      	movs	r1, #128	; 0x80
 8005010:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2280      	movs	r2, #128	; 0x80
 8005016:	589b      	ldr	r3, [r3, r2]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d100      	bne.n	800501e <HAL_UART_IRQHandler+0x1a6>
 800501c:	e1ef      	b.n	80053fe <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800501e:	23a4      	movs	r3, #164	; 0xa4
 8005020:	18fb      	adds	r3, r7, r3
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2220      	movs	r2, #32
 8005026:	4013      	ands	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800502a:	23a0      	movs	r3, #160	; 0xa0
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2220      	movs	r2, #32
 8005032:	4013      	ands	r3, r2
 8005034:	d008      	beq.n	8005048 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	0010      	movs	r0, r2
 8005046:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2280      	movs	r2, #128	; 0x80
 800504c:	589b      	ldr	r3, [r3, r2]
 800504e:	2294      	movs	r2, #148	; 0x94
 8005050:	18ba      	adds	r2, r7, r2
 8005052:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	4013      	ands	r3, r2
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d005      	beq.n	800506e <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005062:	2394      	movs	r3, #148	; 0x94
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2228      	movs	r2, #40	; 0x28
 800506a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800506c:	d045      	beq.n	80050fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fee3 	bl	8005e3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2240      	movs	r2, #64	; 0x40
 800507e:	4013      	ands	r3, r2
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d135      	bne.n	80050f0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005084:	f3ef 8310 	mrs	r3, PRIMASK
 8005088:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800508a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800508c:	2090      	movs	r0, #144	; 0x90
 800508e:	183a      	adds	r2, r7, r0
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	2301      	movs	r3, #1
 8005094:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005098:	f383 8810 	msr	PRIMASK, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2140      	movs	r1, #64	; 0x40
 80050a8:	438a      	bics	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	183b      	adds	r3, r7, r0
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050b4:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <HAL_UART_IRQHandler+0x2a0>)
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fd fc11 	bl	80028f4 <HAL_DMA_Abort_IT>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d01a      	beq.n	800510c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	0018      	movs	r0, r3
 80050e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e012      	b.n	800510c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f7fc fc89 	bl	8001a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ee:	e00d      	b.n	800510c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7fc fc84 	bl	8001a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	e008      	b.n	800510c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f7fc fc7f 	bl	8001a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2280      	movs	r2, #128	; 0x80
 8005106:	2100      	movs	r1, #0
 8005108:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800510a:	e178      	b.n	80053fe <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	46c0      	nop			; (mov r8, r8)
    return;
 800510e:	e176      	b.n	80053fe <HAL_UART_IRQHandler+0x586>
 8005110:	0000080f 	.word	0x0000080f
 8005114:	04000120 	.word	0x04000120
 8005118:	08005ef5 	.word	0x08005ef5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	2b01      	cmp	r3, #1
 8005122:	d000      	beq.n	8005126 <HAL_UART_IRQHandler+0x2ae>
 8005124:	e129      	b.n	800537a <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005126:	23a4      	movs	r3, #164	; 0xa4
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2210      	movs	r2, #16
 800512e:	4013      	ands	r3, r2
 8005130:	d100      	bne.n	8005134 <HAL_UART_IRQHandler+0x2bc>
 8005132:	e122      	b.n	800537a <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005134:	23a0      	movs	r3, #160	; 0xa0
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	4013      	ands	r3, r2
 800513e:	d100      	bne.n	8005142 <HAL_UART_IRQHandler+0x2ca>
 8005140:	e11b      	b.n	800537a <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2210      	movs	r2, #16
 8005148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2240      	movs	r2, #64	; 0x40
 8005152:	4013      	ands	r3, r2
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d000      	beq.n	800515a <HAL_UART_IRQHandler+0x2e2>
 8005158:	e097      	b.n	800528a <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	217e      	movs	r1, #126	; 0x7e
 8005164:	187b      	adds	r3, r7, r1
 8005166:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005168:	187b      	adds	r3, r7, r1
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d100      	bne.n	8005172 <HAL_UART_IRQHandler+0x2fa>
 8005170:	e147      	b.n	8005402 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2258      	movs	r2, #88	; 0x58
 8005176:	5a9b      	ldrh	r3, [r3, r2]
 8005178:	227e      	movs	r2, #126	; 0x7e
 800517a:	18ba      	adds	r2, r7, r2
 800517c:	8812      	ldrh	r2, [r2, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d300      	bcc.n	8005184 <HAL_UART_IRQHandler+0x30c>
 8005182:	e13e      	b.n	8005402 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	227e      	movs	r2, #126	; 0x7e
 8005188:	18ba      	adds	r2, r7, r2
 800518a:	215a      	movs	r1, #90	; 0x5a
 800518c:	8812      	ldrh	r2, [r2, #0]
 800518e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2220      	movs	r2, #32
 800519a:	4013      	ands	r3, r2
 800519c:	d166      	bne.n	800526c <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519e:	f3ef 8310 	mrs	r3, PRIMASK
 80051a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80051a8:	2301      	movs	r3, #1
 80051aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	f383 8810 	msr	PRIMASK, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4995      	ldr	r1, [pc, #596]	; (8005414 <HAL_UART_IRQHandler+0x59c>)
 80051be:	400a      	ands	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	677b      	str	r3, [r7, #116]	; 0x74
 80051d6:	2301      	movs	r3, #1
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051dc:	f383 8810 	msr	PRIMASK, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2101      	movs	r1, #1
 80051ec:	438a      	bics	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f2:	647b      	str	r3, [r7, #68]	; 0x44
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005202:	673b      	str	r3, [r7, #112]	; 0x70
 8005204:	2301      	movs	r3, #1
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520a:	f383 8810 	msr	PRIMASK, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	438a      	bics	r2, r1
 800521c:	609a      	str	r2, [r3, #8]
 800521e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005220:	653b      	str	r3, [r7, #80]	; 0x50
 8005222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005224:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005234:	f3ef 8310 	mrs	r3, PRIMASK
 8005238:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800523a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800523e:	2301      	movs	r3, #1
 8005240:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005244:	f383 8810 	msr	PRIMASK, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2110      	movs	r1, #16
 8005254:	438a      	bics	r2, r1
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800525c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525e:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	0018      	movs	r0, r3
 8005268:	f7fd fb04 	bl	8002874 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2258      	movs	r2, #88	; 0x58
 8005270:	5a9a      	ldrh	r2, [r3, r2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	215a      	movs	r1, #90	; 0x5a
 8005276:	5a5b      	ldrh	r3, [r3, r1]
 8005278:	b29b      	uxth	r3, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	b29a      	uxth	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0011      	movs	r1, r2
 8005282:	0018      	movs	r0, r3
 8005284:	f000 f8ca 	bl	800541c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005288:	e0bb      	b.n	8005402 <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2258      	movs	r2, #88	; 0x58
 800528e:	5a99      	ldrh	r1, [r3, r2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	225a      	movs	r2, #90	; 0x5a
 8005294:	5a9b      	ldrh	r3, [r3, r2]
 8005296:	b29a      	uxth	r2, r3
 8005298:	238e      	movs	r3, #142	; 0x8e
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	1a8a      	subs	r2, r1, r2
 800529e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	225a      	movs	r2, #90	; 0x5a
 80052a4:	5a9b      	ldrh	r3, [r3, r2]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d100      	bne.n	80052ae <HAL_UART_IRQHandler+0x436>
 80052ac:	e0ab      	b.n	8005406 <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 80052ae:	238e      	movs	r3, #142	; 0x8e
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d100      	bne.n	80052ba <HAL_UART_IRQHandler+0x442>
 80052b8:	e0a5      	b.n	8005406 <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c2:	2088      	movs	r0, #136	; 0x88
 80052c4:	183a      	adds	r2, r7, r0
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	2301      	movs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f383 8810 	msr	PRIMASK, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	494e      	ldr	r1, [pc, #312]	; (8005418 <HAL_UART_IRQHandler+0x5a0>)
 80052de:	400a      	ands	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ee:	f3ef 8310 	mrs	r3, PRIMASK
 80052f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	2084      	movs	r0, #132	; 0x84
 80052f8:	183a      	adds	r2, r7, r0
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	2301      	movs	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f383 8810 	msr	PRIMASK, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2101      	movs	r1, #1
 8005312:	438a      	bics	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	183b      	adds	r3, r7, r0
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005334:	f3ef 8310 	mrs	r3, PRIMASK
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533c:	2080      	movs	r0, #128	; 0x80
 800533e:	183a      	adds	r2, r7, r0
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	2301      	movs	r3, #1
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	f383 8810 	msr	PRIMASK, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2110      	movs	r1, #16
 8005358:	438a      	bics	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	183b      	adds	r3, r7, r0
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005368:	238e      	movs	r3, #142	; 0x8e
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	0011      	movs	r1, r2
 8005372:	0018      	movs	r0, r3
 8005374:	f000 f852 	bl	800541c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005378:	e045      	b.n	8005406 <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800537a:	23a4      	movs	r3, #164	; 0xa4
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	035b      	lsls	r3, r3, #13
 8005384:	4013      	ands	r3, r2
 8005386:	d010      	beq.n	80053aa <HAL_UART_IRQHandler+0x532>
 8005388:	239c      	movs	r3, #156	; 0x9c
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	03db      	lsls	r3, r3, #15
 8005392:	4013      	ands	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	0352      	lsls	r2, r2, #13
 800539e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 fff2 	bl	800638c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053a8:	e030      	b.n	800540c <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053aa:	23a4      	movs	r3, #164	; 0xa4
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2280      	movs	r2, #128	; 0x80
 80053b2:	4013      	ands	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053b6:	23a0      	movs	r3, #160	; 0xa0
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	4013      	ands	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01f      	beq.n	800540a <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	0010      	movs	r0, r2
 80053d2:	4798      	blx	r3
    }
    return;
 80053d4:	e019      	b.n	800540a <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053d6:	23a4      	movs	r3, #164	; 0xa4
 80053d8:	18fb      	adds	r3, r7, r3
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2240      	movs	r2, #64	; 0x40
 80053de:	4013      	ands	r3, r2
 80053e0:	d014      	beq.n	800540c <HAL_UART_IRQHandler+0x594>
 80053e2:	23a0      	movs	r3, #160	; 0xa0
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	4013      	ands	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 fe45 	bl	8006080 <UART_EndTransmit_IT>
    return;
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	e008      	b.n	800540c <HAL_UART_IRQHandler+0x594>
      return;
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	e006      	b.n	800540c <HAL_UART_IRQHandler+0x594>
    return;
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	e004      	b.n	800540c <HAL_UART_IRQHandler+0x594>
      return;
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	e002      	b.n	800540c <HAL_UART_IRQHandler+0x594>
      return;
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	e000      	b.n	800540c <HAL_UART_IRQHandler+0x594>
    return;
 800540a:	46c0      	nop			; (mov r8, r8)
  }

}
 800540c:	46bd      	mov	sp, r7
 800540e:	b02a      	add	sp, #168	; 0xa8
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	fffffeff 	.word	0xfffffeff
 8005418:	fffffedf 	.word	0xfffffedf

0800541c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	000a      	movs	r2, r1
 8005426:	1cbb      	adds	r3, r7, #2
 8005428:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b002      	add	sp, #8
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005434:	b5b0      	push	{r4, r5, r7, lr}
 8005436:	b08e      	sub	sp, #56	; 0x38
 8005438:	af00      	add	r7, sp, #0
 800543a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800543c:	231a      	movs	r3, #26
 800543e:	2218      	movs	r2, #24
 8005440:	4694      	mov	ip, r2
 8005442:	44bc      	add	ip, r7
 8005444:	4463      	add	r3, ip
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	431a      	orrs	r2, r3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	431a      	orrs	r2, r3
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	4313      	orrs	r3, r2
 8005460:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4aca      	ldr	r2, [pc, #808]	; (8005794 <UART_SetConfig+0x360>)
 800546a:	4013      	ands	r3, r2
 800546c:	0019      	movs	r1, r3
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4ac6      	ldr	r2, [pc, #792]	; (8005798 <UART_SetConfig+0x364>)
 8005480:	4013      	ands	r3, r2
 8005482:	0019      	movs	r1, r3
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4ac0      	ldr	r2, [pc, #768]	; (800579c <UART_SetConfig+0x368>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a6:	4313      	orrs	r3, r2
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4abb      	ldr	r2, [pc, #748]	; (80057a0 <UART_SetConfig+0x36c>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054bc:	430a      	orrs	r2, r1
 80054be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4ab7      	ldr	r2, [pc, #732]	; (80057a4 <UART_SetConfig+0x370>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d134      	bne.n	8005534 <UART_SetConfig+0x100>
 80054ca:	4bb7      	ldr	r3, [pc, #732]	; (80057a8 <UART_SetConfig+0x374>)
 80054cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ce:	2203      	movs	r2, #3
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d015      	beq.n	8005502 <UART_SetConfig+0xce>
 80054d6:	d304      	bcc.n	80054e2 <UART_SetConfig+0xae>
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d00a      	beq.n	80054f2 <UART_SetConfig+0xbe>
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d018      	beq.n	8005512 <UART_SetConfig+0xde>
 80054e0:	e01f      	b.n	8005522 <UART_SetConfig+0xee>
 80054e2:	231b      	movs	r3, #27
 80054e4:	2218      	movs	r2, #24
 80054e6:	4694      	mov	ip, r2
 80054e8:	44bc      	add	ip, r7
 80054ea:	4463      	add	r3, ip
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e0ab      	b.n	800564a <UART_SetConfig+0x216>
 80054f2:	231b      	movs	r3, #27
 80054f4:	2218      	movs	r2, #24
 80054f6:	4694      	mov	ip, r2
 80054f8:	44bc      	add	ip, r7
 80054fa:	4463      	add	r3, ip
 80054fc:	2202      	movs	r2, #2
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e0a3      	b.n	800564a <UART_SetConfig+0x216>
 8005502:	231b      	movs	r3, #27
 8005504:	2218      	movs	r2, #24
 8005506:	4694      	mov	ip, r2
 8005508:	44bc      	add	ip, r7
 800550a:	4463      	add	r3, ip
 800550c:	2204      	movs	r2, #4
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e09b      	b.n	800564a <UART_SetConfig+0x216>
 8005512:	231b      	movs	r3, #27
 8005514:	2218      	movs	r2, #24
 8005516:	4694      	mov	ip, r2
 8005518:	44bc      	add	ip, r7
 800551a:	4463      	add	r3, ip
 800551c:	2208      	movs	r2, #8
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e093      	b.n	800564a <UART_SetConfig+0x216>
 8005522:	231b      	movs	r3, #27
 8005524:	2218      	movs	r2, #24
 8005526:	4694      	mov	ip, r2
 8005528:	44bc      	add	ip, r7
 800552a:	4463      	add	r3, ip
 800552c:	2210      	movs	r2, #16
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	e08a      	b.n	800564a <UART_SetConfig+0x216>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a9c      	ldr	r2, [pc, #624]	; (80057ac <UART_SetConfig+0x378>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d137      	bne.n	80055ae <UART_SetConfig+0x17a>
 800553e:	4b9a      	ldr	r3, [pc, #616]	; (80057a8 <UART_SetConfig+0x374>)
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	220c      	movs	r2, #12
 8005544:	4013      	ands	r3, r2
 8005546:	2b04      	cmp	r3, #4
 8005548:	d018      	beq.n	800557c <UART_SetConfig+0x148>
 800554a:	d802      	bhi.n	8005552 <UART_SetConfig+0x11e>
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <UART_SetConfig+0x128>
 8005550:	e024      	b.n	800559c <UART_SetConfig+0x168>
 8005552:	2b08      	cmp	r3, #8
 8005554:	d00a      	beq.n	800556c <UART_SetConfig+0x138>
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d018      	beq.n	800558c <UART_SetConfig+0x158>
 800555a:	e01f      	b.n	800559c <UART_SetConfig+0x168>
 800555c:	231b      	movs	r3, #27
 800555e:	2218      	movs	r2, #24
 8005560:	4694      	mov	ip, r2
 8005562:	44bc      	add	ip, r7
 8005564:	4463      	add	r3, ip
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e06e      	b.n	800564a <UART_SetConfig+0x216>
 800556c:	231b      	movs	r3, #27
 800556e:	2218      	movs	r2, #24
 8005570:	4694      	mov	ip, r2
 8005572:	44bc      	add	ip, r7
 8005574:	4463      	add	r3, ip
 8005576:	2202      	movs	r2, #2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e066      	b.n	800564a <UART_SetConfig+0x216>
 800557c:	231b      	movs	r3, #27
 800557e:	2218      	movs	r2, #24
 8005580:	4694      	mov	ip, r2
 8005582:	44bc      	add	ip, r7
 8005584:	4463      	add	r3, ip
 8005586:	2204      	movs	r2, #4
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e05e      	b.n	800564a <UART_SetConfig+0x216>
 800558c:	231b      	movs	r3, #27
 800558e:	2218      	movs	r2, #24
 8005590:	4694      	mov	ip, r2
 8005592:	44bc      	add	ip, r7
 8005594:	4463      	add	r3, ip
 8005596:	2208      	movs	r2, #8
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e056      	b.n	800564a <UART_SetConfig+0x216>
 800559c:	231b      	movs	r3, #27
 800559e:	2218      	movs	r2, #24
 80055a0:	4694      	mov	ip, r2
 80055a2:	44bc      	add	ip, r7
 80055a4:	4463      	add	r3, ip
 80055a6:	2210      	movs	r2, #16
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	e04d      	b.n	800564a <UART_SetConfig+0x216>
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7a      	ldr	r2, [pc, #488]	; (800579c <UART_SetConfig+0x368>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d141      	bne.n	800563c <UART_SetConfig+0x208>
 80055b8:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <UART_SetConfig+0x374>)
 80055ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055bc:	23c0      	movs	r3, #192	; 0xc0
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	4013      	ands	r3, r2
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	00d2      	lsls	r2, r2, #3
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d01f      	beq.n	800560a <UART_SetConfig+0x1d6>
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	00d2      	lsls	r2, r2, #3
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d802      	bhi.n	80055d8 <UART_SetConfig+0x1a4>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <UART_SetConfig+0x1b6>
 80055d6:	e028      	b.n	800562a <UART_SetConfig+0x1f6>
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	0112      	lsls	r2, r2, #4
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00c      	beq.n	80055fa <UART_SetConfig+0x1c6>
 80055e0:	22c0      	movs	r2, #192	; 0xc0
 80055e2:	0112      	lsls	r2, r2, #4
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <UART_SetConfig+0x1e6>
 80055e8:	e01f      	b.n	800562a <UART_SetConfig+0x1f6>
 80055ea:	231b      	movs	r3, #27
 80055ec:	2218      	movs	r2, #24
 80055ee:	4694      	mov	ip, r2
 80055f0:	44bc      	add	ip, r7
 80055f2:	4463      	add	r3, ip
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e027      	b.n	800564a <UART_SetConfig+0x216>
 80055fa:	231b      	movs	r3, #27
 80055fc:	2218      	movs	r2, #24
 80055fe:	4694      	mov	ip, r2
 8005600:	44bc      	add	ip, r7
 8005602:	4463      	add	r3, ip
 8005604:	2202      	movs	r2, #2
 8005606:	701a      	strb	r2, [r3, #0]
 8005608:	e01f      	b.n	800564a <UART_SetConfig+0x216>
 800560a:	231b      	movs	r3, #27
 800560c:	2218      	movs	r2, #24
 800560e:	4694      	mov	ip, r2
 8005610:	44bc      	add	ip, r7
 8005612:	4463      	add	r3, ip
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e017      	b.n	800564a <UART_SetConfig+0x216>
 800561a:	231b      	movs	r3, #27
 800561c:	2218      	movs	r2, #24
 800561e:	4694      	mov	ip, r2
 8005620:	44bc      	add	ip, r7
 8005622:	4463      	add	r3, ip
 8005624:	2208      	movs	r2, #8
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	e00f      	b.n	800564a <UART_SetConfig+0x216>
 800562a:	231b      	movs	r3, #27
 800562c:	2218      	movs	r2, #24
 800562e:	4694      	mov	ip, r2
 8005630:	44bc      	add	ip, r7
 8005632:	4463      	add	r3, ip
 8005634:	2210      	movs	r2, #16
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	e006      	b.n	800564a <UART_SetConfig+0x216>
 800563c:	231b      	movs	r3, #27
 800563e:	2218      	movs	r2, #24
 8005640:	4694      	mov	ip, r2
 8005642:	44bc      	add	ip, r7
 8005644:	4463      	add	r3, ip
 8005646:	2210      	movs	r2, #16
 8005648:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a53      	ldr	r2, [pc, #332]	; (800579c <UART_SetConfig+0x368>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d000      	beq.n	8005656 <UART_SetConfig+0x222>
 8005654:	e085      	b.n	8005762 <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005656:	231b      	movs	r3, #27
 8005658:	2218      	movs	r2, #24
 800565a:	4694      	mov	ip, r2
 800565c:	44bc      	add	ip, r7
 800565e:	4463      	add	r3, ip
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d00d      	beq.n	8005682 <UART_SetConfig+0x24e>
 8005666:	dc02      	bgt.n	800566e <UART_SetConfig+0x23a>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <UART_SetConfig+0x244>
 800566c:	e01d      	b.n	80056aa <UART_SetConfig+0x276>
 800566e:	2b04      	cmp	r3, #4
 8005670:	d012      	beq.n	8005698 <UART_SetConfig+0x264>
 8005672:	2b08      	cmp	r3, #8
 8005674:	d015      	beq.n	80056a2 <UART_SetConfig+0x26e>
 8005676:	e018      	b.n	80056aa <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005678:	f7fe fbf8 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 800567c:	0003      	movs	r3, r0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005680:	e01d      	b.n	80056be <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005682:	4b49      	ldr	r3, [pc, #292]	; (80057a8 <UART_SetConfig+0x374>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2210      	movs	r2, #16
 8005688:	4013      	ands	r3, r2
 800568a:	d002      	beq.n	8005692 <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800568c:	4b48      	ldr	r3, [pc, #288]	; (80057b0 <UART_SetConfig+0x37c>)
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005690:	e015      	b.n	80056be <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 8005692:	4b48      	ldr	r3, [pc, #288]	; (80057b4 <UART_SetConfig+0x380>)
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005696:	e012      	b.n	80056be <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005698:	f7fe fb3c 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 800569c:	0003      	movs	r3, r0
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056a0:	e00d      	b.n	80056be <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056a8:	e009      	b.n	80056be <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056ae:	231a      	movs	r3, #26
 80056b0:	2218      	movs	r2, #24
 80056b2:	4694      	mov	ip, r2
 80056b4:	44bc      	add	ip, r7
 80056b6:	4463      	add	r3, ip
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
        break;
 80056bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d100      	bne.n	80056c6 <UART_SetConfig+0x292>
 80056c4:	e139      	b.n	800593a <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	0013      	movs	r3, r2
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d305      	bcc.n	80056e2 <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d907      	bls.n	80056f2 <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 80056e2:	231a      	movs	r3, #26
 80056e4:	2218      	movs	r2, #24
 80056e6:	4694      	mov	ip, r2
 80056e8:	44bc      	add	ip, r7
 80056ea:	4463      	add	r3, ip
 80056ec:	2201      	movs	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e123      	b.n	800593a <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	613b      	str	r3, [r7, #16]
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	6939      	ldr	r1, [r7, #16]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	000b      	movs	r3, r1
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	0010      	movs	r0, r2
 8005704:	0205      	lsls	r5, r0, #8
 8005706:	431d      	orrs	r5, r3
 8005708:	000b      	movs	r3, r1
 800570a:	021c      	lsls	r4, r3, #8
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68b8      	ldr	r0, [r7, #8]
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	1900      	adds	r0, r0, r4
 800571e:	4169      	adcs	r1, r5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	603b      	str	r3, [r7, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f7fa fdb1 	bl	8000294 <__aeabi_uldivmod>
 8005732:	0003      	movs	r3, r0
 8005734:	000c      	movs	r4, r1
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <UART_SetConfig+0x384>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d908      	bls.n	8005752 <UART_SetConfig+0x31e>
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <UART_SetConfig+0x388>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d804      	bhi.n	8005752 <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	e0f3      	b.n	800593a <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 8005752:	231a      	movs	r3, #26
 8005754:	2218      	movs	r2, #24
 8005756:	4694      	mov	ip, r2
 8005758:	44bc      	add	ip, r7
 800575a:	4463      	add	r3, ip
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e0eb      	b.n	800593a <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	2380      	movs	r3, #128	; 0x80
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	429a      	cmp	r2, r3
 800576c:	d000      	beq.n	8005770 <UART_SetConfig+0x33c>
 800576e:	e08b      	b.n	8005888 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8005770:	231b      	movs	r3, #27
 8005772:	2218      	movs	r2, #24
 8005774:	4694      	mov	ip, r2
 8005776:	44bc      	add	ip, r7
 8005778:	4463      	add	r3, ip
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d83a      	bhi.n	80057f6 <UART_SetConfig+0x3c2>
 8005780:	009a      	lsls	r2, r3, #2
 8005782:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <UART_SetConfig+0x38c>)
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800578a:	f7fe fb6f 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 800578e:	0003      	movs	r3, r0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005792:	e03a      	b.n	800580a <UART_SetConfig+0x3d6>
 8005794:	efff69f3 	.word	0xefff69f3
 8005798:	ffffcfff 	.word	0xffffcfff
 800579c:	40004800 	.word	0x40004800
 80057a0:	fffff4ff 	.word	0xfffff4ff
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40004400 	.word	0x40004400
 80057b0:	003d0900 	.word	0x003d0900
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	000002ff 	.word	0x000002ff
 80057bc:	000fffff 	.word	0x000fffff
 80057c0:	08006650 	.word	0x08006650
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c4:	f7fe fb68 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80057c8:	0003      	movs	r3, r0
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057cc:	e01d      	b.n	800580a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <UART_SetConfig+0x528>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2210      	movs	r2, #16
 80057d4:	4013      	ands	r3, r2
 80057d6:	d002      	beq.n	80057de <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057d8:	4b61      	ldr	r3, [pc, #388]	; (8005960 <UART_SetConfig+0x52c>)
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057dc:	e015      	b.n	800580a <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 80057de:	4b61      	ldr	r3, [pc, #388]	; (8005964 <UART_SetConfig+0x530>)
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e2:	e012      	b.n	800580a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e4:	f7fe fa96 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 80057e8:	0003      	movs	r3, r0
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057ec:	e00d      	b.n	800580a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057f4:	e009      	b.n	800580a <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057fa:	231a      	movs	r3, #26
 80057fc:	2218      	movs	r2, #24
 80057fe:	4694      	mov	ip, r2
 8005800:	44bc      	add	ip, r7
 8005802:	4463      	add	r3, ip
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
        break;
 8005808:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <UART_SetConfig+0x3de>
 8005810:	e093      	b.n	800593a <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	005a      	lsls	r2, r3, #1
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	18d2      	adds	r2, r2, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	0019      	movs	r1, r3
 8005824:	0010      	movs	r0, r2
 8005826:	f7fa fc6f 	bl	8000108 <__udivsi3>
 800582a:	0003      	movs	r3, r0
 800582c:	b29b      	uxth	r3, r3
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d920      	bls.n	8005878 <UART_SetConfig+0x444>
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	4a4b      	ldr	r2, [pc, #300]	; (8005968 <UART_SetConfig+0x534>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d81c      	bhi.n	8005878 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	b29a      	uxth	r2, r3
 8005842:	200e      	movs	r0, #14
 8005844:	2418      	movs	r4, #24
 8005846:	193b      	adds	r3, r7, r4
 8005848:	181b      	adds	r3, r3, r0
 800584a:	210f      	movs	r1, #15
 800584c:	438a      	bics	r2, r1
 800584e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	085b      	lsrs	r3, r3, #1
 8005854:	b29b      	uxth	r3, r3
 8005856:	2207      	movs	r2, #7
 8005858:	4013      	ands	r3, r2
 800585a:	b299      	uxth	r1, r3
 800585c:	193b      	adds	r3, r7, r4
 800585e:	181b      	adds	r3, r3, r0
 8005860:	193a      	adds	r2, r7, r4
 8005862:	1812      	adds	r2, r2, r0
 8005864:	8812      	ldrh	r2, [r2, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	193a      	adds	r2, r7, r4
 8005870:	1812      	adds	r2, r2, r0
 8005872:	8812      	ldrh	r2, [r2, #0]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	e060      	b.n	800593a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8005878:	231a      	movs	r3, #26
 800587a:	2218      	movs	r2, #24
 800587c:	4694      	mov	ip, r2
 800587e:	44bc      	add	ip, r7
 8005880:	4463      	add	r3, ip
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e058      	b.n	800593a <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005888:	231b      	movs	r3, #27
 800588a:	2218      	movs	r2, #24
 800588c:	4694      	mov	ip, r2
 800588e:	44bc      	add	ip, r7
 8005890:	4463      	add	r3, ip
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b08      	cmp	r3, #8
 8005896:	d822      	bhi.n	80058de <UART_SetConfig+0x4aa>
 8005898:	009a      	lsls	r2, r3, #2
 800589a:	4b34      	ldr	r3, [pc, #208]	; (800596c <UART_SetConfig+0x538>)
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a2:	f7fe fae3 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80058a6:	0003      	movs	r3, r0
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058aa:	e022      	b.n	80058f2 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fe faf4 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80058b0:	0003      	movs	r3, r0
 80058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058b4:	e01d      	b.n	80058f2 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058b6:	4b29      	ldr	r3, [pc, #164]	; (800595c <UART_SetConfig+0x528>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	4013      	ands	r3, r2
 80058be:	d002      	beq.n	80058c6 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058c0:	4b27      	ldr	r3, [pc, #156]	; (8005960 <UART_SetConfig+0x52c>)
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058c4:	e015      	b.n	80058f2 <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <UART_SetConfig+0x530>)
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ca:	e012      	b.n	80058f2 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058cc:	f7fe fa22 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 80058d0:	0003      	movs	r3, r0
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d6:	2380      	movs	r3, #128	; 0x80
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058dc:	e009      	b.n	80058f2 <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058e2:	231a      	movs	r3, #26
 80058e4:	2218      	movs	r2, #24
 80058e6:	4694      	mov	ip, r2
 80058e8:	44bc      	add	ip, r7
 80058ea:	4463      	add	r3, ip
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
        break;
 80058f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	085a      	lsrs	r2, r3, #1
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	18d2      	adds	r2, r2, r3
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	0019      	movs	r1, r3
 8005908:	0010      	movs	r0, r2
 800590a:	f7fa fbfd 	bl	8000108 <__udivsi3>
 800590e:	0003      	movs	r3, r0
 8005910:	b29b      	uxth	r3, r3
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d908      	bls.n	800592c <UART_SetConfig+0x4f8>
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	4a12      	ldr	r2, [pc, #72]	; (8005968 <UART_SetConfig+0x534>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d804      	bhi.n	800592c <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	e006      	b.n	800593a <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 800592c:	231a      	movs	r3, #26
 800592e:	2218      	movs	r2, #24
 8005930:	4694      	mov	ip, r2
 8005932:	44bc      	add	ip, r7
 8005934:	4463      	add	r3, ip
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	2200      	movs	r2, #0
 800593e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2200      	movs	r2, #0
 8005944:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005946:	231a      	movs	r3, #26
 8005948:	2218      	movs	r2, #24
 800594a:	4694      	mov	ip, r2
 800594c:	44bc      	add	ip, r7
 800594e:	4463      	add	r3, ip
 8005950:	781b      	ldrb	r3, [r3, #0]
}
 8005952:	0018      	movs	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	b00e      	add	sp, #56	; 0x38
 8005958:	bdb0      	pop	{r4, r5, r7, pc}
 800595a:	46c0      	nop			; (mov r8, r8)
 800595c:	40021000 	.word	0x40021000
 8005960:	003d0900 	.word	0x003d0900
 8005964:	00f42400 	.word	0x00f42400
 8005968:	0000ffff 	.word	0x0000ffff
 800596c:	08006674 	.word	0x08006674

08005970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2201      	movs	r2, #1
 800597e:	4013      	ands	r3, r2
 8005980:	d00b      	beq.n	800599a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4a4a      	ldr	r2, [pc, #296]	; (8005ab4 <UART_AdvFeatureConfig+0x144>)
 800598a:	4013      	ands	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2202      	movs	r2, #2
 80059a0:	4013      	ands	r3, r2
 80059a2:	d00b      	beq.n	80059bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4a43      	ldr	r2, [pc, #268]	; (8005ab8 <UART_AdvFeatureConfig+0x148>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	0019      	movs	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2204      	movs	r2, #4
 80059c2:	4013      	ands	r3, r2
 80059c4:	d00b      	beq.n	80059de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <UART_AdvFeatureConfig+0x14c>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2208      	movs	r2, #8
 80059e4:	4013      	ands	r3, r2
 80059e6:	d00b      	beq.n	8005a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a34      	ldr	r2, [pc, #208]	; (8005ac0 <UART_AdvFeatureConfig+0x150>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	0019      	movs	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2210      	movs	r2, #16
 8005a06:	4013      	ands	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <UART_AdvFeatureConfig+0x154>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	2220      	movs	r2, #32
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <UART_AdvFeatureConfig+0x158>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	0019      	movs	r1, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <UART_AdvFeatureConfig+0x15c>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6a:	2380      	movs	r3, #128	; 0x80
 8005a6c:	035b      	lsls	r3, r3, #13
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d10b      	bne.n	8005a8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a15      	ldr	r2, [pc, #84]	; (8005ad0 <UART_AdvFeatureConfig+0x160>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2280      	movs	r2, #128	; 0x80
 8005a90:	4013      	ands	r3, r2
 8005a92:	d00b      	beq.n	8005aac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <UART_AdvFeatureConfig+0x164>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	fffdffff 	.word	0xfffdffff
 8005ab8:	fffeffff 	.word	0xfffeffff
 8005abc:	fffbffff 	.word	0xfffbffff
 8005ac0:	ffff7fff 	.word	0xffff7fff
 8005ac4:	ffffefff 	.word	0xffffefff
 8005ac8:	ffffdfff 	.word	0xffffdfff
 8005acc:	ffefffff 	.word	0xffefffff
 8005ad0:	ff9fffff 	.word	0xff9fffff
 8005ad4:	fff7ffff 	.word	0xfff7ffff

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2280      	movs	r2, #128	; 0x80
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fc fdba 	bl	8002660 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2208      	movs	r2, #8
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d10d      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	0399      	lsls	r1, r3, #14
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <UART_CheckIdleState+0x90>)
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	0013      	movs	r3, r2
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f000 f82d 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005b12:	1e03      	subs	r3, r0, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e022      	b.n	8005b60 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2204      	movs	r2, #4
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d10d      	bne.n	8005b44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	2380      	movs	r3, #128	; 0x80
 8005b2c:	03d9      	lsls	r1, r3, #15
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <UART_CheckIdleState+0x90>)
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	0013      	movs	r3, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	f000 f818 	bl	8005b6c <UART_WaitOnFlagUntilTimeout>
 8005b3c:	1e03      	subs	r3, r0, #0
 8005b3e:	d001      	beq.n	8005b44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e00d      	b.n	8005b60 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2274      	movs	r2, #116	; 0x74
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	0018      	movs	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	b004      	add	sp, #16
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	01ffffff 	.word	0x01ffffff

08005b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b094      	sub	sp, #80	; 0x50
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	1dfb      	adds	r3, r7, #7
 8005b7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7c:	e09b      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b80:	3301      	adds	r3, #1
 8005b82:	d100      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005b84:	e097      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fc fd6b 	bl	8002660 <HAL_GetTick>
 8005b8a:	0002      	movs	r2, r0
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d139      	bne.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	f383 8810 	msr	PRIMASK, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4949      	ldr	r1, [pc, #292]	; (8005ce0 <UART_WaitOnFlagUntilTimeout+0x174>)
 8005bbc:	400a      	ands	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bca:	f3ef 8310 	mrs	r3, PRIMASK
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	f383 8810 	msr	PRIMASK, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2101      	movs	r1, #1
 8005bea:	438a      	bics	r2, r1
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf4:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2274      	movs	r2, #116	; 0x74
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e063      	b.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2204      	movs	r2, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d04c      	beq.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	401a      	ands	r2, r3
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d142      	bne.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2280      	movs	r2, #128	; 0x80
 8005c36:	0112      	lsls	r2, r2, #4
 8005c38:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8005c40:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	2301      	movs	r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f383 8810 	msr	PRIMASK, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4921      	ldr	r1, [pc, #132]	; (8005ce0 <UART_WaitOnFlagUntilTimeout+0x174>)
 8005c5a:	400a      	ands	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c68:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c72:	2301      	movs	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f383 8810 	msr	PRIMASK, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2101      	movs	r1, #1
 8005c88:	438a      	bics	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2274      	movs	r2, #116	; 0x74
 8005cae:	2100      	movs	r1, #0
 8005cb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e010      	b.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	425a      	negs	r2, r3
 8005cc6:	4153      	adcs	r3, r2
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	001a      	movs	r2, r3
 8005ccc:	1dfb      	adds	r3, r7, #7
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d100      	bne.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x16a>
 8005cd4:	e753      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b014      	add	sp, #80	; 0x50
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	fffffe5f 	.word	0xfffffe5f

08005ce4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	1dbb      	adds	r3, r7, #6
 8005cf0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	1dba      	adds	r2, r7, #6
 8005cfc:	2158      	movs	r1, #88	; 0x58
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1dba      	adds	r2, r7, #6
 8005d06:	215a      	movs	r1, #90	; 0x5a
 8005d08:	8812      	ldrh	r2, [r2, #0]
 8005d0a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	2380      	movs	r3, #128	; 0x80
 8005d18:	015b      	lsls	r3, r3, #5
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d10d      	bne.n	8005d3a <UART_Start_Receive_IT+0x56>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <UART_Start_Receive_IT+0x4c>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	225c      	movs	r2, #92	; 0x5c
 8005d2a:	4941      	ldr	r1, [pc, #260]	; (8005e30 <UART_Start_Receive_IT+0x14c>)
 8005d2c:	5299      	strh	r1, [r3, r2]
 8005d2e:	e02e      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	225c      	movs	r2, #92	; 0x5c
 8005d34:	21ff      	movs	r1, #255	; 0xff
 8005d36:	5299      	strh	r1, [r3, r2]
 8005d38:	e029      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10d      	bne.n	8005d5e <UART_Start_Receive_IT+0x7a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <UART_Start_Receive_IT+0x70>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	225c      	movs	r2, #92	; 0x5c
 8005d4e:	21ff      	movs	r1, #255	; 0xff
 8005d50:	5299      	strh	r1, [r3, r2]
 8005d52:	e01c      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	225c      	movs	r2, #92	; 0x5c
 8005d58:	217f      	movs	r1, #127	; 0x7f
 8005d5a:	5299      	strh	r1, [r3, r2]
 8005d5c:	e017      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	055b      	lsls	r3, r3, #21
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d10d      	bne.n	8005d86 <UART_Start_Receive_IT+0xa2>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <UART_Start_Receive_IT+0x98>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	225c      	movs	r2, #92	; 0x5c
 8005d76:	217f      	movs	r1, #127	; 0x7f
 8005d78:	5299      	strh	r1, [r3, r2]
 8005d7a:	e008      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	225c      	movs	r2, #92	; 0x5c
 8005d80:	213f      	movs	r1, #63	; 0x3f
 8005d82:	5299      	strh	r1, [r3, r2]
 8005d84:	e003      	b.n	8005d8e <UART_Start_Receive_IT+0xaa>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	225c      	movs	r2, #92	; 0x5c
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	2100      	movs	r1, #0
 8005d94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2222      	movs	r2, #34	; 0x22
 8005d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005da2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da6:	2301      	movs	r3, #1
 8005da8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	f383 8810 	msr	PRIMASK, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2101      	movs	r1, #1
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	015b      	lsls	r3, r3, #5
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d107      	bne.n	8005de6 <UART_Start_Receive_IT+0x102>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d103      	bne.n	8005de6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4a14      	ldr	r2, [pc, #80]	; (8005e34 <UART_Start_Receive_IT+0x150>)
 8005de2:	665a      	str	r2, [r3, #100]	; 0x64
 8005de4:	e002      	b.n	8005dec <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <UART_Start_Receive_IT+0x154>)
 8005dea:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2274      	movs	r2, #116	; 0x74
 8005df0:	2100      	movs	r1, #0
 8005df2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005df4:	f3ef 8310 	mrs	r3, PRIMASK
 8005df8:	613b      	str	r3, [r7, #16]
  return(result);
 8005dfa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfe:	2301      	movs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f383 8810 	msr	PRIMASK, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2190      	movs	r1, #144	; 0x90
 8005e14:	0049      	lsls	r1, r1, #1
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	0018      	movs	r0, r3
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b00c      	add	sp, #48	; 0x30
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	000001ff 	.word	0x000001ff
 8005e34:	08006231 	.word	0x08006231
 8005e38:	080060d5 	.word	0x080060d5

08005e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e44:	f3ef 8310 	mrs	r3, PRIMASK
 8005e48:	617b      	str	r3, [r7, #20]
  return(result);
 8005e4a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4e:	2301      	movs	r3, #1
 8005e50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f383 8810 	msr	PRIMASK, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4923      	ldr	r1, [pc, #140]	; (8005ef0 <UART_EndRxTransfer+0xb4>)
 8005e64:	400a      	ands	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e72:	f3ef 8310 	mrs	r3, PRIMASK
 8005e76:	623b      	str	r3, [r7, #32]
  return(result);
 8005e78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	f383 8810 	msr	PRIMASK, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2101      	movs	r1, #1
 8005e92:	438a      	bics	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d116      	bne.n	8005ed6 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8005eac:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f383 8810 	msr	PRIMASK, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2110      	movs	r1, #16
 8005ec8:	438a      	bics	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005ee8:	46c0      	nop			; (mov r8, r8)
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b00e      	add	sp, #56	; 0x38
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	fffffedf 	.word	0xfffffedf

08005ef4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	225a      	movs	r2, #90	; 0x5a
 8005f06:	2100      	movs	r1, #0
 8005f08:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2252      	movs	r2, #82	; 0x52
 8005f0e:	2100      	movs	r1, #0
 8005f10:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7fb fd73 	bl	8001a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b004      	add	sp, #16
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08a      	sub	sp, #40	; 0x28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f2e:	2b21      	cmp	r3, #33	; 0x21
 8005f30:	d148      	bne.n	8005fc4 <UART_TxISR_8BIT+0xa2>
  {
    if (huart->TxXferCount == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2252      	movs	r2, #82	; 0x52
 8005f36:	5a9b      	ldrh	r3, [r3, r2]
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d12e      	bne.n	8005f9c <UART_TxISR_8BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f42:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f44:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
 8005f48:	2301      	movs	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f383 8810 	msr	PRIMASK, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2180      	movs	r1, #128	; 0x80
 8005f5e:	438a      	bics	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f70:	617b      	str	r3, [r7, #20]
  return(result);
 8005f72:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	2301      	movs	r3, #1
 8005f78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f383 8810 	msr	PRIMASK, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2140      	movs	r1, #64	; 0x40
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	61fb      	str	r3, [r7, #28]
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005f9a:	e013      	b.n	8005fc4 <UART_TxISR_8BIT+0xa2>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2252      	movs	r2, #82	; 0x52
 8005fb6:	5a9b      	ldrh	r3, [r3, r2]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b299      	uxth	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2252      	movs	r2, #82	; 0x52
 8005fc2:	5299      	strh	r1, [r3, r2]
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b00a      	add	sp, #40	; 0x28
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08c      	sub	sp, #48	; 0x30
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd8:	2b21      	cmp	r3, #33	; 0x21
 8005fda:	d14d      	bne.n	8006078 <UART_TxISR_16BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2252      	movs	r2, #82	; 0x52
 8005fe0:	5a9b      	ldrh	r3, [r3, r2]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d12e      	bne.n	8006046 <UART_TxISR_16BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2180      	movs	r1, #128	; 0x80
 8006008:	438a      	bics	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006016:	f3ef 8310 	mrs	r3, PRIMASK
 800601a:	61bb      	str	r3, [r7, #24]
  return(result);
 800601c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
 8006020:	2301      	movs	r3, #1
 8006022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f383 8810 	msr	PRIMASK, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2140      	movs	r1, #64	; 0x40
 8006036:	430a      	orrs	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	623b      	str	r3, [r7, #32]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006044:	e018      	b.n	8006078 <UART_TxISR_16BIT+0xac>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	001a      	movs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	05d2      	lsls	r2, r2, #23
 8006058:	0dd2      	lsrs	r2, r2, #23
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2252      	movs	r2, #82	; 0x52
 800606a:	5a9b      	ldrh	r3, [r3, r2]
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b299      	uxth	r1, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2252      	movs	r2, #82	; 0x52
 8006076:	5299      	strh	r1, [r3, r2]
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b00c      	add	sp, #48	; 0x30
 800607e:	bd80      	pop	{r7, pc}

08006080 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006088:	f3ef 8310 	mrs	r3, PRIMASK
 800608c:	60bb      	str	r3, [r7, #8]
  return(result);
 800608e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	2301      	movs	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f383 8810 	msr	PRIMASK, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2140      	movs	r1, #64	; 0x40
 80060a8:	438a      	bics	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fb fca4 	bl	8001a12 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b006      	add	sp, #24
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b090      	sub	sp, #64	; 0x40
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060dc:	233e      	movs	r3, #62	; 0x3e
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	215c      	movs	r1, #92	; 0x5c
 80060e4:	5a52      	ldrh	r2, [r2, r1]
 80060e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ec:	2b22      	cmp	r3, #34	; 0x22
 80060ee:	d000      	beq.n	80060f2 <UART_RxISR_8BIT+0x1e>
 80060f0:	e090      	b.n	8006214 <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f8:	213c      	movs	r1, #60	; 0x3c
 80060fa:	187b      	adds	r3, r7, r1
 80060fc:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	233e      	movs	r3, #62	; 0x3e
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b2d9      	uxtb	r1, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006110:	400a      	ands	r2, r1
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	225a      	movs	r2, #90	; 0x5a
 8006124:	5a9b      	ldrh	r3, [r3, r2]
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b299      	uxth	r1, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	225a      	movs	r2, #90	; 0x5a
 8006130:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	225a      	movs	r2, #90	; 0x5a
 8006136:	5a9b      	ldrh	r3, [r3, r2]
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d172      	bne.n	8006224 <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613e:	f3ef 8310 	mrs	r3, PRIMASK
 8006142:	61bb      	str	r3, [r7, #24]
  return(result);
 8006144:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006146:	63bb      	str	r3, [r7, #56]	; 0x38
 8006148:	2301      	movs	r3, #1
 800614a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f383 8810 	msr	PRIMASK, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4933      	ldr	r1, [pc, #204]	; (800622c <UART_RxISR_8BIT+0x158>)
 800615e:	400a      	ands	r2, r1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	623b      	str	r3, [r7, #32]
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616c:	f3ef 8310 	mrs	r3, PRIMASK
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
 8006176:	2301      	movs	r3, #1
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	f383 8810 	msr	PRIMASK, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2101      	movs	r1, #1
 800618c:	438a      	bics	r2, r1
 800618e:	609a      	str	r2, [r3, #8]
 8006190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d12d      	bne.n	800620a <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b4:	f3ef 8310 	mrs	r3, PRIMASK
 80061b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80061ba:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30
 80061be:	2301      	movs	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f383 8810 	msr	PRIMASK, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2110      	movs	r1, #16
 80061d4:	438a      	bics	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	2210      	movs	r2, #16
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d103      	bne.n	80061f8 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2210      	movs	r2, #16
 80061f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2258      	movs	r2, #88	; 0x58
 80061fc:	5a9a      	ldrh	r2, [r3, r2]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f7ff f90a 	bl	800541c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006208:	e00c      	b.n	8006224 <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0018      	movs	r0, r3
 800620e:	f7fb fbed 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 8006212:	e007      	b.n	8006224 <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2108      	movs	r1, #8
 8006220:	430a      	orrs	r2, r1
 8006222:	619a      	str	r2, [r3, #24]
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b010      	add	sp, #64	; 0x40
 800622a:	bd80      	pop	{r7, pc}
 800622c:	fffffedf 	.word	0xfffffedf

08006230 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b090      	sub	sp, #64	; 0x40
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006238:	233e      	movs	r3, #62	; 0x3e
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	215c      	movs	r1, #92	; 0x5c
 8006240:	5a52      	ldrh	r2, [r2, r1]
 8006242:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006248:	2b22      	cmp	r3, #34	; 0x22
 800624a:	d000      	beq.n	800624e <UART_RxISR_16BIT+0x1e>
 800624c:	e090      	b.n	8006370 <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006254:	213c      	movs	r1, #60	; 0x3c
 8006256:	187b      	adds	r3, r7, r1
 8006258:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006260:	187b      	adds	r3, r7, r1
 8006262:	223e      	movs	r2, #62	; 0x3e
 8006264:	18ba      	adds	r2, r7, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	4013      	ands	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	1c9a      	adds	r2, r3, #2
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	225a      	movs	r2, #90	; 0x5a
 8006280:	5a9b      	ldrh	r3, [r3, r2]
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b299      	uxth	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	225a      	movs	r2, #90	; 0x5a
 800628c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	225a      	movs	r2, #90	; 0x5a
 8006292:	5a9b      	ldrh	r3, [r3, r2]
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d172      	bne.n	8006380 <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629a:	f3ef 8310 	mrs	r3, PRIMASK
 800629e:	617b      	str	r3, [r7, #20]
  return(result);
 80062a0:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	2301      	movs	r3, #1
 80062a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f383 8810 	msr	PRIMASK, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4933      	ldr	r1, [pc, #204]	; (8006388 <UART_RxISR_16BIT+0x158>)
 80062ba:	400a      	ands	r2, r1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c8:	f3ef 8310 	mrs	r3, PRIMASK
 80062cc:	623b      	str	r3, [r7, #32]
  return(result);
 80062ce:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	633b      	str	r3, [r7, #48]	; 0x30
 80062d2:	2301      	movs	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	f383 8810 	msr	PRIMASK, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2101      	movs	r1, #1
 80062e8:	438a      	bics	r2, r1
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006306:	2b01      	cmp	r3, #1
 8006308:	d12d      	bne.n	8006366 <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006310:	f3ef 8310 	mrs	r3, PRIMASK
 8006314:	60bb      	str	r3, [r7, #8]
  return(result);
 8006316:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800631a:	2301      	movs	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f383 8810 	msr	PRIMASK, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2110      	movs	r1, #16
 8006330:	438a      	bics	r2, r1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	2210      	movs	r2, #16
 8006346:	4013      	ands	r3, r2
 8006348:	2b10      	cmp	r3, #16
 800634a:	d103      	bne.n	8006354 <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2210      	movs	r2, #16
 8006352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2258      	movs	r2, #88	; 0x58
 8006358:	5a9a      	ldrh	r2, [r3, r2]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f7ff f85c 	bl	800541c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006364:	e00c      	b.n	8006380 <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f7fb fb3f 	bl	80019ec <HAL_UART_RxCpltCallback>
}
 800636e:	e007      	b.n	8006380 <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2108      	movs	r1, #8
 800637c:	430a      	orrs	r2, r1
 800637e:	619a      	str	r2, [r3, #24]
}
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b010      	add	sp, #64	; 0x40
 8006386:	bd80      	pop	{r7, pc}
 8006388:	fffffedf 	.word	0xfffffedf

0800638c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46bd      	mov	sp, r7
 8006398:	b002      	add	sp, #8
 800639a:	bd80      	pop	{r7, pc}

0800639c <__errno>:
 800639c:	4b01      	ldr	r3, [pc, #4]	; (80063a4 <__errno+0x8>)
 800639e:	6818      	ldr	r0, [r3, #0]
 80063a0:	4770      	bx	lr
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	20000014 	.word	0x20000014

080063a8 <__libc_init_array>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	2600      	movs	r6, #0
 80063ac:	4d0c      	ldr	r5, [pc, #48]	; (80063e0 <__libc_init_array+0x38>)
 80063ae:	4c0d      	ldr	r4, [pc, #52]	; (80063e4 <__libc_init_array+0x3c>)
 80063b0:	1b64      	subs	r4, r4, r5
 80063b2:	10a4      	asrs	r4, r4, #2
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	d109      	bne.n	80063cc <__libc_init_array+0x24>
 80063b8:	2600      	movs	r6, #0
 80063ba:	f000 f8f1 	bl	80065a0 <_init>
 80063be:	4d0a      	ldr	r5, [pc, #40]	; (80063e8 <__libc_init_array+0x40>)
 80063c0:	4c0a      	ldr	r4, [pc, #40]	; (80063ec <__libc_init_array+0x44>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	42a6      	cmp	r6, r4
 80063c8:	d105      	bne.n	80063d6 <__libc_init_array+0x2e>
 80063ca:	bd70      	pop	{r4, r5, r6, pc}
 80063cc:	00b3      	lsls	r3, r6, #2
 80063ce:	58eb      	ldr	r3, [r5, r3]
 80063d0:	4798      	blx	r3
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7ee      	b.n	80063b4 <__libc_init_array+0xc>
 80063d6:	00b3      	lsls	r3, r6, #2
 80063d8:	58eb      	ldr	r3, [r5, r3]
 80063da:	4798      	blx	r3
 80063dc:	3601      	adds	r6, #1
 80063de:	e7f2      	b.n	80063c6 <__libc_init_array+0x1e>
 80063e0:	080066a0 	.word	0x080066a0
 80063e4:	080066a0 	.word	0x080066a0
 80063e8:	080066a0 	.word	0x080066a0
 80063ec:	080066a4 	.word	0x080066a4

080063f0 <malloc>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	4b03      	ldr	r3, [pc, #12]	; (8006400 <malloc+0x10>)
 80063f4:	0001      	movs	r1, r0
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	f000 f860 	bl	80064bc <_malloc_r>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	20000014 	.word	0x20000014

08006404 <free>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4b03      	ldr	r3, [pc, #12]	; (8006414 <free+0x10>)
 8006408:	0001      	movs	r1, r0
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	f000 f80c 	bl	8006428 <_free_r>
 8006410:	bd10      	pop	{r4, pc}
 8006412:	46c0      	nop			; (mov r8, r8)
 8006414:	20000014 	.word	0x20000014

08006418 <memset>:
 8006418:	0003      	movs	r3, r0
 800641a:	1812      	adds	r2, r2, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	7019      	strb	r1, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <_free_r>:
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	0005      	movs	r5, r0
 800642c:	2900      	cmp	r1, #0
 800642e:	d010      	beq.n	8006452 <_free_r+0x2a>
 8006430:	1f0c      	subs	r4, r1, #4
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	da00      	bge.n	800643a <_free_r+0x12>
 8006438:	18e4      	adds	r4, r4, r3
 800643a:	0028      	movs	r0, r5
 800643c:	f000 f8ae 	bl	800659c <__malloc_lock>
 8006440:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <_free_r+0x90>)
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d105      	bne.n	8006454 <_free_r+0x2c>
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	6014      	str	r4, [r2, #0]
 800644c:	0028      	movs	r0, r5
 800644e:	f000 f8a6 	bl	800659e <__malloc_unlock>
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	42a3      	cmp	r3, r4
 8006456:	d909      	bls.n	800646c <_free_r+0x44>
 8006458:	6821      	ldr	r1, [r4, #0]
 800645a:	1860      	adds	r0, r4, r1
 800645c:	4283      	cmp	r3, r0
 800645e:	d1f3      	bne.n	8006448 <_free_r+0x20>
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	1841      	adds	r1, r0, r1
 8006466:	6021      	str	r1, [r4, #0]
 8006468:	e7ee      	b.n	8006448 <_free_r+0x20>
 800646a:	0013      	movs	r3, r2
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	2a00      	cmp	r2, #0
 8006470:	d001      	beq.n	8006476 <_free_r+0x4e>
 8006472:	42a2      	cmp	r2, r4
 8006474:	d9f9      	bls.n	800646a <_free_r+0x42>
 8006476:	6819      	ldr	r1, [r3, #0]
 8006478:	1858      	adds	r0, r3, r1
 800647a:	42a0      	cmp	r0, r4
 800647c:	d10b      	bne.n	8006496 <_free_r+0x6e>
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	1809      	adds	r1, r1, r0
 8006482:	1858      	adds	r0, r3, r1
 8006484:	6019      	str	r1, [r3, #0]
 8006486:	4282      	cmp	r2, r0
 8006488:	d1e0      	bne.n	800644c <_free_r+0x24>
 800648a:	6810      	ldr	r0, [r2, #0]
 800648c:	6852      	ldr	r2, [r2, #4]
 800648e:	1841      	adds	r1, r0, r1
 8006490:	6019      	str	r1, [r3, #0]
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	e7da      	b.n	800644c <_free_r+0x24>
 8006496:	42a0      	cmp	r0, r4
 8006498:	d902      	bls.n	80064a0 <_free_r+0x78>
 800649a:	230c      	movs	r3, #12
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	e7d5      	b.n	800644c <_free_r+0x24>
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	1860      	adds	r0, r4, r1
 80064a4:	4282      	cmp	r2, r0
 80064a6:	d103      	bne.n	80064b0 <_free_r+0x88>
 80064a8:	6810      	ldr	r0, [r2, #0]
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	1841      	adds	r1, r0, r1
 80064ae:	6021      	str	r1, [r4, #0]
 80064b0:	6062      	str	r2, [r4, #4]
 80064b2:	605c      	str	r4, [r3, #4]
 80064b4:	e7ca      	b.n	800644c <_free_r+0x24>
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	200000b8 	.word	0x200000b8

080064bc <_malloc_r>:
 80064bc:	2303      	movs	r3, #3
 80064be:	b570      	push	{r4, r5, r6, lr}
 80064c0:	1ccd      	adds	r5, r1, #3
 80064c2:	439d      	bics	r5, r3
 80064c4:	3508      	adds	r5, #8
 80064c6:	0006      	movs	r6, r0
 80064c8:	2d0c      	cmp	r5, #12
 80064ca:	d21e      	bcs.n	800650a <_malloc_r+0x4e>
 80064cc:	250c      	movs	r5, #12
 80064ce:	42a9      	cmp	r1, r5
 80064d0:	d81d      	bhi.n	800650e <_malloc_r+0x52>
 80064d2:	0030      	movs	r0, r6
 80064d4:	f000 f862 	bl	800659c <__malloc_lock>
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <_malloc_r+0xb4>)
 80064da:	6814      	ldr	r4, [r2, #0]
 80064dc:	0021      	movs	r1, r4
 80064de:	2900      	cmp	r1, #0
 80064e0:	d119      	bne.n	8006516 <_malloc_r+0x5a>
 80064e2:	4c24      	ldr	r4, [pc, #144]	; (8006574 <_malloc_r+0xb8>)
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <_malloc_r+0x36>
 80064ea:	0030      	movs	r0, r6
 80064ec:	f000 f844 	bl	8006578 <_sbrk_r>
 80064f0:	6020      	str	r0, [r4, #0]
 80064f2:	0029      	movs	r1, r5
 80064f4:	0030      	movs	r0, r6
 80064f6:	f000 f83f 	bl	8006578 <_sbrk_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	d12b      	bne.n	8006556 <_malloc_r+0x9a>
 80064fe:	230c      	movs	r3, #12
 8006500:	0030      	movs	r0, r6
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	f000 f84b 	bl	800659e <__malloc_unlock>
 8006508:	e003      	b.n	8006512 <_malloc_r+0x56>
 800650a:	2d00      	cmp	r5, #0
 800650c:	dadf      	bge.n	80064ce <_malloc_r+0x12>
 800650e:	230c      	movs	r3, #12
 8006510:	6033      	str	r3, [r6, #0]
 8006512:	2000      	movs	r0, #0
 8006514:	bd70      	pop	{r4, r5, r6, pc}
 8006516:	680b      	ldr	r3, [r1, #0]
 8006518:	1b5b      	subs	r3, r3, r5
 800651a:	d419      	bmi.n	8006550 <_malloc_r+0x94>
 800651c:	2b0b      	cmp	r3, #11
 800651e:	d903      	bls.n	8006528 <_malloc_r+0x6c>
 8006520:	600b      	str	r3, [r1, #0]
 8006522:	18cc      	adds	r4, r1, r3
 8006524:	6025      	str	r5, [r4, #0]
 8006526:	e003      	b.n	8006530 <_malloc_r+0x74>
 8006528:	684b      	ldr	r3, [r1, #4]
 800652a:	428c      	cmp	r4, r1
 800652c:	d10d      	bne.n	800654a <_malloc_r+0x8e>
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	0030      	movs	r0, r6
 8006532:	f000 f834 	bl	800659e <__malloc_unlock>
 8006536:	0020      	movs	r0, r4
 8006538:	2207      	movs	r2, #7
 800653a:	300b      	adds	r0, #11
 800653c:	1d23      	adds	r3, r4, #4
 800653e:	4390      	bics	r0, r2
 8006540:	1ac3      	subs	r3, r0, r3
 8006542:	d0e7      	beq.n	8006514 <_malloc_r+0x58>
 8006544:	425a      	negs	r2, r3
 8006546:	50e2      	str	r2, [r4, r3]
 8006548:	e7e4      	b.n	8006514 <_malloc_r+0x58>
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	000c      	movs	r4, r1
 800654e:	e7ef      	b.n	8006530 <_malloc_r+0x74>
 8006550:	000c      	movs	r4, r1
 8006552:	6849      	ldr	r1, [r1, #4]
 8006554:	e7c3      	b.n	80064de <_malloc_r+0x22>
 8006556:	2303      	movs	r3, #3
 8006558:	1cc4      	adds	r4, r0, #3
 800655a:	439c      	bics	r4, r3
 800655c:	42a0      	cmp	r0, r4
 800655e:	d0e1      	beq.n	8006524 <_malloc_r+0x68>
 8006560:	1a21      	subs	r1, r4, r0
 8006562:	0030      	movs	r0, r6
 8006564:	f000 f808 	bl	8006578 <_sbrk_r>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d1db      	bne.n	8006524 <_malloc_r+0x68>
 800656c:	e7c7      	b.n	80064fe <_malloc_r+0x42>
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	200000b8 	.word	0x200000b8
 8006574:	200000bc 	.word	0x200000bc

08006578 <_sbrk_r>:
 8006578:	2300      	movs	r3, #0
 800657a:	b570      	push	{r4, r5, r6, lr}
 800657c:	4c06      	ldr	r4, [pc, #24]	; (8006598 <_sbrk_r+0x20>)
 800657e:	0005      	movs	r5, r0
 8006580:	0008      	movs	r0, r1
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	f7fb fcca 	bl	8001f1c <_sbrk>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d103      	bne.n	8006594 <_sbrk_r+0x1c>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d000      	beq.n	8006594 <_sbrk_r+0x1c>
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	bd70      	pop	{r4, r5, r6, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	20000270 	.word	0x20000270

0800659c <__malloc_lock>:
 800659c:	4770      	bx	lr

0800659e <__malloc_unlock>:
 800659e:	4770      	bx	lr

080065a0 <_init>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr

080065ac <_fini>:
 80065ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065b2:	bc08      	pop	{r3}
 80065b4:	469e      	mov	lr, r3
 80065b6:	4770      	bx	lr
