
STM32L041C6Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08007368  08007368  00017368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007638  08007638  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e8  08007828  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08007828  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b15  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003130  00000000  00000000  00036d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a231  00000000  00000000  00039e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ec8  00000000  00000000  00044088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000dd0  00000000  00000000  00044f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00013985  00000000  00000000  00045d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f542  00000000  00000000  000596a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00071422  00000000  00000000  00068be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000da009  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e50  00000000  00000000  000da084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800734c 	.word	0x0800734c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800734c 	.word	0x0800734c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fe4f 	bl	8001ed4 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fda7 	bl	8001d94 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fe41 	bl	8001ed4 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fe37 	bl	8001ed4 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fdc9 	bl	8001e0c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fdbf 	bl	8001e0c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb67 	bl	8000978 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fae9 	bl	800088c <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb59 	bl	8000978 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb4f 	bl	8000978 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 faf7 	bl	80008dc <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faed 	bl	80008dc <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	1c08      	adds	r0, r1, #0
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f848 	bl	80003d4 <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__aeabi_lmul>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	46ce      	mov	lr, r9
 8000354:	4647      	mov	r7, r8
 8000356:	0415      	lsls	r5, r2, #16
 8000358:	0c2d      	lsrs	r5, r5, #16
 800035a:	002e      	movs	r6, r5
 800035c:	b580      	push	{r7, lr}
 800035e:	0407      	lsls	r7, r0, #16
 8000360:	0c14      	lsrs	r4, r2, #16
 8000362:	0c3f      	lsrs	r7, r7, #16
 8000364:	4699      	mov	r9, r3
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	437e      	muls	r6, r7
 800036a:	435d      	muls	r5, r3
 800036c:	4367      	muls	r7, r4
 800036e:	4363      	muls	r3, r4
 8000370:	197f      	adds	r7, r7, r5
 8000372:	0c34      	lsrs	r4, r6, #16
 8000374:	19e4      	adds	r4, r4, r7
 8000376:	469c      	mov	ip, r3
 8000378:	42a5      	cmp	r5, r4
 800037a:	d903      	bls.n	8000384 <__aeabi_lmul+0x34>
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	025b      	lsls	r3, r3, #9
 8000380:	4698      	mov	r8, r3
 8000382:	44c4      	add	ip, r8
 8000384:	464b      	mov	r3, r9
 8000386:	4343      	muls	r3, r0
 8000388:	4351      	muls	r1, r2
 800038a:	0c25      	lsrs	r5, r4, #16
 800038c:	0436      	lsls	r6, r6, #16
 800038e:	4465      	add	r5, ip
 8000390:	0c36      	lsrs	r6, r6, #16
 8000392:	0424      	lsls	r4, r4, #16
 8000394:	19a4      	adds	r4, r4, r6
 8000396:	195b      	adds	r3, r3, r5
 8000398:	1859      	adds	r1, r3, r1
 800039a:	0020      	movs	r0, r4
 800039c:	bc0c      	pop	{r2, r3}
 800039e:	4690      	mov	r8, r2
 80003a0:	4699      	mov	r9, r3
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003a4 <__aeabi_f2uiz>:
 80003a4:	219e      	movs	r1, #158	; 0x9e
 80003a6:	b510      	push	{r4, lr}
 80003a8:	05c9      	lsls	r1, r1, #23
 80003aa:	1c04      	adds	r4, r0, #0
 80003ac:	f7ff ffa6 	bl	80002fc <__aeabi_fcmpge>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	d103      	bne.n	80003bc <__aeabi_f2uiz+0x18>
 80003b4:	1c20      	adds	r0, r4, #0
 80003b6:	f000 fe25 	bl	8001004 <__aeabi_f2iz>
 80003ba:	bd10      	pop	{r4, pc}
 80003bc:	219e      	movs	r1, #158	; 0x9e
 80003be:	1c20      	adds	r0, r4, #0
 80003c0:	05c9      	lsls	r1, r1, #23
 80003c2:	f000 fc5b 	bl	8000c7c <__aeabi_fsub>
 80003c6:	f000 fe1d 	bl	8001004 <__aeabi_f2iz>
 80003ca:	2380      	movs	r3, #128	; 0x80
 80003cc:	061b      	lsls	r3, r3, #24
 80003ce:	469c      	mov	ip, r3
 80003d0:	4460      	add	r0, ip
 80003d2:	e7f2      	b.n	80003ba <__aeabi_f2uiz+0x16>

080003d4 <__udivmoddi4>:
 80003d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d6:	464f      	mov	r7, r9
 80003d8:	4646      	mov	r6, r8
 80003da:	46d6      	mov	lr, sl
 80003dc:	b5c0      	push	{r6, r7, lr}
 80003de:	0004      	movs	r4, r0
 80003e0:	b082      	sub	sp, #8
 80003e2:	000d      	movs	r5, r1
 80003e4:	4691      	mov	r9, r2
 80003e6:	4698      	mov	r8, r3
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d82f      	bhi.n	800044c <__udivmoddi4+0x78>
 80003ec:	d02c      	beq.n	8000448 <__udivmoddi4+0x74>
 80003ee:	4641      	mov	r1, r8
 80003f0:	4648      	mov	r0, r9
 80003f2:	f002 fcbb 	bl	8002d6c <__clzdi2>
 80003f6:	0029      	movs	r1, r5
 80003f8:	0006      	movs	r6, r0
 80003fa:	0020      	movs	r0, r4
 80003fc:	f002 fcb6 	bl	8002d6c <__clzdi2>
 8000400:	1a33      	subs	r3, r6, r0
 8000402:	469c      	mov	ip, r3
 8000404:	3b20      	subs	r3, #32
 8000406:	469a      	mov	sl, r3
 8000408:	d500      	bpl.n	800040c <__udivmoddi4+0x38>
 800040a:	e076      	b.n	80004fa <__udivmoddi4+0x126>
 800040c:	464b      	mov	r3, r9
 800040e:	4652      	mov	r2, sl
 8000410:	4093      	lsls	r3, r2
 8000412:	001f      	movs	r7, r3
 8000414:	464b      	mov	r3, r9
 8000416:	4662      	mov	r2, ip
 8000418:	4093      	lsls	r3, r2
 800041a:	001e      	movs	r6, r3
 800041c:	42af      	cmp	r7, r5
 800041e:	d828      	bhi.n	8000472 <__udivmoddi4+0x9e>
 8000420:	d025      	beq.n	800046e <__udivmoddi4+0x9a>
 8000422:	4653      	mov	r3, sl
 8000424:	1ba4      	subs	r4, r4, r6
 8000426:	41bd      	sbcs	r5, r7
 8000428:	2b00      	cmp	r3, #0
 800042a:	da00      	bge.n	800042e <__udivmoddi4+0x5a>
 800042c:	e07b      	b.n	8000526 <__udivmoddi4+0x152>
 800042e:	2200      	movs	r2, #0
 8000430:	2300      	movs	r3, #0
 8000432:	9200      	str	r2, [sp, #0]
 8000434:	9301      	str	r3, [sp, #4]
 8000436:	2301      	movs	r3, #1
 8000438:	4652      	mov	r2, sl
 800043a:	4093      	lsls	r3, r2
 800043c:	9301      	str	r3, [sp, #4]
 800043e:	2301      	movs	r3, #1
 8000440:	4662      	mov	r2, ip
 8000442:	4093      	lsls	r3, r2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	e018      	b.n	800047a <__udivmoddi4+0xa6>
 8000448:	4282      	cmp	r2, r0
 800044a:	d9d0      	bls.n	80003ee <__udivmoddi4+0x1a>
 800044c:	2200      	movs	r2, #0
 800044e:	2300      	movs	r3, #0
 8000450:	9200      	str	r2, [sp, #0]
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <__udivmoddi4+0x8a>
 800045a:	601c      	str	r4, [r3, #0]
 800045c:	605d      	str	r5, [r3, #4]
 800045e:	9800      	ldr	r0, [sp, #0]
 8000460:	9901      	ldr	r1, [sp, #4]
 8000462:	b002      	add	sp, #8
 8000464:	bc1c      	pop	{r2, r3, r4}
 8000466:	4690      	mov	r8, r2
 8000468:	4699      	mov	r9, r3
 800046a:	46a2      	mov	sl, r4
 800046c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800046e:	42a3      	cmp	r3, r4
 8000470:	d9d7      	bls.n	8000422 <__udivmoddi4+0x4e>
 8000472:	2200      	movs	r2, #0
 8000474:	2300      	movs	r3, #0
 8000476:	9200      	str	r2, [sp, #0]
 8000478:	9301      	str	r3, [sp, #4]
 800047a:	4663      	mov	r3, ip
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0e9      	beq.n	8000454 <__udivmoddi4+0x80>
 8000480:	07fb      	lsls	r3, r7, #31
 8000482:	4698      	mov	r8, r3
 8000484:	4641      	mov	r1, r8
 8000486:	0872      	lsrs	r2, r6, #1
 8000488:	430a      	orrs	r2, r1
 800048a:	087b      	lsrs	r3, r7, #1
 800048c:	4666      	mov	r6, ip
 800048e:	e00e      	b.n	80004ae <__udivmoddi4+0xda>
 8000490:	42ab      	cmp	r3, r5
 8000492:	d101      	bne.n	8000498 <__udivmoddi4+0xc4>
 8000494:	42a2      	cmp	r2, r4
 8000496:	d80c      	bhi.n	80004b2 <__udivmoddi4+0xde>
 8000498:	1aa4      	subs	r4, r4, r2
 800049a:	419d      	sbcs	r5, r3
 800049c:	2001      	movs	r0, #1
 800049e:	1924      	adds	r4, r4, r4
 80004a0:	416d      	adcs	r5, r5
 80004a2:	2100      	movs	r1, #0
 80004a4:	3e01      	subs	r6, #1
 80004a6:	1824      	adds	r4, r4, r0
 80004a8:	414d      	adcs	r5, r1
 80004aa:	2e00      	cmp	r6, #0
 80004ac:	d006      	beq.n	80004bc <__udivmoddi4+0xe8>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d9ee      	bls.n	8000490 <__udivmoddi4+0xbc>
 80004b2:	3e01      	subs	r6, #1
 80004b4:	1924      	adds	r4, r4, r4
 80004b6:	416d      	adcs	r5, r5
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d1f8      	bne.n	80004ae <__udivmoddi4+0xda>
 80004bc:	9800      	ldr	r0, [sp, #0]
 80004be:	9901      	ldr	r1, [sp, #4]
 80004c0:	4653      	mov	r3, sl
 80004c2:	1900      	adds	r0, r0, r4
 80004c4:	4169      	adcs	r1, r5
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db23      	blt.n	8000512 <__udivmoddi4+0x13e>
 80004ca:	002b      	movs	r3, r5
 80004cc:	4652      	mov	r2, sl
 80004ce:	40d3      	lsrs	r3, r2
 80004d0:	002a      	movs	r2, r5
 80004d2:	4664      	mov	r4, ip
 80004d4:	40e2      	lsrs	r2, r4
 80004d6:	001c      	movs	r4, r3
 80004d8:	4653      	mov	r3, sl
 80004da:	0015      	movs	r5, r2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	db2d      	blt.n	800053c <__udivmoddi4+0x168>
 80004e0:	0026      	movs	r6, r4
 80004e2:	4657      	mov	r7, sl
 80004e4:	40be      	lsls	r6, r7
 80004e6:	0033      	movs	r3, r6
 80004e8:	0026      	movs	r6, r4
 80004ea:	4667      	mov	r7, ip
 80004ec:	40be      	lsls	r6, r7
 80004ee:	0032      	movs	r2, r6
 80004f0:	1a80      	subs	r0, r0, r2
 80004f2:	4199      	sbcs	r1, r3
 80004f4:	9000      	str	r0, [sp, #0]
 80004f6:	9101      	str	r1, [sp, #4]
 80004f8:	e7ac      	b.n	8000454 <__udivmoddi4+0x80>
 80004fa:	4662      	mov	r2, ip
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	464a      	mov	r2, r9
 8000502:	40da      	lsrs	r2, r3
 8000504:	4661      	mov	r1, ip
 8000506:	0013      	movs	r3, r2
 8000508:	4642      	mov	r2, r8
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	431f      	orrs	r7, r3
 8000510:	e780      	b.n	8000414 <__udivmoddi4+0x40>
 8000512:	4662      	mov	r2, ip
 8000514:	2320      	movs	r3, #32
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	002a      	movs	r2, r5
 800051a:	4666      	mov	r6, ip
 800051c:	409a      	lsls	r2, r3
 800051e:	0023      	movs	r3, r4
 8000520:	40f3      	lsrs	r3, r6
 8000522:	4313      	orrs	r3, r2
 8000524:	e7d4      	b.n	80004d0 <__udivmoddi4+0xfc>
 8000526:	4662      	mov	r2, ip
 8000528:	2320      	movs	r3, #32
 800052a:	2100      	movs	r1, #0
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	9100      	str	r1, [sp, #0]
 8000532:	9201      	str	r2, [sp, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	40da      	lsrs	r2, r3
 8000538:	9201      	str	r2, [sp, #4]
 800053a:	e780      	b.n	800043e <__udivmoddi4+0x6a>
 800053c:	2320      	movs	r3, #32
 800053e:	4662      	mov	r2, ip
 8000540:	0026      	movs	r6, r4
 8000542:	1a9b      	subs	r3, r3, r2
 8000544:	40de      	lsrs	r6, r3
 8000546:	002f      	movs	r7, r5
 8000548:	46b0      	mov	r8, r6
 800054a:	4666      	mov	r6, ip
 800054c:	40b7      	lsls	r7, r6
 800054e:	4646      	mov	r6, r8
 8000550:	003b      	movs	r3, r7
 8000552:	4333      	orrs	r3, r6
 8000554:	e7c8      	b.n	80004e8 <__udivmoddi4+0x114>
 8000556:	46c0      	nop			; (mov r8, r8)

08000558 <__aeabi_fadd>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	4647      	mov	r7, r8
 800055c:	46ce      	mov	lr, r9
 800055e:	0243      	lsls	r3, r0, #9
 8000560:	0a5b      	lsrs	r3, r3, #9
 8000562:	0044      	lsls	r4, r0, #1
 8000564:	0fc2      	lsrs	r2, r0, #31
 8000566:	469c      	mov	ip, r3
 8000568:	0048      	lsls	r0, r1, #1
 800056a:	00dd      	lsls	r5, r3, #3
 800056c:	024b      	lsls	r3, r1, #9
 800056e:	0e24      	lsrs	r4, r4, #24
 8000570:	0a5b      	lsrs	r3, r3, #9
 8000572:	0e00      	lsrs	r0, r0, #24
 8000574:	b580      	push	{r7, lr}
 8000576:	4698      	mov	r8, r3
 8000578:	0026      	movs	r6, r4
 800057a:	4691      	mov	r9, r2
 800057c:	0fc9      	lsrs	r1, r1, #31
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	1a27      	subs	r7, r4, r0
 8000582:	428a      	cmp	r2, r1
 8000584:	d029      	beq.n	80005da <__aeabi_fadd+0x82>
 8000586:	2f00      	cmp	r7, #0
 8000588:	dd15      	ble.n	80005b6 <__aeabi_fadd+0x5e>
 800058a:	2800      	cmp	r0, #0
 800058c:	d14a      	bne.n	8000624 <__aeabi_fadd+0xcc>
 800058e:	2b00      	cmp	r3, #0
 8000590:	d000      	beq.n	8000594 <__aeabi_fadd+0x3c>
 8000592:	e095      	b.n	80006c0 <__aeabi_fadd+0x168>
 8000594:	08ed      	lsrs	r5, r5, #3
 8000596:	2cff      	cmp	r4, #255	; 0xff
 8000598:	d100      	bne.n	800059c <__aeabi_fadd+0x44>
 800059a:	e088      	b.n	80006ae <__aeabi_fadd+0x156>
 800059c:	026b      	lsls	r3, r5, #9
 800059e:	0a5b      	lsrs	r3, r3, #9
 80005a0:	b2e6      	uxtb	r6, r4
 80005a2:	025b      	lsls	r3, r3, #9
 80005a4:	05f6      	lsls	r6, r6, #23
 80005a6:	0a58      	lsrs	r0, r3, #9
 80005a8:	4330      	orrs	r0, r6
 80005aa:	07d2      	lsls	r2, r2, #31
 80005ac:	4310      	orrs	r0, r2
 80005ae:	bc0c      	pop	{r2, r3}
 80005b0:	4690      	mov	r8, r2
 80005b2:	4699      	mov	r9, r3
 80005b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005b6:	2f00      	cmp	r7, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x64>
 80005ba:	e087      	b.n	80006cc <__aeabi_fadd+0x174>
 80005bc:	1c60      	adds	r0, r4, #1
 80005be:	b2c0      	uxtb	r0, r0
 80005c0:	2801      	cmp	r0, #1
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_fadd+0x6e>
 80005c4:	e0b6      	b.n	8000734 <__aeabi_fadd+0x1dc>
 80005c6:	1aee      	subs	r6, r5, r3
 80005c8:	0172      	lsls	r2, r6, #5
 80005ca:	d500      	bpl.n	80005ce <__aeabi_fadd+0x76>
 80005cc:	e0c5      	b.n	800075a <__aeabi_fadd+0x202>
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d13d      	bne.n	800064e <__aeabi_fadd+0xf6>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2600      	movs	r6, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	e7e3      	b.n	80005a2 <__aeabi_fadd+0x4a>
 80005da:	2f00      	cmp	r7, #0
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_fadd+0x88>
 80005de:	e096      	b.n	800070e <__aeabi_fadd+0x1b6>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d05d      	beq.n	80006a0 <__aeabi_fadd+0x148>
 80005e4:	2cff      	cmp	r4, #255	; 0xff
 80005e6:	d060      	beq.n	80006aa <__aeabi_fadd+0x152>
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	04d2      	lsls	r2, r2, #19
 80005ec:	4313      	orrs	r3, r2
 80005ee:	2f1b      	cmp	r7, #27
 80005f0:	dd00      	ble.n	80005f4 <__aeabi_fadd+0x9c>
 80005f2:	e0ec      	b.n	80007ce <__aeabi_fadd+0x276>
 80005f4:	2220      	movs	r2, #32
 80005f6:	1bd2      	subs	r2, r2, r7
 80005f8:	0018      	movs	r0, r3
 80005fa:	4093      	lsls	r3, r2
 80005fc:	40f8      	lsrs	r0, r7
 80005fe:	1e5a      	subs	r2, r3, #1
 8000600:	4193      	sbcs	r3, r2
 8000602:	4303      	orrs	r3, r0
 8000604:	18ed      	adds	r5, r5, r3
 8000606:	016b      	lsls	r3, r5, #5
 8000608:	d57b      	bpl.n	8000702 <__aeabi_fadd+0x1aa>
 800060a:	3401      	adds	r4, #1
 800060c:	2cff      	cmp	r4, #255	; 0xff
 800060e:	d100      	bne.n	8000612 <__aeabi_fadd+0xba>
 8000610:	e0b7      	b.n	8000782 <__aeabi_fadd+0x22a>
 8000612:	2201      	movs	r2, #1
 8000614:	2607      	movs	r6, #7
 8000616:	402a      	ands	r2, r5
 8000618:	086b      	lsrs	r3, r5, #1
 800061a:	4d9a      	ldr	r5, [pc, #616]	; (8000884 <__aeabi_fadd+0x32c>)
 800061c:	401d      	ands	r5, r3
 800061e:	4315      	orrs	r5, r2
 8000620:	402e      	ands	r6, r5
 8000622:	e029      	b.n	8000678 <__aeabi_fadd+0x120>
 8000624:	2cff      	cmp	r4, #255	; 0xff
 8000626:	d0b5      	beq.n	8000594 <__aeabi_fadd+0x3c>
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	04d2      	lsls	r2, r2, #19
 800062c:	4313      	orrs	r3, r2
 800062e:	2f1b      	cmp	r7, #27
 8000630:	dd00      	ble.n	8000634 <__aeabi_fadd+0xdc>
 8000632:	e0b2      	b.n	800079a <__aeabi_fadd+0x242>
 8000634:	2220      	movs	r2, #32
 8000636:	1bd2      	subs	r2, r2, r7
 8000638:	0019      	movs	r1, r3
 800063a:	4093      	lsls	r3, r2
 800063c:	40f9      	lsrs	r1, r7
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	4193      	sbcs	r3, r2
 8000642:	430b      	orrs	r3, r1
 8000644:	1aed      	subs	r5, r5, r3
 8000646:	016b      	lsls	r3, r5, #5
 8000648:	d55b      	bpl.n	8000702 <__aeabi_fadd+0x1aa>
 800064a:	01ad      	lsls	r5, r5, #6
 800064c:	09ae      	lsrs	r6, r5, #6
 800064e:	0030      	movs	r0, r6
 8000650:	f002 fb6e 	bl	8002d30 <__clzsi2>
 8000654:	3805      	subs	r0, #5
 8000656:	4086      	lsls	r6, r0
 8000658:	4284      	cmp	r4, r0
 800065a:	dc65      	bgt.n	8000728 <__aeabi_fadd+0x1d0>
 800065c:	1b04      	subs	r4, r0, r4
 800065e:	0033      	movs	r3, r6
 8000660:	2020      	movs	r0, #32
 8000662:	3401      	adds	r4, #1
 8000664:	40e3      	lsrs	r3, r4
 8000666:	1b04      	subs	r4, r0, r4
 8000668:	40a6      	lsls	r6, r4
 800066a:	1e75      	subs	r5, r6, #1
 800066c:	41ae      	sbcs	r6, r5
 800066e:	4333      	orrs	r3, r6
 8000670:	2607      	movs	r6, #7
 8000672:	001d      	movs	r5, r3
 8000674:	2400      	movs	r4, #0
 8000676:	401e      	ands	r6, r3
 8000678:	2201      	movs	r2, #1
 800067a:	464b      	mov	r3, r9
 800067c:	401a      	ands	r2, r3
 800067e:	2e00      	cmp	r6, #0
 8000680:	d004      	beq.n	800068c <__aeabi_fadd+0x134>
 8000682:	230f      	movs	r3, #15
 8000684:	402b      	ands	r3, r5
 8000686:	2b04      	cmp	r3, #4
 8000688:	d000      	beq.n	800068c <__aeabi_fadd+0x134>
 800068a:	3504      	adds	r5, #4
 800068c:	016b      	lsls	r3, r5, #5
 800068e:	d400      	bmi.n	8000692 <__aeabi_fadd+0x13a>
 8000690:	e780      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000692:	3401      	adds	r4, #1
 8000694:	b2e6      	uxtb	r6, r4
 8000696:	2cff      	cmp	r4, #255	; 0xff
 8000698:	d12f      	bne.n	80006fa <__aeabi_fadd+0x1a2>
 800069a:	26ff      	movs	r6, #255	; 0xff
 800069c:	2300      	movs	r3, #0
 800069e:	e780      	b.n	80005a2 <__aeabi_fadd+0x4a>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d152      	bne.n	800074a <__aeabi_fadd+0x1f2>
 80006a4:	2cff      	cmp	r4, #255	; 0xff
 80006a6:	d000      	beq.n	80006aa <__aeabi_fadd+0x152>
 80006a8:	e774      	b.n	8000594 <__aeabi_fadd+0x3c>
 80006aa:	000a      	movs	r2, r1
 80006ac:	08ed      	lsrs	r5, r5, #3
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d0f3      	beq.n	800069a <__aeabi_fadd+0x142>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	03db      	lsls	r3, r3, #15
 80006b6:	432b      	orrs	r3, r5
 80006b8:	025b      	lsls	r3, r3, #9
 80006ba:	0a5b      	lsrs	r3, r3, #9
 80006bc:	26ff      	movs	r6, #255	; 0xff
 80006be:	e770      	b.n	80005a2 <__aeabi_fadd+0x4a>
 80006c0:	3f01      	subs	r7, #1
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	d0be      	beq.n	8000644 <__aeabi_fadd+0xec>
 80006c6:	2cff      	cmp	r4, #255	; 0xff
 80006c8:	d1b1      	bne.n	800062e <__aeabi_fadd+0xd6>
 80006ca:	e763      	b.n	8000594 <__aeabi_fadd+0x3c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d047      	beq.n	8000760 <__aeabi_fadd+0x208>
 80006d0:	28ff      	cmp	r0, #255	; 0xff
 80006d2:	d069      	beq.n	80007a8 <__aeabi_fadd+0x250>
 80006d4:	2480      	movs	r4, #128	; 0x80
 80006d6:	04e4      	lsls	r4, r4, #19
 80006d8:	427a      	negs	r2, r7
 80006da:	4325      	orrs	r5, r4
 80006dc:	2a1b      	cmp	r2, #27
 80006de:	dd00      	ble.n	80006e2 <__aeabi_fadd+0x18a>
 80006e0:	e0c5      	b.n	800086e <__aeabi_fadd+0x316>
 80006e2:	002c      	movs	r4, r5
 80006e4:	2620      	movs	r6, #32
 80006e6:	40d4      	lsrs	r4, r2
 80006e8:	1ab2      	subs	r2, r6, r2
 80006ea:	4095      	lsls	r5, r2
 80006ec:	1e6a      	subs	r2, r5, #1
 80006ee:	4195      	sbcs	r5, r2
 80006f0:	4325      	orrs	r5, r4
 80006f2:	1b5d      	subs	r5, r3, r5
 80006f4:	0004      	movs	r4, r0
 80006f6:	4689      	mov	r9, r1
 80006f8:	e7a5      	b.n	8000646 <__aeabi_fadd+0xee>
 80006fa:	01ab      	lsls	r3, r5, #6
 80006fc:	0a5b      	lsrs	r3, r3, #9
 80006fe:	e750      	b.n	80005a2 <__aeabi_fadd+0x4a>
 8000700:	2400      	movs	r4, #0
 8000702:	2201      	movs	r2, #1
 8000704:	464b      	mov	r3, r9
 8000706:	401a      	ands	r2, r3
 8000708:	076b      	lsls	r3, r5, #29
 800070a:	d1ba      	bne.n	8000682 <__aeabi_fadd+0x12a>
 800070c:	e742      	b.n	8000594 <__aeabi_fadd+0x3c>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d13b      	bne.n	800078a <__aeabi_fadd+0x232>
 8000712:	3401      	adds	r4, #1
 8000714:	b2e0      	uxtb	r0, r4
 8000716:	2801      	cmp	r0, #1
 8000718:	dd4a      	ble.n	80007b0 <__aeabi_fadd+0x258>
 800071a:	2cff      	cmp	r4, #255	; 0xff
 800071c:	d0bd      	beq.n	800069a <__aeabi_fadd+0x142>
 800071e:	2607      	movs	r6, #7
 8000720:	18ed      	adds	r5, r5, r3
 8000722:	086d      	lsrs	r5, r5, #1
 8000724:	402e      	ands	r6, r5
 8000726:	e7a7      	b.n	8000678 <__aeabi_fadd+0x120>
 8000728:	2307      	movs	r3, #7
 800072a:	4d57      	ldr	r5, [pc, #348]	; (8000888 <__aeabi_fadd+0x330>)
 800072c:	1a24      	subs	r4, r4, r0
 800072e:	4035      	ands	r5, r6
 8000730:	401e      	ands	r6, r3
 8000732:	e7a1      	b.n	8000678 <__aeabi_fadd+0x120>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d11b      	bne.n	8000770 <__aeabi_fadd+0x218>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d16e      	bne.n	800081a <__aeabi_fadd+0x2c2>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x1ea>
 8000740:	e09a      	b.n	8000878 <__aeabi_fadd+0x320>
 8000742:	000a      	movs	r2, r1
 8000744:	001d      	movs	r5, r3
 8000746:	003c      	movs	r4, r7
 8000748:	e724      	b.n	8000594 <__aeabi_fadd+0x3c>
 800074a:	3f01      	subs	r7, #1
 800074c:	2f00      	cmp	r7, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_fadd+0x1fa>
 8000750:	e758      	b.n	8000604 <__aeabi_fadd+0xac>
 8000752:	2cff      	cmp	r4, #255	; 0xff
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x200>
 8000756:	e74a      	b.n	80005ee <__aeabi_fadd+0x96>
 8000758:	e7a7      	b.n	80006aa <__aeabi_fadd+0x152>
 800075a:	1b5e      	subs	r6, r3, r5
 800075c:	4689      	mov	r9, r1
 800075e:	e776      	b.n	800064e <__aeabi_fadd+0xf6>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d11c      	bne.n	800079e <__aeabi_fadd+0x246>
 8000764:	000a      	movs	r2, r1
 8000766:	28ff      	cmp	r0, #255	; 0xff
 8000768:	d01f      	beq.n	80007aa <__aeabi_fadd+0x252>
 800076a:	0004      	movs	r4, r0
 800076c:	001d      	movs	r5, r3
 800076e:	e711      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15d      	bne.n	8000830 <__aeabi_fadd+0x2d8>
 8000774:	2b00      	cmp	r3, #0
 8000776:	d117      	bne.n	80007a8 <__aeabi_fadd+0x250>
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	2200      	movs	r2, #0
 800077c:	03db      	lsls	r3, r3, #15
 800077e:	26ff      	movs	r6, #255	; 0xff
 8000780:	e70f      	b.n	80005a2 <__aeabi_fadd+0x4a>
 8000782:	000a      	movs	r2, r1
 8000784:	26ff      	movs	r6, #255	; 0xff
 8000786:	2300      	movs	r3, #0
 8000788:	e70b      	b.n	80005a2 <__aeabi_fadd+0x4a>
 800078a:	2c00      	cmp	r4, #0
 800078c:	d121      	bne.n	80007d2 <__aeabi_fadd+0x27a>
 800078e:	2d00      	cmp	r5, #0
 8000790:	d166      	bne.n	8000860 <__aeabi_fadd+0x308>
 8000792:	28ff      	cmp	r0, #255	; 0xff
 8000794:	d1e9      	bne.n	800076a <__aeabi_fadd+0x212>
 8000796:	001d      	movs	r5, r3
 8000798:	e787      	b.n	80006aa <__aeabi_fadd+0x152>
 800079a:	2301      	movs	r3, #1
 800079c:	e752      	b.n	8000644 <__aeabi_fadd+0xec>
 800079e:	1c7a      	adds	r2, r7, #1
 80007a0:	d0a7      	beq.n	80006f2 <__aeabi_fadd+0x19a>
 80007a2:	43fa      	mvns	r2, r7
 80007a4:	28ff      	cmp	r0, #255	; 0xff
 80007a6:	d199      	bne.n	80006dc <__aeabi_fadd+0x184>
 80007a8:	000a      	movs	r2, r1
 80007aa:	001d      	movs	r5, r3
 80007ac:	24ff      	movs	r4, #255	; 0xff
 80007ae:	e6f1      	b.n	8000594 <__aeabi_fadd+0x3c>
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d121      	bne.n	80007f8 <__aeabi_fadd+0x2a0>
 80007b4:	2d00      	cmp	r5, #0
 80007b6:	d04f      	beq.n	8000858 <__aeabi_fadd+0x300>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d04c      	beq.n	8000856 <__aeabi_fadd+0x2fe>
 80007bc:	18ed      	adds	r5, r5, r3
 80007be:	016b      	lsls	r3, r5, #5
 80007c0:	d59e      	bpl.n	8000700 <__aeabi_fadd+0x1a8>
 80007c2:	4b31      	ldr	r3, [pc, #196]	; (8000888 <__aeabi_fadd+0x330>)
 80007c4:	3607      	adds	r6, #7
 80007c6:	402e      	ands	r6, r5
 80007c8:	2401      	movs	r4, #1
 80007ca:	401d      	ands	r5, r3
 80007cc:	e754      	b.n	8000678 <__aeabi_fadd+0x120>
 80007ce:	2301      	movs	r3, #1
 80007d0:	e718      	b.n	8000604 <__aeabi_fadd+0xac>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d0df      	beq.n	8000796 <__aeabi_fadd+0x23e>
 80007d6:	2480      	movs	r4, #128	; 0x80
 80007d8:	04e4      	lsls	r4, r4, #19
 80007da:	427f      	negs	r7, r7
 80007dc:	4325      	orrs	r5, r4
 80007de:	2f1b      	cmp	r7, #27
 80007e0:	dc4d      	bgt.n	800087e <__aeabi_fadd+0x326>
 80007e2:	2620      	movs	r6, #32
 80007e4:	1bf6      	subs	r6, r6, r7
 80007e6:	002c      	movs	r4, r5
 80007e8:	40b5      	lsls	r5, r6
 80007ea:	40fc      	lsrs	r4, r7
 80007ec:	1e6a      	subs	r2, r5, #1
 80007ee:	4195      	sbcs	r5, r2
 80007f0:	4325      	orrs	r5, r4
 80007f2:	18ed      	adds	r5, r5, r3
 80007f4:	0004      	movs	r4, r0
 80007f6:	e706      	b.n	8000606 <__aeabi_fadd+0xae>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d0cc      	beq.n	8000796 <__aeabi_fadd+0x23e>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x2aa>
 8000800:	e753      	b.n	80006aa <__aeabi_fadd+0x152>
 8000802:	2180      	movs	r1, #128	; 0x80
 8000804:	4660      	mov	r0, ip
 8000806:	03c9      	lsls	r1, r1, #15
 8000808:	4208      	tst	r0, r1
 800080a:	d003      	beq.n	8000814 <__aeabi_fadd+0x2bc>
 800080c:	4640      	mov	r0, r8
 800080e:	4208      	tst	r0, r1
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x2bc>
 8000812:	001d      	movs	r5, r3
 8000814:	2101      	movs	r1, #1
 8000816:	4011      	ands	r1, r2
 8000818:	e747      	b.n	80006aa <__aeabi_fadd+0x152>
 800081a:	2b00      	cmp	r3, #0
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x2c8>
 800081e:	e6b9      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000820:	1aea      	subs	r2, r5, r3
 8000822:	0150      	lsls	r0, r2, #5
 8000824:	d525      	bpl.n	8000872 <__aeabi_fadd+0x31a>
 8000826:	2607      	movs	r6, #7
 8000828:	1b5d      	subs	r5, r3, r5
 800082a:	402e      	ands	r6, r5
 800082c:	4689      	mov	r9, r1
 800082e:	e723      	b.n	8000678 <__aeabi_fadd+0x120>
 8000830:	24ff      	movs	r4, #255	; 0xff
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fadd+0x2e0>
 8000836:	e6ad      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	4660      	mov	r0, ip
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	4210      	tst	r0, r2
 8000840:	d004      	beq.n	800084c <__aeabi_fadd+0x2f4>
 8000842:	4640      	mov	r0, r8
 8000844:	4210      	tst	r0, r2
 8000846:	d101      	bne.n	800084c <__aeabi_fadd+0x2f4>
 8000848:	001d      	movs	r5, r3
 800084a:	4689      	mov	r9, r1
 800084c:	2201      	movs	r2, #1
 800084e:	464b      	mov	r3, r9
 8000850:	24ff      	movs	r4, #255	; 0xff
 8000852:	401a      	ands	r2, r3
 8000854:	e69e      	b.n	8000594 <__aeabi_fadd+0x3c>
 8000856:	002b      	movs	r3, r5
 8000858:	08dd      	lsrs	r5, r3, #3
 800085a:	000a      	movs	r2, r1
 800085c:	2400      	movs	r4, #0
 800085e:	e69d      	b.n	800059c <__aeabi_fadd+0x44>
 8000860:	1c7a      	adds	r2, r7, #1
 8000862:	d0c6      	beq.n	80007f2 <__aeabi_fadd+0x29a>
 8000864:	43ff      	mvns	r7, r7
 8000866:	28ff      	cmp	r0, #255	; 0xff
 8000868:	d1b9      	bne.n	80007de <__aeabi_fadd+0x286>
 800086a:	001d      	movs	r5, r3
 800086c:	e71d      	b.n	80006aa <__aeabi_fadd+0x152>
 800086e:	2501      	movs	r5, #1
 8000870:	e73f      	b.n	80006f2 <__aeabi_fadd+0x19a>
 8000872:	1e15      	subs	r5, r2, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fadd+0x320>
 8000876:	e744      	b.n	8000702 <__aeabi_fadd+0x1aa>
 8000878:	2200      	movs	r2, #0
 800087a:	2300      	movs	r3, #0
 800087c:	e691      	b.n	80005a2 <__aeabi_fadd+0x4a>
 800087e:	2501      	movs	r5, #1
 8000880:	e7b7      	b.n	80007f2 <__aeabi_fadd+0x29a>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	7dffffff 	.word	0x7dffffff
 8000888:	fbffffff 	.word	0xfbffffff

0800088c <__eqsf2>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	0042      	lsls	r2, r0, #1
 8000890:	024e      	lsls	r6, r1, #9
 8000892:	004c      	lsls	r4, r1, #1
 8000894:	0245      	lsls	r5, r0, #9
 8000896:	0a6d      	lsrs	r5, r5, #9
 8000898:	0e12      	lsrs	r2, r2, #24
 800089a:	0fc3      	lsrs	r3, r0, #31
 800089c:	0a76      	lsrs	r6, r6, #9
 800089e:	0e24      	lsrs	r4, r4, #24
 80008a0:	0fc9      	lsrs	r1, r1, #31
 80008a2:	2aff      	cmp	r2, #255	; 0xff
 80008a4:	d00f      	beq.n	80008c6 <__eqsf2+0x3a>
 80008a6:	2cff      	cmp	r4, #255	; 0xff
 80008a8:	d011      	beq.n	80008ce <__eqsf2+0x42>
 80008aa:	2001      	movs	r0, #1
 80008ac:	42a2      	cmp	r2, r4
 80008ae:	d000      	beq.n	80008b2 <__eqsf2+0x26>
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	42b5      	cmp	r5, r6
 80008b4:	d1fc      	bne.n	80008b0 <__eqsf2+0x24>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d00d      	beq.n	80008d6 <__eqsf2+0x4a>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d1f8      	bne.n	80008b0 <__eqsf2+0x24>
 80008be:	0028      	movs	r0, r5
 80008c0:	1e45      	subs	r5, r0, #1
 80008c2:	41a8      	sbcs	r0, r5
 80008c4:	e7f4      	b.n	80008b0 <__eqsf2+0x24>
 80008c6:	2001      	movs	r0, #1
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d1f1      	bne.n	80008b0 <__eqsf2+0x24>
 80008cc:	e7eb      	b.n	80008a6 <__eqsf2+0x1a>
 80008ce:	2001      	movs	r0, #1
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d1ed      	bne.n	80008b0 <__eqsf2+0x24>
 80008d4:	e7e9      	b.n	80008aa <__eqsf2+0x1e>
 80008d6:	2000      	movs	r0, #0
 80008d8:	e7ea      	b.n	80008b0 <__eqsf2+0x24>
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <__gesf2>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	004a      	lsls	r2, r1, #1
 80008e0:	024e      	lsls	r6, r1, #9
 80008e2:	0245      	lsls	r5, r0, #9
 80008e4:	0044      	lsls	r4, r0, #1
 80008e6:	0a6d      	lsrs	r5, r5, #9
 80008e8:	0e24      	lsrs	r4, r4, #24
 80008ea:	0fc3      	lsrs	r3, r0, #31
 80008ec:	0a76      	lsrs	r6, r6, #9
 80008ee:	0e12      	lsrs	r2, r2, #24
 80008f0:	0fc9      	lsrs	r1, r1, #31
 80008f2:	2cff      	cmp	r4, #255	; 0xff
 80008f4:	d015      	beq.n	8000922 <__gesf2+0x46>
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d00e      	beq.n	8000918 <__gesf2+0x3c>
 80008fa:	2c00      	cmp	r4, #0
 80008fc:	d115      	bne.n	800092a <__gesf2+0x4e>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d101      	bne.n	8000906 <__gesf2+0x2a>
 8000902:	2e00      	cmp	r6, #0
 8000904:	d01c      	beq.n	8000940 <__gesf2+0x64>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d014      	beq.n	8000934 <__gesf2+0x58>
 800090a:	428b      	cmp	r3, r1
 800090c:	d027      	beq.n	800095e <__gesf2+0x82>
 800090e:	2002      	movs	r0, #2
 8000910:	3b01      	subs	r3, #1
 8000912:	4018      	ands	r0, r3
 8000914:	3801      	subs	r0, #1
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	2e00      	cmp	r6, #0
 800091a:	d0ee      	beq.n	80008fa <__gesf2+0x1e>
 800091c:	2002      	movs	r0, #2
 800091e:	4240      	negs	r0, r0
 8000920:	e7f9      	b.n	8000916 <__gesf2+0x3a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d1fa      	bne.n	800091c <__gesf2+0x40>
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d00e      	beq.n	8000948 <__gesf2+0x6c>
 800092a:	2a00      	cmp	r2, #0
 800092c:	d10e      	bne.n	800094c <__gesf2+0x70>
 800092e:	2e00      	cmp	r6, #0
 8000930:	d0ed      	beq.n	800090e <__gesf2+0x32>
 8000932:	e00b      	b.n	800094c <__gesf2+0x70>
 8000934:	2301      	movs	r3, #1
 8000936:	3901      	subs	r1, #1
 8000938:	4399      	bics	r1, r3
 800093a:	0008      	movs	r0, r1
 800093c:	3001      	adds	r0, #1
 800093e:	e7ea      	b.n	8000916 <__gesf2+0x3a>
 8000940:	2000      	movs	r0, #0
 8000942:	2d00      	cmp	r5, #0
 8000944:	d0e7      	beq.n	8000916 <__gesf2+0x3a>
 8000946:	e7e2      	b.n	800090e <__gesf2+0x32>
 8000948:	2e00      	cmp	r6, #0
 800094a:	d1e7      	bne.n	800091c <__gesf2+0x40>
 800094c:	428b      	cmp	r3, r1
 800094e:	d1de      	bne.n	800090e <__gesf2+0x32>
 8000950:	4294      	cmp	r4, r2
 8000952:	dd05      	ble.n	8000960 <__gesf2+0x84>
 8000954:	2102      	movs	r1, #2
 8000956:	1e58      	subs	r0, r3, #1
 8000958:	4008      	ands	r0, r1
 800095a:	3801      	subs	r0, #1
 800095c:	e7db      	b.n	8000916 <__gesf2+0x3a>
 800095e:	2400      	movs	r4, #0
 8000960:	42a2      	cmp	r2, r4
 8000962:	dc04      	bgt.n	800096e <__gesf2+0x92>
 8000964:	42b5      	cmp	r5, r6
 8000966:	d8d2      	bhi.n	800090e <__gesf2+0x32>
 8000968:	2000      	movs	r0, #0
 800096a:	42b5      	cmp	r5, r6
 800096c:	d2d3      	bcs.n	8000916 <__gesf2+0x3a>
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	2301      	movs	r3, #1
 8000972:	4398      	bics	r0, r3
 8000974:	3001      	adds	r0, #1
 8000976:	e7ce      	b.n	8000916 <__gesf2+0x3a>

08000978 <__lesf2>:
 8000978:	b530      	push	{r4, r5, lr}
 800097a:	0042      	lsls	r2, r0, #1
 800097c:	0244      	lsls	r4, r0, #9
 800097e:	024d      	lsls	r5, r1, #9
 8000980:	0fc3      	lsrs	r3, r0, #31
 8000982:	0048      	lsls	r0, r1, #1
 8000984:	0a64      	lsrs	r4, r4, #9
 8000986:	0e12      	lsrs	r2, r2, #24
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	0e00      	lsrs	r0, r0, #24
 800098c:	0fc9      	lsrs	r1, r1, #31
 800098e:	2aff      	cmp	r2, #255	; 0xff
 8000990:	d012      	beq.n	80009b8 <__lesf2+0x40>
 8000992:	28ff      	cmp	r0, #255	; 0xff
 8000994:	d00c      	beq.n	80009b0 <__lesf2+0x38>
 8000996:	2a00      	cmp	r2, #0
 8000998:	d112      	bne.n	80009c0 <__lesf2+0x48>
 800099a:	2800      	cmp	r0, #0
 800099c:	d119      	bne.n	80009d2 <__lesf2+0x5a>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d117      	bne.n	80009d2 <__lesf2+0x5a>
 80009a2:	2c00      	cmp	r4, #0
 80009a4:	d02b      	beq.n	80009fe <__lesf2+0x86>
 80009a6:	2002      	movs	r0, #2
 80009a8:	3b01      	subs	r3, #1
 80009aa:	4018      	ands	r0, r3
 80009ac:	3801      	subs	r0, #1
 80009ae:	e026      	b.n	80009fe <__lesf2+0x86>
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0f0      	beq.n	8000996 <__lesf2+0x1e>
 80009b4:	2002      	movs	r0, #2
 80009b6:	e022      	b.n	80009fe <__lesf2+0x86>
 80009b8:	2c00      	cmp	r4, #0
 80009ba:	d1fb      	bne.n	80009b4 <__lesf2+0x3c>
 80009bc:	28ff      	cmp	r0, #255	; 0xff
 80009be:	d01f      	beq.n	8000a00 <__lesf2+0x88>
 80009c0:	2800      	cmp	r0, #0
 80009c2:	d11f      	bne.n	8000a04 <__lesf2+0x8c>
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d11d      	bne.n	8000a04 <__lesf2+0x8c>
 80009c8:	2002      	movs	r0, #2
 80009ca:	3b01      	subs	r3, #1
 80009cc:	4018      	ands	r0, r3
 80009ce:	3801      	subs	r0, #1
 80009d0:	e015      	b.n	80009fe <__lesf2+0x86>
 80009d2:	2c00      	cmp	r4, #0
 80009d4:	d00e      	beq.n	80009f4 <__lesf2+0x7c>
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d1e5      	bne.n	80009a6 <__lesf2+0x2e>
 80009da:	2200      	movs	r2, #0
 80009dc:	4290      	cmp	r0, r2
 80009de:	dc04      	bgt.n	80009ea <__lesf2+0x72>
 80009e0:	42ac      	cmp	r4, r5
 80009e2:	d8e0      	bhi.n	80009a6 <__lesf2+0x2e>
 80009e4:	2000      	movs	r0, #0
 80009e6:	42ac      	cmp	r4, r5
 80009e8:	d209      	bcs.n	80009fe <__lesf2+0x86>
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	2301      	movs	r3, #1
 80009ee:	4398      	bics	r0, r3
 80009f0:	3001      	adds	r0, #1
 80009f2:	e004      	b.n	80009fe <__lesf2+0x86>
 80009f4:	2301      	movs	r3, #1
 80009f6:	3901      	subs	r1, #1
 80009f8:	4399      	bics	r1, r3
 80009fa:	0008      	movs	r0, r1
 80009fc:	3001      	adds	r0, #1
 80009fe:	bd30      	pop	{r4, r5, pc}
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d1d7      	bne.n	80009b4 <__lesf2+0x3c>
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d1ce      	bne.n	80009a6 <__lesf2+0x2e>
 8000a08:	4282      	cmp	r2, r0
 8000a0a:	dde7      	ble.n	80009dc <__lesf2+0x64>
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	1e58      	subs	r0, r3, #1
 8000a10:	4008      	ands	r0, r1
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7f3      	b.n	80009fe <__lesf2+0x86>
 8000a16:	46c0      	nop			; (mov r8, r8)

08000a18 <__aeabi_fmul>:
 8000a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1a:	464e      	mov	r6, r9
 8000a1c:	4657      	mov	r7, sl
 8000a1e:	4645      	mov	r5, r8
 8000a20:	46de      	mov	lr, fp
 8000a22:	b5e0      	push	{r5, r6, r7, lr}
 8000a24:	0243      	lsls	r3, r0, #9
 8000a26:	0a5b      	lsrs	r3, r3, #9
 8000a28:	0045      	lsls	r5, r0, #1
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	1c0f      	adds	r7, r1, #0
 8000a2e:	4699      	mov	r9, r3
 8000a30:	0e2d      	lsrs	r5, r5, #24
 8000a32:	0fc6      	lsrs	r6, r0, #31
 8000a34:	2d00      	cmp	r5, #0
 8000a36:	d057      	beq.n	8000ae8 <__aeabi_fmul+0xd0>
 8000a38:	2dff      	cmp	r5, #255	; 0xff
 8000a3a:	d024      	beq.n	8000a86 <__aeabi_fmul+0x6e>
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	04c0      	lsls	r0, r0, #19
 8000a42:	4318      	orrs	r0, r3
 8000a44:	2300      	movs	r3, #0
 8000a46:	4681      	mov	r9, r0
 8000a48:	469a      	mov	sl, r3
 8000a4a:	469b      	mov	fp, r3
 8000a4c:	3d7f      	subs	r5, #127	; 0x7f
 8000a4e:	027c      	lsls	r4, r7, #9
 8000a50:	007a      	lsls	r2, r7, #1
 8000a52:	0ffb      	lsrs	r3, r7, #31
 8000a54:	0a64      	lsrs	r4, r4, #9
 8000a56:	0e12      	lsrs	r2, r2, #24
 8000a58:	4698      	mov	r8, r3
 8000a5a:	d023      	beq.n	8000aa4 <__aeabi_fmul+0x8c>
 8000a5c:	2aff      	cmp	r2, #255	; 0xff
 8000a5e:	d04b      	beq.n	8000af8 <__aeabi_fmul+0xe0>
 8000a60:	00e3      	lsls	r3, r4, #3
 8000a62:	2480      	movs	r4, #128	; 0x80
 8000a64:	2000      	movs	r0, #0
 8000a66:	04e4      	lsls	r4, r4, #19
 8000a68:	3a7f      	subs	r2, #127	; 0x7f
 8000a6a:	431c      	orrs	r4, r3
 8000a6c:	18ad      	adds	r5, r5, r2
 8000a6e:	1c6b      	adds	r3, r5, #1
 8000a70:	4647      	mov	r7, r8
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	4653      	mov	r3, sl
 8000a76:	4077      	eors	r7, r6
 8000a78:	003a      	movs	r2, r7
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	d848      	bhi.n	8000b10 <__aeabi_fmul+0xf8>
 8000a7e:	497d      	ldr	r1, [pc, #500]	; (8000c74 <__aeabi_fmul+0x25c>)
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	58cb      	ldr	r3, [r1, r3]
 8000a84:	469f      	mov	pc, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d000      	beq.n	8000a8c <__aeabi_fmul+0x74>
 8000a8a:	e085      	b.n	8000b98 <__aeabi_fmul+0x180>
 8000a8c:	3308      	adds	r3, #8
 8000a8e:	469a      	mov	sl, r3
 8000a90:	3b06      	subs	r3, #6
 8000a92:	469b      	mov	fp, r3
 8000a94:	027c      	lsls	r4, r7, #9
 8000a96:	007a      	lsls	r2, r7, #1
 8000a98:	0ffb      	lsrs	r3, r7, #31
 8000a9a:	25ff      	movs	r5, #255	; 0xff
 8000a9c:	0a64      	lsrs	r4, r4, #9
 8000a9e:	0e12      	lsrs	r2, r2, #24
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	d1db      	bne.n	8000a5c <__aeabi_fmul+0x44>
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_fmul+0x92>
 8000aa8:	e090      	b.n	8000bcc <__aeabi_fmul+0x1b4>
 8000aaa:	4652      	mov	r2, sl
 8000aac:	2301      	movs	r3, #1
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	4692      	mov	sl, r2
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	e7db      	b.n	8000a6e <__aeabi_fmul+0x56>
 8000ab6:	464c      	mov	r4, r9
 8000ab8:	4658      	mov	r0, fp
 8000aba:	0017      	movs	r7, r2
 8000abc:	2802      	cmp	r0, #2
 8000abe:	d024      	beq.n	8000b0a <__aeabi_fmul+0xf2>
 8000ac0:	2803      	cmp	r0, #3
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fmul+0xae>
 8000ac4:	e0cf      	b.n	8000c66 <__aeabi_fmul+0x24e>
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2801      	cmp	r0, #1
 8000acc:	d14d      	bne.n	8000b6a <__aeabi_fmul+0x152>
 8000ace:	0258      	lsls	r0, r3, #9
 8000ad0:	05d2      	lsls	r2, r2, #23
 8000ad2:	0a40      	lsrs	r0, r0, #9
 8000ad4:	07ff      	lsls	r7, r7, #31
 8000ad6:	4310      	orrs	r0, r2
 8000ad8:	4338      	orrs	r0, r7
 8000ada:	b003      	add	sp, #12
 8000adc:	bc3c      	pop	{r2, r3, r4, r5}
 8000ade:	4690      	mov	r8, r2
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	46a2      	mov	sl, r4
 8000ae4:	46ab      	mov	fp, r5
 8000ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d15b      	bne.n	8000ba4 <__aeabi_fmul+0x18c>
 8000aec:	2304      	movs	r3, #4
 8000aee:	469a      	mov	sl, r3
 8000af0:	3b03      	subs	r3, #3
 8000af2:	2500      	movs	r5, #0
 8000af4:	469b      	mov	fp, r3
 8000af6:	e7aa      	b.n	8000a4e <__aeabi_fmul+0x36>
 8000af8:	35ff      	adds	r5, #255	; 0xff
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d160      	bne.n	8000bc0 <__aeabi_fmul+0x1a8>
 8000afe:	4652      	mov	r2, sl
 8000b00:	2302      	movs	r3, #2
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4692      	mov	sl, r2
 8000b06:	2002      	movs	r0, #2
 8000b08:	e7b1      	b.n	8000a6e <__aeabi_fmul+0x56>
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e7de      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000b10:	464b      	mov	r3, r9
 8000b12:	0c1b      	lsrs	r3, r3, #16
 8000b14:	469c      	mov	ip, r3
 8000b16:	464b      	mov	r3, r9
 8000b18:	0426      	lsls	r6, r4, #16
 8000b1a:	0c36      	lsrs	r6, r6, #16
 8000b1c:	0418      	lsls	r0, r3, #16
 8000b1e:	4661      	mov	r1, ip
 8000b20:	0033      	movs	r3, r6
 8000b22:	0c22      	lsrs	r2, r4, #16
 8000b24:	4664      	mov	r4, ip
 8000b26:	0c00      	lsrs	r0, r0, #16
 8000b28:	4343      	muls	r3, r0
 8000b2a:	434e      	muls	r6, r1
 8000b2c:	4350      	muls	r0, r2
 8000b2e:	4354      	muls	r4, r2
 8000b30:	1980      	adds	r0, r0, r6
 8000b32:	0c1a      	lsrs	r2, r3, #16
 8000b34:	1812      	adds	r2, r2, r0
 8000b36:	4296      	cmp	r6, r2
 8000b38:	d903      	bls.n	8000b42 <__aeabi_fmul+0x12a>
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	0249      	lsls	r1, r1, #9
 8000b3e:	468c      	mov	ip, r1
 8000b40:	4464      	add	r4, ip
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	0410      	lsls	r0, r2, #16
 8000b48:	18c0      	adds	r0, r0, r3
 8000b4a:	0183      	lsls	r3, r0, #6
 8000b4c:	1e5e      	subs	r6, r3, #1
 8000b4e:	41b3      	sbcs	r3, r6
 8000b50:	0e80      	lsrs	r0, r0, #26
 8000b52:	4318      	orrs	r0, r3
 8000b54:	0c13      	lsrs	r3, r2, #16
 8000b56:	191b      	adds	r3, r3, r4
 8000b58:	019b      	lsls	r3, r3, #6
 8000b5a:	4303      	orrs	r3, r0
 8000b5c:	001c      	movs	r4, r3
 8000b5e:	0123      	lsls	r3, r4, #4
 8000b60:	d579      	bpl.n	8000c56 <__aeabi_fmul+0x23e>
 8000b62:	2301      	movs	r3, #1
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	401c      	ands	r4, r3
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	9a01      	ldr	r2, [sp, #4]
 8000b6c:	327f      	adds	r2, #127	; 0x7f
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	dd4d      	ble.n	8000c0e <__aeabi_fmul+0x1f6>
 8000b72:	0763      	lsls	r3, r4, #29
 8000b74:	d004      	beq.n	8000b80 <__aeabi_fmul+0x168>
 8000b76:	230f      	movs	r3, #15
 8000b78:	4023      	ands	r3, r4
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fmul+0x168>
 8000b7e:	3404      	adds	r4, #4
 8000b80:	0123      	lsls	r3, r4, #4
 8000b82:	d503      	bpl.n	8000b8c <__aeabi_fmul+0x174>
 8000b84:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <__aeabi_fmul+0x260>)
 8000b86:	9a01      	ldr	r2, [sp, #4]
 8000b88:	401c      	ands	r4, r3
 8000b8a:	3280      	adds	r2, #128	; 0x80
 8000b8c:	2afe      	cmp	r2, #254	; 0xfe
 8000b8e:	dcbc      	bgt.n	8000b0a <__aeabi_fmul+0xf2>
 8000b90:	01a3      	lsls	r3, r4, #6
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	e79a      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000b98:	230c      	movs	r3, #12
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	3b09      	subs	r3, #9
 8000b9e:	25ff      	movs	r5, #255	; 0xff
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	e754      	b.n	8000a4e <__aeabi_fmul+0x36>
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 f8c3 	bl	8002d30 <__clzsi2>
 8000baa:	464a      	mov	r2, r9
 8000bac:	1f43      	subs	r3, r0, #5
 8000bae:	2576      	movs	r5, #118	; 0x76
 8000bb0:	409a      	lsls	r2, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	426d      	negs	r5, r5
 8000bb6:	4691      	mov	r9, r2
 8000bb8:	1a2d      	subs	r5, r5, r0
 8000bba:	469a      	mov	sl, r3
 8000bbc:	469b      	mov	fp, r3
 8000bbe:	e746      	b.n	8000a4e <__aeabi_fmul+0x36>
 8000bc0:	4652      	mov	r2, sl
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4692      	mov	sl, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	e750      	b.n	8000a6e <__aeabi_fmul+0x56>
 8000bcc:	0020      	movs	r0, r4
 8000bce:	f002 f8af 	bl	8002d30 <__clzsi2>
 8000bd2:	1f43      	subs	r3, r0, #5
 8000bd4:	1a2d      	subs	r5, r5, r0
 8000bd6:	409c      	lsls	r4, r3
 8000bd8:	3d76      	subs	r5, #118	; 0x76
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e747      	b.n	8000a6e <__aeabi_fmul+0x56>
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	2700      	movs	r7, #0
 8000be2:	03db      	lsls	r3, r3, #15
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	e772      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000be8:	4642      	mov	r2, r8
 8000bea:	e766      	b.n	8000aba <__aeabi_fmul+0xa2>
 8000bec:	464c      	mov	r4, r9
 8000bee:	0032      	movs	r2, r6
 8000bf0:	4658      	mov	r0, fp
 8000bf2:	e762      	b.n	8000aba <__aeabi_fmul+0xa2>
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	464a      	mov	r2, r9
 8000bf8:	03db      	lsls	r3, r3, #15
 8000bfa:	421a      	tst	r2, r3
 8000bfc:	d022      	beq.n	8000c44 <__aeabi_fmul+0x22c>
 8000bfe:	421c      	tst	r4, r3
 8000c00:	d120      	bne.n	8000c44 <__aeabi_fmul+0x22c>
 8000c02:	4323      	orrs	r3, r4
 8000c04:	025b      	lsls	r3, r3, #9
 8000c06:	0a5b      	lsrs	r3, r3, #9
 8000c08:	4647      	mov	r7, r8
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	e75f      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	1a9a      	subs	r2, r3, r2
 8000c12:	2a1b      	cmp	r2, #27
 8000c14:	dc21      	bgt.n	8000c5a <__aeabi_fmul+0x242>
 8000c16:	0023      	movs	r3, r4
 8000c18:	9901      	ldr	r1, [sp, #4]
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	319e      	adds	r1, #158	; 0x9e
 8000c1e:	408c      	lsls	r4, r1
 8000c20:	001a      	movs	r2, r3
 8000c22:	0023      	movs	r3, r4
 8000c24:	1e5c      	subs	r4, r3, #1
 8000c26:	41a3      	sbcs	r3, r4
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	075a      	lsls	r2, r3, #29
 8000c2c:	d004      	beq.n	8000c38 <__aeabi_fmul+0x220>
 8000c2e:	220f      	movs	r2, #15
 8000c30:	401a      	ands	r2, r3
 8000c32:	2a04      	cmp	r2, #4
 8000c34:	d000      	beq.n	8000c38 <__aeabi_fmul+0x220>
 8000c36:	3304      	adds	r3, #4
 8000c38:	015a      	lsls	r2, r3, #5
 8000c3a:	d411      	bmi.n	8000c60 <__aeabi_fmul+0x248>
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	2200      	movs	r2, #0
 8000c42:	e744      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	464a      	mov	r2, r9
 8000c48:	03db      	lsls	r3, r3, #15
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	025b      	lsls	r3, r3, #9
 8000c4e:	0a5b      	lsrs	r3, r3, #9
 8000c50:	0037      	movs	r7, r6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	e73b      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c56:	9501      	str	r5, [sp, #4]
 8000c58:	e787      	b.n	8000b6a <__aeabi_fmul+0x152>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	e736      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c60:	2201      	movs	r2, #1
 8000c62:	2300      	movs	r3, #0
 8000c64:	e733      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	03db      	lsls	r3, r3, #15
 8000c6a:	4323      	orrs	r3, r4
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	0a5b      	lsrs	r3, r3, #9
 8000c70:	22ff      	movs	r2, #255	; 0xff
 8000c72:	e72c      	b.n	8000ace <__aeabi_fmul+0xb6>
 8000c74:	08007370 	.word	0x08007370
 8000c78:	f7ffffff 	.word	0xf7ffffff

08000c7c <__aeabi_fsub>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	4647      	mov	r7, r8
 8000c80:	46ce      	mov	lr, r9
 8000c82:	0044      	lsls	r4, r0, #1
 8000c84:	0fc2      	lsrs	r2, r0, #31
 8000c86:	b580      	push	{r7, lr}
 8000c88:	0247      	lsls	r7, r0, #9
 8000c8a:	0248      	lsls	r0, r1, #9
 8000c8c:	0a40      	lsrs	r0, r0, #9
 8000c8e:	4684      	mov	ip, r0
 8000c90:	4666      	mov	r6, ip
 8000c92:	0048      	lsls	r0, r1, #1
 8000c94:	0a7f      	lsrs	r7, r7, #9
 8000c96:	0e24      	lsrs	r4, r4, #24
 8000c98:	00f6      	lsls	r6, r6, #3
 8000c9a:	0025      	movs	r5, r4
 8000c9c:	4690      	mov	r8, r2
 8000c9e:	00fb      	lsls	r3, r7, #3
 8000ca0:	0e00      	lsrs	r0, r0, #24
 8000ca2:	0fc9      	lsrs	r1, r1, #31
 8000ca4:	46b1      	mov	r9, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x30>
 8000caa:	e085      	b.n	8000db8 <__aeabi_fsub+0x13c>
 8000cac:	2601      	movs	r6, #1
 8000cae:	4071      	eors	r1, r6
 8000cb0:	1a26      	subs	r6, r4, r0
 8000cb2:	4291      	cmp	r1, r2
 8000cb4:	d057      	beq.n	8000d66 <__aeabi_fsub+0xea>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	dd43      	ble.n	8000d42 <__aeabi_fsub+0xc6>
 8000cba:	2800      	cmp	r0, #0
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fsub+0x44>
 8000cbe:	e07f      	b.n	8000dc0 <__aeabi_fsub+0x144>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x4c>
 8000cc6:	e0aa      	b.n	8000e1e <__aeabi_fsub+0x1a2>
 8000cc8:	3e01      	subs	r6, #1
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_fsub+0x54>
 8000cce:	e0f7      	b.n	8000ec0 <__aeabi_fsub+0x244>
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	015a      	lsls	r2, r3, #5
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fsub+0x5c>
 8000cd6:	e08b      	b.n	8000df0 <__aeabi_fsub+0x174>
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	099c      	lsrs	r4, r3, #6
 8000cdc:	0020      	movs	r0, r4
 8000cde:	f002 f827 	bl	8002d30 <__clzsi2>
 8000ce2:	3805      	subs	r0, #5
 8000ce4:	4084      	lsls	r4, r0
 8000ce6:	4285      	cmp	r5, r0
 8000ce8:	dd00      	ble.n	8000cec <__aeabi_fsub+0x70>
 8000cea:	e0d3      	b.n	8000e94 <__aeabi_fsub+0x218>
 8000cec:	1b45      	subs	r5, r0, r5
 8000cee:	0023      	movs	r3, r4
 8000cf0:	2020      	movs	r0, #32
 8000cf2:	3501      	adds	r5, #1
 8000cf4:	40eb      	lsrs	r3, r5
 8000cf6:	1b45      	subs	r5, r0, r5
 8000cf8:	40ac      	lsls	r4, r5
 8000cfa:	1e62      	subs	r2, r4, #1
 8000cfc:	4194      	sbcs	r4, r2
 8000cfe:	4323      	orrs	r3, r4
 8000d00:	2407      	movs	r4, #7
 8000d02:	2500      	movs	r5, #0
 8000d04:	401c      	ands	r4, r3
 8000d06:	2201      	movs	r2, #1
 8000d08:	4641      	mov	r1, r8
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_fsub+0x9e>
 8000d10:	210f      	movs	r1, #15
 8000d12:	4019      	ands	r1, r3
 8000d14:	2904      	cmp	r1, #4
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x9e>
 8000d18:	3304      	adds	r3, #4
 8000d1a:	0159      	lsls	r1, r3, #5
 8000d1c:	d400      	bmi.n	8000d20 <__aeabi_fsub+0xa4>
 8000d1e:	e080      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000d20:	3501      	adds	r5, #1
 8000d22:	b2ec      	uxtb	r4, r5
 8000d24:	2dff      	cmp	r5, #255	; 0xff
 8000d26:	d000      	beq.n	8000d2a <__aeabi_fsub+0xae>
 8000d28:	e0a3      	b.n	8000e72 <__aeabi_fsub+0x1f6>
 8000d2a:	24ff      	movs	r4, #255	; 0xff
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	025b      	lsls	r3, r3, #9
 8000d30:	05e4      	lsls	r4, r4, #23
 8000d32:	0a58      	lsrs	r0, r3, #9
 8000d34:	07d2      	lsls	r2, r2, #31
 8000d36:	4320      	orrs	r0, r4
 8000d38:	4310      	orrs	r0, r2
 8000d3a:	bc0c      	pop	{r2, r3}
 8000d3c:	4690      	mov	r8, r2
 8000d3e:	4699      	mov	r9, r3
 8000d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d174      	bne.n	8000e30 <__aeabi_fsub+0x1b4>
 8000d46:	1c60      	adds	r0, r4, #1
 8000d48:	b2c0      	uxtb	r0, r0
 8000d4a:	2801      	cmp	r0, #1
 8000d4c:	dc00      	bgt.n	8000d50 <__aeabi_fsub+0xd4>
 8000d4e:	e0a7      	b.n	8000ea0 <__aeabi_fsub+0x224>
 8000d50:	464a      	mov	r2, r9
 8000d52:	1a9c      	subs	r4, r3, r2
 8000d54:	0162      	lsls	r2, r4, #5
 8000d56:	d500      	bpl.n	8000d5a <__aeabi_fsub+0xde>
 8000d58:	e0b6      	b.n	8000ec8 <__aeabi_fsub+0x24c>
 8000d5a:	2c00      	cmp	r4, #0
 8000d5c:	d1be      	bne.n	8000cdc <__aeabi_fsub+0x60>
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2400      	movs	r4, #0
 8000d62:	2300      	movs	r3, #0
 8000d64:	e7e3      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_fsub+0xf0>
 8000d6a:	e085      	b.n	8000e78 <__aeabi_fsub+0x1fc>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d046      	beq.n	8000dfe <__aeabi_fsub+0x182>
 8000d70:	2cff      	cmp	r4, #255	; 0xff
 8000d72:	d049      	beq.n	8000e08 <__aeabi_fsub+0x18c>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	4648      	mov	r0, r9
 8000d78:	04d2      	lsls	r2, r2, #19
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	4681      	mov	r9, r0
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2e1b      	cmp	r6, #27
 8000d82:	dc09      	bgt.n	8000d98 <__aeabi_fsub+0x11c>
 8000d84:	2020      	movs	r0, #32
 8000d86:	464c      	mov	r4, r9
 8000d88:	1b80      	subs	r0, r0, r6
 8000d8a:	4084      	lsls	r4, r0
 8000d8c:	464a      	mov	r2, r9
 8000d8e:	0020      	movs	r0, r4
 8000d90:	40f2      	lsrs	r2, r6
 8000d92:	1e44      	subs	r4, r0, #1
 8000d94:	41a0      	sbcs	r0, r4
 8000d96:	4302      	orrs	r2, r0
 8000d98:	189b      	adds	r3, r3, r2
 8000d9a:	015a      	lsls	r2, r3, #5
 8000d9c:	d528      	bpl.n	8000df0 <__aeabi_fsub+0x174>
 8000d9e:	3501      	adds	r5, #1
 8000da0:	2dff      	cmp	r5, #255	; 0xff
 8000da2:	d100      	bne.n	8000da6 <__aeabi_fsub+0x12a>
 8000da4:	e0a8      	b.n	8000ef8 <__aeabi_fsub+0x27c>
 8000da6:	2201      	movs	r2, #1
 8000da8:	2407      	movs	r4, #7
 8000daa:	4994      	ldr	r1, [pc, #592]	; (8000ffc <__aeabi_fsub+0x380>)
 8000dac:	401a      	ands	r2, r3
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	400b      	ands	r3, r1
 8000db2:	4313      	orrs	r3, r2
 8000db4:	401c      	ands	r4, r3
 8000db6:	e7a6      	b.n	8000d06 <__aeabi_fsub+0x8a>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d000      	beq.n	8000dbe <__aeabi_fsub+0x142>
 8000dbc:	e778      	b.n	8000cb0 <__aeabi_fsub+0x34>
 8000dbe:	e775      	b.n	8000cac <__aeabi_fsub+0x30>
 8000dc0:	2cff      	cmp	r4, #255	; 0xff
 8000dc2:	d054      	beq.n	8000e6e <__aeabi_fsub+0x1f2>
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	04d2      	lsls	r2, r2, #19
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	4689      	mov	r9, r1
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2e1b      	cmp	r6, #27
 8000dd2:	dc09      	bgt.n	8000de8 <__aeabi_fsub+0x16c>
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	4648      	mov	r0, r9
 8000dd8:	1b89      	subs	r1, r1, r6
 8000dda:	4088      	lsls	r0, r1
 8000ddc:	464a      	mov	r2, r9
 8000dde:	0001      	movs	r1, r0
 8000de0:	40f2      	lsrs	r2, r6
 8000de2:	1e48      	subs	r0, r1, #1
 8000de4:	4181      	sbcs	r1, r0
 8000de6:	430a      	orrs	r2, r1
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	015a      	lsls	r2, r3, #5
 8000dec:	d500      	bpl.n	8000df0 <__aeabi_fsub+0x174>
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fsub+0x5c>
 8000df0:	2201      	movs	r2, #1
 8000df2:	4641      	mov	r1, r8
 8000df4:	400a      	ands	r2, r1
 8000df6:	0759      	lsls	r1, r3, #29
 8000df8:	d000      	beq.n	8000dfc <__aeabi_fsub+0x180>
 8000dfa:	e789      	b.n	8000d10 <__aeabi_fsub+0x94>
 8000dfc:	e011      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000dfe:	4648      	mov	r0, r9
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d158      	bne.n	8000eb6 <__aeabi_fsub+0x23a>
 8000e04:	2cff      	cmp	r4, #255	; 0xff
 8000e06:	d10c      	bne.n	8000e22 <__aeabi_fsub+0x1a6>
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_fsub+0x194>
 8000e0e:	e78c      	b.n	8000d2a <__aeabi_fsub+0xae>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	03c0      	lsls	r0, r0, #15
 8000e14:	4303      	orrs	r3, r0
 8000e16:	025b      	lsls	r3, r3, #9
 8000e18:	0a5b      	lsrs	r3, r3, #9
 8000e1a:	24ff      	movs	r4, #255	; 0xff
 8000e1c:	e787      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000e1e:	2cff      	cmp	r4, #255	; 0xff
 8000e20:	d025      	beq.n	8000e6e <__aeabi_fsub+0x1f2>
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2dff      	cmp	r5, #255	; 0xff
 8000e26:	d0f0      	beq.n	8000e0a <__aeabi_fsub+0x18e>
 8000e28:	025b      	lsls	r3, r3, #9
 8000e2a:	0a5b      	lsrs	r3, r3, #9
 8000e2c:	b2ec      	uxtb	r4, r5
 8000e2e:	e77e      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d04d      	beq.n	8000ed0 <__aeabi_fsub+0x254>
 8000e34:	28ff      	cmp	r0, #255	; 0xff
 8000e36:	d018      	beq.n	8000e6a <__aeabi_fsub+0x1ee>
 8000e38:	2480      	movs	r4, #128	; 0x80
 8000e3a:	04e4      	lsls	r4, r4, #19
 8000e3c:	4272      	negs	r2, r6
 8000e3e:	4323      	orrs	r3, r4
 8000e40:	2a1b      	cmp	r2, #27
 8000e42:	dd00      	ble.n	8000e46 <__aeabi_fsub+0x1ca>
 8000e44:	e0c4      	b.n	8000fd0 <__aeabi_fsub+0x354>
 8000e46:	001c      	movs	r4, r3
 8000e48:	2520      	movs	r5, #32
 8000e4a:	40d4      	lsrs	r4, r2
 8000e4c:	1aaa      	subs	r2, r5, r2
 8000e4e:	4093      	lsls	r3, r2
 8000e50:	1e5a      	subs	r2, r3, #1
 8000e52:	4193      	sbcs	r3, r2
 8000e54:	4323      	orrs	r3, r4
 8000e56:	464a      	mov	r2, r9
 8000e58:	0005      	movs	r5, r0
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4688      	mov	r8, r1
 8000e5e:	e738      	b.n	8000cd2 <__aeabi_fsub+0x56>
 8000e60:	1c72      	adds	r2, r6, #1
 8000e62:	d0f8      	beq.n	8000e56 <__aeabi_fsub+0x1da>
 8000e64:	43f2      	mvns	r2, r6
 8000e66:	28ff      	cmp	r0, #255	; 0xff
 8000e68:	d1ea      	bne.n	8000e40 <__aeabi_fsub+0x1c4>
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	25ff      	movs	r5, #255	; 0xff
 8000e70:	e7d7      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000e72:	019b      	lsls	r3, r3, #6
 8000e74:	0a5b      	lsrs	r3, r3, #9
 8000e76:	e75a      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d141      	bne.n	8000f00 <__aeabi_fsub+0x284>
 8000e7c:	1c65      	adds	r5, r4, #1
 8000e7e:	b2e9      	uxtb	r1, r5
 8000e80:	2901      	cmp	r1, #1
 8000e82:	dd45      	ble.n	8000f10 <__aeabi_fsub+0x294>
 8000e84:	2dff      	cmp	r5, #255	; 0xff
 8000e86:	d100      	bne.n	8000e8a <__aeabi_fsub+0x20e>
 8000e88:	e74f      	b.n	8000d2a <__aeabi_fsub+0xae>
 8000e8a:	2407      	movs	r4, #7
 8000e8c:	444b      	add	r3, r9
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	401c      	ands	r4, r3
 8000e92:	e738      	b.n	8000d06 <__aeabi_fsub+0x8a>
 8000e94:	2207      	movs	r2, #7
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <__aeabi_fsub+0x384>)
 8000e98:	1a2d      	subs	r5, r5, r0
 8000e9a:	4023      	ands	r3, r4
 8000e9c:	4014      	ands	r4, r2
 8000e9e:	e732      	b.n	8000d06 <__aeabi_fsub+0x8a>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d11d      	bne.n	8000ee0 <__aeabi_fsub+0x264>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d17a      	bne.n	8000f9e <__aeabi_fsub+0x322>
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_fsub+0x234>
 8000eae:	e091      	b.n	8000fd4 <__aeabi_fsub+0x358>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	e7b5      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000eb6:	3e01      	subs	r6, #1
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d119      	bne.n	8000ef0 <__aeabi_fsub+0x274>
 8000ebc:	444b      	add	r3, r9
 8000ebe:	e76c      	b.n	8000d9a <__aeabi_fsub+0x11e>
 8000ec0:	2cff      	cmp	r4, #255	; 0xff
 8000ec2:	d184      	bne.n	8000dce <__aeabi_fsub+0x152>
 8000ec4:	25ff      	movs	r5, #255	; 0xff
 8000ec6:	e7ac      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000ec8:	464a      	mov	r2, r9
 8000eca:	4688      	mov	r8, r1
 8000ecc:	1ad4      	subs	r4, r2, r3
 8000ece:	e705      	b.n	8000cdc <__aeabi_fsub+0x60>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1c5      	bne.n	8000e60 <__aeabi_fsub+0x1e4>
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	28ff      	cmp	r0, #255	; 0xff
 8000ed8:	d0c8      	beq.n	8000e6c <__aeabi_fsub+0x1f0>
 8000eda:	0005      	movs	r5, r0
 8000edc:	464b      	mov	r3, r9
 8000ede:	e7a0      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d149      	bne.n	8000f78 <__aeabi_fsub+0x2fc>
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d077      	beq.n	8000fda <__aeabi_fsub+0x35e>
 8000eea:	000a      	movs	r2, r1
 8000eec:	25ff      	movs	r5, #255	; 0xff
 8000eee:	e798      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000ef0:	2cff      	cmp	r4, #255	; 0xff
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x27a>
 8000ef4:	e743      	b.n	8000d7e <__aeabi_fsub+0x102>
 8000ef6:	e787      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000ef8:	000a      	movs	r2, r1
 8000efa:	24ff      	movs	r4, #255	; 0xff
 8000efc:	2300      	movs	r3, #0
 8000efe:	e716      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d115      	bne.n	8000f30 <__aeabi_fsub+0x2b4>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d157      	bne.n	8000fb8 <__aeabi_fsub+0x33c>
 8000f08:	28ff      	cmp	r0, #255	; 0xff
 8000f0a:	d1e6      	bne.n	8000eda <__aeabi_fsub+0x25e>
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	e77b      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000f10:	2c00      	cmp	r4, #0
 8000f12:	d120      	bne.n	8000f56 <__aeabi_fsub+0x2da>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d057      	beq.n	8000fc8 <__aeabi_fsub+0x34c>
 8000f18:	4649      	mov	r1, r9
 8000f1a:	2900      	cmp	r1, #0
 8000f1c:	d053      	beq.n	8000fc6 <__aeabi_fsub+0x34a>
 8000f1e:	444b      	add	r3, r9
 8000f20:	015a      	lsls	r2, r3, #5
 8000f22:	d568      	bpl.n	8000ff6 <__aeabi_fsub+0x37a>
 8000f24:	2407      	movs	r4, #7
 8000f26:	4a36      	ldr	r2, [pc, #216]	; (8001000 <__aeabi_fsub+0x384>)
 8000f28:	401c      	ands	r4, r3
 8000f2a:	2501      	movs	r5, #1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	e6ea      	b.n	8000d06 <__aeabi_fsub+0x8a>
 8000f30:	28ff      	cmp	r0, #255	; 0xff
 8000f32:	d0eb      	beq.n	8000f0c <__aeabi_fsub+0x290>
 8000f34:	2280      	movs	r2, #128	; 0x80
 8000f36:	04d2      	lsls	r2, r2, #19
 8000f38:	4276      	negs	r6, r6
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	2e1b      	cmp	r6, #27
 8000f3e:	dc53      	bgt.n	8000fe8 <__aeabi_fsub+0x36c>
 8000f40:	2520      	movs	r5, #32
 8000f42:	1bad      	subs	r5, r5, r6
 8000f44:	001a      	movs	r2, r3
 8000f46:	40ab      	lsls	r3, r5
 8000f48:	40f2      	lsrs	r2, r6
 8000f4a:	1e5c      	subs	r4, r3, #1
 8000f4c:	41a3      	sbcs	r3, r4
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	444b      	add	r3, r9
 8000f52:	0005      	movs	r5, r0
 8000f54:	e721      	b.n	8000d9a <__aeabi_fsub+0x11e>
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0d8      	beq.n	8000f0c <__aeabi_fsub+0x290>
 8000f5a:	4649      	mov	r1, r9
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_fsub+0x2e6>
 8000f60:	e752      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	03c9      	lsls	r1, r1, #15
 8000f66:	420f      	tst	r7, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x2f0>
 8000f6a:	e74d      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	4208      	tst	r0, r1
 8000f70:	d000      	beq.n	8000f74 <__aeabi_fsub+0x2f8>
 8000f72:	e749      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000f74:	464b      	mov	r3, r9
 8000f76:	e747      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000f78:	4648      	mov	r0, r9
 8000f7a:	25ff      	movs	r5, #255	; 0xff
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x306>
 8000f80:	e74f      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	03d2      	lsls	r2, r2, #15
 8000f86:	4217      	tst	r7, r2
 8000f88:	d004      	beq.n	8000f94 <__aeabi_fsub+0x318>
 8000f8a:	4660      	mov	r0, ip
 8000f8c:	4210      	tst	r0, r2
 8000f8e:	d101      	bne.n	8000f94 <__aeabi_fsub+0x318>
 8000f90:	464b      	mov	r3, r9
 8000f92:	4688      	mov	r8, r1
 8000f94:	2201      	movs	r2, #1
 8000f96:	4641      	mov	r1, r8
 8000f98:	25ff      	movs	r5, #255	; 0xff
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	e741      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000f9e:	4648      	mov	r0, r9
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d01f      	beq.n	8000fe4 <__aeabi_fsub+0x368>
 8000fa4:	1a1a      	subs	r2, r3, r0
 8000fa6:	0150      	lsls	r0, r2, #5
 8000fa8:	d520      	bpl.n	8000fec <__aeabi_fsub+0x370>
 8000faa:	464a      	mov	r2, r9
 8000fac:	2407      	movs	r4, #7
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	401c      	ands	r4, r3
 8000fb2:	4688      	mov	r8, r1
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	e6a6      	b.n	8000d06 <__aeabi_fsub+0x8a>
 8000fb8:	1c74      	adds	r4, r6, #1
 8000fba:	d0c9      	beq.n	8000f50 <__aeabi_fsub+0x2d4>
 8000fbc:	43f6      	mvns	r6, r6
 8000fbe:	28ff      	cmp	r0, #255	; 0xff
 8000fc0:	d1bc      	bne.n	8000f3c <__aeabi_fsub+0x2c0>
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	e720      	b.n	8000e08 <__aeabi_fsub+0x18c>
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	464b      	mov	r3, r9
 8000fca:	2500      	movs	r5, #0
 8000fcc:	08db      	lsrs	r3, r3, #3
 8000fce:	e72b      	b.n	8000e28 <__aeabi_fsub+0x1ac>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e740      	b.n	8000e56 <__aeabi_fsub+0x1da>
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e6a9      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000fda:	2380      	movs	r3, #128	; 0x80
 8000fdc:	2200      	movs	r2, #0
 8000fde:	03db      	lsls	r3, r3, #15
 8000fe0:	24ff      	movs	r4, #255	; 0xff
 8000fe2:	e6a4      	b.n	8000d2e <__aeabi_fsub+0xb2>
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e71c      	b.n	8000e22 <__aeabi_fsub+0x1a6>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e7b1      	b.n	8000f50 <__aeabi_fsub+0x2d4>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	d0f1      	beq.n	8000fd4 <__aeabi_fsub+0x358>
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	e6fc      	b.n	8000df0 <__aeabi_fsub+0x174>
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	e6fa      	b.n	8000df0 <__aeabi_fsub+0x174>
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	7dffffff 	.word	0x7dffffff
 8001000:	fbffffff 	.word	0xfbffffff

08001004 <__aeabi_f2iz>:
 8001004:	0241      	lsls	r1, r0, #9
 8001006:	0042      	lsls	r2, r0, #1
 8001008:	0fc3      	lsrs	r3, r0, #31
 800100a:	0a49      	lsrs	r1, r1, #9
 800100c:	0e12      	lsrs	r2, r2, #24
 800100e:	2000      	movs	r0, #0
 8001010:	2a7e      	cmp	r2, #126	; 0x7e
 8001012:	d90d      	bls.n	8001030 <__aeabi_f2iz+0x2c>
 8001014:	2a9d      	cmp	r2, #157	; 0x9d
 8001016:	d80c      	bhi.n	8001032 <__aeabi_f2iz+0x2e>
 8001018:	2080      	movs	r0, #128	; 0x80
 800101a:	0400      	lsls	r0, r0, #16
 800101c:	4301      	orrs	r1, r0
 800101e:	2a95      	cmp	r2, #149	; 0x95
 8001020:	dc0a      	bgt.n	8001038 <__aeabi_f2iz+0x34>
 8001022:	2096      	movs	r0, #150	; 0x96
 8001024:	1a82      	subs	r2, r0, r2
 8001026:	40d1      	lsrs	r1, r2
 8001028:	4248      	negs	r0, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_f2iz+0x2c>
 800102e:	0008      	movs	r0, r1
 8001030:	4770      	bx	lr
 8001032:	4a03      	ldr	r2, [pc, #12]	; (8001040 <__aeabi_f2iz+0x3c>)
 8001034:	1898      	adds	r0, r3, r2
 8001036:	e7fb      	b.n	8001030 <__aeabi_f2iz+0x2c>
 8001038:	3a96      	subs	r2, #150	; 0x96
 800103a:	4091      	lsls	r1, r2
 800103c:	e7f4      	b.n	8001028 <__aeabi_f2iz+0x24>
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	7fffffff 	.word	0x7fffffff

08001044 <__aeabi_i2f>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	2800      	cmp	r0, #0
 8001048:	d03d      	beq.n	80010c6 <__aeabi_i2f+0x82>
 800104a:	17c3      	asrs	r3, r0, #31
 800104c:	18c5      	adds	r5, r0, r3
 800104e:	405d      	eors	r5, r3
 8001050:	0fc4      	lsrs	r4, r0, #31
 8001052:	0028      	movs	r0, r5
 8001054:	f001 fe6c 	bl	8002d30 <__clzsi2>
 8001058:	229e      	movs	r2, #158	; 0x9e
 800105a:	1a12      	subs	r2, r2, r0
 800105c:	2a96      	cmp	r2, #150	; 0x96
 800105e:	dc07      	bgt.n	8001070 <__aeabi_i2f+0x2c>
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	2808      	cmp	r0, #8
 8001064:	dd33      	ble.n	80010ce <__aeabi_i2f+0x8a>
 8001066:	3808      	subs	r0, #8
 8001068:	4085      	lsls	r5, r0
 800106a:	0268      	lsls	r0, r5, #9
 800106c:	0a40      	lsrs	r0, r0, #9
 800106e:	e023      	b.n	80010b8 <__aeabi_i2f+0x74>
 8001070:	2a99      	cmp	r2, #153	; 0x99
 8001072:	dd0b      	ble.n	800108c <__aeabi_i2f+0x48>
 8001074:	2305      	movs	r3, #5
 8001076:	0029      	movs	r1, r5
 8001078:	1a1b      	subs	r3, r3, r0
 800107a:	40d9      	lsrs	r1, r3
 800107c:	0003      	movs	r3, r0
 800107e:	331b      	adds	r3, #27
 8001080:	409d      	lsls	r5, r3
 8001082:	002b      	movs	r3, r5
 8001084:	1e5d      	subs	r5, r3, #1
 8001086:	41ab      	sbcs	r3, r5
 8001088:	4319      	orrs	r1, r3
 800108a:	000d      	movs	r5, r1
 800108c:	2805      	cmp	r0, #5
 800108e:	dd01      	ble.n	8001094 <__aeabi_i2f+0x50>
 8001090:	1f43      	subs	r3, r0, #5
 8001092:	409d      	lsls	r5, r3
 8001094:	002b      	movs	r3, r5
 8001096:	490f      	ldr	r1, [pc, #60]	; (80010d4 <__aeabi_i2f+0x90>)
 8001098:	400b      	ands	r3, r1
 800109a:	076e      	lsls	r6, r5, #29
 800109c:	d009      	beq.n	80010b2 <__aeabi_i2f+0x6e>
 800109e:	260f      	movs	r6, #15
 80010a0:	4035      	ands	r5, r6
 80010a2:	2d04      	cmp	r5, #4
 80010a4:	d005      	beq.n	80010b2 <__aeabi_i2f+0x6e>
 80010a6:	3304      	adds	r3, #4
 80010a8:	015d      	lsls	r5, r3, #5
 80010aa:	d502      	bpl.n	80010b2 <__aeabi_i2f+0x6e>
 80010ac:	229f      	movs	r2, #159	; 0x9f
 80010ae:	400b      	ands	r3, r1
 80010b0:	1a12      	subs	r2, r2, r0
 80010b2:	019b      	lsls	r3, r3, #6
 80010b4:	0a58      	lsrs	r0, r3, #9
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	0240      	lsls	r0, r0, #9
 80010ba:	05d2      	lsls	r2, r2, #23
 80010bc:	0a40      	lsrs	r0, r0, #9
 80010be:	07e4      	lsls	r4, r4, #31
 80010c0:	4310      	orrs	r0, r2
 80010c2:	4320      	orrs	r0, r4
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
 80010c6:	2400      	movs	r4, #0
 80010c8:	2200      	movs	r2, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	e7f4      	b.n	80010b8 <__aeabi_i2f+0x74>
 80010ce:	0268      	lsls	r0, r5, #9
 80010d0:	0a40      	lsrs	r0, r0, #9
 80010d2:	e7f1      	b.n	80010b8 <__aeabi_i2f+0x74>
 80010d4:	fbffffff 	.word	0xfbffffff

080010d8 <__aeabi_ui2f>:
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	1e04      	subs	r4, r0, #0
 80010dc:	d034      	beq.n	8001148 <__aeabi_ui2f+0x70>
 80010de:	f001 fe27 	bl	8002d30 <__clzsi2>
 80010e2:	229e      	movs	r2, #158	; 0x9e
 80010e4:	1a12      	subs	r2, r2, r0
 80010e6:	2a96      	cmp	r2, #150	; 0x96
 80010e8:	dc07      	bgt.n	80010fa <__aeabi_ui2f+0x22>
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	2808      	cmp	r0, #8
 80010ee:	dd2e      	ble.n	800114e <__aeabi_ui2f+0x76>
 80010f0:	3808      	subs	r0, #8
 80010f2:	4084      	lsls	r4, r0
 80010f4:	0260      	lsls	r0, r4, #9
 80010f6:	0a40      	lsrs	r0, r0, #9
 80010f8:	e021      	b.n	800113e <__aeabi_ui2f+0x66>
 80010fa:	2a99      	cmp	r2, #153	; 0x99
 80010fc:	dd09      	ble.n	8001112 <__aeabi_ui2f+0x3a>
 80010fe:	0003      	movs	r3, r0
 8001100:	0021      	movs	r1, r4
 8001102:	331b      	adds	r3, #27
 8001104:	4099      	lsls	r1, r3
 8001106:	1e4b      	subs	r3, r1, #1
 8001108:	4199      	sbcs	r1, r3
 800110a:	2305      	movs	r3, #5
 800110c:	1a1b      	subs	r3, r3, r0
 800110e:	40dc      	lsrs	r4, r3
 8001110:	430c      	orrs	r4, r1
 8001112:	2805      	cmp	r0, #5
 8001114:	dd01      	ble.n	800111a <__aeabi_ui2f+0x42>
 8001116:	1f43      	subs	r3, r0, #5
 8001118:	409c      	lsls	r4, r3
 800111a:	0023      	movs	r3, r4
 800111c:	490d      	ldr	r1, [pc, #52]	; (8001154 <__aeabi_ui2f+0x7c>)
 800111e:	400b      	ands	r3, r1
 8001120:	0765      	lsls	r5, r4, #29
 8001122:	d009      	beq.n	8001138 <__aeabi_ui2f+0x60>
 8001124:	250f      	movs	r5, #15
 8001126:	402c      	ands	r4, r5
 8001128:	2c04      	cmp	r4, #4
 800112a:	d005      	beq.n	8001138 <__aeabi_ui2f+0x60>
 800112c:	3304      	adds	r3, #4
 800112e:	015c      	lsls	r4, r3, #5
 8001130:	d502      	bpl.n	8001138 <__aeabi_ui2f+0x60>
 8001132:	229f      	movs	r2, #159	; 0x9f
 8001134:	400b      	ands	r3, r1
 8001136:	1a12      	subs	r2, r2, r0
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	0a58      	lsrs	r0, r3, #9
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	0240      	lsls	r0, r0, #9
 8001140:	05d2      	lsls	r2, r2, #23
 8001142:	0a40      	lsrs	r0, r0, #9
 8001144:	4310      	orrs	r0, r2
 8001146:	bd70      	pop	{r4, r5, r6, pc}
 8001148:	2200      	movs	r2, #0
 800114a:	2000      	movs	r0, #0
 800114c:	e7f7      	b.n	800113e <__aeabi_ui2f+0x66>
 800114e:	0260      	lsls	r0, r4, #9
 8001150:	0a40      	lsrs	r0, r0, #9
 8001152:	e7f4      	b.n	800113e <__aeabi_ui2f+0x66>
 8001154:	fbffffff 	.word	0xfbffffff

08001158 <__aeabi_dadd>:
 8001158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800115a:	464f      	mov	r7, r9
 800115c:	4646      	mov	r6, r8
 800115e:	46d6      	mov	lr, sl
 8001160:	000c      	movs	r4, r1
 8001162:	0309      	lsls	r1, r1, #12
 8001164:	b5c0      	push	{r6, r7, lr}
 8001166:	0a49      	lsrs	r1, r1, #9
 8001168:	0f47      	lsrs	r7, r0, #29
 800116a:	005e      	lsls	r6, r3, #1
 800116c:	4339      	orrs	r1, r7
 800116e:	031f      	lsls	r7, r3, #12
 8001170:	0fdb      	lsrs	r3, r3, #31
 8001172:	469c      	mov	ip, r3
 8001174:	0065      	lsls	r5, r4, #1
 8001176:	0a7b      	lsrs	r3, r7, #9
 8001178:	0f57      	lsrs	r7, r2, #29
 800117a:	431f      	orrs	r7, r3
 800117c:	0d6d      	lsrs	r5, r5, #21
 800117e:	0fe4      	lsrs	r4, r4, #31
 8001180:	0d76      	lsrs	r6, r6, #21
 8001182:	46a1      	mov	r9, r4
 8001184:	00c0      	lsls	r0, r0, #3
 8001186:	46b8      	mov	r8, r7
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	1bab      	subs	r3, r5, r6
 800118c:	4564      	cmp	r4, ip
 800118e:	d07b      	beq.n	8001288 <__aeabi_dadd+0x130>
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd5f      	ble.n	8001254 <__aeabi_dadd+0xfc>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d000      	beq.n	800119a <__aeabi_dadd+0x42>
 8001198:	e0a4      	b.n	80012e4 <__aeabi_dadd+0x18c>
 800119a:	003e      	movs	r6, r7
 800119c:	4316      	orrs	r6, r2
 800119e:	d100      	bne.n	80011a2 <__aeabi_dadd+0x4a>
 80011a0:	e112      	b.n	80013c8 <__aeabi_dadd+0x270>
 80011a2:	1e5e      	subs	r6, r3, #1
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_dadd+0x52>
 80011a8:	e19e      	b.n	80014e8 <__aeabi_dadd+0x390>
 80011aa:	1a87      	subs	r7, r0, r2
 80011ac:	4643      	mov	r3, r8
 80011ae:	42b8      	cmp	r0, r7
 80011b0:	4180      	sbcs	r0, r0
 80011b2:	2501      	movs	r5, #1
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	4240      	negs	r0, r0
 80011b8:	1a09      	subs	r1, r1, r0
 80011ba:	020b      	lsls	r3, r1, #8
 80011bc:	d400      	bmi.n	80011c0 <__aeabi_dadd+0x68>
 80011be:	e131      	b.n	8001424 <__aeabi_dadd+0x2cc>
 80011c0:	0249      	lsls	r1, r1, #9
 80011c2:	0a4e      	lsrs	r6, r1, #9
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x72>
 80011c8:	e16e      	b.n	80014a8 <__aeabi_dadd+0x350>
 80011ca:	0030      	movs	r0, r6
 80011cc:	f001 fdb0 	bl	8002d30 <__clzsi2>
 80011d0:	0003      	movs	r3, r0
 80011d2:	3b08      	subs	r3, #8
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	dd00      	ble.n	80011da <__aeabi_dadd+0x82>
 80011d8:	e161      	b.n	800149e <__aeabi_dadd+0x346>
 80011da:	2220      	movs	r2, #32
 80011dc:	0039      	movs	r1, r7
 80011de:	1ad2      	subs	r2, r2, r3
 80011e0:	409e      	lsls	r6, r3
 80011e2:	40d1      	lsrs	r1, r2
 80011e4:	409f      	lsls	r7, r3
 80011e6:	430e      	orrs	r6, r1
 80011e8:	429d      	cmp	r5, r3
 80011ea:	dd00      	ble.n	80011ee <__aeabi_dadd+0x96>
 80011ec:	e151      	b.n	8001492 <__aeabi_dadd+0x33a>
 80011ee:	1b5d      	subs	r5, r3, r5
 80011f0:	1c6b      	adds	r3, r5, #1
 80011f2:	2b1f      	cmp	r3, #31
 80011f4:	dd00      	ble.n	80011f8 <__aeabi_dadd+0xa0>
 80011f6:	e17c      	b.n	80014f2 <__aeabi_dadd+0x39a>
 80011f8:	2120      	movs	r1, #32
 80011fa:	1ac9      	subs	r1, r1, r3
 80011fc:	003d      	movs	r5, r7
 80011fe:	0030      	movs	r0, r6
 8001200:	408f      	lsls	r7, r1
 8001202:	4088      	lsls	r0, r1
 8001204:	40dd      	lsrs	r5, r3
 8001206:	1e79      	subs	r1, r7, #1
 8001208:	418f      	sbcs	r7, r1
 800120a:	0031      	movs	r1, r6
 800120c:	2207      	movs	r2, #7
 800120e:	4328      	orrs	r0, r5
 8001210:	40d9      	lsrs	r1, r3
 8001212:	2500      	movs	r5, #0
 8001214:	4307      	orrs	r7, r0
 8001216:	403a      	ands	r2, r7
 8001218:	2a00      	cmp	r2, #0
 800121a:	d009      	beq.n	8001230 <__aeabi_dadd+0xd8>
 800121c:	230f      	movs	r3, #15
 800121e:	403b      	ands	r3, r7
 8001220:	2b04      	cmp	r3, #4
 8001222:	d005      	beq.n	8001230 <__aeabi_dadd+0xd8>
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	42bb      	cmp	r3, r7
 8001228:	41bf      	sbcs	r7, r7
 800122a:	427f      	negs	r7, r7
 800122c:	19c9      	adds	r1, r1, r7
 800122e:	001f      	movs	r7, r3
 8001230:	020b      	lsls	r3, r1, #8
 8001232:	d400      	bmi.n	8001236 <__aeabi_dadd+0xde>
 8001234:	e226      	b.n	8001684 <__aeabi_dadd+0x52c>
 8001236:	1c6a      	adds	r2, r5, #1
 8001238:	4bc6      	ldr	r3, [pc, #792]	; (8001554 <__aeabi_dadd+0x3fc>)
 800123a:	0555      	lsls	r5, r2, #21
 800123c:	0d6d      	lsrs	r5, r5, #21
 800123e:	429a      	cmp	r2, r3
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0xec>
 8001242:	e106      	b.n	8001452 <__aeabi_dadd+0x2fa>
 8001244:	4ac4      	ldr	r2, [pc, #784]	; (8001558 <__aeabi_dadd+0x400>)
 8001246:	08ff      	lsrs	r7, r7, #3
 8001248:	400a      	ands	r2, r1
 800124a:	0753      	lsls	r3, r2, #29
 800124c:	0252      	lsls	r2, r2, #9
 800124e:	433b      	orrs	r3, r7
 8001250:	0b12      	lsrs	r2, r2, #12
 8001252:	e08e      	b.n	8001372 <__aeabi_dadd+0x21a>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x102>
 8001258:	e0b8      	b.n	80013cc <__aeabi_dadd+0x274>
 800125a:	1c6b      	adds	r3, r5, #1
 800125c:	055b      	lsls	r3, r3, #21
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	2b01      	cmp	r3, #1
 8001262:	dc00      	bgt.n	8001266 <__aeabi_dadd+0x10e>
 8001264:	e130      	b.n	80014c8 <__aeabi_dadd+0x370>
 8001266:	1a87      	subs	r7, r0, r2
 8001268:	4643      	mov	r3, r8
 800126a:	42b8      	cmp	r0, r7
 800126c:	41b6      	sbcs	r6, r6
 800126e:	1acb      	subs	r3, r1, r3
 8001270:	4276      	negs	r6, r6
 8001272:	1b9e      	subs	r6, r3, r6
 8001274:	0233      	lsls	r3, r6, #8
 8001276:	d500      	bpl.n	800127a <__aeabi_dadd+0x122>
 8001278:	e14c      	b.n	8001514 <__aeabi_dadd+0x3bc>
 800127a:	003b      	movs	r3, r7
 800127c:	4333      	orrs	r3, r6
 800127e:	d1a1      	bne.n	80011c4 <__aeabi_dadd+0x6c>
 8001280:	2200      	movs	r2, #0
 8001282:	2400      	movs	r4, #0
 8001284:	2500      	movs	r5, #0
 8001286:	e070      	b.n	800136a <__aeabi_dadd+0x212>
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc00      	bgt.n	800128e <__aeabi_dadd+0x136>
 800128c:	e0e5      	b.n	800145a <__aeabi_dadd+0x302>
 800128e:	2e00      	cmp	r6, #0
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x13c>
 8001292:	e083      	b.n	800139c <__aeabi_dadd+0x244>
 8001294:	4eaf      	ldr	r6, [pc, #700]	; (8001554 <__aeabi_dadd+0x3fc>)
 8001296:	42b5      	cmp	r5, r6
 8001298:	d060      	beq.n	800135c <__aeabi_dadd+0x204>
 800129a:	2680      	movs	r6, #128	; 0x80
 800129c:	0436      	lsls	r6, r6, #16
 800129e:	4337      	orrs	r7, r6
 80012a0:	46b8      	mov	r8, r7
 80012a2:	2b38      	cmp	r3, #56	; 0x38
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_dadd+0x150>
 80012a6:	e13e      	b.n	8001526 <__aeabi_dadd+0x3ce>
 80012a8:	4643      	mov	r3, r8
 80012aa:	4313      	orrs	r3, r2
 80012ac:	001f      	movs	r7, r3
 80012ae:	1e7a      	subs	r2, r7, #1
 80012b0:	4197      	sbcs	r7, r2
 80012b2:	183f      	adds	r7, r7, r0
 80012b4:	4287      	cmp	r7, r0
 80012b6:	4180      	sbcs	r0, r0
 80012b8:	4240      	negs	r0, r0
 80012ba:	1809      	adds	r1, r1, r0
 80012bc:	020b      	lsls	r3, r1, #8
 80012be:	d400      	bmi.n	80012c2 <__aeabi_dadd+0x16a>
 80012c0:	e0b0      	b.n	8001424 <__aeabi_dadd+0x2cc>
 80012c2:	4ba4      	ldr	r3, [pc, #656]	; (8001554 <__aeabi_dadd+0x3fc>)
 80012c4:	3501      	adds	r5, #1
 80012c6:	429d      	cmp	r5, r3
 80012c8:	d100      	bne.n	80012cc <__aeabi_dadd+0x174>
 80012ca:	e0c3      	b.n	8001454 <__aeabi_dadd+0x2fc>
 80012cc:	4aa2      	ldr	r2, [pc, #648]	; (8001558 <__aeabi_dadd+0x400>)
 80012ce:	087b      	lsrs	r3, r7, #1
 80012d0:	400a      	ands	r2, r1
 80012d2:	2101      	movs	r1, #1
 80012d4:	400f      	ands	r7, r1
 80012d6:	431f      	orrs	r7, r3
 80012d8:	0851      	lsrs	r1, r2, #1
 80012da:	07d3      	lsls	r3, r2, #31
 80012dc:	2207      	movs	r2, #7
 80012de:	431f      	orrs	r7, r3
 80012e0:	403a      	ands	r2, r7
 80012e2:	e799      	b.n	8001218 <__aeabi_dadd+0xc0>
 80012e4:	4e9b      	ldr	r6, [pc, #620]	; (8001554 <__aeabi_dadd+0x3fc>)
 80012e6:	42b5      	cmp	r5, r6
 80012e8:	d038      	beq.n	800135c <__aeabi_dadd+0x204>
 80012ea:	2680      	movs	r6, #128	; 0x80
 80012ec:	0436      	lsls	r6, r6, #16
 80012ee:	4337      	orrs	r7, r6
 80012f0:	46b8      	mov	r8, r7
 80012f2:	2b38      	cmp	r3, #56	; 0x38
 80012f4:	dd00      	ble.n	80012f8 <__aeabi_dadd+0x1a0>
 80012f6:	e0dc      	b.n	80014b2 <__aeabi_dadd+0x35a>
 80012f8:	2b1f      	cmp	r3, #31
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_dadd+0x1a6>
 80012fc:	e130      	b.n	8001560 <__aeabi_dadd+0x408>
 80012fe:	001e      	movs	r6, r3
 8001300:	4647      	mov	r7, r8
 8001302:	3e20      	subs	r6, #32
 8001304:	40f7      	lsrs	r7, r6
 8001306:	46bc      	mov	ip, r7
 8001308:	2b20      	cmp	r3, #32
 800130a:	d004      	beq.n	8001316 <__aeabi_dadd+0x1be>
 800130c:	2640      	movs	r6, #64	; 0x40
 800130e:	1af3      	subs	r3, r6, r3
 8001310:	4646      	mov	r6, r8
 8001312:	409e      	lsls	r6, r3
 8001314:	4332      	orrs	r2, r6
 8001316:	0017      	movs	r7, r2
 8001318:	4663      	mov	r3, ip
 800131a:	1e7a      	subs	r2, r7, #1
 800131c:	4197      	sbcs	r7, r2
 800131e:	431f      	orrs	r7, r3
 8001320:	e0cc      	b.n	80014bc <__aeabi_dadd+0x364>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d100      	bne.n	8001328 <__aeabi_dadd+0x1d0>
 8001326:	e204      	b.n	8001732 <__aeabi_dadd+0x5da>
 8001328:	4643      	mov	r3, r8
 800132a:	4313      	orrs	r3, r2
 800132c:	d100      	bne.n	8001330 <__aeabi_dadd+0x1d8>
 800132e:	e159      	b.n	80015e4 <__aeabi_dadd+0x48c>
 8001330:	074b      	lsls	r3, r1, #29
 8001332:	08c0      	lsrs	r0, r0, #3
 8001334:	4318      	orrs	r0, r3
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	08c9      	lsrs	r1, r1, #3
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	4219      	tst	r1, r3
 800133e:	d008      	beq.n	8001352 <__aeabi_dadd+0x1fa>
 8001340:	4645      	mov	r5, r8
 8001342:	08ed      	lsrs	r5, r5, #3
 8001344:	421d      	tst	r5, r3
 8001346:	d104      	bne.n	8001352 <__aeabi_dadd+0x1fa>
 8001348:	4643      	mov	r3, r8
 800134a:	08d0      	lsrs	r0, r2, #3
 800134c:	0759      	lsls	r1, r3, #29
 800134e:	4308      	orrs	r0, r1
 8001350:	0029      	movs	r1, r5
 8001352:	0f42      	lsrs	r2, r0, #29
 8001354:	00c9      	lsls	r1, r1, #3
 8001356:	4d7f      	ldr	r5, [pc, #508]	; (8001554 <__aeabi_dadd+0x3fc>)
 8001358:	4311      	orrs	r1, r2
 800135a:	00c0      	lsls	r0, r0, #3
 800135c:	074b      	lsls	r3, r1, #29
 800135e:	08ca      	lsrs	r2, r1, #3
 8001360:	497c      	ldr	r1, [pc, #496]	; (8001554 <__aeabi_dadd+0x3fc>)
 8001362:	08c0      	lsrs	r0, r0, #3
 8001364:	4303      	orrs	r3, r0
 8001366:	428d      	cmp	r5, r1
 8001368:	d068      	beq.n	800143c <__aeabi_dadd+0x2e4>
 800136a:	0312      	lsls	r2, r2, #12
 800136c:	056d      	lsls	r5, r5, #21
 800136e:	0b12      	lsrs	r2, r2, #12
 8001370:	0d6d      	lsrs	r5, r5, #21
 8001372:	2100      	movs	r1, #0
 8001374:	0312      	lsls	r2, r2, #12
 8001376:	0018      	movs	r0, r3
 8001378:	0b13      	lsrs	r3, r2, #12
 800137a:	0d0a      	lsrs	r2, r1, #20
 800137c:	0512      	lsls	r2, r2, #20
 800137e:	431a      	orrs	r2, r3
 8001380:	4b76      	ldr	r3, [pc, #472]	; (800155c <__aeabi_dadd+0x404>)
 8001382:	052d      	lsls	r5, r5, #20
 8001384:	4013      	ands	r3, r2
 8001386:	432b      	orrs	r3, r5
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	07e4      	lsls	r4, r4, #31
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	4323      	orrs	r3, r4
 8001390:	0019      	movs	r1, r3
 8001392:	bc1c      	pop	{r2, r3, r4}
 8001394:	4690      	mov	r8, r2
 8001396:	4699      	mov	r9, r3
 8001398:	46a2      	mov	sl, r4
 800139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800139c:	003e      	movs	r6, r7
 800139e:	4316      	orrs	r6, r2
 80013a0:	d012      	beq.n	80013c8 <__aeabi_dadd+0x270>
 80013a2:	1e5e      	subs	r6, r3, #1
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d000      	beq.n	80013aa <__aeabi_dadd+0x252>
 80013a8:	e100      	b.n	80015ac <__aeabi_dadd+0x454>
 80013aa:	1887      	adds	r7, r0, r2
 80013ac:	4287      	cmp	r7, r0
 80013ae:	4180      	sbcs	r0, r0
 80013b0:	4441      	add	r1, r8
 80013b2:	4240      	negs	r0, r0
 80013b4:	1809      	adds	r1, r1, r0
 80013b6:	2501      	movs	r5, #1
 80013b8:	020b      	lsls	r3, r1, #8
 80013ba:	d533      	bpl.n	8001424 <__aeabi_dadd+0x2cc>
 80013bc:	2502      	movs	r5, #2
 80013be:	e785      	b.n	80012cc <__aeabi_dadd+0x174>
 80013c0:	4664      	mov	r4, ip
 80013c2:	0033      	movs	r3, r6
 80013c4:	4641      	mov	r1, r8
 80013c6:	0010      	movs	r0, r2
 80013c8:	001d      	movs	r5, r3
 80013ca:	e7c7      	b.n	800135c <__aeabi_dadd+0x204>
 80013cc:	2d00      	cmp	r5, #0
 80013ce:	d000      	beq.n	80013d2 <__aeabi_dadd+0x27a>
 80013d0:	e0da      	b.n	8001588 <__aeabi_dadd+0x430>
 80013d2:	000c      	movs	r4, r1
 80013d4:	4304      	orrs	r4, r0
 80013d6:	d0f3      	beq.n	80013c0 <__aeabi_dadd+0x268>
 80013d8:	1c5c      	adds	r4, r3, #1
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x286>
 80013dc:	e19f      	b.n	800171e <__aeabi_dadd+0x5c6>
 80013de:	4c5d      	ldr	r4, [pc, #372]	; (8001554 <__aeabi_dadd+0x3fc>)
 80013e0:	42a6      	cmp	r6, r4
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x28e>
 80013e4:	e12f      	b.n	8001646 <__aeabi_dadd+0x4ee>
 80013e6:	43db      	mvns	r3, r3
 80013e8:	2b38      	cmp	r3, #56	; 0x38
 80013ea:	dd00      	ble.n	80013ee <__aeabi_dadd+0x296>
 80013ec:	e166      	b.n	80016bc <__aeabi_dadd+0x564>
 80013ee:	2b1f      	cmp	r3, #31
 80013f0:	dd00      	ble.n	80013f4 <__aeabi_dadd+0x29c>
 80013f2:	e183      	b.n	80016fc <__aeabi_dadd+0x5a4>
 80013f4:	2420      	movs	r4, #32
 80013f6:	0005      	movs	r5, r0
 80013f8:	1ae4      	subs	r4, r4, r3
 80013fa:	000f      	movs	r7, r1
 80013fc:	40dd      	lsrs	r5, r3
 80013fe:	40d9      	lsrs	r1, r3
 8001400:	40a0      	lsls	r0, r4
 8001402:	4643      	mov	r3, r8
 8001404:	40a7      	lsls	r7, r4
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	1e44      	subs	r4, r0, #1
 800140a:	41a0      	sbcs	r0, r4
 800140c:	4698      	mov	r8, r3
 800140e:	432f      	orrs	r7, r5
 8001410:	4338      	orrs	r0, r7
 8001412:	1a17      	subs	r7, r2, r0
 8001414:	42ba      	cmp	r2, r7
 8001416:	4192      	sbcs	r2, r2
 8001418:	4643      	mov	r3, r8
 800141a:	4252      	negs	r2, r2
 800141c:	1a99      	subs	r1, r3, r2
 800141e:	4664      	mov	r4, ip
 8001420:	0035      	movs	r5, r6
 8001422:	e6ca      	b.n	80011ba <__aeabi_dadd+0x62>
 8001424:	2207      	movs	r2, #7
 8001426:	403a      	ands	r2, r7
 8001428:	2a00      	cmp	r2, #0
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x2d6>
 800142c:	e6f6      	b.n	800121c <__aeabi_dadd+0xc4>
 800142e:	074b      	lsls	r3, r1, #29
 8001430:	08ca      	lsrs	r2, r1, #3
 8001432:	4948      	ldr	r1, [pc, #288]	; (8001554 <__aeabi_dadd+0x3fc>)
 8001434:	08ff      	lsrs	r7, r7, #3
 8001436:	433b      	orrs	r3, r7
 8001438:	428d      	cmp	r5, r1
 800143a:	d196      	bne.n	800136a <__aeabi_dadd+0x212>
 800143c:	0019      	movs	r1, r3
 800143e:	4311      	orrs	r1, r2
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x2ec>
 8001442:	e19e      	b.n	8001782 <__aeabi_dadd+0x62a>
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0309      	lsls	r1, r1, #12
 8001448:	430a      	orrs	r2, r1
 800144a:	0312      	lsls	r2, r2, #12
 800144c:	0b12      	lsrs	r2, r2, #12
 800144e:	4d41      	ldr	r5, [pc, #260]	; (8001554 <__aeabi_dadd+0x3fc>)
 8001450:	e78f      	b.n	8001372 <__aeabi_dadd+0x21a>
 8001452:	0015      	movs	r5, r2
 8001454:	2200      	movs	r2, #0
 8001456:	2300      	movs	r3, #0
 8001458:	e78b      	b.n	8001372 <__aeabi_dadd+0x21a>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d000      	beq.n	8001460 <__aeabi_dadd+0x308>
 800145e:	e0c7      	b.n	80015f0 <__aeabi_dadd+0x498>
 8001460:	1c6b      	adds	r3, r5, #1
 8001462:	055f      	lsls	r7, r3, #21
 8001464:	0d7f      	lsrs	r7, r7, #21
 8001466:	2f01      	cmp	r7, #1
 8001468:	dc00      	bgt.n	800146c <__aeabi_dadd+0x314>
 800146a:	e0f1      	b.n	8001650 <__aeabi_dadd+0x4f8>
 800146c:	4d39      	ldr	r5, [pc, #228]	; (8001554 <__aeabi_dadd+0x3fc>)
 800146e:	42ab      	cmp	r3, r5
 8001470:	d100      	bne.n	8001474 <__aeabi_dadd+0x31c>
 8001472:	e0b9      	b.n	80015e8 <__aeabi_dadd+0x490>
 8001474:	1885      	adds	r5, r0, r2
 8001476:	000a      	movs	r2, r1
 8001478:	4285      	cmp	r5, r0
 800147a:	4189      	sbcs	r1, r1
 800147c:	4442      	add	r2, r8
 800147e:	4249      	negs	r1, r1
 8001480:	1851      	adds	r1, r2, r1
 8001482:	2207      	movs	r2, #7
 8001484:	07cf      	lsls	r7, r1, #31
 8001486:	086d      	lsrs	r5, r5, #1
 8001488:	432f      	orrs	r7, r5
 800148a:	0849      	lsrs	r1, r1, #1
 800148c:	403a      	ands	r2, r7
 800148e:	001d      	movs	r5, r3
 8001490:	e6c2      	b.n	8001218 <__aeabi_dadd+0xc0>
 8001492:	2207      	movs	r2, #7
 8001494:	4930      	ldr	r1, [pc, #192]	; (8001558 <__aeabi_dadd+0x400>)
 8001496:	1aed      	subs	r5, r5, r3
 8001498:	4031      	ands	r1, r6
 800149a:	403a      	ands	r2, r7
 800149c:	e6bc      	b.n	8001218 <__aeabi_dadd+0xc0>
 800149e:	003e      	movs	r6, r7
 80014a0:	3828      	subs	r0, #40	; 0x28
 80014a2:	4086      	lsls	r6, r0
 80014a4:	2700      	movs	r7, #0
 80014a6:	e69f      	b.n	80011e8 <__aeabi_dadd+0x90>
 80014a8:	0038      	movs	r0, r7
 80014aa:	f001 fc41 	bl	8002d30 <__clzsi2>
 80014ae:	3020      	adds	r0, #32
 80014b0:	e68e      	b.n	80011d0 <__aeabi_dadd+0x78>
 80014b2:	4643      	mov	r3, r8
 80014b4:	4313      	orrs	r3, r2
 80014b6:	001f      	movs	r7, r3
 80014b8:	1e7a      	subs	r2, r7, #1
 80014ba:	4197      	sbcs	r7, r2
 80014bc:	1bc7      	subs	r7, r0, r7
 80014be:	42b8      	cmp	r0, r7
 80014c0:	4180      	sbcs	r0, r0
 80014c2:	4240      	negs	r0, r0
 80014c4:	1a09      	subs	r1, r1, r0
 80014c6:	e678      	b.n	80011ba <__aeabi_dadd+0x62>
 80014c8:	000e      	movs	r6, r1
 80014ca:	003b      	movs	r3, r7
 80014cc:	4306      	orrs	r6, r0
 80014ce:	4313      	orrs	r3, r2
 80014d0:	2d00      	cmp	r5, #0
 80014d2:	d161      	bne.n	8001598 <__aeabi_dadd+0x440>
 80014d4:	2e00      	cmp	r6, #0
 80014d6:	d000      	beq.n	80014da <__aeabi_dadd+0x382>
 80014d8:	e0f4      	b.n	80016c4 <__aeabi_dadd+0x56c>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_dadd+0x388>
 80014de:	e11b      	b.n	8001718 <__aeabi_dadd+0x5c0>
 80014e0:	4664      	mov	r4, ip
 80014e2:	0039      	movs	r1, r7
 80014e4:	0010      	movs	r0, r2
 80014e6:	e739      	b.n	800135c <__aeabi_dadd+0x204>
 80014e8:	4f1a      	ldr	r7, [pc, #104]	; (8001554 <__aeabi_dadd+0x3fc>)
 80014ea:	42bb      	cmp	r3, r7
 80014ec:	d07a      	beq.n	80015e4 <__aeabi_dadd+0x48c>
 80014ee:	0033      	movs	r3, r6
 80014f0:	e6ff      	b.n	80012f2 <__aeabi_dadd+0x19a>
 80014f2:	0030      	movs	r0, r6
 80014f4:	3d1f      	subs	r5, #31
 80014f6:	40e8      	lsrs	r0, r5
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	d003      	beq.n	8001504 <__aeabi_dadd+0x3ac>
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	1acb      	subs	r3, r1, r3
 8001500:	409e      	lsls	r6, r3
 8001502:	4337      	orrs	r7, r6
 8001504:	1e7b      	subs	r3, r7, #1
 8001506:	419f      	sbcs	r7, r3
 8001508:	2207      	movs	r2, #7
 800150a:	4307      	orrs	r7, r0
 800150c:	403a      	ands	r2, r7
 800150e:	2100      	movs	r1, #0
 8001510:	2500      	movs	r5, #0
 8001512:	e789      	b.n	8001428 <__aeabi_dadd+0x2d0>
 8001514:	1a17      	subs	r7, r2, r0
 8001516:	4643      	mov	r3, r8
 8001518:	42ba      	cmp	r2, r7
 800151a:	41b6      	sbcs	r6, r6
 800151c:	1a59      	subs	r1, r3, r1
 800151e:	4276      	negs	r6, r6
 8001520:	1b8e      	subs	r6, r1, r6
 8001522:	4664      	mov	r4, ip
 8001524:	e64e      	b.n	80011c4 <__aeabi_dadd+0x6c>
 8001526:	2b1f      	cmp	r3, #31
 8001528:	dd00      	ble.n	800152c <__aeabi_dadd+0x3d4>
 800152a:	e0ad      	b.n	8001688 <__aeabi_dadd+0x530>
 800152c:	2620      	movs	r6, #32
 800152e:	4647      	mov	r7, r8
 8001530:	1af6      	subs	r6, r6, r3
 8001532:	40b7      	lsls	r7, r6
 8001534:	46b9      	mov	r9, r7
 8001536:	0017      	movs	r7, r2
 8001538:	46b2      	mov	sl, r6
 800153a:	40df      	lsrs	r7, r3
 800153c:	464e      	mov	r6, r9
 800153e:	433e      	orrs	r6, r7
 8001540:	0037      	movs	r7, r6
 8001542:	4656      	mov	r6, sl
 8001544:	40b2      	lsls	r2, r6
 8001546:	1e56      	subs	r6, r2, #1
 8001548:	41b2      	sbcs	r2, r6
 800154a:	4317      	orrs	r7, r2
 800154c:	4642      	mov	r2, r8
 800154e:	40da      	lsrs	r2, r3
 8001550:	1889      	adds	r1, r1, r2
 8001552:	e6ae      	b.n	80012b2 <__aeabi_dadd+0x15a>
 8001554:	000007ff 	.word	0x000007ff
 8001558:	ff7fffff 	.word	0xff7fffff
 800155c:	800fffff 	.word	0x800fffff
 8001560:	2620      	movs	r6, #32
 8001562:	4647      	mov	r7, r8
 8001564:	1af6      	subs	r6, r6, r3
 8001566:	40b7      	lsls	r7, r6
 8001568:	46b9      	mov	r9, r7
 800156a:	0017      	movs	r7, r2
 800156c:	46b2      	mov	sl, r6
 800156e:	40df      	lsrs	r7, r3
 8001570:	464e      	mov	r6, r9
 8001572:	433e      	orrs	r6, r7
 8001574:	0037      	movs	r7, r6
 8001576:	4656      	mov	r6, sl
 8001578:	40b2      	lsls	r2, r6
 800157a:	1e56      	subs	r6, r2, #1
 800157c:	41b2      	sbcs	r2, r6
 800157e:	4317      	orrs	r7, r2
 8001580:	4642      	mov	r2, r8
 8001582:	40da      	lsrs	r2, r3
 8001584:	1a89      	subs	r1, r1, r2
 8001586:	e799      	b.n	80014bc <__aeabi_dadd+0x364>
 8001588:	4c7f      	ldr	r4, [pc, #508]	; (8001788 <__aeabi_dadd+0x630>)
 800158a:	42a6      	cmp	r6, r4
 800158c:	d05b      	beq.n	8001646 <__aeabi_dadd+0x4ee>
 800158e:	2480      	movs	r4, #128	; 0x80
 8001590:	0424      	lsls	r4, r4, #16
 8001592:	425b      	negs	r3, r3
 8001594:	4321      	orrs	r1, r4
 8001596:	e727      	b.n	80013e8 <__aeabi_dadd+0x290>
 8001598:	2e00      	cmp	r6, #0
 800159a:	d10c      	bne.n	80015b6 <__aeabi_dadd+0x45e>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x44a>
 80015a0:	e0cb      	b.n	800173a <__aeabi_dadd+0x5e2>
 80015a2:	4664      	mov	r4, ip
 80015a4:	0039      	movs	r1, r7
 80015a6:	0010      	movs	r0, r2
 80015a8:	4d77      	ldr	r5, [pc, #476]	; (8001788 <__aeabi_dadd+0x630>)
 80015aa:	e6d7      	b.n	800135c <__aeabi_dadd+0x204>
 80015ac:	4f76      	ldr	r7, [pc, #472]	; (8001788 <__aeabi_dadd+0x630>)
 80015ae:	42bb      	cmp	r3, r7
 80015b0:	d018      	beq.n	80015e4 <__aeabi_dadd+0x48c>
 80015b2:	0033      	movs	r3, r6
 80015b4:	e675      	b.n	80012a2 <__aeabi_dadd+0x14a>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d014      	beq.n	80015e4 <__aeabi_dadd+0x48c>
 80015ba:	074b      	lsls	r3, r1, #29
 80015bc:	08c0      	lsrs	r0, r0, #3
 80015be:	4318      	orrs	r0, r3
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	08c9      	lsrs	r1, r1, #3
 80015c4:	031b      	lsls	r3, r3, #12
 80015c6:	4219      	tst	r1, r3
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x482>
 80015ca:	08fc      	lsrs	r4, r7, #3
 80015cc:	421c      	tst	r4, r3
 80015ce:	d104      	bne.n	80015da <__aeabi_dadd+0x482>
 80015d0:	0779      	lsls	r1, r7, #29
 80015d2:	08d0      	lsrs	r0, r2, #3
 80015d4:	4308      	orrs	r0, r1
 80015d6:	46e1      	mov	r9, ip
 80015d8:	0021      	movs	r1, r4
 80015da:	464c      	mov	r4, r9
 80015dc:	0f42      	lsrs	r2, r0, #29
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	4311      	orrs	r1, r2
 80015e2:	00c0      	lsls	r0, r0, #3
 80015e4:	4d68      	ldr	r5, [pc, #416]	; (8001788 <__aeabi_dadd+0x630>)
 80015e6:	e6b9      	b.n	800135c <__aeabi_dadd+0x204>
 80015e8:	001d      	movs	r5, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	2300      	movs	r3, #0
 80015ee:	e6c0      	b.n	8001372 <__aeabi_dadd+0x21a>
 80015f0:	2d00      	cmp	r5, #0
 80015f2:	d15b      	bne.n	80016ac <__aeabi_dadd+0x554>
 80015f4:	000d      	movs	r5, r1
 80015f6:	4305      	orrs	r5, r0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x4a4>
 80015fa:	e6e2      	b.n	80013c2 <__aeabi_dadd+0x26a>
 80015fc:	1c5d      	adds	r5, r3, #1
 80015fe:	d100      	bne.n	8001602 <__aeabi_dadd+0x4aa>
 8001600:	e0b0      	b.n	8001764 <__aeabi_dadd+0x60c>
 8001602:	4d61      	ldr	r5, [pc, #388]	; (8001788 <__aeabi_dadd+0x630>)
 8001604:	42ae      	cmp	r6, r5
 8001606:	d01f      	beq.n	8001648 <__aeabi_dadd+0x4f0>
 8001608:	43db      	mvns	r3, r3
 800160a:	2b38      	cmp	r3, #56	; 0x38
 800160c:	dc71      	bgt.n	80016f2 <__aeabi_dadd+0x59a>
 800160e:	2b1f      	cmp	r3, #31
 8001610:	dd00      	ble.n	8001614 <__aeabi_dadd+0x4bc>
 8001612:	e096      	b.n	8001742 <__aeabi_dadd+0x5ea>
 8001614:	2520      	movs	r5, #32
 8001616:	000f      	movs	r7, r1
 8001618:	1aed      	subs	r5, r5, r3
 800161a:	40af      	lsls	r7, r5
 800161c:	46b9      	mov	r9, r7
 800161e:	0007      	movs	r7, r0
 8001620:	46aa      	mov	sl, r5
 8001622:	40df      	lsrs	r7, r3
 8001624:	464d      	mov	r5, r9
 8001626:	433d      	orrs	r5, r7
 8001628:	002f      	movs	r7, r5
 800162a:	4655      	mov	r5, sl
 800162c:	40a8      	lsls	r0, r5
 800162e:	40d9      	lsrs	r1, r3
 8001630:	1e45      	subs	r5, r0, #1
 8001632:	41a8      	sbcs	r0, r5
 8001634:	4488      	add	r8, r1
 8001636:	4307      	orrs	r7, r0
 8001638:	18bf      	adds	r7, r7, r2
 800163a:	4297      	cmp	r7, r2
 800163c:	4192      	sbcs	r2, r2
 800163e:	4251      	negs	r1, r2
 8001640:	4441      	add	r1, r8
 8001642:	0035      	movs	r5, r6
 8001644:	e63a      	b.n	80012bc <__aeabi_dadd+0x164>
 8001646:	4664      	mov	r4, ip
 8001648:	0035      	movs	r5, r6
 800164a:	4641      	mov	r1, r8
 800164c:	0010      	movs	r0, r2
 800164e:	e685      	b.n	800135c <__aeabi_dadd+0x204>
 8001650:	000b      	movs	r3, r1
 8001652:	4303      	orrs	r3, r0
 8001654:	2d00      	cmp	r5, #0
 8001656:	d000      	beq.n	800165a <__aeabi_dadd+0x502>
 8001658:	e663      	b.n	8001322 <__aeabi_dadd+0x1ca>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f5      	beq.n	800164a <__aeabi_dadd+0x4f2>
 800165e:	4643      	mov	r3, r8
 8001660:	4313      	orrs	r3, r2
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x50e>
 8001664:	e67a      	b.n	800135c <__aeabi_dadd+0x204>
 8001666:	1887      	adds	r7, r0, r2
 8001668:	4287      	cmp	r7, r0
 800166a:	4180      	sbcs	r0, r0
 800166c:	2207      	movs	r2, #7
 800166e:	4441      	add	r1, r8
 8001670:	4240      	negs	r0, r0
 8001672:	1809      	adds	r1, r1, r0
 8001674:	403a      	ands	r2, r7
 8001676:	020b      	lsls	r3, r1, #8
 8001678:	d400      	bmi.n	800167c <__aeabi_dadd+0x524>
 800167a:	e6d5      	b.n	8001428 <__aeabi_dadd+0x2d0>
 800167c:	4b43      	ldr	r3, [pc, #268]	; (800178c <__aeabi_dadd+0x634>)
 800167e:	3501      	adds	r5, #1
 8001680:	4019      	ands	r1, r3
 8001682:	e5c9      	b.n	8001218 <__aeabi_dadd+0xc0>
 8001684:	0038      	movs	r0, r7
 8001686:	e669      	b.n	800135c <__aeabi_dadd+0x204>
 8001688:	001e      	movs	r6, r3
 800168a:	4647      	mov	r7, r8
 800168c:	3e20      	subs	r6, #32
 800168e:	40f7      	lsrs	r7, r6
 8001690:	46bc      	mov	ip, r7
 8001692:	2b20      	cmp	r3, #32
 8001694:	d004      	beq.n	80016a0 <__aeabi_dadd+0x548>
 8001696:	2640      	movs	r6, #64	; 0x40
 8001698:	1af3      	subs	r3, r6, r3
 800169a:	4646      	mov	r6, r8
 800169c:	409e      	lsls	r6, r3
 800169e:	4332      	orrs	r2, r6
 80016a0:	0017      	movs	r7, r2
 80016a2:	4663      	mov	r3, ip
 80016a4:	1e7a      	subs	r2, r7, #1
 80016a6:	4197      	sbcs	r7, r2
 80016a8:	431f      	orrs	r7, r3
 80016aa:	e602      	b.n	80012b2 <__aeabi_dadd+0x15a>
 80016ac:	4d36      	ldr	r5, [pc, #216]	; (8001788 <__aeabi_dadd+0x630>)
 80016ae:	42ae      	cmp	r6, r5
 80016b0:	d0ca      	beq.n	8001648 <__aeabi_dadd+0x4f0>
 80016b2:	2580      	movs	r5, #128	; 0x80
 80016b4:	042d      	lsls	r5, r5, #16
 80016b6:	425b      	negs	r3, r3
 80016b8:	4329      	orrs	r1, r5
 80016ba:	e7a6      	b.n	800160a <__aeabi_dadd+0x4b2>
 80016bc:	4308      	orrs	r0, r1
 80016be:	1e41      	subs	r1, r0, #1
 80016c0:	4188      	sbcs	r0, r1
 80016c2:	e6a6      	b.n	8001412 <__aeabi_dadd+0x2ba>
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x572>
 80016c8:	e648      	b.n	800135c <__aeabi_dadd+0x204>
 80016ca:	1a87      	subs	r7, r0, r2
 80016cc:	4643      	mov	r3, r8
 80016ce:	42b8      	cmp	r0, r7
 80016d0:	41b6      	sbcs	r6, r6
 80016d2:	1acb      	subs	r3, r1, r3
 80016d4:	4276      	negs	r6, r6
 80016d6:	1b9e      	subs	r6, r3, r6
 80016d8:	0233      	lsls	r3, r6, #8
 80016da:	d54b      	bpl.n	8001774 <__aeabi_dadd+0x61c>
 80016dc:	1a17      	subs	r7, r2, r0
 80016de:	4643      	mov	r3, r8
 80016e0:	42ba      	cmp	r2, r7
 80016e2:	4192      	sbcs	r2, r2
 80016e4:	1a59      	subs	r1, r3, r1
 80016e6:	4252      	negs	r2, r2
 80016e8:	1a89      	subs	r1, r1, r2
 80016ea:	2207      	movs	r2, #7
 80016ec:	4664      	mov	r4, ip
 80016ee:	403a      	ands	r2, r7
 80016f0:	e592      	b.n	8001218 <__aeabi_dadd+0xc0>
 80016f2:	4301      	orrs	r1, r0
 80016f4:	000f      	movs	r7, r1
 80016f6:	1e79      	subs	r1, r7, #1
 80016f8:	418f      	sbcs	r7, r1
 80016fa:	e79d      	b.n	8001638 <__aeabi_dadd+0x4e0>
 80016fc:	001c      	movs	r4, r3
 80016fe:	000f      	movs	r7, r1
 8001700:	3c20      	subs	r4, #32
 8001702:	40e7      	lsrs	r7, r4
 8001704:	2b20      	cmp	r3, #32
 8001706:	d003      	beq.n	8001710 <__aeabi_dadd+0x5b8>
 8001708:	2440      	movs	r4, #64	; 0x40
 800170a:	1ae3      	subs	r3, r4, r3
 800170c:	4099      	lsls	r1, r3
 800170e:	4308      	orrs	r0, r1
 8001710:	1e41      	subs	r1, r0, #1
 8001712:	4188      	sbcs	r0, r1
 8001714:	4338      	orrs	r0, r7
 8001716:	e67c      	b.n	8001412 <__aeabi_dadd+0x2ba>
 8001718:	2200      	movs	r2, #0
 800171a:	2400      	movs	r4, #0
 800171c:	e625      	b.n	800136a <__aeabi_dadd+0x212>
 800171e:	1a17      	subs	r7, r2, r0
 8001720:	4643      	mov	r3, r8
 8001722:	42ba      	cmp	r2, r7
 8001724:	4192      	sbcs	r2, r2
 8001726:	1a59      	subs	r1, r3, r1
 8001728:	4252      	negs	r2, r2
 800172a:	1a89      	subs	r1, r1, r2
 800172c:	4664      	mov	r4, ip
 800172e:	0035      	movs	r5, r6
 8001730:	e543      	b.n	80011ba <__aeabi_dadd+0x62>
 8001732:	4641      	mov	r1, r8
 8001734:	0010      	movs	r0, r2
 8001736:	4d14      	ldr	r5, [pc, #80]	; (8001788 <__aeabi_dadd+0x630>)
 8001738:	e610      	b.n	800135c <__aeabi_dadd+0x204>
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	2400      	movs	r4, #0
 800173e:	0312      	lsls	r2, r2, #12
 8001740:	e680      	b.n	8001444 <__aeabi_dadd+0x2ec>
 8001742:	001d      	movs	r5, r3
 8001744:	000f      	movs	r7, r1
 8001746:	3d20      	subs	r5, #32
 8001748:	40ef      	lsrs	r7, r5
 800174a:	46bc      	mov	ip, r7
 800174c:	2b20      	cmp	r3, #32
 800174e:	d003      	beq.n	8001758 <__aeabi_dadd+0x600>
 8001750:	2540      	movs	r5, #64	; 0x40
 8001752:	1aeb      	subs	r3, r5, r3
 8001754:	4099      	lsls	r1, r3
 8001756:	4308      	orrs	r0, r1
 8001758:	0007      	movs	r7, r0
 800175a:	4663      	mov	r3, ip
 800175c:	1e78      	subs	r0, r7, #1
 800175e:	4187      	sbcs	r7, r0
 8001760:	431f      	orrs	r7, r3
 8001762:	e769      	b.n	8001638 <__aeabi_dadd+0x4e0>
 8001764:	1887      	adds	r7, r0, r2
 8001766:	4297      	cmp	r7, r2
 8001768:	419b      	sbcs	r3, r3
 800176a:	4441      	add	r1, r8
 800176c:	425b      	negs	r3, r3
 800176e:	18c9      	adds	r1, r1, r3
 8001770:	0035      	movs	r5, r6
 8001772:	e5a3      	b.n	80012bc <__aeabi_dadd+0x164>
 8001774:	003b      	movs	r3, r7
 8001776:	4333      	orrs	r3, r6
 8001778:	d0ce      	beq.n	8001718 <__aeabi_dadd+0x5c0>
 800177a:	2207      	movs	r2, #7
 800177c:	0031      	movs	r1, r6
 800177e:	403a      	ands	r2, r7
 8001780:	e652      	b.n	8001428 <__aeabi_dadd+0x2d0>
 8001782:	2300      	movs	r3, #0
 8001784:	001a      	movs	r2, r3
 8001786:	e5f4      	b.n	8001372 <__aeabi_dadd+0x21a>
 8001788:	000007ff 	.word	0x000007ff
 800178c:	ff7fffff 	.word	0xff7fffff

08001790 <__aeabi_ddiv>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	4683      	mov	fp, r0
 800179e:	0007      	movs	r7, r0
 80017a0:	030e      	lsls	r6, r1, #12
 80017a2:	0048      	lsls	r0, r1, #1
 80017a4:	b085      	sub	sp, #20
 80017a6:	4692      	mov	sl, r2
 80017a8:	001c      	movs	r4, r3
 80017aa:	0b36      	lsrs	r6, r6, #12
 80017ac:	0d40      	lsrs	r0, r0, #21
 80017ae:	0fcd      	lsrs	r5, r1, #31
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0x26>
 80017b4:	e09d      	b.n	80018f2 <__aeabi_ddiv+0x162>
 80017b6:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <__aeabi_ddiv+0x27c>)
 80017b8:	4298      	cmp	r0, r3
 80017ba:	d039      	beq.n	8001830 <__aeabi_ddiv+0xa0>
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	00f6      	lsls	r6, r6, #3
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	431e      	orrs	r6, r3
 80017c4:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <__aeabi_ddiv+0x280>)
 80017c6:	0f7b      	lsrs	r3, r7, #29
 80017c8:	4333      	orrs	r3, r6
 80017ca:	4699      	mov	r9, r3
 80017cc:	4694      	mov	ip, r2
 80017ce:	0003      	movs	r3, r0
 80017d0:	4463      	add	r3, ip
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2600      	movs	r6, #0
 80017d8:	00ff      	lsls	r7, r7, #3
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	0323      	lsls	r3, r4, #12
 80017de:	0b1b      	lsrs	r3, r3, #12
 80017e0:	4698      	mov	r8, r3
 80017e2:	0063      	lsls	r3, r4, #1
 80017e4:	0fe4      	lsrs	r4, r4, #31
 80017e6:	4652      	mov	r2, sl
 80017e8:	0d5b      	lsrs	r3, r3, #21
 80017ea:	9401      	str	r4, [sp, #4]
 80017ec:	d100      	bne.n	80017f0 <__aeabi_ddiv+0x60>
 80017ee:	e0b3      	b.n	8001958 <__aeabi_ddiv+0x1c8>
 80017f0:	4986      	ldr	r1, [pc, #536]	; (8001a0c <__aeabi_ddiv+0x27c>)
 80017f2:	428b      	cmp	r3, r1
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x68>
 80017f6:	e09e      	b.n	8001936 <__aeabi_ddiv+0x1a6>
 80017f8:	4642      	mov	r2, r8
 80017fa:	00d1      	lsls	r1, r2, #3
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	0412      	lsls	r2, r2, #16
 8001800:	430a      	orrs	r2, r1
 8001802:	4651      	mov	r1, sl
 8001804:	0f49      	lsrs	r1, r1, #29
 8001806:	4311      	orrs	r1, r2
 8001808:	468b      	mov	fp, r1
 800180a:	4981      	ldr	r1, [pc, #516]	; (8001a10 <__aeabi_ddiv+0x280>)
 800180c:	4652      	mov	r2, sl
 800180e:	468c      	mov	ip, r1
 8001810:	9900      	ldr	r1, [sp, #0]
 8001812:	4463      	add	r3, ip
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	2100      	movs	r1, #0
 8001818:	00d2      	lsls	r2, r2, #3
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	002b      	movs	r3, r5
 800181e:	4063      	eors	r3, r4
 8001820:	469a      	mov	sl, r3
 8001822:	2e0f      	cmp	r6, #15
 8001824:	d900      	bls.n	8001828 <__aeabi_ddiv+0x98>
 8001826:	e105      	b.n	8001a34 <__aeabi_ddiv+0x2a4>
 8001828:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <__aeabi_ddiv+0x284>)
 800182a:	00b6      	lsls	r6, r6, #2
 800182c:	599b      	ldr	r3, [r3, r6]
 800182e:	469f      	mov	pc, r3
 8001830:	465b      	mov	r3, fp
 8001832:	4333      	orrs	r3, r6
 8001834:	4699      	mov	r9, r3
 8001836:	d000      	beq.n	800183a <__aeabi_ddiv+0xaa>
 8001838:	e0b8      	b.n	80019ac <__aeabi_ddiv+0x21c>
 800183a:	2302      	movs	r3, #2
 800183c:	2608      	movs	r6, #8
 800183e:	2700      	movs	r7, #0
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	e7ca      	b.n	80017dc <__aeabi_ddiv+0x4c>
 8001846:	46cb      	mov	fp, r9
 8001848:	003a      	movs	r2, r7
 800184a:	9902      	ldr	r1, [sp, #8]
 800184c:	9501      	str	r5, [sp, #4]
 800184e:	9b01      	ldr	r3, [sp, #4]
 8001850:	469a      	mov	sl, r3
 8001852:	2902      	cmp	r1, #2
 8001854:	d027      	beq.n	80018a6 <__aeabi_ddiv+0x116>
 8001856:	2903      	cmp	r1, #3
 8001858:	d100      	bne.n	800185c <__aeabi_ddiv+0xcc>
 800185a:	e280      	b.n	8001d5e <__aeabi_ddiv+0x5ce>
 800185c:	2901      	cmp	r1, #1
 800185e:	d044      	beq.n	80018ea <__aeabi_ddiv+0x15a>
 8001860:	496d      	ldr	r1, [pc, #436]	; (8001a18 <__aeabi_ddiv+0x288>)
 8001862:	9b00      	ldr	r3, [sp, #0]
 8001864:	468c      	mov	ip, r1
 8001866:	4463      	add	r3, ip
 8001868:	001c      	movs	r4, r3
 800186a:	2c00      	cmp	r4, #0
 800186c:	dd38      	ble.n	80018e0 <__aeabi_ddiv+0x150>
 800186e:	0753      	lsls	r3, r2, #29
 8001870:	d000      	beq.n	8001874 <__aeabi_ddiv+0xe4>
 8001872:	e213      	b.n	8001c9c <__aeabi_ddiv+0x50c>
 8001874:	08d2      	lsrs	r2, r2, #3
 8001876:	465b      	mov	r3, fp
 8001878:	01db      	lsls	r3, r3, #7
 800187a:	d509      	bpl.n	8001890 <__aeabi_ddiv+0x100>
 800187c:	4659      	mov	r1, fp
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <__aeabi_ddiv+0x28c>)
 8001880:	4019      	ands	r1, r3
 8001882:	468b      	mov	fp, r1
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	468c      	mov	ip, r1
 800188a:	9b00      	ldr	r3, [sp, #0]
 800188c:	4463      	add	r3, ip
 800188e:	001c      	movs	r4, r3
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <__aeabi_ddiv+0x290>)
 8001892:	429c      	cmp	r4, r3
 8001894:	dc07      	bgt.n	80018a6 <__aeabi_ddiv+0x116>
 8001896:	465b      	mov	r3, fp
 8001898:	0564      	lsls	r4, r4, #21
 800189a:	075f      	lsls	r7, r3, #29
 800189c:	025b      	lsls	r3, r3, #9
 800189e:	4317      	orrs	r7, r2
 80018a0:	0b1b      	lsrs	r3, r3, #12
 80018a2:	0d62      	lsrs	r2, r4, #21
 80018a4:	e002      	b.n	80018ac <__aeabi_ddiv+0x11c>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2700      	movs	r7, #0
 80018aa:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <__aeabi_ddiv+0x27c>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	031b      	lsls	r3, r3, #12
 80018b0:	0b1c      	lsrs	r4, r3, #12
 80018b2:	0d0b      	lsrs	r3, r1, #20
 80018b4:	051b      	lsls	r3, r3, #20
 80018b6:	4323      	orrs	r3, r4
 80018b8:	0514      	lsls	r4, r2, #20
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <__aeabi_ddiv+0x294>)
 80018bc:	0038      	movs	r0, r7
 80018be:	4013      	ands	r3, r2
 80018c0:	431c      	orrs	r4, r3
 80018c2:	4653      	mov	r3, sl
 80018c4:	0064      	lsls	r4, r4, #1
 80018c6:	07db      	lsls	r3, r3, #31
 80018c8:	0864      	lsrs	r4, r4, #1
 80018ca:	431c      	orrs	r4, r3
 80018cc:	0021      	movs	r1, r4
 80018ce:	b005      	add	sp, #20
 80018d0:	bc3c      	pop	{r2, r3, r4, r5}
 80018d2:	4690      	mov	r8, r2
 80018d4:	4699      	mov	r9, r3
 80018d6:	46a2      	mov	sl, r4
 80018d8:	46ab      	mov	fp, r5
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018dc:	2201      	movs	r2, #1
 80018de:	4252      	negs	r2, r2
 80018e0:	2301      	movs	r3, #1
 80018e2:	1b1b      	subs	r3, r3, r4
 80018e4:	2b38      	cmp	r3, #56	; 0x38
 80018e6:	dc00      	bgt.n	80018ea <__aeabi_ddiv+0x15a>
 80018e8:	e1ad      	b.n	8001c46 <__aeabi_ddiv+0x4b6>
 80018ea:	2200      	movs	r2, #0
 80018ec:	2300      	movs	r3, #0
 80018ee:	2700      	movs	r7, #0
 80018f0:	e7dc      	b.n	80018ac <__aeabi_ddiv+0x11c>
 80018f2:	465b      	mov	r3, fp
 80018f4:	4333      	orrs	r3, r6
 80018f6:	4699      	mov	r9, r3
 80018f8:	d05e      	beq.n	80019b8 <__aeabi_ddiv+0x228>
 80018fa:	2e00      	cmp	r6, #0
 80018fc:	d100      	bne.n	8001900 <__aeabi_ddiv+0x170>
 80018fe:	e18a      	b.n	8001c16 <__aeabi_ddiv+0x486>
 8001900:	0030      	movs	r0, r6
 8001902:	f001 fa15 	bl	8002d30 <__clzsi2>
 8001906:	0003      	movs	r3, r0
 8001908:	3b0b      	subs	r3, #11
 800190a:	2b1c      	cmp	r3, #28
 800190c:	dd00      	ble.n	8001910 <__aeabi_ddiv+0x180>
 800190e:	e17b      	b.n	8001c08 <__aeabi_ddiv+0x478>
 8001910:	221d      	movs	r2, #29
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	465a      	mov	r2, fp
 8001916:	0001      	movs	r1, r0
 8001918:	40da      	lsrs	r2, r3
 800191a:	3908      	subs	r1, #8
 800191c:	408e      	lsls	r6, r1
 800191e:	0013      	movs	r3, r2
 8001920:	465f      	mov	r7, fp
 8001922:	4333      	orrs	r3, r6
 8001924:	4699      	mov	r9, r3
 8001926:	408f      	lsls	r7, r1
 8001928:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <__aeabi_ddiv+0x298>)
 800192a:	2600      	movs	r6, #0
 800192c:	1a1b      	subs	r3, r3, r0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	e752      	b.n	80017dc <__aeabi_ddiv+0x4c>
 8001936:	4641      	mov	r1, r8
 8001938:	4653      	mov	r3, sl
 800193a:	430b      	orrs	r3, r1
 800193c:	493b      	ldr	r1, [pc, #236]	; (8001a2c <__aeabi_ddiv+0x29c>)
 800193e:	469b      	mov	fp, r3
 8001940:	468c      	mov	ip, r1
 8001942:	9b00      	ldr	r3, [sp, #0]
 8001944:	4463      	add	r3, ip
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	465b      	mov	r3, fp
 800194a:	2b00      	cmp	r3, #0
 800194c:	d13b      	bne.n	80019c6 <__aeabi_ddiv+0x236>
 800194e:	2302      	movs	r3, #2
 8001950:	2200      	movs	r2, #0
 8001952:	431e      	orrs	r6, r3
 8001954:	2102      	movs	r1, #2
 8001956:	e761      	b.n	800181c <__aeabi_ddiv+0x8c>
 8001958:	4643      	mov	r3, r8
 800195a:	4313      	orrs	r3, r2
 800195c:	469b      	mov	fp, r3
 800195e:	d037      	beq.n	80019d0 <__aeabi_ddiv+0x240>
 8001960:	4643      	mov	r3, r8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_ddiv+0x1d8>
 8001966:	e162      	b.n	8001c2e <__aeabi_ddiv+0x49e>
 8001968:	4640      	mov	r0, r8
 800196a:	f001 f9e1 	bl	8002d30 <__clzsi2>
 800196e:	0003      	movs	r3, r0
 8001970:	3b0b      	subs	r3, #11
 8001972:	2b1c      	cmp	r3, #28
 8001974:	dd00      	ble.n	8001978 <__aeabi_ddiv+0x1e8>
 8001976:	e153      	b.n	8001c20 <__aeabi_ddiv+0x490>
 8001978:	0002      	movs	r2, r0
 800197a:	4641      	mov	r1, r8
 800197c:	3a08      	subs	r2, #8
 800197e:	4091      	lsls	r1, r2
 8001980:	4688      	mov	r8, r1
 8001982:	211d      	movs	r1, #29
 8001984:	1acb      	subs	r3, r1, r3
 8001986:	4651      	mov	r1, sl
 8001988:	40d9      	lsrs	r1, r3
 800198a:	000b      	movs	r3, r1
 800198c:	4641      	mov	r1, r8
 800198e:	430b      	orrs	r3, r1
 8001990:	469b      	mov	fp, r3
 8001992:	4653      	mov	r3, sl
 8001994:	4093      	lsls	r3, r2
 8001996:	001a      	movs	r2, r3
 8001998:	9b00      	ldr	r3, [sp, #0]
 800199a:	4925      	ldr	r1, [pc, #148]	; (8001a30 <__aeabi_ddiv+0x2a0>)
 800199c:	469c      	mov	ip, r3
 800199e:	4460      	add	r0, ip
 80019a0:	0003      	movs	r3, r0
 80019a2:	468c      	mov	ip, r1
 80019a4:	4463      	add	r3, ip
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2100      	movs	r1, #0
 80019aa:	e737      	b.n	800181c <__aeabi_ddiv+0x8c>
 80019ac:	2303      	movs	r3, #3
 80019ae:	46b1      	mov	r9, r6
 80019b0:	9000      	str	r0, [sp, #0]
 80019b2:	260c      	movs	r6, #12
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	e711      	b.n	80017dc <__aeabi_ddiv+0x4c>
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	2604      	movs	r6, #4
 80019c0:	2700      	movs	r7, #0
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	e70a      	b.n	80017dc <__aeabi_ddiv+0x4c>
 80019c6:	2303      	movs	r3, #3
 80019c8:	46c3      	mov	fp, r8
 80019ca:	431e      	orrs	r6, r3
 80019cc:	2103      	movs	r1, #3
 80019ce:	e725      	b.n	800181c <__aeabi_ddiv+0x8c>
 80019d0:	3301      	adds	r3, #1
 80019d2:	431e      	orrs	r6, r3
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	e720      	b.n	800181c <__aeabi_ddiv+0x8c>
 80019da:	2300      	movs	r3, #0
 80019dc:	469a      	mov	sl, r3
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	2700      	movs	r7, #0
 80019e2:	031b      	lsls	r3, r3, #12
 80019e4:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <__aeabi_ddiv+0x27c>)
 80019e6:	e761      	b.n	80018ac <__aeabi_ddiv+0x11c>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	4649      	mov	r1, r9
 80019ec:	031b      	lsls	r3, r3, #12
 80019ee:	4219      	tst	r1, r3
 80019f0:	d100      	bne.n	80019f4 <__aeabi_ddiv+0x264>
 80019f2:	e0e2      	b.n	8001bba <__aeabi_ddiv+0x42a>
 80019f4:	4659      	mov	r1, fp
 80019f6:	4219      	tst	r1, r3
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0x26c>
 80019fa:	e0de      	b.n	8001bba <__aeabi_ddiv+0x42a>
 80019fc:	430b      	orrs	r3, r1
 80019fe:	031b      	lsls	r3, r3, #12
 8001a00:	0017      	movs	r7, r2
 8001a02:	0b1b      	lsrs	r3, r3, #12
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4a01      	ldr	r2, [pc, #4]	; (8001a0c <__aeabi_ddiv+0x27c>)
 8001a08:	e750      	b.n	80018ac <__aeabi_ddiv+0x11c>
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	000007ff 	.word	0x000007ff
 8001a10:	fffffc01 	.word	0xfffffc01
 8001a14:	080073b0 	.word	0x080073b0
 8001a18:	000003ff 	.word	0x000003ff
 8001a1c:	feffffff 	.word	0xfeffffff
 8001a20:	000007fe 	.word	0x000007fe
 8001a24:	800fffff 	.word	0x800fffff
 8001a28:	fffffc0d 	.word	0xfffffc0d
 8001a2c:	fffff801 	.word	0xfffff801
 8001a30:	000003f3 	.word	0x000003f3
 8001a34:	45d9      	cmp	r9, fp
 8001a36:	d900      	bls.n	8001a3a <__aeabi_ddiv+0x2aa>
 8001a38:	e0cb      	b.n	8001bd2 <__aeabi_ddiv+0x442>
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_ddiv+0x2ae>
 8001a3c:	e0c6      	b.n	8001bcc <__aeabi_ddiv+0x43c>
 8001a3e:	003c      	movs	r4, r7
 8001a40:	4648      	mov	r0, r9
 8001a42:	2700      	movs	r7, #0
 8001a44:	9b00      	ldr	r3, [sp, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	465b      	mov	r3, fp
 8001a4c:	0e16      	lsrs	r6, r2, #24
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	431e      	orrs	r6, r3
 8001a52:	0213      	lsls	r3, r2, #8
 8001a54:	4698      	mov	r8, r3
 8001a56:	0433      	lsls	r3, r6, #16
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	0c31      	lsrs	r1, r6, #16
 8001a5e:	9101      	str	r1, [sp, #4]
 8001a60:	f7fe fbd8 	bl	8000214 <__aeabi_uidivmod>
 8001a64:	464a      	mov	r2, r9
 8001a66:	4342      	muls	r2, r0
 8001a68:	040b      	lsls	r3, r1, #16
 8001a6a:	0c21      	lsrs	r1, r4, #16
 8001a6c:	0005      	movs	r5, r0
 8001a6e:	4319      	orrs	r1, r3
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d907      	bls.n	8001a84 <__aeabi_ddiv+0x2f4>
 8001a74:	1989      	adds	r1, r1, r6
 8001a76:	3d01      	subs	r5, #1
 8001a78:	428e      	cmp	r6, r1
 8001a7a:	d803      	bhi.n	8001a84 <__aeabi_ddiv+0x2f4>
 8001a7c:	428a      	cmp	r2, r1
 8001a7e:	d901      	bls.n	8001a84 <__aeabi_ddiv+0x2f4>
 8001a80:	1e85      	subs	r5, r0, #2
 8001a82:	1989      	adds	r1, r1, r6
 8001a84:	1a88      	subs	r0, r1, r2
 8001a86:	9901      	ldr	r1, [sp, #4]
 8001a88:	f7fe fbc4 	bl	8000214 <__aeabi_uidivmod>
 8001a8c:	0409      	lsls	r1, r1, #16
 8001a8e:	468c      	mov	ip, r1
 8001a90:	464a      	mov	r2, r9
 8001a92:	0421      	lsls	r1, r4, #16
 8001a94:	4664      	mov	r4, ip
 8001a96:	4342      	muls	r2, r0
 8001a98:	0c09      	lsrs	r1, r1, #16
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	4321      	orrs	r1, r4
 8001a9e:	428a      	cmp	r2, r1
 8001aa0:	d904      	bls.n	8001aac <__aeabi_ddiv+0x31c>
 8001aa2:	1989      	adds	r1, r1, r6
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	428e      	cmp	r6, r1
 8001aa8:	d800      	bhi.n	8001aac <__aeabi_ddiv+0x31c>
 8001aaa:	e0f1      	b.n	8001c90 <__aeabi_ddiv+0x500>
 8001aac:	042d      	lsls	r5, r5, #16
 8001aae:	431d      	orrs	r5, r3
 8001ab0:	46ab      	mov	fp, r5
 8001ab2:	4643      	mov	r3, r8
 8001ab4:	1a89      	subs	r1, r1, r2
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	0c28      	lsrs	r0, r5, #16
 8001aba:	0412      	lsls	r2, r2, #16
 8001abc:	0c1d      	lsrs	r5, r3, #16
 8001abe:	465b      	mov	r3, fp
 8001ac0:	0c14      	lsrs	r4, r2, #16
 8001ac2:	0022      	movs	r2, r4
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	435a      	muls	r2, r3
 8001aca:	9403      	str	r4, [sp, #12]
 8001acc:	436b      	muls	r3, r5
 8001ace:	4344      	muls	r4, r0
 8001ad0:	9502      	str	r5, [sp, #8]
 8001ad2:	4368      	muls	r0, r5
 8001ad4:	191b      	adds	r3, r3, r4
 8001ad6:	0c15      	lsrs	r5, r2, #16
 8001ad8:	18eb      	adds	r3, r5, r3
 8001ada:	429c      	cmp	r4, r3
 8001adc:	d903      	bls.n	8001ae6 <__aeabi_ddiv+0x356>
 8001ade:	2480      	movs	r4, #128	; 0x80
 8001ae0:	0264      	lsls	r4, r4, #9
 8001ae2:	46a4      	mov	ip, r4
 8001ae4:	4460      	add	r0, ip
 8001ae6:	0c1c      	lsrs	r4, r3, #16
 8001ae8:	0415      	lsls	r5, r2, #16
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	0c2d      	lsrs	r5, r5, #16
 8001aee:	1820      	adds	r0, r4, r0
 8001af0:	195d      	adds	r5, r3, r5
 8001af2:	4281      	cmp	r1, r0
 8001af4:	d377      	bcc.n	8001be6 <__aeabi_ddiv+0x456>
 8001af6:	d073      	beq.n	8001be0 <__aeabi_ddiv+0x450>
 8001af8:	1a0c      	subs	r4, r1, r0
 8001afa:	4aa2      	ldr	r2, [pc, #648]	; (8001d84 <__aeabi_ddiv+0x5f4>)
 8001afc:	1b7d      	subs	r5, r7, r5
 8001afe:	42af      	cmp	r7, r5
 8001b00:	41bf      	sbcs	r7, r7
 8001b02:	4694      	mov	ip, r2
 8001b04:	9b00      	ldr	r3, [sp, #0]
 8001b06:	427f      	negs	r7, r7
 8001b08:	4463      	add	r3, ip
 8001b0a:	1be0      	subs	r0, r4, r7
 8001b0c:	001c      	movs	r4, r3
 8001b0e:	4286      	cmp	r6, r0
 8001b10:	d100      	bne.n	8001b14 <__aeabi_ddiv+0x384>
 8001b12:	e0db      	b.n	8001ccc <__aeabi_ddiv+0x53c>
 8001b14:	9901      	ldr	r1, [sp, #4]
 8001b16:	f7fe fb7d 	bl	8000214 <__aeabi_uidivmod>
 8001b1a:	464a      	mov	r2, r9
 8001b1c:	4342      	muls	r2, r0
 8001b1e:	040b      	lsls	r3, r1, #16
 8001b20:	0c29      	lsrs	r1, r5, #16
 8001b22:	0007      	movs	r7, r0
 8001b24:	4319      	orrs	r1, r3
 8001b26:	428a      	cmp	r2, r1
 8001b28:	d907      	bls.n	8001b3a <__aeabi_ddiv+0x3aa>
 8001b2a:	1989      	adds	r1, r1, r6
 8001b2c:	3f01      	subs	r7, #1
 8001b2e:	428e      	cmp	r6, r1
 8001b30:	d803      	bhi.n	8001b3a <__aeabi_ddiv+0x3aa>
 8001b32:	428a      	cmp	r2, r1
 8001b34:	d901      	bls.n	8001b3a <__aeabi_ddiv+0x3aa>
 8001b36:	1e87      	subs	r7, r0, #2
 8001b38:	1989      	adds	r1, r1, r6
 8001b3a:	1a88      	subs	r0, r1, r2
 8001b3c:	9901      	ldr	r1, [sp, #4]
 8001b3e:	f7fe fb69 	bl	8000214 <__aeabi_uidivmod>
 8001b42:	0409      	lsls	r1, r1, #16
 8001b44:	464a      	mov	r2, r9
 8001b46:	4689      	mov	r9, r1
 8001b48:	0429      	lsls	r1, r5, #16
 8001b4a:	464d      	mov	r5, r9
 8001b4c:	4342      	muls	r2, r0
 8001b4e:	0c09      	lsrs	r1, r1, #16
 8001b50:	0003      	movs	r3, r0
 8001b52:	4329      	orrs	r1, r5
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d907      	bls.n	8001b68 <__aeabi_ddiv+0x3d8>
 8001b58:	1989      	adds	r1, r1, r6
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	428e      	cmp	r6, r1
 8001b5e:	d803      	bhi.n	8001b68 <__aeabi_ddiv+0x3d8>
 8001b60:	428a      	cmp	r2, r1
 8001b62:	d901      	bls.n	8001b68 <__aeabi_ddiv+0x3d8>
 8001b64:	1e83      	subs	r3, r0, #2
 8001b66:	1989      	adds	r1, r1, r6
 8001b68:	043f      	lsls	r7, r7, #16
 8001b6a:	1a89      	subs	r1, r1, r2
 8001b6c:	003a      	movs	r2, r7
 8001b6e:	9f03      	ldr	r7, [sp, #12]
 8001b70:	431a      	orrs	r2, r3
 8001b72:	0038      	movs	r0, r7
 8001b74:	0413      	lsls	r3, r2, #16
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	4358      	muls	r0, r3
 8001b7a:	4681      	mov	r9, r0
 8001b7c:	9802      	ldr	r0, [sp, #8]
 8001b7e:	0c15      	lsrs	r5, r2, #16
 8001b80:	436f      	muls	r7, r5
 8001b82:	4343      	muls	r3, r0
 8001b84:	4345      	muls	r5, r0
 8001b86:	4648      	mov	r0, r9
 8001b88:	0c00      	lsrs	r0, r0, #16
 8001b8a:	4684      	mov	ip, r0
 8001b8c:	19db      	adds	r3, r3, r7
 8001b8e:	4463      	add	r3, ip
 8001b90:	429f      	cmp	r7, r3
 8001b92:	d903      	bls.n	8001b9c <__aeabi_ddiv+0x40c>
 8001b94:	2080      	movs	r0, #128	; 0x80
 8001b96:	0240      	lsls	r0, r0, #9
 8001b98:	4684      	mov	ip, r0
 8001b9a:	4465      	add	r5, ip
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	0c1f      	lsrs	r7, r3, #16
 8001ba0:	0400      	lsls	r0, r0, #16
 8001ba2:	041b      	lsls	r3, r3, #16
 8001ba4:	0c00      	lsrs	r0, r0, #16
 8001ba6:	197d      	adds	r5, r7, r5
 8001ba8:	1818      	adds	r0, r3, r0
 8001baa:	42a9      	cmp	r1, r5
 8001bac:	d200      	bcs.n	8001bb0 <__aeabi_ddiv+0x420>
 8001bae:	e084      	b.n	8001cba <__aeabi_ddiv+0x52a>
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_ddiv+0x424>
 8001bb2:	e07f      	b.n	8001cb4 <__aeabi_ddiv+0x524>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	e657      	b.n	800186a <__aeabi_ddiv+0xda>
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	464a      	mov	r2, r9
 8001bbe:	031b      	lsls	r3, r3, #12
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	031b      	lsls	r3, r3, #12
 8001bc4:	0b1b      	lsrs	r3, r3, #12
 8001bc6:	46aa      	mov	sl, r5
 8001bc8:	4a6f      	ldr	r2, [pc, #444]	; (8001d88 <__aeabi_ddiv+0x5f8>)
 8001bca:	e66f      	b.n	80018ac <__aeabi_ddiv+0x11c>
 8001bcc:	42ba      	cmp	r2, r7
 8001bce:	d900      	bls.n	8001bd2 <__aeabi_ddiv+0x442>
 8001bd0:	e735      	b.n	8001a3e <__aeabi_ddiv+0x2ae>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	07dc      	lsls	r4, r3, #31
 8001bd6:	0858      	lsrs	r0, r3, #1
 8001bd8:	087b      	lsrs	r3, r7, #1
 8001bda:	431c      	orrs	r4, r3
 8001bdc:	07ff      	lsls	r7, r7, #31
 8001bde:	e734      	b.n	8001a4a <__aeabi_ddiv+0x2ba>
 8001be0:	2400      	movs	r4, #0
 8001be2:	42af      	cmp	r7, r5
 8001be4:	d289      	bcs.n	8001afa <__aeabi_ddiv+0x36a>
 8001be6:	4447      	add	r7, r8
 8001be8:	4547      	cmp	r7, r8
 8001bea:	41a4      	sbcs	r4, r4
 8001bec:	465b      	mov	r3, fp
 8001bee:	4264      	negs	r4, r4
 8001bf0:	19a4      	adds	r4, r4, r6
 8001bf2:	1864      	adds	r4, r4, r1
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	42a6      	cmp	r6, r4
 8001bf8:	d21e      	bcs.n	8001c38 <__aeabi_ddiv+0x4a8>
 8001bfa:	42a0      	cmp	r0, r4
 8001bfc:	d86d      	bhi.n	8001cda <__aeabi_ddiv+0x54a>
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_ddiv+0x472>
 8001c00:	e0b6      	b.n	8001d70 <__aeabi_ddiv+0x5e0>
 8001c02:	1a24      	subs	r4, r4, r0
 8001c04:	469b      	mov	fp, r3
 8001c06:	e778      	b.n	8001afa <__aeabi_ddiv+0x36a>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	465a      	mov	r2, fp
 8001c0c:	3b28      	subs	r3, #40	; 0x28
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	2700      	movs	r7, #0
 8001c12:	4691      	mov	r9, r2
 8001c14:	e688      	b.n	8001928 <__aeabi_ddiv+0x198>
 8001c16:	4658      	mov	r0, fp
 8001c18:	f001 f88a 	bl	8002d30 <__clzsi2>
 8001c1c:	3020      	adds	r0, #32
 8001c1e:	e672      	b.n	8001906 <__aeabi_ddiv+0x176>
 8001c20:	0003      	movs	r3, r0
 8001c22:	4652      	mov	r2, sl
 8001c24:	3b28      	subs	r3, #40	; 0x28
 8001c26:	409a      	lsls	r2, r3
 8001c28:	4693      	mov	fp, r2
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	e6b4      	b.n	8001998 <__aeabi_ddiv+0x208>
 8001c2e:	4650      	mov	r0, sl
 8001c30:	f001 f87e 	bl	8002d30 <__clzsi2>
 8001c34:	3020      	adds	r0, #32
 8001c36:	e69a      	b.n	800196e <__aeabi_ddiv+0x1de>
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d1e2      	bne.n	8001c02 <__aeabi_ddiv+0x472>
 8001c3c:	45b8      	cmp	r8, r7
 8001c3e:	d9dc      	bls.n	8001bfa <__aeabi_ddiv+0x46a>
 8001c40:	1a34      	subs	r4, r6, r0
 8001c42:	469b      	mov	fp, r3
 8001c44:	e759      	b.n	8001afa <__aeabi_ddiv+0x36a>
 8001c46:	2b1f      	cmp	r3, #31
 8001c48:	dc65      	bgt.n	8001d16 <__aeabi_ddiv+0x586>
 8001c4a:	4c50      	ldr	r4, [pc, #320]	; (8001d8c <__aeabi_ddiv+0x5fc>)
 8001c4c:	9900      	ldr	r1, [sp, #0]
 8001c4e:	46a4      	mov	ip, r4
 8001c50:	465c      	mov	r4, fp
 8001c52:	4461      	add	r1, ip
 8001c54:	0008      	movs	r0, r1
 8001c56:	408c      	lsls	r4, r1
 8001c58:	0011      	movs	r1, r2
 8001c5a:	4082      	lsls	r2, r0
 8001c5c:	40d9      	lsrs	r1, r3
 8001c5e:	1e50      	subs	r0, r2, #1
 8001c60:	4182      	sbcs	r2, r0
 8001c62:	430c      	orrs	r4, r1
 8001c64:	4314      	orrs	r4, r2
 8001c66:	465a      	mov	r2, fp
 8001c68:	40da      	lsrs	r2, r3
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	0762      	lsls	r2, r4, #29
 8001c6e:	d009      	beq.n	8001c84 <__aeabi_ddiv+0x4f4>
 8001c70:	220f      	movs	r2, #15
 8001c72:	4022      	ands	r2, r4
 8001c74:	2a04      	cmp	r2, #4
 8001c76:	d005      	beq.n	8001c84 <__aeabi_ddiv+0x4f4>
 8001c78:	0022      	movs	r2, r4
 8001c7a:	1d14      	adds	r4, r2, #4
 8001c7c:	4294      	cmp	r4, r2
 8001c7e:	4189      	sbcs	r1, r1
 8001c80:	4249      	negs	r1, r1
 8001c82:	185b      	adds	r3, r3, r1
 8001c84:	021a      	lsls	r2, r3, #8
 8001c86:	d562      	bpl.n	8001d4e <__aeabi_ddiv+0x5be>
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2700      	movs	r7, #0
 8001c8e:	e60d      	b.n	80018ac <__aeabi_ddiv+0x11c>
 8001c90:	428a      	cmp	r2, r1
 8001c92:	d800      	bhi.n	8001c96 <__aeabi_ddiv+0x506>
 8001c94:	e70a      	b.n	8001aac <__aeabi_ddiv+0x31c>
 8001c96:	1e83      	subs	r3, r0, #2
 8001c98:	1989      	adds	r1, r1, r6
 8001c9a:	e707      	b.n	8001aac <__aeabi_ddiv+0x31c>
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x516>
 8001ca4:	e5e6      	b.n	8001874 <__aeabi_ddiv+0xe4>
 8001ca6:	1d17      	adds	r7, r2, #4
 8001ca8:	4297      	cmp	r7, r2
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	4253      	negs	r3, r2
 8001cae:	449b      	add	fp, r3
 8001cb0:	08fa      	lsrs	r2, r7, #3
 8001cb2:	e5e0      	b.n	8001876 <__aeabi_ddiv+0xe6>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_ddiv+0x52a>
 8001cb8:	e5d7      	b.n	800186a <__aeabi_ddiv+0xda>
 8001cba:	1871      	adds	r1, r6, r1
 8001cbc:	1e53      	subs	r3, r2, #1
 8001cbe:	42b1      	cmp	r1, r6
 8001cc0:	d327      	bcc.n	8001d12 <__aeabi_ddiv+0x582>
 8001cc2:	42a9      	cmp	r1, r5
 8001cc4:	d315      	bcc.n	8001cf2 <__aeabi_ddiv+0x562>
 8001cc6:	d058      	beq.n	8001d7a <__aeabi_ddiv+0x5ea>
 8001cc8:	001a      	movs	r2, r3
 8001cca:	e773      	b.n	8001bb4 <__aeabi_ddiv+0x424>
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	dc00      	bgt.n	8001cd2 <__aeabi_ddiv+0x542>
 8001cd0:	e604      	b.n	80018dc <__aeabi_ddiv+0x14c>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	449b      	add	fp, r3
 8001cd8:	e5cd      	b.n	8001876 <__aeabi_ddiv+0xe6>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	4447      	add	r7, r8
 8001cde:	4547      	cmp	r7, r8
 8001ce0:	4189      	sbcs	r1, r1
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	469c      	mov	ip, r3
 8001ce6:	4249      	negs	r1, r1
 8001ce8:	1989      	adds	r1, r1, r6
 8001cea:	190c      	adds	r4, r1, r4
 8001cec:	44e3      	add	fp, ip
 8001cee:	1a24      	subs	r4, r4, r0
 8001cf0:	e703      	b.n	8001afa <__aeabi_ddiv+0x36a>
 8001cf2:	4643      	mov	r3, r8
 8001cf4:	005f      	lsls	r7, r3, #1
 8001cf6:	4547      	cmp	r7, r8
 8001cf8:	419b      	sbcs	r3, r3
 8001cfa:	46b8      	mov	r8, r7
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	199e      	adds	r6, r3, r6
 8001d00:	3a02      	subs	r2, #2
 8001d02:	1989      	adds	r1, r1, r6
 8001d04:	42a9      	cmp	r1, r5
 8001d06:	d000      	beq.n	8001d0a <__aeabi_ddiv+0x57a>
 8001d08:	e754      	b.n	8001bb4 <__aeabi_ddiv+0x424>
 8001d0a:	4540      	cmp	r0, r8
 8001d0c:	d000      	beq.n	8001d10 <__aeabi_ddiv+0x580>
 8001d0e:	e751      	b.n	8001bb4 <__aeabi_ddiv+0x424>
 8001d10:	e5ab      	b.n	800186a <__aeabi_ddiv+0xda>
 8001d12:	001a      	movs	r2, r3
 8001d14:	e7f6      	b.n	8001d04 <__aeabi_ddiv+0x574>
 8001d16:	211f      	movs	r1, #31
 8001d18:	465f      	mov	r7, fp
 8001d1a:	4249      	negs	r1, r1
 8001d1c:	1b0c      	subs	r4, r1, r4
 8001d1e:	40e7      	lsrs	r7, r4
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d007      	beq.n	8001d34 <__aeabi_ddiv+0x5a4>
 8001d24:	491a      	ldr	r1, [pc, #104]	; (8001d90 <__aeabi_ddiv+0x600>)
 8001d26:	9b00      	ldr	r3, [sp, #0]
 8001d28:	468c      	mov	ip, r1
 8001d2a:	4463      	add	r3, ip
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	465b      	mov	r3, fp
 8001d30:	4083      	lsls	r3, r0
 8001d32:	431a      	orrs	r2, r3
 8001d34:	1e50      	subs	r0, r2, #1
 8001d36:	4182      	sbcs	r2, r0
 8001d38:	433a      	orrs	r2, r7
 8001d3a:	2707      	movs	r7, #7
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4017      	ands	r7, r2
 8001d40:	d009      	beq.n	8001d56 <__aeabi_ddiv+0x5c6>
 8001d42:	210f      	movs	r1, #15
 8001d44:	2300      	movs	r3, #0
 8001d46:	4011      	ands	r1, r2
 8001d48:	0014      	movs	r4, r2
 8001d4a:	2904      	cmp	r1, #4
 8001d4c:	d195      	bne.n	8001c7a <__aeabi_ddiv+0x4ea>
 8001d4e:	0022      	movs	r2, r4
 8001d50:	075f      	lsls	r7, r3, #29
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	0b1b      	lsrs	r3, r3, #12
 8001d56:	08d2      	lsrs	r2, r2, #3
 8001d58:	4317      	orrs	r7, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	e5a6      	b.n	80018ac <__aeabi_ddiv+0x11c>
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	4659      	mov	r1, fp
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	430b      	orrs	r3, r1
 8001d66:	031b      	lsls	r3, r3, #12
 8001d68:	0017      	movs	r7, r2
 8001d6a:	0b1b      	lsrs	r3, r3, #12
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <__aeabi_ddiv+0x5f8>)
 8001d6e:	e59d      	b.n	80018ac <__aeabi_ddiv+0x11c>
 8001d70:	42bd      	cmp	r5, r7
 8001d72:	d8b2      	bhi.n	8001cda <__aeabi_ddiv+0x54a>
 8001d74:	469b      	mov	fp, r3
 8001d76:	2400      	movs	r4, #0
 8001d78:	e6bf      	b.n	8001afa <__aeabi_ddiv+0x36a>
 8001d7a:	4580      	cmp	r8, r0
 8001d7c:	d3b9      	bcc.n	8001cf2 <__aeabi_ddiv+0x562>
 8001d7e:	001a      	movs	r2, r3
 8001d80:	e7c3      	b.n	8001d0a <__aeabi_ddiv+0x57a>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000003ff 	.word	0x000003ff
 8001d88:	000007ff 	.word	0x000007ff
 8001d8c:	0000041e 	.word	0x0000041e
 8001d90:	0000043e 	.word	0x0000043e

08001d94 <__eqdf2>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	464f      	mov	r7, r9
 8001d98:	4646      	mov	r6, r8
 8001d9a:	46d6      	mov	lr, sl
 8001d9c:	4684      	mov	ip, r0
 8001d9e:	b5c0      	push	{r6, r7, lr}
 8001da0:	4680      	mov	r8, r0
 8001da2:	4e19      	ldr	r6, [pc, #100]	; (8001e08 <__eqdf2+0x74>)
 8001da4:	0318      	lsls	r0, r3, #12
 8001da6:	030f      	lsls	r7, r1, #12
 8001da8:	004d      	lsls	r5, r1, #1
 8001daa:	0b00      	lsrs	r0, r0, #12
 8001dac:	005c      	lsls	r4, r3, #1
 8001dae:	4682      	mov	sl, r0
 8001db0:	0b3f      	lsrs	r7, r7, #12
 8001db2:	0d6d      	lsrs	r5, r5, #21
 8001db4:	0fc9      	lsrs	r1, r1, #31
 8001db6:	4691      	mov	r9, r2
 8001db8:	0d64      	lsrs	r4, r4, #21
 8001dba:	0fdb      	lsrs	r3, r3, #31
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	42b5      	cmp	r5, r6
 8001dc0:	d00a      	beq.n	8001dd8 <__eqdf2+0x44>
 8001dc2:	42b4      	cmp	r4, r6
 8001dc4:	d003      	beq.n	8001dce <__eqdf2+0x3a>
 8001dc6:	42a5      	cmp	r5, r4
 8001dc8:	d101      	bne.n	8001dce <__eqdf2+0x3a>
 8001dca:	4557      	cmp	r7, sl
 8001dcc:	d00c      	beq.n	8001de8 <__eqdf2+0x54>
 8001dce:	bc1c      	pop	{r2, r3, r4}
 8001dd0:	4690      	mov	r8, r2
 8001dd2:	4699      	mov	r9, r3
 8001dd4:	46a2      	mov	sl, r4
 8001dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dd8:	4666      	mov	r6, ip
 8001dda:	433e      	orrs	r6, r7
 8001ddc:	d1f7      	bne.n	8001dce <__eqdf2+0x3a>
 8001dde:	42ac      	cmp	r4, r5
 8001de0:	d1f5      	bne.n	8001dce <__eqdf2+0x3a>
 8001de2:	4654      	mov	r4, sl
 8001de4:	4314      	orrs	r4, r2
 8001de6:	d1f2      	bne.n	8001dce <__eqdf2+0x3a>
 8001de8:	2001      	movs	r0, #1
 8001dea:	45c8      	cmp	r8, r9
 8001dec:	d1ef      	bne.n	8001dce <__eqdf2+0x3a>
 8001dee:	4299      	cmp	r1, r3
 8001df0:	d007      	beq.n	8001e02 <__eqdf2+0x6e>
 8001df2:	2d00      	cmp	r5, #0
 8001df4:	d1eb      	bne.n	8001dce <__eqdf2+0x3a>
 8001df6:	4663      	mov	r3, ip
 8001df8:	431f      	orrs	r7, r3
 8001dfa:	0038      	movs	r0, r7
 8001dfc:	1e47      	subs	r7, r0, #1
 8001dfe:	41b8      	sbcs	r0, r7
 8001e00:	e7e5      	b.n	8001dce <__eqdf2+0x3a>
 8001e02:	2000      	movs	r0, #0
 8001e04:	e7e3      	b.n	8001dce <__eqdf2+0x3a>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff

08001e0c <__gedf2>:
 8001e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0e:	464f      	mov	r7, r9
 8001e10:	4646      	mov	r6, r8
 8001e12:	46d6      	mov	lr, sl
 8001e14:	004d      	lsls	r5, r1, #1
 8001e16:	b5c0      	push	{r6, r7, lr}
 8001e18:	030e      	lsls	r6, r1, #12
 8001e1a:	0fc9      	lsrs	r1, r1, #31
 8001e1c:	468a      	mov	sl, r1
 8001e1e:	492c      	ldr	r1, [pc, #176]	; (8001ed0 <__gedf2+0xc4>)
 8001e20:	031f      	lsls	r7, r3, #12
 8001e22:	005c      	lsls	r4, r3, #1
 8001e24:	4680      	mov	r8, r0
 8001e26:	0b36      	lsrs	r6, r6, #12
 8001e28:	0d6d      	lsrs	r5, r5, #21
 8001e2a:	4691      	mov	r9, r2
 8001e2c:	0b3f      	lsrs	r7, r7, #12
 8001e2e:	0d64      	lsrs	r4, r4, #21
 8001e30:	0fdb      	lsrs	r3, r3, #31
 8001e32:	428d      	cmp	r5, r1
 8001e34:	d01e      	beq.n	8001e74 <__gedf2+0x68>
 8001e36:	428c      	cmp	r4, r1
 8001e38:	d016      	beq.n	8001e68 <__gedf2+0x5c>
 8001e3a:	2d00      	cmp	r5, #0
 8001e3c:	d11e      	bne.n	8001e7c <__gedf2+0x70>
 8001e3e:	4330      	orrs	r0, r6
 8001e40:	4684      	mov	ip, r0
 8001e42:	2c00      	cmp	r4, #0
 8001e44:	d101      	bne.n	8001e4a <__gedf2+0x3e>
 8001e46:	433a      	orrs	r2, r7
 8001e48:	d023      	beq.n	8001e92 <__gedf2+0x86>
 8001e4a:	4662      	mov	r2, ip
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	d01a      	beq.n	8001e86 <__gedf2+0x7a>
 8001e50:	459a      	cmp	sl, r3
 8001e52:	d029      	beq.n	8001ea8 <__gedf2+0x9c>
 8001e54:	4651      	mov	r1, sl
 8001e56:	2002      	movs	r0, #2
 8001e58:	3901      	subs	r1, #1
 8001e5a:	4008      	ands	r0, r1
 8001e5c:	3801      	subs	r0, #1
 8001e5e:	bc1c      	pop	{r2, r3, r4}
 8001e60:	4690      	mov	r8, r2
 8001e62:	4699      	mov	r9, r3
 8001e64:	46a2      	mov	sl, r4
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e68:	0039      	movs	r1, r7
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	d0e5      	beq.n	8001e3a <__gedf2+0x2e>
 8001e6e:	2002      	movs	r0, #2
 8001e70:	4240      	negs	r0, r0
 8001e72:	e7f4      	b.n	8001e5e <__gedf2+0x52>
 8001e74:	4330      	orrs	r0, r6
 8001e76:	d1fa      	bne.n	8001e6e <__gedf2+0x62>
 8001e78:	42ac      	cmp	r4, r5
 8001e7a:	d00f      	beq.n	8001e9c <__gedf2+0x90>
 8001e7c:	2c00      	cmp	r4, #0
 8001e7e:	d10f      	bne.n	8001ea0 <__gedf2+0x94>
 8001e80:	433a      	orrs	r2, r7
 8001e82:	d0e7      	beq.n	8001e54 <__gedf2+0x48>
 8001e84:	e00c      	b.n	8001ea0 <__gedf2+0x94>
 8001e86:	2201      	movs	r2, #1
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	4393      	bics	r3, r2
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	3001      	adds	r0, #1
 8001e90:	e7e5      	b.n	8001e5e <__gedf2+0x52>
 8001e92:	4663      	mov	r3, ip
 8001e94:	2000      	movs	r0, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0e1      	beq.n	8001e5e <__gedf2+0x52>
 8001e9a:	e7db      	b.n	8001e54 <__gedf2+0x48>
 8001e9c:	433a      	orrs	r2, r7
 8001e9e:	d1e6      	bne.n	8001e6e <__gedf2+0x62>
 8001ea0:	459a      	cmp	sl, r3
 8001ea2:	d1d7      	bne.n	8001e54 <__gedf2+0x48>
 8001ea4:	42a5      	cmp	r5, r4
 8001ea6:	dcd5      	bgt.n	8001e54 <__gedf2+0x48>
 8001ea8:	42a5      	cmp	r5, r4
 8001eaa:	db05      	blt.n	8001eb8 <__gedf2+0xac>
 8001eac:	42be      	cmp	r6, r7
 8001eae:	d8d1      	bhi.n	8001e54 <__gedf2+0x48>
 8001eb0:	d008      	beq.n	8001ec4 <__gedf2+0xb8>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	42be      	cmp	r6, r7
 8001eb6:	d2d2      	bcs.n	8001e5e <__gedf2+0x52>
 8001eb8:	4650      	mov	r0, sl
 8001eba:	2301      	movs	r3, #1
 8001ebc:	3801      	subs	r0, #1
 8001ebe:	4398      	bics	r0, r3
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	e7cc      	b.n	8001e5e <__gedf2+0x52>
 8001ec4:	45c8      	cmp	r8, r9
 8001ec6:	d8c5      	bhi.n	8001e54 <__gedf2+0x48>
 8001ec8:	2000      	movs	r0, #0
 8001eca:	45c8      	cmp	r8, r9
 8001ecc:	d3f4      	bcc.n	8001eb8 <__gedf2+0xac>
 8001ece:	e7c6      	b.n	8001e5e <__gedf2+0x52>
 8001ed0:	000007ff 	.word	0x000007ff

08001ed4 <__ledf2>:
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	464f      	mov	r7, r9
 8001ed8:	4646      	mov	r6, r8
 8001eda:	46d6      	mov	lr, sl
 8001edc:	004d      	lsls	r5, r1, #1
 8001ede:	b5c0      	push	{r6, r7, lr}
 8001ee0:	030e      	lsls	r6, r1, #12
 8001ee2:	0fc9      	lsrs	r1, r1, #31
 8001ee4:	468a      	mov	sl, r1
 8001ee6:	492e      	ldr	r1, [pc, #184]	; (8001fa0 <__ledf2+0xcc>)
 8001ee8:	031f      	lsls	r7, r3, #12
 8001eea:	005c      	lsls	r4, r3, #1
 8001eec:	4680      	mov	r8, r0
 8001eee:	0b36      	lsrs	r6, r6, #12
 8001ef0:	0d6d      	lsrs	r5, r5, #21
 8001ef2:	4691      	mov	r9, r2
 8001ef4:	0b3f      	lsrs	r7, r7, #12
 8001ef6:	0d64      	lsrs	r4, r4, #21
 8001ef8:	0fdb      	lsrs	r3, r3, #31
 8001efa:	428d      	cmp	r5, r1
 8001efc:	d018      	beq.n	8001f30 <__ledf2+0x5c>
 8001efe:	428c      	cmp	r4, r1
 8001f00:	d011      	beq.n	8001f26 <__ledf2+0x52>
 8001f02:	2d00      	cmp	r5, #0
 8001f04:	d118      	bne.n	8001f38 <__ledf2+0x64>
 8001f06:	4330      	orrs	r0, r6
 8001f08:	4684      	mov	ip, r0
 8001f0a:	2c00      	cmp	r4, #0
 8001f0c:	d11e      	bne.n	8001f4c <__ledf2+0x78>
 8001f0e:	433a      	orrs	r2, r7
 8001f10:	d11c      	bne.n	8001f4c <__ledf2+0x78>
 8001f12:	4663      	mov	r3, ip
 8001f14:	2000      	movs	r0, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d030      	beq.n	8001f7c <__ledf2+0xa8>
 8001f1a:	4651      	mov	r1, sl
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	3901      	subs	r1, #1
 8001f20:	4008      	ands	r0, r1
 8001f22:	3801      	subs	r0, #1
 8001f24:	e02a      	b.n	8001f7c <__ledf2+0xa8>
 8001f26:	0039      	movs	r1, r7
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	d0ea      	beq.n	8001f02 <__ledf2+0x2e>
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	e025      	b.n	8001f7c <__ledf2+0xa8>
 8001f30:	4330      	orrs	r0, r6
 8001f32:	d1fb      	bne.n	8001f2c <__ledf2+0x58>
 8001f34:	42ac      	cmp	r4, r5
 8001f36:	d026      	beq.n	8001f86 <__ledf2+0xb2>
 8001f38:	2c00      	cmp	r4, #0
 8001f3a:	d126      	bne.n	8001f8a <__ledf2+0xb6>
 8001f3c:	433a      	orrs	r2, r7
 8001f3e:	d124      	bne.n	8001f8a <__ledf2+0xb6>
 8001f40:	4651      	mov	r1, sl
 8001f42:	2002      	movs	r0, #2
 8001f44:	3901      	subs	r1, #1
 8001f46:	4008      	ands	r0, r1
 8001f48:	3801      	subs	r0, #1
 8001f4a:	e017      	b.n	8001f7c <__ledf2+0xa8>
 8001f4c:	4662      	mov	r2, ip
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d00f      	beq.n	8001f72 <__ledf2+0x9e>
 8001f52:	459a      	cmp	sl, r3
 8001f54:	d1e1      	bne.n	8001f1a <__ledf2+0x46>
 8001f56:	42a5      	cmp	r5, r4
 8001f58:	db05      	blt.n	8001f66 <__ledf2+0x92>
 8001f5a:	42be      	cmp	r6, r7
 8001f5c:	d8dd      	bhi.n	8001f1a <__ledf2+0x46>
 8001f5e:	d019      	beq.n	8001f94 <__ledf2+0xc0>
 8001f60:	2000      	movs	r0, #0
 8001f62:	42be      	cmp	r6, r7
 8001f64:	d20a      	bcs.n	8001f7c <__ledf2+0xa8>
 8001f66:	4650      	mov	r0, sl
 8001f68:	2301      	movs	r3, #1
 8001f6a:	3801      	subs	r0, #1
 8001f6c:	4398      	bics	r0, r3
 8001f6e:	3001      	adds	r0, #1
 8001f70:	e004      	b.n	8001f7c <__ledf2+0xa8>
 8001f72:	2201      	movs	r2, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4393      	bics	r3, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	bc1c      	pop	{r2, r3, r4}
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4699      	mov	r9, r3
 8001f82:	46a2      	mov	sl, r4
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	433a      	orrs	r2, r7
 8001f88:	d1d0      	bne.n	8001f2c <__ledf2+0x58>
 8001f8a:	459a      	cmp	sl, r3
 8001f8c:	d1c5      	bne.n	8001f1a <__ledf2+0x46>
 8001f8e:	42a5      	cmp	r5, r4
 8001f90:	dcc3      	bgt.n	8001f1a <__ledf2+0x46>
 8001f92:	e7e0      	b.n	8001f56 <__ledf2+0x82>
 8001f94:	45c8      	cmp	r8, r9
 8001f96:	d8c0      	bhi.n	8001f1a <__ledf2+0x46>
 8001f98:	2000      	movs	r0, #0
 8001f9a:	45c8      	cmp	r8, r9
 8001f9c:	d3e3      	bcc.n	8001f66 <__ledf2+0x92>
 8001f9e:	e7ed      	b.n	8001f7c <__ledf2+0xa8>
 8001fa0:	000007ff 	.word	0x000007ff

08001fa4 <__aeabi_dmul>:
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa6:	4657      	mov	r7, sl
 8001fa8:	46de      	mov	lr, fp
 8001faa:	464e      	mov	r6, r9
 8001fac:	4645      	mov	r5, r8
 8001fae:	b5e0      	push	{r5, r6, r7, lr}
 8001fb0:	4683      	mov	fp, r0
 8001fb2:	0006      	movs	r6, r0
 8001fb4:	030f      	lsls	r7, r1, #12
 8001fb6:	0048      	lsls	r0, r1, #1
 8001fb8:	b087      	sub	sp, #28
 8001fba:	4692      	mov	sl, r2
 8001fbc:	001d      	movs	r5, r3
 8001fbe:	0b3f      	lsrs	r7, r7, #12
 8001fc0:	0d40      	lsrs	r0, r0, #21
 8001fc2:	0fcc      	lsrs	r4, r1, #31
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_dmul+0x26>
 8001fc8:	e06f      	b.n	80020aa <__aeabi_dmul+0x106>
 8001fca:	4bde      	ldr	r3, [pc, #888]	; (8002344 <__aeabi_dmul+0x3a0>)
 8001fcc:	4298      	cmp	r0, r3
 8001fce:	d038      	beq.n	8002042 <__aeabi_dmul+0x9e>
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	00ff      	lsls	r7, r7, #3
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	431f      	orrs	r7, r3
 8001fd8:	0f73      	lsrs	r3, r6, #29
 8001fda:	433b      	orrs	r3, r7
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	4bda      	ldr	r3, [pc, #872]	; (8002348 <__aeabi_dmul+0x3a4>)
 8001fe0:	2700      	movs	r7, #0
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	469b      	mov	fp, r3
 8001fe8:	00f6      	lsls	r6, r6, #3
 8001fea:	4481      	add	r9, r0
 8001fec:	032b      	lsls	r3, r5, #12
 8001fee:	0069      	lsls	r1, r5, #1
 8001ff0:	0b1b      	lsrs	r3, r3, #12
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	4698      	mov	r8, r3
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0fed      	lsrs	r5, r5, #31
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	d100      	bne.n	8002000 <__aeabi_dmul+0x5c>
 8001ffe:	e085      	b.n	800210c <__aeabi_dmul+0x168>
 8002000:	4bd0      	ldr	r3, [pc, #832]	; (8002344 <__aeabi_dmul+0x3a0>)
 8002002:	4299      	cmp	r1, r3
 8002004:	d100      	bne.n	8002008 <__aeabi_dmul+0x64>
 8002006:	e073      	b.n	80020f0 <__aeabi_dmul+0x14c>
 8002008:	4643      	mov	r3, r8
 800200a:	00da      	lsls	r2, r3, #3
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	041b      	lsls	r3, r3, #16
 8002010:	4313      	orrs	r3, r2
 8002012:	4652      	mov	r2, sl
 8002014:	48cc      	ldr	r0, [pc, #816]	; (8002348 <__aeabi_dmul+0x3a4>)
 8002016:	0f52      	lsrs	r2, r2, #29
 8002018:	4684      	mov	ip, r0
 800201a:	4313      	orrs	r3, r2
 800201c:	4652      	mov	r2, sl
 800201e:	2000      	movs	r0, #0
 8002020:	4461      	add	r1, ip
 8002022:	00d2      	lsls	r2, r2, #3
 8002024:	4489      	add	r9, r1
 8002026:	0021      	movs	r1, r4
 8002028:	4069      	eors	r1, r5
 800202a:	9100      	str	r1, [sp, #0]
 800202c:	468c      	mov	ip, r1
 800202e:	2101      	movs	r1, #1
 8002030:	4449      	add	r1, r9
 8002032:	468a      	mov	sl, r1
 8002034:	2f0f      	cmp	r7, #15
 8002036:	d900      	bls.n	800203a <__aeabi_dmul+0x96>
 8002038:	e090      	b.n	800215c <__aeabi_dmul+0x1b8>
 800203a:	49c4      	ldr	r1, [pc, #784]	; (800234c <__aeabi_dmul+0x3a8>)
 800203c:	00bf      	lsls	r7, r7, #2
 800203e:	59cf      	ldr	r7, [r1, r7]
 8002040:	46bf      	mov	pc, r7
 8002042:	465b      	mov	r3, fp
 8002044:	433b      	orrs	r3, r7
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	d000      	beq.n	800204c <__aeabi_dmul+0xa8>
 800204a:	e16a      	b.n	8002322 <__aeabi_dmul+0x37e>
 800204c:	2302      	movs	r3, #2
 800204e:	2708      	movs	r7, #8
 8002050:	2600      	movs	r6, #0
 8002052:	4681      	mov	r9, r0
 8002054:	469b      	mov	fp, r3
 8002056:	e7c9      	b.n	8001fec <__aeabi_dmul+0x48>
 8002058:	0032      	movs	r2, r6
 800205a:	4658      	mov	r0, fp
 800205c:	9b01      	ldr	r3, [sp, #4]
 800205e:	4661      	mov	r1, ip
 8002060:	9100      	str	r1, [sp, #0]
 8002062:	2802      	cmp	r0, #2
 8002064:	d100      	bne.n	8002068 <__aeabi_dmul+0xc4>
 8002066:	e075      	b.n	8002154 <__aeabi_dmul+0x1b0>
 8002068:	2803      	cmp	r0, #3
 800206a:	d100      	bne.n	800206e <__aeabi_dmul+0xca>
 800206c:	e1fe      	b.n	800246c <__aeabi_dmul+0x4c8>
 800206e:	2801      	cmp	r0, #1
 8002070:	d000      	beq.n	8002074 <__aeabi_dmul+0xd0>
 8002072:	e12c      	b.n	80022ce <__aeabi_dmul+0x32a>
 8002074:	2300      	movs	r3, #0
 8002076:	2700      	movs	r7, #0
 8002078:	2600      	movs	r6, #0
 800207a:	2500      	movs	r5, #0
 800207c:	033f      	lsls	r7, r7, #12
 800207e:	0d2a      	lsrs	r2, r5, #20
 8002080:	0b3f      	lsrs	r7, r7, #12
 8002082:	48b3      	ldr	r0, [pc, #716]	; (8002350 <__aeabi_dmul+0x3ac>)
 8002084:	0512      	lsls	r2, r2, #20
 8002086:	433a      	orrs	r2, r7
 8002088:	4002      	ands	r2, r0
 800208a:	051b      	lsls	r3, r3, #20
 800208c:	4313      	orrs	r3, r2
 800208e:	9a00      	ldr	r2, [sp, #0]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	07d1      	lsls	r1, r2, #31
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	430b      	orrs	r3, r1
 8002098:	0030      	movs	r0, r6
 800209a:	0019      	movs	r1, r3
 800209c:	b007      	add	sp, #28
 800209e:	bc3c      	pop	{r2, r3, r4, r5}
 80020a0:	4690      	mov	r8, r2
 80020a2:	4699      	mov	r9, r3
 80020a4:	46a2      	mov	sl, r4
 80020a6:	46ab      	mov	fp, r5
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020aa:	465b      	mov	r3, fp
 80020ac:	433b      	orrs	r3, r7
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dmul+0x110>
 80020b2:	e12f      	b.n	8002314 <__aeabi_dmul+0x370>
 80020b4:	2f00      	cmp	r7, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dmul+0x116>
 80020b8:	e1a5      	b.n	8002406 <__aeabi_dmul+0x462>
 80020ba:	0038      	movs	r0, r7
 80020bc:	f000 fe38 	bl	8002d30 <__clzsi2>
 80020c0:	0003      	movs	r3, r0
 80020c2:	3b0b      	subs	r3, #11
 80020c4:	2b1c      	cmp	r3, #28
 80020c6:	dd00      	ble.n	80020ca <__aeabi_dmul+0x126>
 80020c8:	e196      	b.n	80023f8 <__aeabi_dmul+0x454>
 80020ca:	221d      	movs	r2, #29
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	465a      	mov	r2, fp
 80020d0:	0001      	movs	r1, r0
 80020d2:	40da      	lsrs	r2, r3
 80020d4:	465e      	mov	r6, fp
 80020d6:	3908      	subs	r1, #8
 80020d8:	408f      	lsls	r7, r1
 80020da:	0013      	movs	r3, r2
 80020dc:	408e      	lsls	r6, r1
 80020de:	433b      	orrs	r3, r7
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	4b9c      	ldr	r3, [pc, #624]	; (8002354 <__aeabi_dmul+0x3b0>)
 80020e4:	2700      	movs	r7, #0
 80020e6:	1a1b      	subs	r3, r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	2300      	movs	r3, #0
 80020ec:	469b      	mov	fp, r3
 80020ee:	e77d      	b.n	8001fec <__aeabi_dmul+0x48>
 80020f0:	4641      	mov	r1, r8
 80020f2:	4653      	mov	r3, sl
 80020f4:	430b      	orrs	r3, r1
 80020f6:	4993      	ldr	r1, [pc, #588]	; (8002344 <__aeabi_dmul+0x3a0>)
 80020f8:	468c      	mov	ip, r1
 80020fa:	44e1      	add	r9, ip
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d000      	beq.n	8002102 <__aeabi_dmul+0x15e>
 8002100:	e11a      	b.n	8002338 <__aeabi_dmul+0x394>
 8002102:	2202      	movs	r2, #2
 8002104:	2002      	movs	r0, #2
 8002106:	4317      	orrs	r7, r2
 8002108:	2200      	movs	r2, #0
 800210a:	e78c      	b.n	8002026 <__aeabi_dmul+0x82>
 800210c:	4313      	orrs	r3, r2
 800210e:	d100      	bne.n	8002112 <__aeabi_dmul+0x16e>
 8002110:	e10d      	b.n	800232e <__aeabi_dmul+0x38a>
 8002112:	4643      	mov	r3, r8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x176>
 8002118:	e181      	b.n	800241e <__aeabi_dmul+0x47a>
 800211a:	4640      	mov	r0, r8
 800211c:	f000 fe08 	bl	8002d30 <__clzsi2>
 8002120:	0002      	movs	r2, r0
 8002122:	3a0b      	subs	r2, #11
 8002124:	2a1c      	cmp	r2, #28
 8002126:	dd00      	ble.n	800212a <__aeabi_dmul+0x186>
 8002128:	e172      	b.n	8002410 <__aeabi_dmul+0x46c>
 800212a:	0001      	movs	r1, r0
 800212c:	4643      	mov	r3, r8
 800212e:	3908      	subs	r1, #8
 8002130:	408b      	lsls	r3, r1
 8002132:	4698      	mov	r8, r3
 8002134:	231d      	movs	r3, #29
 8002136:	1a9a      	subs	r2, r3, r2
 8002138:	4653      	mov	r3, sl
 800213a:	40d3      	lsrs	r3, r2
 800213c:	001a      	movs	r2, r3
 800213e:	4643      	mov	r3, r8
 8002140:	4313      	orrs	r3, r2
 8002142:	4652      	mov	r2, sl
 8002144:	408a      	lsls	r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	1a08      	subs	r0, r1, r0
 800214a:	4982      	ldr	r1, [pc, #520]	; (8002354 <__aeabi_dmul+0x3b0>)
 800214c:	4689      	mov	r9, r1
 800214e:	4481      	add	r9, r0
 8002150:	2000      	movs	r0, #0
 8002152:	e768      	b.n	8002026 <__aeabi_dmul+0x82>
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <__aeabi_dmul+0x3a0>)
 8002156:	2700      	movs	r7, #0
 8002158:	2600      	movs	r6, #0
 800215a:	e78e      	b.n	800207a <__aeabi_dmul+0xd6>
 800215c:	0c14      	lsrs	r4, r2, #16
 800215e:	0412      	lsls	r2, r2, #16
 8002160:	0c12      	lsrs	r2, r2, #16
 8002162:	0011      	movs	r1, r2
 8002164:	0c37      	lsrs	r7, r6, #16
 8002166:	0436      	lsls	r6, r6, #16
 8002168:	0c35      	lsrs	r5, r6, #16
 800216a:	4379      	muls	r1, r7
 800216c:	0028      	movs	r0, r5
 800216e:	468c      	mov	ip, r1
 8002170:	002e      	movs	r6, r5
 8002172:	4360      	muls	r0, r4
 8002174:	4460      	add	r0, ip
 8002176:	4683      	mov	fp, r0
 8002178:	4356      	muls	r6, r2
 800217a:	0021      	movs	r1, r4
 800217c:	0c30      	lsrs	r0, r6, #16
 800217e:	4680      	mov	r8, r0
 8002180:	4658      	mov	r0, fp
 8002182:	4379      	muls	r1, r7
 8002184:	4440      	add	r0, r8
 8002186:	9102      	str	r1, [sp, #8]
 8002188:	4584      	cmp	ip, r0
 800218a:	d906      	bls.n	800219a <__aeabi_dmul+0x1f6>
 800218c:	4688      	mov	r8, r1
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	0249      	lsls	r1, r1, #9
 8002192:	468c      	mov	ip, r1
 8002194:	44e0      	add	r8, ip
 8002196:	4641      	mov	r1, r8
 8002198:	9102      	str	r1, [sp, #8]
 800219a:	0436      	lsls	r6, r6, #16
 800219c:	0c01      	lsrs	r1, r0, #16
 800219e:	0c36      	lsrs	r6, r6, #16
 80021a0:	0400      	lsls	r0, r0, #16
 80021a2:	468b      	mov	fp, r1
 80021a4:	1981      	adds	r1, r0, r6
 80021a6:	0c1e      	lsrs	r6, r3, #16
 80021a8:	041b      	lsls	r3, r3, #16
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	9103      	str	r1, [sp, #12]
 80021ae:	0019      	movs	r1, r3
 80021b0:	4379      	muls	r1, r7
 80021b2:	468c      	mov	ip, r1
 80021b4:	0028      	movs	r0, r5
 80021b6:	4375      	muls	r5, r6
 80021b8:	4465      	add	r5, ip
 80021ba:	46a8      	mov	r8, r5
 80021bc:	4358      	muls	r0, r3
 80021be:	0c05      	lsrs	r5, r0, #16
 80021c0:	4445      	add	r5, r8
 80021c2:	4377      	muls	r7, r6
 80021c4:	42a9      	cmp	r1, r5
 80021c6:	d903      	bls.n	80021d0 <__aeabi_dmul+0x22c>
 80021c8:	2180      	movs	r1, #128	; 0x80
 80021ca:	0249      	lsls	r1, r1, #9
 80021cc:	468c      	mov	ip, r1
 80021ce:	4467      	add	r7, ip
 80021d0:	0c29      	lsrs	r1, r5, #16
 80021d2:	468c      	mov	ip, r1
 80021d4:	0039      	movs	r1, r7
 80021d6:	0400      	lsls	r0, r0, #16
 80021d8:	0c00      	lsrs	r0, r0, #16
 80021da:	042d      	lsls	r5, r5, #16
 80021dc:	182d      	adds	r5, r5, r0
 80021de:	4461      	add	r1, ip
 80021e0:	44ab      	add	fp, r5
 80021e2:	9105      	str	r1, [sp, #20]
 80021e4:	4659      	mov	r1, fp
 80021e6:	9104      	str	r1, [sp, #16]
 80021e8:	9901      	ldr	r1, [sp, #4]
 80021ea:	040f      	lsls	r7, r1, #16
 80021ec:	0c3f      	lsrs	r7, r7, #16
 80021ee:	0c08      	lsrs	r0, r1, #16
 80021f0:	0039      	movs	r1, r7
 80021f2:	4351      	muls	r1, r2
 80021f4:	4342      	muls	r2, r0
 80021f6:	4690      	mov	r8, r2
 80021f8:	0002      	movs	r2, r0
 80021fa:	468c      	mov	ip, r1
 80021fc:	0c09      	lsrs	r1, r1, #16
 80021fe:	468b      	mov	fp, r1
 8002200:	4362      	muls	r2, r4
 8002202:	437c      	muls	r4, r7
 8002204:	4444      	add	r4, r8
 8002206:	445c      	add	r4, fp
 8002208:	45a0      	cmp	r8, r4
 800220a:	d903      	bls.n	8002214 <__aeabi_dmul+0x270>
 800220c:	2180      	movs	r1, #128	; 0x80
 800220e:	0249      	lsls	r1, r1, #9
 8002210:	4688      	mov	r8, r1
 8002212:	4442      	add	r2, r8
 8002214:	0c21      	lsrs	r1, r4, #16
 8002216:	4688      	mov	r8, r1
 8002218:	4661      	mov	r1, ip
 800221a:	0409      	lsls	r1, r1, #16
 800221c:	0c09      	lsrs	r1, r1, #16
 800221e:	468c      	mov	ip, r1
 8002220:	0039      	movs	r1, r7
 8002222:	4359      	muls	r1, r3
 8002224:	4343      	muls	r3, r0
 8002226:	4370      	muls	r0, r6
 8002228:	437e      	muls	r6, r7
 800222a:	0c0f      	lsrs	r7, r1, #16
 800222c:	18f6      	adds	r6, r6, r3
 800222e:	0424      	lsls	r4, r4, #16
 8002230:	19be      	adds	r6, r7, r6
 8002232:	4464      	add	r4, ip
 8002234:	4442      	add	r2, r8
 8002236:	468c      	mov	ip, r1
 8002238:	42b3      	cmp	r3, r6
 800223a:	d903      	bls.n	8002244 <__aeabi_dmul+0x2a0>
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	4698      	mov	r8, r3
 8002242:	4440      	add	r0, r8
 8002244:	9b02      	ldr	r3, [sp, #8]
 8002246:	4661      	mov	r1, ip
 8002248:	4698      	mov	r8, r3
 800224a:	9b04      	ldr	r3, [sp, #16]
 800224c:	0437      	lsls	r7, r6, #16
 800224e:	4443      	add	r3, r8
 8002250:	469b      	mov	fp, r3
 8002252:	45ab      	cmp	fp, r5
 8002254:	41ad      	sbcs	r5, r5
 8002256:	426b      	negs	r3, r5
 8002258:	040d      	lsls	r5, r1, #16
 800225a:	9905      	ldr	r1, [sp, #20]
 800225c:	0c2d      	lsrs	r5, r5, #16
 800225e:	468c      	mov	ip, r1
 8002260:	197f      	adds	r7, r7, r5
 8002262:	4467      	add	r7, ip
 8002264:	18fd      	adds	r5, r7, r3
 8002266:	46a8      	mov	r8, r5
 8002268:	465d      	mov	r5, fp
 800226a:	192d      	adds	r5, r5, r4
 800226c:	42a5      	cmp	r5, r4
 800226e:	41a4      	sbcs	r4, r4
 8002270:	4693      	mov	fp, r2
 8002272:	4264      	negs	r4, r4
 8002274:	46a4      	mov	ip, r4
 8002276:	44c3      	add	fp, r8
 8002278:	44dc      	add	ip, fp
 800227a:	428f      	cmp	r7, r1
 800227c:	41bf      	sbcs	r7, r7
 800227e:	4598      	cmp	r8, r3
 8002280:	419b      	sbcs	r3, r3
 8002282:	4593      	cmp	fp, r2
 8002284:	4192      	sbcs	r2, r2
 8002286:	45a4      	cmp	ip, r4
 8002288:	41a4      	sbcs	r4, r4
 800228a:	425b      	negs	r3, r3
 800228c:	427f      	negs	r7, r7
 800228e:	431f      	orrs	r7, r3
 8002290:	0c36      	lsrs	r6, r6, #16
 8002292:	4252      	negs	r2, r2
 8002294:	4264      	negs	r4, r4
 8002296:	19bf      	adds	r7, r7, r6
 8002298:	4322      	orrs	r2, r4
 800229a:	18bf      	adds	r7, r7, r2
 800229c:	4662      	mov	r2, ip
 800229e:	1838      	adds	r0, r7, r0
 80022a0:	0243      	lsls	r3, r0, #9
 80022a2:	0dd2      	lsrs	r2, r2, #23
 80022a4:	9903      	ldr	r1, [sp, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	026a      	lsls	r2, r5, #9
 80022aa:	430a      	orrs	r2, r1
 80022ac:	1e50      	subs	r0, r2, #1
 80022ae:	4182      	sbcs	r2, r0
 80022b0:	4661      	mov	r1, ip
 80022b2:	0ded      	lsrs	r5, r5, #23
 80022b4:	432a      	orrs	r2, r5
 80022b6:	024e      	lsls	r6, r1, #9
 80022b8:	4332      	orrs	r2, r6
 80022ba:	01d9      	lsls	r1, r3, #7
 80022bc:	d400      	bmi.n	80022c0 <__aeabi_dmul+0x31c>
 80022be:	e0b3      	b.n	8002428 <__aeabi_dmul+0x484>
 80022c0:	2601      	movs	r6, #1
 80022c2:	0850      	lsrs	r0, r2, #1
 80022c4:	4032      	ands	r2, r6
 80022c6:	4302      	orrs	r2, r0
 80022c8:	07de      	lsls	r6, r3, #31
 80022ca:	4332      	orrs	r2, r6
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	4c22      	ldr	r4, [pc, #136]	; (8002358 <__aeabi_dmul+0x3b4>)
 80022d0:	4454      	add	r4, sl
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	dd62      	ble.n	800239c <__aeabi_dmul+0x3f8>
 80022d6:	0751      	lsls	r1, r2, #29
 80022d8:	d009      	beq.n	80022ee <__aeabi_dmul+0x34a>
 80022da:	200f      	movs	r0, #15
 80022dc:	4010      	ands	r0, r2
 80022de:	2804      	cmp	r0, #4
 80022e0:	d005      	beq.n	80022ee <__aeabi_dmul+0x34a>
 80022e2:	1d10      	adds	r0, r2, #4
 80022e4:	4290      	cmp	r0, r2
 80022e6:	4192      	sbcs	r2, r2
 80022e8:	4252      	negs	r2, r2
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	0002      	movs	r2, r0
 80022ee:	01d9      	lsls	r1, r3, #7
 80022f0:	d504      	bpl.n	80022fc <__aeabi_dmul+0x358>
 80022f2:	2480      	movs	r4, #128	; 0x80
 80022f4:	4819      	ldr	r0, [pc, #100]	; (800235c <__aeabi_dmul+0x3b8>)
 80022f6:	00e4      	lsls	r4, r4, #3
 80022f8:	4003      	ands	r3, r0
 80022fa:	4454      	add	r4, sl
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <__aeabi_dmul+0x3bc>)
 80022fe:	4284      	cmp	r4, r0
 8002300:	dd00      	ble.n	8002304 <__aeabi_dmul+0x360>
 8002302:	e727      	b.n	8002154 <__aeabi_dmul+0x1b0>
 8002304:	075e      	lsls	r6, r3, #29
 8002306:	025b      	lsls	r3, r3, #9
 8002308:	08d2      	lsrs	r2, r2, #3
 800230a:	0b1f      	lsrs	r7, r3, #12
 800230c:	0563      	lsls	r3, r4, #21
 800230e:	4316      	orrs	r6, r2
 8002310:	0d5b      	lsrs	r3, r3, #21
 8002312:	e6b2      	b.n	800207a <__aeabi_dmul+0xd6>
 8002314:	2300      	movs	r3, #0
 8002316:	4699      	mov	r9, r3
 8002318:	3301      	adds	r3, #1
 800231a:	2704      	movs	r7, #4
 800231c:	2600      	movs	r6, #0
 800231e:	469b      	mov	fp, r3
 8002320:	e664      	b.n	8001fec <__aeabi_dmul+0x48>
 8002322:	2303      	movs	r3, #3
 8002324:	9701      	str	r7, [sp, #4]
 8002326:	4681      	mov	r9, r0
 8002328:	270c      	movs	r7, #12
 800232a:	469b      	mov	fp, r3
 800232c:	e65e      	b.n	8001fec <__aeabi_dmul+0x48>
 800232e:	2201      	movs	r2, #1
 8002330:	2001      	movs	r0, #1
 8002332:	4317      	orrs	r7, r2
 8002334:	2200      	movs	r2, #0
 8002336:	e676      	b.n	8002026 <__aeabi_dmul+0x82>
 8002338:	2303      	movs	r3, #3
 800233a:	2003      	movs	r0, #3
 800233c:	431f      	orrs	r7, r3
 800233e:	4643      	mov	r3, r8
 8002340:	e671      	b.n	8002026 <__aeabi_dmul+0x82>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	000007ff 	.word	0x000007ff
 8002348:	fffffc01 	.word	0xfffffc01
 800234c:	080073f0 	.word	0x080073f0
 8002350:	800fffff 	.word	0x800fffff
 8002354:	fffffc0d 	.word	0xfffffc0d
 8002358:	000003ff 	.word	0x000003ff
 800235c:	feffffff 	.word	0xfeffffff
 8002360:	000007fe 	.word	0x000007fe
 8002364:	2300      	movs	r3, #0
 8002366:	2780      	movs	r7, #128	; 0x80
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	033f      	lsls	r7, r7, #12
 800236c:	2600      	movs	r6, #0
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <__aeabi_dmul+0x4d8>)
 8002370:	e683      	b.n	800207a <__aeabi_dmul+0xd6>
 8002372:	9b01      	ldr	r3, [sp, #4]
 8002374:	0032      	movs	r2, r6
 8002376:	46a4      	mov	ip, r4
 8002378:	4658      	mov	r0, fp
 800237a:	e670      	b.n	800205e <__aeabi_dmul+0xba>
 800237c:	46ac      	mov	ip, r5
 800237e:	e66e      	b.n	800205e <__aeabi_dmul+0xba>
 8002380:	2780      	movs	r7, #128	; 0x80
 8002382:	9901      	ldr	r1, [sp, #4]
 8002384:	033f      	lsls	r7, r7, #12
 8002386:	4239      	tst	r1, r7
 8002388:	d02d      	beq.n	80023e6 <__aeabi_dmul+0x442>
 800238a:	423b      	tst	r3, r7
 800238c:	d12b      	bne.n	80023e6 <__aeabi_dmul+0x442>
 800238e:	431f      	orrs	r7, r3
 8002390:	033f      	lsls	r7, r7, #12
 8002392:	0b3f      	lsrs	r7, r7, #12
 8002394:	9500      	str	r5, [sp, #0]
 8002396:	0016      	movs	r6, r2
 8002398:	4b38      	ldr	r3, [pc, #224]	; (800247c <__aeabi_dmul+0x4d8>)
 800239a:	e66e      	b.n	800207a <__aeabi_dmul+0xd6>
 800239c:	2501      	movs	r5, #1
 800239e:	1b2d      	subs	r5, r5, r4
 80023a0:	2d38      	cmp	r5, #56	; 0x38
 80023a2:	dd00      	ble.n	80023a6 <__aeabi_dmul+0x402>
 80023a4:	e666      	b.n	8002074 <__aeabi_dmul+0xd0>
 80023a6:	2d1f      	cmp	r5, #31
 80023a8:	dc40      	bgt.n	800242c <__aeabi_dmul+0x488>
 80023aa:	4835      	ldr	r0, [pc, #212]	; (8002480 <__aeabi_dmul+0x4dc>)
 80023ac:	001c      	movs	r4, r3
 80023ae:	4450      	add	r0, sl
 80023b0:	0016      	movs	r6, r2
 80023b2:	4082      	lsls	r2, r0
 80023b4:	4084      	lsls	r4, r0
 80023b6:	40ee      	lsrs	r6, r5
 80023b8:	1e50      	subs	r0, r2, #1
 80023ba:	4182      	sbcs	r2, r0
 80023bc:	4334      	orrs	r4, r6
 80023be:	4314      	orrs	r4, r2
 80023c0:	40eb      	lsrs	r3, r5
 80023c2:	0762      	lsls	r2, r4, #29
 80023c4:	d009      	beq.n	80023da <__aeabi_dmul+0x436>
 80023c6:	220f      	movs	r2, #15
 80023c8:	4022      	ands	r2, r4
 80023ca:	2a04      	cmp	r2, #4
 80023cc:	d005      	beq.n	80023da <__aeabi_dmul+0x436>
 80023ce:	0022      	movs	r2, r4
 80023d0:	1d14      	adds	r4, r2, #4
 80023d2:	4294      	cmp	r4, r2
 80023d4:	4180      	sbcs	r0, r0
 80023d6:	4240      	negs	r0, r0
 80023d8:	181b      	adds	r3, r3, r0
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	d53e      	bpl.n	800245c <__aeabi_dmul+0x4b8>
 80023de:	2301      	movs	r3, #1
 80023e0:	2700      	movs	r7, #0
 80023e2:	2600      	movs	r6, #0
 80023e4:	e649      	b.n	800207a <__aeabi_dmul+0xd6>
 80023e6:	2780      	movs	r7, #128	; 0x80
 80023e8:	9b01      	ldr	r3, [sp, #4]
 80023ea:	033f      	lsls	r7, r7, #12
 80023ec:	431f      	orrs	r7, r3
 80023ee:	033f      	lsls	r7, r7, #12
 80023f0:	0b3f      	lsrs	r7, r7, #12
 80023f2:	9400      	str	r4, [sp, #0]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <__aeabi_dmul+0x4d8>)
 80023f6:	e640      	b.n	800207a <__aeabi_dmul+0xd6>
 80023f8:	0003      	movs	r3, r0
 80023fa:	465a      	mov	r2, fp
 80023fc:	3b28      	subs	r3, #40	; 0x28
 80023fe:	409a      	lsls	r2, r3
 8002400:	2600      	movs	r6, #0
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	e66d      	b.n	80020e2 <__aeabi_dmul+0x13e>
 8002406:	4658      	mov	r0, fp
 8002408:	f000 fc92 	bl	8002d30 <__clzsi2>
 800240c:	3020      	adds	r0, #32
 800240e:	e657      	b.n	80020c0 <__aeabi_dmul+0x11c>
 8002410:	0003      	movs	r3, r0
 8002412:	4652      	mov	r2, sl
 8002414:	3b28      	subs	r3, #40	; 0x28
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	2200      	movs	r2, #0
 800241c:	e693      	b.n	8002146 <__aeabi_dmul+0x1a2>
 800241e:	4650      	mov	r0, sl
 8002420:	f000 fc86 	bl	8002d30 <__clzsi2>
 8002424:	3020      	adds	r0, #32
 8002426:	e67b      	b.n	8002120 <__aeabi_dmul+0x17c>
 8002428:	46ca      	mov	sl, r9
 800242a:	e750      	b.n	80022ce <__aeabi_dmul+0x32a>
 800242c:	201f      	movs	r0, #31
 800242e:	001e      	movs	r6, r3
 8002430:	4240      	negs	r0, r0
 8002432:	1b04      	subs	r4, r0, r4
 8002434:	40e6      	lsrs	r6, r4
 8002436:	2d20      	cmp	r5, #32
 8002438:	d003      	beq.n	8002442 <__aeabi_dmul+0x49e>
 800243a:	4c12      	ldr	r4, [pc, #72]	; (8002484 <__aeabi_dmul+0x4e0>)
 800243c:	4454      	add	r4, sl
 800243e:	40a3      	lsls	r3, r4
 8002440:	431a      	orrs	r2, r3
 8002442:	1e50      	subs	r0, r2, #1
 8002444:	4182      	sbcs	r2, r0
 8002446:	4332      	orrs	r2, r6
 8002448:	2607      	movs	r6, #7
 800244a:	2700      	movs	r7, #0
 800244c:	4016      	ands	r6, r2
 800244e:	d009      	beq.n	8002464 <__aeabi_dmul+0x4c0>
 8002450:	200f      	movs	r0, #15
 8002452:	2300      	movs	r3, #0
 8002454:	4010      	ands	r0, r2
 8002456:	0014      	movs	r4, r2
 8002458:	2804      	cmp	r0, #4
 800245a:	d1b9      	bne.n	80023d0 <__aeabi_dmul+0x42c>
 800245c:	0022      	movs	r2, r4
 800245e:	075e      	lsls	r6, r3, #29
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	0b1f      	lsrs	r7, r3, #12
 8002464:	08d2      	lsrs	r2, r2, #3
 8002466:	4316      	orrs	r6, r2
 8002468:	2300      	movs	r3, #0
 800246a:	e606      	b.n	800207a <__aeabi_dmul+0xd6>
 800246c:	2780      	movs	r7, #128	; 0x80
 800246e:	033f      	lsls	r7, r7, #12
 8002470:	431f      	orrs	r7, r3
 8002472:	033f      	lsls	r7, r7, #12
 8002474:	0b3f      	lsrs	r7, r7, #12
 8002476:	0016      	movs	r6, r2
 8002478:	4b00      	ldr	r3, [pc, #0]	; (800247c <__aeabi_dmul+0x4d8>)
 800247a:	e5fe      	b.n	800207a <__aeabi_dmul+0xd6>
 800247c:	000007ff 	.word	0x000007ff
 8002480:	0000041e 	.word	0x0000041e
 8002484:	0000043e 	.word	0x0000043e

08002488 <__aeabi_dsub>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	4657      	mov	r7, sl
 800248c:	464e      	mov	r6, r9
 800248e:	4645      	mov	r5, r8
 8002490:	46de      	mov	lr, fp
 8002492:	000c      	movs	r4, r1
 8002494:	0309      	lsls	r1, r1, #12
 8002496:	b5e0      	push	{r5, r6, r7, lr}
 8002498:	0a49      	lsrs	r1, r1, #9
 800249a:	0f46      	lsrs	r6, r0, #29
 800249c:	005f      	lsls	r7, r3, #1
 800249e:	4331      	orrs	r1, r6
 80024a0:	031e      	lsls	r6, r3, #12
 80024a2:	0fdb      	lsrs	r3, r3, #31
 80024a4:	0a76      	lsrs	r6, r6, #9
 80024a6:	469b      	mov	fp, r3
 80024a8:	0f53      	lsrs	r3, r2, #29
 80024aa:	4333      	orrs	r3, r6
 80024ac:	4ec8      	ldr	r6, [pc, #800]	; (80027d0 <__aeabi_dsub+0x348>)
 80024ae:	0065      	lsls	r5, r4, #1
 80024b0:	00c0      	lsls	r0, r0, #3
 80024b2:	0fe4      	lsrs	r4, r4, #31
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	0d6d      	lsrs	r5, r5, #21
 80024b8:	46a2      	mov	sl, r4
 80024ba:	4681      	mov	r9, r0
 80024bc:	0d7f      	lsrs	r7, r7, #21
 80024be:	469c      	mov	ip, r3
 80024c0:	4690      	mov	r8, r2
 80024c2:	42b7      	cmp	r7, r6
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x40>
 80024c6:	e0b9      	b.n	800263c <__aeabi_dsub+0x1b4>
 80024c8:	465b      	mov	r3, fp
 80024ca:	2601      	movs	r6, #1
 80024cc:	4073      	eors	r3, r6
 80024ce:	469b      	mov	fp, r3
 80024d0:	1bee      	subs	r6, r5, r7
 80024d2:	45a3      	cmp	fp, r4
 80024d4:	d100      	bne.n	80024d8 <__aeabi_dsub+0x50>
 80024d6:	e083      	b.n	80025e0 <__aeabi_dsub+0x158>
 80024d8:	2e00      	cmp	r6, #0
 80024da:	dd63      	ble.n	80025a4 <__aeabi_dsub+0x11c>
 80024dc:	2f00      	cmp	r7, #0
 80024de:	d000      	beq.n	80024e2 <__aeabi_dsub+0x5a>
 80024e0:	e0b1      	b.n	8002646 <__aeabi_dsub+0x1be>
 80024e2:	4663      	mov	r3, ip
 80024e4:	4313      	orrs	r3, r2
 80024e6:	d100      	bne.n	80024ea <__aeabi_dsub+0x62>
 80024e8:	e123      	b.n	8002732 <__aeabi_dsub+0x2aa>
 80024ea:	1e73      	subs	r3, r6, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <__aeabi_dsub+0x6a>
 80024f0:	e1ba      	b.n	8002868 <__aeabi_dsub+0x3e0>
 80024f2:	1a86      	subs	r6, r0, r2
 80024f4:	4663      	mov	r3, ip
 80024f6:	42b0      	cmp	r0, r6
 80024f8:	4180      	sbcs	r0, r0
 80024fa:	2501      	movs	r5, #1
 80024fc:	1ac9      	subs	r1, r1, r3
 80024fe:	4240      	negs	r0, r0
 8002500:	1a09      	subs	r1, r1, r0
 8002502:	020b      	lsls	r3, r1, #8
 8002504:	d400      	bmi.n	8002508 <__aeabi_dsub+0x80>
 8002506:	e147      	b.n	8002798 <__aeabi_dsub+0x310>
 8002508:	0249      	lsls	r1, r1, #9
 800250a:	0a4b      	lsrs	r3, r1, #9
 800250c:	4698      	mov	r8, r3
 800250e:	4643      	mov	r3, r8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d100      	bne.n	8002516 <__aeabi_dsub+0x8e>
 8002514:	e189      	b.n	800282a <__aeabi_dsub+0x3a2>
 8002516:	4640      	mov	r0, r8
 8002518:	f000 fc0a 	bl	8002d30 <__clzsi2>
 800251c:	0003      	movs	r3, r0
 800251e:	3b08      	subs	r3, #8
 8002520:	2b1f      	cmp	r3, #31
 8002522:	dd00      	ble.n	8002526 <__aeabi_dsub+0x9e>
 8002524:	e17c      	b.n	8002820 <__aeabi_dsub+0x398>
 8002526:	2220      	movs	r2, #32
 8002528:	0030      	movs	r0, r6
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	4641      	mov	r1, r8
 800252e:	40d0      	lsrs	r0, r2
 8002530:	4099      	lsls	r1, r3
 8002532:	0002      	movs	r2, r0
 8002534:	409e      	lsls	r6, r3
 8002536:	430a      	orrs	r2, r1
 8002538:	429d      	cmp	r5, r3
 800253a:	dd00      	ble.n	800253e <__aeabi_dsub+0xb6>
 800253c:	e16a      	b.n	8002814 <__aeabi_dsub+0x38c>
 800253e:	1b5d      	subs	r5, r3, r5
 8002540:	1c6b      	adds	r3, r5, #1
 8002542:	2b1f      	cmp	r3, #31
 8002544:	dd00      	ble.n	8002548 <__aeabi_dsub+0xc0>
 8002546:	e194      	b.n	8002872 <__aeabi_dsub+0x3ea>
 8002548:	2120      	movs	r1, #32
 800254a:	0010      	movs	r0, r2
 800254c:	0035      	movs	r5, r6
 800254e:	1ac9      	subs	r1, r1, r3
 8002550:	408e      	lsls	r6, r1
 8002552:	40da      	lsrs	r2, r3
 8002554:	4088      	lsls	r0, r1
 8002556:	40dd      	lsrs	r5, r3
 8002558:	1e71      	subs	r1, r6, #1
 800255a:	418e      	sbcs	r6, r1
 800255c:	0011      	movs	r1, r2
 800255e:	2207      	movs	r2, #7
 8002560:	4328      	orrs	r0, r5
 8002562:	2500      	movs	r5, #0
 8002564:	4306      	orrs	r6, r0
 8002566:	4032      	ands	r2, r6
 8002568:	2a00      	cmp	r2, #0
 800256a:	d009      	beq.n	8002580 <__aeabi_dsub+0xf8>
 800256c:	230f      	movs	r3, #15
 800256e:	4033      	ands	r3, r6
 8002570:	2b04      	cmp	r3, #4
 8002572:	d005      	beq.n	8002580 <__aeabi_dsub+0xf8>
 8002574:	1d33      	adds	r3, r6, #4
 8002576:	42b3      	cmp	r3, r6
 8002578:	41b6      	sbcs	r6, r6
 800257a:	4276      	negs	r6, r6
 800257c:	1989      	adds	r1, r1, r6
 800257e:	001e      	movs	r6, r3
 8002580:	020b      	lsls	r3, r1, #8
 8002582:	d400      	bmi.n	8002586 <__aeabi_dsub+0xfe>
 8002584:	e23d      	b.n	8002a02 <__aeabi_dsub+0x57a>
 8002586:	1c6a      	adds	r2, r5, #1
 8002588:	4b91      	ldr	r3, [pc, #580]	; (80027d0 <__aeabi_dsub+0x348>)
 800258a:	0555      	lsls	r5, r2, #21
 800258c:	0d6d      	lsrs	r5, r5, #21
 800258e:	429a      	cmp	r2, r3
 8002590:	d100      	bne.n	8002594 <__aeabi_dsub+0x10c>
 8002592:	e119      	b.n	80027c8 <__aeabi_dsub+0x340>
 8002594:	4a8f      	ldr	r2, [pc, #572]	; (80027d4 <__aeabi_dsub+0x34c>)
 8002596:	08f6      	lsrs	r6, r6, #3
 8002598:	400a      	ands	r2, r1
 800259a:	0757      	lsls	r7, r2, #29
 800259c:	0252      	lsls	r2, r2, #9
 800259e:	4337      	orrs	r7, r6
 80025a0:	0b12      	lsrs	r2, r2, #12
 80025a2:	e09b      	b.n	80026dc <__aeabi_dsub+0x254>
 80025a4:	2e00      	cmp	r6, #0
 80025a6:	d000      	beq.n	80025aa <__aeabi_dsub+0x122>
 80025a8:	e0c5      	b.n	8002736 <__aeabi_dsub+0x2ae>
 80025aa:	1c6e      	adds	r6, r5, #1
 80025ac:	0576      	lsls	r6, r6, #21
 80025ae:	0d76      	lsrs	r6, r6, #21
 80025b0:	2e01      	cmp	r6, #1
 80025b2:	dc00      	bgt.n	80025b6 <__aeabi_dsub+0x12e>
 80025b4:	e148      	b.n	8002848 <__aeabi_dsub+0x3c0>
 80025b6:	4667      	mov	r7, ip
 80025b8:	1a86      	subs	r6, r0, r2
 80025ba:	1bcb      	subs	r3, r1, r7
 80025bc:	42b0      	cmp	r0, r6
 80025be:	41bf      	sbcs	r7, r7
 80025c0:	427f      	negs	r7, r7
 80025c2:	46b8      	mov	r8, r7
 80025c4:	001f      	movs	r7, r3
 80025c6:	4643      	mov	r3, r8
 80025c8:	1aff      	subs	r7, r7, r3
 80025ca:	003b      	movs	r3, r7
 80025cc:	46b8      	mov	r8, r7
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	d500      	bpl.n	80025d4 <__aeabi_dsub+0x14c>
 80025d2:	e15f      	b.n	8002894 <__aeabi_dsub+0x40c>
 80025d4:	4337      	orrs	r7, r6
 80025d6:	d19a      	bne.n	800250e <__aeabi_dsub+0x86>
 80025d8:	2200      	movs	r2, #0
 80025da:	2400      	movs	r4, #0
 80025dc:	2500      	movs	r5, #0
 80025de:	e079      	b.n	80026d4 <__aeabi_dsub+0x24c>
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	dc00      	bgt.n	80025e6 <__aeabi_dsub+0x15e>
 80025e4:	e0fa      	b.n	80027dc <__aeabi_dsub+0x354>
 80025e6:	2f00      	cmp	r7, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x164>
 80025ea:	e08d      	b.n	8002708 <__aeabi_dsub+0x280>
 80025ec:	4b78      	ldr	r3, [pc, #480]	; (80027d0 <__aeabi_dsub+0x348>)
 80025ee:	429d      	cmp	r5, r3
 80025f0:	d067      	beq.n	80026c2 <__aeabi_dsub+0x23a>
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	4667      	mov	r7, ip
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	431f      	orrs	r7, r3
 80025fa:	46bc      	mov	ip, r7
 80025fc:	2e38      	cmp	r6, #56	; 0x38
 80025fe:	dc00      	bgt.n	8002602 <__aeabi_dsub+0x17a>
 8002600:	e152      	b.n	80028a8 <__aeabi_dsub+0x420>
 8002602:	4663      	mov	r3, ip
 8002604:	4313      	orrs	r3, r2
 8002606:	1e5a      	subs	r2, r3, #1
 8002608:	4193      	sbcs	r3, r2
 800260a:	181e      	adds	r6, r3, r0
 800260c:	4286      	cmp	r6, r0
 800260e:	4180      	sbcs	r0, r0
 8002610:	4240      	negs	r0, r0
 8002612:	1809      	adds	r1, r1, r0
 8002614:	020b      	lsls	r3, r1, #8
 8002616:	d400      	bmi.n	800261a <__aeabi_dsub+0x192>
 8002618:	e0be      	b.n	8002798 <__aeabi_dsub+0x310>
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <__aeabi_dsub+0x348>)
 800261c:	3501      	adds	r5, #1
 800261e:	429d      	cmp	r5, r3
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x19c>
 8002622:	e0d2      	b.n	80027ca <__aeabi_dsub+0x342>
 8002624:	4a6b      	ldr	r2, [pc, #428]	; (80027d4 <__aeabi_dsub+0x34c>)
 8002626:	0873      	lsrs	r3, r6, #1
 8002628:	400a      	ands	r2, r1
 800262a:	2101      	movs	r1, #1
 800262c:	400e      	ands	r6, r1
 800262e:	431e      	orrs	r6, r3
 8002630:	0851      	lsrs	r1, r2, #1
 8002632:	07d3      	lsls	r3, r2, #31
 8002634:	2207      	movs	r2, #7
 8002636:	431e      	orrs	r6, r3
 8002638:	4032      	ands	r2, r6
 800263a:	e795      	b.n	8002568 <__aeabi_dsub+0xe0>
 800263c:	001e      	movs	r6, r3
 800263e:	4316      	orrs	r6, r2
 8002640:	d000      	beq.n	8002644 <__aeabi_dsub+0x1bc>
 8002642:	e745      	b.n	80024d0 <__aeabi_dsub+0x48>
 8002644:	e740      	b.n	80024c8 <__aeabi_dsub+0x40>
 8002646:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <__aeabi_dsub+0x348>)
 8002648:	429d      	cmp	r5, r3
 800264a:	d03a      	beq.n	80026c2 <__aeabi_dsub+0x23a>
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	4667      	mov	r7, ip
 8002650:	041b      	lsls	r3, r3, #16
 8002652:	431f      	orrs	r7, r3
 8002654:	46bc      	mov	ip, r7
 8002656:	2e38      	cmp	r6, #56	; 0x38
 8002658:	dd00      	ble.n	800265c <__aeabi_dsub+0x1d4>
 800265a:	e0eb      	b.n	8002834 <__aeabi_dsub+0x3ac>
 800265c:	2e1f      	cmp	r6, #31
 800265e:	dc00      	bgt.n	8002662 <__aeabi_dsub+0x1da>
 8002660:	e13a      	b.n	80028d8 <__aeabi_dsub+0x450>
 8002662:	0033      	movs	r3, r6
 8002664:	4667      	mov	r7, ip
 8002666:	3b20      	subs	r3, #32
 8002668:	40df      	lsrs	r7, r3
 800266a:	003b      	movs	r3, r7
 800266c:	2e20      	cmp	r6, #32
 800266e:	d005      	beq.n	800267c <__aeabi_dsub+0x1f4>
 8002670:	2740      	movs	r7, #64	; 0x40
 8002672:	1bbf      	subs	r7, r7, r6
 8002674:	4666      	mov	r6, ip
 8002676:	40be      	lsls	r6, r7
 8002678:	4332      	orrs	r2, r6
 800267a:	4690      	mov	r8, r2
 800267c:	4646      	mov	r6, r8
 800267e:	1e72      	subs	r2, r6, #1
 8002680:	4196      	sbcs	r6, r2
 8002682:	4333      	orrs	r3, r6
 8002684:	e0da      	b.n	800283c <__aeabi_dsub+0x3b4>
 8002686:	2b00      	cmp	r3, #0
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x204>
 800268a:	e214      	b.n	8002ab6 <__aeabi_dsub+0x62e>
 800268c:	4663      	mov	r3, ip
 800268e:	4313      	orrs	r3, r2
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x20c>
 8002692:	e168      	b.n	8002966 <__aeabi_dsub+0x4de>
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	074e      	lsls	r6, r1, #29
 8002698:	08c0      	lsrs	r0, r0, #3
 800269a:	08c9      	lsrs	r1, r1, #3
 800269c:	031b      	lsls	r3, r3, #12
 800269e:	4306      	orrs	r6, r0
 80026a0:	4219      	tst	r1, r3
 80026a2:	d008      	beq.n	80026b6 <__aeabi_dsub+0x22e>
 80026a4:	4660      	mov	r0, ip
 80026a6:	08c0      	lsrs	r0, r0, #3
 80026a8:	4218      	tst	r0, r3
 80026aa:	d104      	bne.n	80026b6 <__aeabi_dsub+0x22e>
 80026ac:	4663      	mov	r3, ip
 80026ae:	0001      	movs	r1, r0
 80026b0:	08d2      	lsrs	r2, r2, #3
 80026b2:	075e      	lsls	r6, r3, #29
 80026b4:	4316      	orrs	r6, r2
 80026b6:	00f3      	lsls	r3, r6, #3
 80026b8:	4699      	mov	r9, r3
 80026ba:	00c9      	lsls	r1, r1, #3
 80026bc:	0f72      	lsrs	r2, r6, #29
 80026be:	4d44      	ldr	r5, [pc, #272]	; (80027d0 <__aeabi_dsub+0x348>)
 80026c0:	4311      	orrs	r1, r2
 80026c2:	464b      	mov	r3, r9
 80026c4:	08de      	lsrs	r6, r3, #3
 80026c6:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <__aeabi_dsub+0x348>)
 80026c8:	074f      	lsls	r7, r1, #29
 80026ca:	4337      	orrs	r7, r6
 80026cc:	08ca      	lsrs	r2, r1, #3
 80026ce:	429d      	cmp	r5, r3
 80026d0:	d100      	bne.n	80026d4 <__aeabi_dsub+0x24c>
 80026d2:	e06e      	b.n	80027b2 <__aeabi_dsub+0x32a>
 80026d4:	0312      	lsls	r2, r2, #12
 80026d6:	056d      	lsls	r5, r5, #21
 80026d8:	0b12      	lsrs	r2, r2, #12
 80026da:	0d6d      	lsrs	r5, r5, #21
 80026dc:	2100      	movs	r1, #0
 80026de:	0312      	lsls	r2, r2, #12
 80026e0:	0b13      	lsrs	r3, r2, #12
 80026e2:	0d0a      	lsrs	r2, r1, #20
 80026e4:	0512      	lsls	r2, r2, #20
 80026e6:	431a      	orrs	r2, r3
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <__aeabi_dsub+0x350>)
 80026ea:	052d      	lsls	r5, r5, #20
 80026ec:	4013      	ands	r3, r2
 80026ee:	432b      	orrs	r3, r5
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	07e4      	lsls	r4, r4, #31
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	4323      	orrs	r3, r4
 80026f8:	0038      	movs	r0, r7
 80026fa:	0019      	movs	r1, r3
 80026fc:	bc3c      	pop	{r2, r3, r4, r5}
 80026fe:	4690      	mov	r8, r2
 8002700:	4699      	mov	r9, r3
 8002702:	46a2      	mov	sl, r4
 8002704:	46ab      	mov	fp, r5
 8002706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002708:	4663      	mov	r3, ip
 800270a:	4313      	orrs	r3, r2
 800270c:	d011      	beq.n	8002732 <__aeabi_dsub+0x2aa>
 800270e:	1e73      	subs	r3, r6, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d000      	beq.n	8002716 <__aeabi_dsub+0x28e>
 8002714:	e107      	b.n	8002926 <__aeabi_dsub+0x49e>
 8002716:	1886      	adds	r6, r0, r2
 8002718:	4286      	cmp	r6, r0
 800271a:	4180      	sbcs	r0, r0
 800271c:	4461      	add	r1, ip
 800271e:	4240      	negs	r0, r0
 8002720:	1809      	adds	r1, r1, r0
 8002722:	2501      	movs	r5, #1
 8002724:	020b      	lsls	r3, r1, #8
 8002726:	d537      	bpl.n	8002798 <__aeabi_dsub+0x310>
 8002728:	2502      	movs	r5, #2
 800272a:	e77b      	b.n	8002624 <__aeabi_dsub+0x19c>
 800272c:	003e      	movs	r6, r7
 800272e:	4661      	mov	r1, ip
 8002730:	4691      	mov	r9, r2
 8002732:	0035      	movs	r5, r6
 8002734:	e7c5      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002736:	465c      	mov	r4, fp
 8002738:	2d00      	cmp	r5, #0
 800273a:	d000      	beq.n	800273e <__aeabi_dsub+0x2b6>
 800273c:	e0e1      	b.n	8002902 <__aeabi_dsub+0x47a>
 800273e:	000b      	movs	r3, r1
 8002740:	4303      	orrs	r3, r0
 8002742:	d0f3      	beq.n	800272c <__aeabi_dsub+0x2a4>
 8002744:	1c73      	adds	r3, r6, #1
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x2c2>
 8002748:	e1ac      	b.n	8002aa4 <__aeabi_dsub+0x61c>
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <__aeabi_dsub+0x348>)
 800274c:	429f      	cmp	r7, r3
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x2ca>
 8002750:	e13a      	b.n	80029c8 <__aeabi_dsub+0x540>
 8002752:	43f3      	mvns	r3, r6
 8002754:	2b38      	cmp	r3, #56	; 0x38
 8002756:	dd00      	ble.n	800275a <__aeabi_dsub+0x2d2>
 8002758:	e16f      	b.n	8002a3a <__aeabi_dsub+0x5b2>
 800275a:	2b1f      	cmp	r3, #31
 800275c:	dd00      	ble.n	8002760 <__aeabi_dsub+0x2d8>
 800275e:	e18c      	b.n	8002a7a <__aeabi_dsub+0x5f2>
 8002760:	2520      	movs	r5, #32
 8002762:	000e      	movs	r6, r1
 8002764:	1aed      	subs	r5, r5, r3
 8002766:	40ae      	lsls	r6, r5
 8002768:	46b0      	mov	r8, r6
 800276a:	0006      	movs	r6, r0
 800276c:	46aa      	mov	sl, r5
 800276e:	40de      	lsrs	r6, r3
 8002770:	4645      	mov	r5, r8
 8002772:	4335      	orrs	r5, r6
 8002774:	002e      	movs	r6, r5
 8002776:	4655      	mov	r5, sl
 8002778:	40d9      	lsrs	r1, r3
 800277a:	40a8      	lsls	r0, r5
 800277c:	4663      	mov	r3, ip
 800277e:	1e45      	subs	r5, r0, #1
 8002780:	41a8      	sbcs	r0, r5
 8002782:	1a5b      	subs	r3, r3, r1
 8002784:	469c      	mov	ip, r3
 8002786:	4330      	orrs	r0, r6
 8002788:	1a16      	subs	r6, r2, r0
 800278a:	42b2      	cmp	r2, r6
 800278c:	4192      	sbcs	r2, r2
 800278e:	4663      	mov	r3, ip
 8002790:	4252      	negs	r2, r2
 8002792:	1a99      	subs	r1, r3, r2
 8002794:	003d      	movs	r5, r7
 8002796:	e6b4      	b.n	8002502 <__aeabi_dsub+0x7a>
 8002798:	2207      	movs	r2, #7
 800279a:	4032      	ands	r2, r6
 800279c:	2a00      	cmp	r2, #0
 800279e:	d000      	beq.n	80027a2 <__aeabi_dsub+0x31a>
 80027a0:	e6e4      	b.n	800256c <__aeabi_dsub+0xe4>
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <__aeabi_dsub+0x348>)
 80027a4:	08f6      	lsrs	r6, r6, #3
 80027a6:	074f      	lsls	r7, r1, #29
 80027a8:	4337      	orrs	r7, r6
 80027aa:	08ca      	lsrs	r2, r1, #3
 80027ac:	429d      	cmp	r5, r3
 80027ae:	d000      	beq.n	80027b2 <__aeabi_dsub+0x32a>
 80027b0:	e790      	b.n	80026d4 <__aeabi_dsub+0x24c>
 80027b2:	003b      	movs	r3, r7
 80027b4:	4313      	orrs	r3, r2
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x332>
 80027b8:	e1a6      	b.n	8002b08 <__aeabi_dsub+0x680>
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	031b      	lsls	r3, r3, #12
 80027be:	431a      	orrs	r2, r3
 80027c0:	0312      	lsls	r2, r2, #12
 80027c2:	0b12      	lsrs	r2, r2, #12
 80027c4:	4d02      	ldr	r5, [pc, #8]	; (80027d0 <__aeabi_dsub+0x348>)
 80027c6:	e789      	b.n	80026dc <__aeabi_dsub+0x254>
 80027c8:	0015      	movs	r5, r2
 80027ca:	2200      	movs	r2, #0
 80027cc:	2700      	movs	r7, #0
 80027ce:	e785      	b.n	80026dc <__aeabi_dsub+0x254>
 80027d0:	000007ff 	.word	0x000007ff
 80027d4:	ff7fffff 	.word	0xff7fffff
 80027d8:	800fffff 	.word	0x800fffff
 80027dc:	2e00      	cmp	r6, #0
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x35a>
 80027e0:	e0c7      	b.n	8002972 <__aeabi_dsub+0x4ea>
 80027e2:	1c6b      	adds	r3, r5, #1
 80027e4:	055e      	lsls	r6, r3, #21
 80027e6:	0d76      	lsrs	r6, r6, #21
 80027e8:	2e01      	cmp	r6, #1
 80027ea:	dc00      	bgt.n	80027ee <__aeabi_dsub+0x366>
 80027ec:	e0f0      	b.n	80029d0 <__aeabi_dsub+0x548>
 80027ee:	4dc8      	ldr	r5, [pc, #800]	; (8002b10 <__aeabi_dsub+0x688>)
 80027f0:	42ab      	cmp	r3, r5
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x36e>
 80027f4:	e0b9      	b.n	800296a <__aeabi_dsub+0x4e2>
 80027f6:	1885      	adds	r5, r0, r2
 80027f8:	000a      	movs	r2, r1
 80027fa:	4285      	cmp	r5, r0
 80027fc:	4189      	sbcs	r1, r1
 80027fe:	4462      	add	r2, ip
 8002800:	4249      	negs	r1, r1
 8002802:	1851      	adds	r1, r2, r1
 8002804:	2207      	movs	r2, #7
 8002806:	07ce      	lsls	r6, r1, #31
 8002808:	086d      	lsrs	r5, r5, #1
 800280a:	432e      	orrs	r6, r5
 800280c:	0849      	lsrs	r1, r1, #1
 800280e:	4032      	ands	r2, r6
 8002810:	001d      	movs	r5, r3
 8002812:	e6a9      	b.n	8002568 <__aeabi_dsub+0xe0>
 8002814:	49bf      	ldr	r1, [pc, #764]	; (8002b14 <__aeabi_dsub+0x68c>)
 8002816:	1aed      	subs	r5, r5, r3
 8002818:	4011      	ands	r1, r2
 800281a:	2207      	movs	r2, #7
 800281c:	4032      	ands	r2, r6
 800281e:	e6a3      	b.n	8002568 <__aeabi_dsub+0xe0>
 8002820:	0032      	movs	r2, r6
 8002822:	3828      	subs	r0, #40	; 0x28
 8002824:	4082      	lsls	r2, r0
 8002826:	2600      	movs	r6, #0
 8002828:	e686      	b.n	8002538 <__aeabi_dsub+0xb0>
 800282a:	0030      	movs	r0, r6
 800282c:	f000 fa80 	bl	8002d30 <__clzsi2>
 8002830:	3020      	adds	r0, #32
 8002832:	e673      	b.n	800251c <__aeabi_dsub+0x94>
 8002834:	4663      	mov	r3, ip
 8002836:	4313      	orrs	r3, r2
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	4193      	sbcs	r3, r2
 800283c:	1ac6      	subs	r6, r0, r3
 800283e:	42b0      	cmp	r0, r6
 8002840:	4180      	sbcs	r0, r0
 8002842:	4240      	negs	r0, r0
 8002844:	1a09      	subs	r1, r1, r0
 8002846:	e65c      	b.n	8002502 <__aeabi_dsub+0x7a>
 8002848:	000e      	movs	r6, r1
 800284a:	4667      	mov	r7, ip
 800284c:	4306      	orrs	r6, r0
 800284e:	4317      	orrs	r7, r2
 8002850:	2d00      	cmp	r5, #0
 8002852:	d15e      	bne.n	8002912 <__aeabi_dsub+0x48a>
 8002854:	2e00      	cmp	r6, #0
 8002856:	d000      	beq.n	800285a <__aeabi_dsub+0x3d2>
 8002858:	e0f3      	b.n	8002a42 <__aeabi_dsub+0x5ba>
 800285a:	2f00      	cmp	r7, #0
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x3d8>
 800285e:	e11e      	b.n	8002a9e <__aeabi_dsub+0x616>
 8002860:	465c      	mov	r4, fp
 8002862:	4661      	mov	r1, ip
 8002864:	4691      	mov	r9, r2
 8002866:	e72c      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002868:	4fa9      	ldr	r7, [pc, #676]	; (8002b10 <__aeabi_dsub+0x688>)
 800286a:	42be      	cmp	r6, r7
 800286c:	d07b      	beq.n	8002966 <__aeabi_dsub+0x4de>
 800286e:	001e      	movs	r6, r3
 8002870:	e6f1      	b.n	8002656 <__aeabi_dsub+0x1ce>
 8002872:	0010      	movs	r0, r2
 8002874:	3d1f      	subs	r5, #31
 8002876:	40e8      	lsrs	r0, r5
 8002878:	2b20      	cmp	r3, #32
 800287a:	d003      	beq.n	8002884 <__aeabi_dsub+0x3fc>
 800287c:	2140      	movs	r1, #64	; 0x40
 800287e:	1acb      	subs	r3, r1, r3
 8002880:	409a      	lsls	r2, r3
 8002882:	4316      	orrs	r6, r2
 8002884:	1e73      	subs	r3, r6, #1
 8002886:	419e      	sbcs	r6, r3
 8002888:	2207      	movs	r2, #7
 800288a:	4306      	orrs	r6, r0
 800288c:	4032      	ands	r2, r6
 800288e:	2100      	movs	r1, #0
 8002890:	2500      	movs	r5, #0
 8002892:	e783      	b.n	800279c <__aeabi_dsub+0x314>
 8002894:	1a16      	subs	r6, r2, r0
 8002896:	4663      	mov	r3, ip
 8002898:	42b2      	cmp	r2, r6
 800289a:	4180      	sbcs	r0, r0
 800289c:	1a59      	subs	r1, r3, r1
 800289e:	4240      	negs	r0, r0
 80028a0:	1a0b      	subs	r3, r1, r0
 80028a2:	4698      	mov	r8, r3
 80028a4:	465c      	mov	r4, fp
 80028a6:	e632      	b.n	800250e <__aeabi_dsub+0x86>
 80028a8:	2e1f      	cmp	r6, #31
 80028aa:	dd00      	ble.n	80028ae <__aeabi_dsub+0x426>
 80028ac:	e0ab      	b.n	8002a06 <__aeabi_dsub+0x57e>
 80028ae:	2720      	movs	r7, #32
 80028b0:	1bbb      	subs	r3, r7, r6
 80028b2:	469a      	mov	sl, r3
 80028b4:	4663      	mov	r3, ip
 80028b6:	4657      	mov	r7, sl
 80028b8:	40bb      	lsls	r3, r7
 80028ba:	4699      	mov	r9, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	464f      	mov	r7, r9
 80028c0:	40f3      	lsrs	r3, r6
 80028c2:	431f      	orrs	r7, r3
 80028c4:	003b      	movs	r3, r7
 80028c6:	4657      	mov	r7, sl
 80028c8:	40ba      	lsls	r2, r7
 80028ca:	1e57      	subs	r7, r2, #1
 80028cc:	41ba      	sbcs	r2, r7
 80028ce:	4313      	orrs	r3, r2
 80028d0:	4662      	mov	r2, ip
 80028d2:	40f2      	lsrs	r2, r6
 80028d4:	1889      	adds	r1, r1, r2
 80028d6:	e698      	b.n	800260a <__aeabi_dsub+0x182>
 80028d8:	2720      	movs	r7, #32
 80028da:	1bbb      	subs	r3, r7, r6
 80028dc:	469a      	mov	sl, r3
 80028de:	4663      	mov	r3, ip
 80028e0:	4657      	mov	r7, sl
 80028e2:	40bb      	lsls	r3, r7
 80028e4:	4699      	mov	r9, r3
 80028e6:	0013      	movs	r3, r2
 80028e8:	464f      	mov	r7, r9
 80028ea:	40f3      	lsrs	r3, r6
 80028ec:	431f      	orrs	r7, r3
 80028ee:	003b      	movs	r3, r7
 80028f0:	4657      	mov	r7, sl
 80028f2:	40ba      	lsls	r2, r7
 80028f4:	1e57      	subs	r7, r2, #1
 80028f6:	41ba      	sbcs	r2, r7
 80028f8:	4313      	orrs	r3, r2
 80028fa:	4662      	mov	r2, ip
 80028fc:	40f2      	lsrs	r2, r6
 80028fe:	1a89      	subs	r1, r1, r2
 8002900:	e79c      	b.n	800283c <__aeabi_dsub+0x3b4>
 8002902:	4b83      	ldr	r3, [pc, #524]	; (8002b10 <__aeabi_dsub+0x688>)
 8002904:	429f      	cmp	r7, r3
 8002906:	d05f      	beq.n	80029c8 <__aeabi_dsub+0x540>
 8002908:	2580      	movs	r5, #128	; 0x80
 800290a:	042d      	lsls	r5, r5, #16
 800290c:	4273      	negs	r3, r6
 800290e:	4329      	orrs	r1, r5
 8002910:	e720      	b.n	8002754 <__aeabi_dsub+0x2cc>
 8002912:	2e00      	cmp	r6, #0
 8002914:	d10c      	bne.n	8002930 <__aeabi_dsub+0x4a8>
 8002916:	2f00      	cmp	r7, #0
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x494>
 800291a:	e0d0      	b.n	8002abe <__aeabi_dsub+0x636>
 800291c:	465c      	mov	r4, fp
 800291e:	4661      	mov	r1, ip
 8002920:	4691      	mov	r9, r2
 8002922:	4d7b      	ldr	r5, [pc, #492]	; (8002b10 <__aeabi_dsub+0x688>)
 8002924:	e6cd      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002926:	4f7a      	ldr	r7, [pc, #488]	; (8002b10 <__aeabi_dsub+0x688>)
 8002928:	42be      	cmp	r6, r7
 800292a:	d01c      	beq.n	8002966 <__aeabi_dsub+0x4de>
 800292c:	001e      	movs	r6, r3
 800292e:	e665      	b.n	80025fc <__aeabi_dsub+0x174>
 8002930:	2f00      	cmp	r7, #0
 8002932:	d018      	beq.n	8002966 <__aeabi_dsub+0x4de>
 8002934:	08c0      	lsrs	r0, r0, #3
 8002936:	074e      	lsls	r6, r1, #29
 8002938:	4306      	orrs	r6, r0
 800293a:	2080      	movs	r0, #128	; 0x80
 800293c:	08c9      	lsrs	r1, r1, #3
 800293e:	0300      	lsls	r0, r0, #12
 8002940:	4201      	tst	r1, r0
 8002942:	d008      	beq.n	8002956 <__aeabi_dsub+0x4ce>
 8002944:	4663      	mov	r3, ip
 8002946:	08dc      	lsrs	r4, r3, #3
 8002948:	4204      	tst	r4, r0
 800294a:	d104      	bne.n	8002956 <__aeabi_dsub+0x4ce>
 800294c:	0021      	movs	r1, r4
 800294e:	46da      	mov	sl, fp
 8002950:	08d2      	lsrs	r2, r2, #3
 8002952:	075e      	lsls	r6, r3, #29
 8002954:	4316      	orrs	r6, r2
 8002956:	00f3      	lsls	r3, r6, #3
 8002958:	4699      	mov	r9, r3
 800295a:	2401      	movs	r4, #1
 800295c:	4653      	mov	r3, sl
 800295e:	00c9      	lsls	r1, r1, #3
 8002960:	0f72      	lsrs	r2, r6, #29
 8002962:	4311      	orrs	r1, r2
 8002964:	401c      	ands	r4, r3
 8002966:	4d6a      	ldr	r5, [pc, #424]	; (8002b10 <__aeabi_dsub+0x688>)
 8002968:	e6ab      	b.n	80026c2 <__aeabi_dsub+0x23a>
 800296a:	001d      	movs	r5, r3
 800296c:	2200      	movs	r2, #0
 800296e:	2700      	movs	r7, #0
 8002970:	e6b4      	b.n	80026dc <__aeabi_dsub+0x254>
 8002972:	2d00      	cmp	r5, #0
 8002974:	d159      	bne.n	8002a2a <__aeabi_dsub+0x5a2>
 8002976:	000b      	movs	r3, r1
 8002978:	4303      	orrs	r3, r0
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x4f6>
 800297c:	e6d6      	b.n	800272c <__aeabi_dsub+0x2a4>
 800297e:	1c73      	adds	r3, r6, #1
 8002980:	d100      	bne.n	8002984 <__aeabi_dsub+0x4fc>
 8002982:	e0b2      	b.n	8002aea <__aeabi_dsub+0x662>
 8002984:	4b62      	ldr	r3, [pc, #392]	; (8002b10 <__aeabi_dsub+0x688>)
 8002986:	429f      	cmp	r7, r3
 8002988:	d01e      	beq.n	80029c8 <__aeabi_dsub+0x540>
 800298a:	43f3      	mvns	r3, r6
 800298c:	2b38      	cmp	r3, #56	; 0x38
 800298e:	dc6f      	bgt.n	8002a70 <__aeabi_dsub+0x5e8>
 8002990:	2b1f      	cmp	r3, #31
 8002992:	dd00      	ble.n	8002996 <__aeabi_dsub+0x50e>
 8002994:	e097      	b.n	8002ac6 <__aeabi_dsub+0x63e>
 8002996:	2520      	movs	r5, #32
 8002998:	000e      	movs	r6, r1
 800299a:	1aed      	subs	r5, r5, r3
 800299c:	40ae      	lsls	r6, r5
 800299e:	46b0      	mov	r8, r6
 80029a0:	0006      	movs	r6, r0
 80029a2:	46aa      	mov	sl, r5
 80029a4:	40de      	lsrs	r6, r3
 80029a6:	4645      	mov	r5, r8
 80029a8:	4335      	orrs	r5, r6
 80029aa:	002e      	movs	r6, r5
 80029ac:	4655      	mov	r5, sl
 80029ae:	40a8      	lsls	r0, r5
 80029b0:	40d9      	lsrs	r1, r3
 80029b2:	1e45      	subs	r5, r0, #1
 80029b4:	41a8      	sbcs	r0, r5
 80029b6:	448c      	add	ip, r1
 80029b8:	4306      	orrs	r6, r0
 80029ba:	18b6      	adds	r6, r6, r2
 80029bc:	4296      	cmp	r6, r2
 80029be:	4192      	sbcs	r2, r2
 80029c0:	4251      	negs	r1, r2
 80029c2:	4461      	add	r1, ip
 80029c4:	003d      	movs	r5, r7
 80029c6:	e625      	b.n	8002614 <__aeabi_dsub+0x18c>
 80029c8:	003d      	movs	r5, r7
 80029ca:	4661      	mov	r1, ip
 80029cc:	4691      	mov	r9, r2
 80029ce:	e678      	b.n	80026c2 <__aeabi_dsub+0x23a>
 80029d0:	000b      	movs	r3, r1
 80029d2:	4303      	orrs	r3, r0
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x552>
 80029d8:	e655      	b.n	8002686 <__aeabi_dsub+0x1fe>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f5      	beq.n	80029ca <__aeabi_dsub+0x542>
 80029de:	4663      	mov	r3, ip
 80029e0:	4313      	orrs	r3, r2
 80029e2:	d100      	bne.n	80029e6 <__aeabi_dsub+0x55e>
 80029e4:	e66d      	b.n	80026c2 <__aeabi_dsub+0x23a>
 80029e6:	1886      	adds	r6, r0, r2
 80029e8:	4286      	cmp	r6, r0
 80029ea:	4180      	sbcs	r0, r0
 80029ec:	4461      	add	r1, ip
 80029ee:	4240      	negs	r0, r0
 80029f0:	1809      	adds	r1, r1, r0
 80029f2:	2200      	movs	r2, #0
 80029f4:	020b      	lsls	r3, r1, #8
 80029f6:	d400      	bmi.n	80029fa <__aeabi_dsub+0x572>
 80029f8:	e6d0      	b.n	800279c <__aeabi_dsub+0x314>
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <__aeabi_dsub+0x68c>)
 80029fc:	3501      	adds	r5, #1
 80029fe:	4019      	ands	r1, r3
 8002a00:	e5b2      	b.n	8002568 <__aeabi_dsub+0xe0>
 8002a02:	46b1      	mov	r9, r6
 8002a04:	e65d      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002a06:	0033      	movs	r3, r6
 8002a08:	4667      	mov	r7, ip
 8002a0a:	3b20      	subs	r3, #32
 8002a0c:	40df      	lsrs	r7, r3
 8002a0e:	003b      	movs	r3, r7
 8002a10:	2e20      	cmp	r6, #32
 8002a12:	d005      	beq.n	8002a20 <__aeabi_dsub+0x598>
 8002a14:	2740      	movs	r7, #64	; 0x40
 8002a16:	1bbf      	subs	r7, r7, r6
 8002a18:	4666      	mov	r6, ip
 8002a1a:	40be      	lsls	r6, r7
 8002a1c:	4332      	orrs	r2, r6
 8002a1e:	4690      	mov	r8, r2
 8002a20:	4646      	mov	r6, r8
 8002a22:	1e72      	subs	r2, r6, #1
 8002a24:	4196      	sbcs	r6, r2
 8002a26:	4333      	orrs	r3, r6
 8002a28:	e5ef      	b.n	800260a <__aeabi_dsub+0x182>
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <__aeabi_dsub+0x688>)
 8002a2c:	429f      	cmp	r7, r3
 8002a2e:	d0cb      	beq.n	80029c8 <__aeabi_dsub+0x540>
 8002a30:	2580      	movs	r5, #128	; 0x80
 8002a32:	042d      	lsls	r5, r5, #16
 8002a34:	4273      	negs	r3, r6
 8002a36:	4329      	orrs	r1, r5
 8002a38:	e7a8      	b.n	800298c <__aeabi_dsub+0x504>
 8002a3a:	4308      	orrs	r0, r1
 8002a3c:	1e41      	subs	r1, r0, #1
 8002a3e:	4188      	sbcs	r0, r1
 8002a40:	e6a2      	b.n	8002788 <__aeabi_dsub+0x300>
 8002a42:	2f00      	cmp	r7, #0
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x5c0>
 8002a46:	e63c      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002a48:	4663      	mov	r3, ip
 8002a4a:	1a86      	subs	r6, r0, r2
 8002a4c:	1acf      	subs	r7, r1, r3
 8002a4e:	42b0      	cmp	r0, r6
 8002a50:	419b      	sbcs	r3, r3
 8002a52:	425b      	negs	r3, r3
 8002a54:	1afb      	subs	r3, r7, r3
 8002a56:	4698      	mov	r8, r3
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	d54e      	bpl.n	8002afa <__aeabi_dsub+0x672>
 8002a5c:	1a16      	subs	r6, r2, r0
 8002a5e:	4663      	mov	r3, ip
 8002a60:	42b2      	cmp	r2, r6
 8002a62:	4192      	sbcs	r2, r2
 8002a64:	1a59      	subs	r1, r3, r1
 8002a66:	4252      	negs	r2, r2
 8002a68:	1a89      	subs	r1, r1, r2
 8002a6a:	465c      	mov	r4, fp
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	e57b      	b.n	8002568 <__aeabi_dsub+0xe0>
 8002a70:	4301      	orrs	r1, r0
 8002a72:	000e      	movs	r6, r1
 8002a74:	1e71      	subs	r1, r6, #1
 8002a76:	418e      	sbcs	r6, r1
 8002a78:	e79f      	b.n	80029ba <__aeabi_dsub+0x532>
 8002a7a:	001d      	movs	r5, r3
 8002a7c:	000e      	movs	r6, r1
 8002a7e:	3d20      	subs	r5, #32
 8002a80:	40ee      	lsrs	r6, r5
 8002a82:	46b0      	mov	r8, r6
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d004      	beq.n	8002a92 <__aeabi_dsub+0x60a>
 8002a88:	2540      	movs	r5, #64	; 0x40
 8002a8a:	1aeb      	subs	r3, r5, r3
 8002a8c:	4099      	lsls	r1, r3
 8002a8e:	4308      	orrs	r0, r1
 8002a90:	4681      	mov	r9, r0
 8002a92:	4648      	mov	r0, r9
 8002a94:	4643      	mov	r3, r8
 8002a96:	1e41      	subs	r1, r0, #1
 8002a98:	4188      	sbcs	r0, r1
 8002a9a:	4318      	orrs	r0, r3
 8002a9c:	e674      	b.n	8002788 <__aeabi_dsub+0x300>
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	e617      	b.n	80026d4 <__aeabi_dsub+0x24c>
 8002aa4:	1a16      	subs	r6, r2, r0
 8002aa6:	4663      	mov	r3, ip
 8002aa8:	42b2      	cmp	r2, r6
 8002aaa:	4192      	sbcs	r2, r2
 8002aac:	1a59      	subs	r1, r3, r1
 8002aae:	4252      	negs	r2, r2
 8002ab0:	1a89      	subs	r1, r1, r2
 8002ab2:	003d      	movs	r5, r7
 8002ab4:	e525      	b.n	8002502 <__aeabi_dsub+0x7a>
 8002ab6:	4661      	mov	r1, ip
 8002ab8:	4691      	mov	r9, r2
 8002aba:	4d15      	ldr	r5, [pc, #84]	; (8002b10 <__aeabi_dsub+0x688>)
 8002abc:	e601      	b.n	80026c2 <__aeabi_dsub+0x23a>
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	0312      	lsls	r2, r2, #12
 8002ac4:	e679      	b.n	80027ba <__aeabi_dsub+0x332>
 8002ac6:	001d      	movs	r5, r3
 8002ac8:	000e      	movs	r6, r1
 8002aca:	3d20      	subs	r5, #32
 8002acc:	40ee      	lsrs	r6, r5
 8002ace:	46b0      	mov	r8, r6
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d004      	beq.n	8002ade <__aeabi_dsub+0x656>
 8002ad4:	2540      	movs	r5, #64	; 0x40
 8002ad6:	1aeb      	subs	r3, r5, r3
 8002ad8:	4099      	lsls	r1, r3
 8002ada:	4308      	orrs	r0, r1
 8002adc:	4681      	mov	r9, r0
 8002ade:	464e      	mov	r6, r9
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	1e71      	subs	r1, r6, #1
 8002ae4:	418e      	sbcs	r6, r1
 8002ae6:	431e      	orrs	r6, r3
 8002ae8:	e767      	b.n	80029ba <__aeabi_dsub+0x532>
 8002aea:	1886      	adds	r6, r0, r2
 8002aec:	4296      	cmp	r6, r2
 8002aee:	419b      	sbcs	r3, r3
 8002af0:	4461      	add	r1, ip
 8002af2:	425b      	negs	r3, r3
 8002af4:	18c9      	adds	r1, r1, r3
 8002af6:	003d      	movs	r5, r7
 8002af8:	e58c      	b.n	8002614 <__aeabi_dsub+0x18c>
 8002afa:	4647      	mov	r7, r8
 8002afc:	4337      	orrs	r7, r6
 8002afe:	d0ce      	beq.n	8002a9e <__aeabi_dsub+0x616>
 8002b00:	2207      	movs	r2, #7
 8002b02:	4641      	mov	r1, r8
 8002b04:	4032      	ands	r2, r6
 8002b06:	e649      	b.n	800279c <__aeabi_dsub+0x314>
 8002b08:	2700      	movs	r7, #0
 8002b0a:	003a      	movs	r2, r7
 8002b0c:	e5e6      	b.n	80026dc <__aeabi_dsub+0x254>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	ff7fffff 	.word	0xff7fffff

08002b18 <__aeabi_dcmpun>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4e0c      	ldr	r6, [pc, #48]	; (8002b4c <__aeabi_dcmpun+0x34>)
 8002b1c:	030d      	lsls	r5, r1, #12
 8002b1e:	031c      	lsls	r4, r3, #12
 8002b20:	0049      	lsls	r1, r1, #1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	0b2d      	lsrs	r5, r5, #12
 8002b26:	0d49      	lsrs	r1, r1, #21
 8002b28:	0b24      	lsrs	r4, r4, #12
 8002b2a:	0d5b      	lsrs	r3, r3, #21
 8002b2c:	42b1      	cmp	r1, r6
 8002b2e:	d008      	beq.n	8002b42 <__aeabi_dcmpun+0x2a>
 8002b30:	4906      	ldr	r1, [pc, #24]	; (8002b4c <__aeabi_dcmpun+0x34>)
 8002b32:	2000      	movs	r0, #0
 8002b34:	428b      	cmp	r3, r1
 8002b36:	d103      	bne.n	8002b40 <__aeabi_dcmpun+0x28>
 8002b38:	4314      	orrs	r4, r2
 8002b3a:	0020      	movs	r0, r4
 8002b3c:	1e44      	subs	r4, r0, #1
 8002b3e:	41a0      	sbcs	r0, r4
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
 8002b42:	4305      	orrs	r5, r0
 8002b44:	2001      	movs	r0, #1
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	d1fa      	bne.n	8002b40 <__aeabi_dcmpun+0x28>
 8002b4a:	e7f1      	b.n	8002b30 <__aeabi_dcmpun+0x18>
 8002b4c:	000007ff 	.word	0x000007ff

08002b50 <__aeabi_i2d>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d02d      	beq.n	8002bb2 <__aeabi_i2d+0x62>
 8002b56:	17c3      	asrs	r3, r0, #31
 8002b58:	18c5      	adds	r5, r0, r3
 8002b5a:	405d      	eors	r5, r3
 8002b5c:	0fc4      	lsrs	r4, r0, #31
 8002b5e:	0028      	movs	r0, r5
 8002b60:	f000 f8e6 	bl	8002d30 <__clzsi2>
 8002b64:	4b15      	ldr	r3, [pc, #84]	; (8002bbc <__aeabi_i2d+0x6c>)
 8002b66:	1a1b      	subs	r3, r3, r0
 8002b68:	055b      	lsls	r3, r3, #21
 8002b6a:	0d5b      	lsrs	r3, r3, #21
 8002b6c:	280a      	cmp	r0, #10
 8002b6e:	dd15      	ble.n	8002b9c <__aeabi_i2d+0x4c>
 8002b70:	380b      	subs	r0, #11
 8002b72:	4085      	lsls	r5, r0
 8002b74:	2200      	movs	r2, #0
 8002b76:	032d      	lsls	r5, r5, #12
 8002b78:	0b2d      	lsrs	r5, r5, #12
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	0010      	movs	r0, r2
 8002b7e:	032d      	lsls	r5, r5, #12
 8002b80:	0d0a      	lsrs	r2, r1, #20
 8002b82:	0b2d      	lsrs	r5, r5, #12
 8002b84:	0512      	lsls	r2, r2, #20
 8002b86:	432a      	orrs	r2, r5
 8002b88:	4d0d      	ldr	r5, [pc, #52]	; (8002bc0 <__aeabi_i2d+0x70>)
 8002b8a:	051b      	lsls	r3, r3, #20
 8002b8c:	402a      	ands	r2, r5
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	07e4      	lsls	r4, r4, #31
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	4323      	orrs	r3, r4
 8002b98:	0019      	movs	r1, r3
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	0029      	movs	r1, r5
 8002ba0:	3215      	adds	r2, #21
 8002ba2:	4091      	lsls	r1, r2
 8002ba4:	000a      	movs	r2, r1
 8002ba6:	210b      	movs	r1, #11
 8002ba8:	1a08      	subs	r0, r1, r0
 8002baa:	40c5      	lsrs	r5, r0
 8002bac:	032d      	lsls	r5, r5, #12
 8002bae:	0b2d      	lsrs	r5, r5, #12
 8002bb0:	e7e3      	b.n	8002b7a <__aeabi_i2d+0x2a>
 8002bb2:	2400      	movs	r4, #0
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	e7de      	b.n	8002b7a <__aeabi_i2d+0x2a>
 8002bbc:	0000041e 	.word	0x0000041e
 8002bc0:	800fffff 	.word	0x800fffff

08002bc4 <__aeabi_ui2d>:
 8002bc4:	b510      	push	{r4, lr}
 8002bc6:	1e04      	subs	r4, r0, #0
 8002bc8:	d025      	beq.n	8002c16 <__aeabi_ui2d+0x52>
 8002bca:	f000 f8b1 	bl	8002d30 <__clzsi2>
 8002bce:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <__aeabi_ui2d+0x5c>)
 8002bd0:	1a1b      	subs	r3, r3, r0
 8002bd2:	055b      	lsls	r3, r3, #21
 8002bd4:	0d5b      	lsrs	r3, r3, #21
 8002bd6:	280a      	cmp	r0, #10
 8002bd8:	dd12      	ble.n	8002c00 <__aeabi_ui2d+0x3c>
 8002bda:	380b      	subs	r0, #11
 8002bdc:	4084      	lsls	r4, r0
 8002bde:	2200      	movs	r2, #0
 8002be0:	0324      	lsls	r4, r4, #12
 8002be2:	0b24      	lsrs	r4, r4, #12
 8002be4:	2100      	movs	r1, #0
 8002be6:	0010      	movs	r0, r2
 8002be8:	0324      	lsls	r4, r4, #12
 8002bea:	0d0a      	lsrs	r2, r1, #20
 8002bec:	0b24      	lsrs	r4, r4, #12
 8002bee:	0512      	lsls	r2, r2, #20
 8002bf0:	4322      	orrs	r2, r4
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__aeabi_ui2d+0x60>)
 8002bf4:	051b      	lsls	r3, r3, #20
 8002bf6:	4022      	ands	r2, r4
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	0859      	lsrs	r1, r3, #1
 8002bfe:	bd10      	pop	{r4, pc}
 8002c00:	0002      	movs	r2, r0
 8002c02:	0021      	movs	r1, r4
 8002c04:	3215      	adds	r2, #21
 8002c06:	4091      	lsls	r1, r2
 8002c08:	000a      	movs	r2, r1
 8002c0a:	210b      	movs	r1, #11
 8002c0c:	1a08      	subs	r0, r1, r0
 8002c0e:	40c4      	lsrs	r4, r0
 8002c10:	0324      	lsls	r4, r4, #12
 8002c12:	0b24      	lsrs	r4, r4, #12
 8002c14:	e7e6      	b.n	8002be4 <__aeabi_ui2d+0x20>
 8002c16:	2300      	movs	r3, #0
 8002c18:	2400      	movs	r4, #0
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	e7e2      	b.n	8002be4 <__aeabi_ui2d+0x20>
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	0000041e 	.word	0x0000041e
 8002c24:	800fffff 	.word	0x800fffff

08002c28 <__aeabi_d2f>:
 8002c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c2a:	004c      	lsls	r4, r1, #1
 8002c2c:	0d64      	lsrs	r4, r4, #21
 8002c2e:	030b      	lsls	r3, r1, #12
 8002c30:	1c62      	adds	r2, r4, #1
 8002c32:	0a5b      	lsrs	r3, r3, #9
 8002c34:	0f46      	lsrs	r6, r0, #29
 8002c36:	0552      	lsls	r2, r2, #21
 8002c38:	0fc9      	lsrs	r1, r1, #31
 8002c3a:	431e      	orrs	r6, r3
 8002c3c:	00c5      	lsls	r5, r0, #3
 8002c3e:	0d52      	lsrs	r2, r2, #21
 8002c40:	2a01      	cmp	r2, #1
 8002c42:	dd29      	ble.n	8002c98 <__aeabi_d2f+0x70>
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <__aeabi_d2f+0xfc>)
 8002c46:	18e7      	adds	r7, r4, r3
 8002c48:	2ffe      	cmp	r7, #254	; 0xfe
 8002c4a:	dc1c      	bgt.n	8002c86 <__aeabi_d2f+0x5e>
 8002c4c:	2f00      	cmp	r7, #0
 8002c4e:	dd3b      	ble.n	8002cc8 <__aeabi_d2f+0xa0>
 8002c50:	0180      	lsls	r0, r0, #6
 8002c52:	1e43      	subs	r3, r0, #1
 8002c54:	4198      	sbcs	r0, r3
 8002c56:	2207      	movs	r2, #7
 8002c58:	00f3      	lsls	r3, r6, #3
 8002c5a:	0f6d      	lsrs	r5, r5, #29
 8002c5c:	4303      	orrs	r3, r0
 8002c5e:	432b      	orrs	r3, r5
 8002c60:	401a      	ands	r2, r3
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d004      	beq.n	8002c70 <__aeabi_d2f+0x48>
 8002c66:	220f      	movs	r2, #15
 8002c68:	401a      	ands	r2, r3
 8002c6a:	2a04      	cmp	r2, #4
 8002c6c:	d000      	beq.n	8002c70 <__aeabi_d2f+0x48>
 8002c6e:	3304      	adds	r3, #4
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	04d2      	lsls	r2, r2, #19
 8002c74:	401a      	ands	r2, r3
 8002c76:	d024      	beq.n	8002cc2 <__aeabi_d2f+0x9a>
 8002c78:	3701      	adds	r7, #1
 8002c7a:	b2fa      	uxtb	r2, r7
 8002c7c:	2fff      	cmp	r7, #255	; 0xff
 8002c7e:	d002      	beq.n	8002c86 <__aeabi_d2f+0x5e>
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	0a58      	lsrs	r0, r3, #9
 8002c84:	e001      	b.n	8002c8a <__aeabi_d2f+0x62>
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	2000      	movs	r0, #0
 8002c8a:	0240      	lsls	r0, r0, #9
 8002c8c:	05d2      	lsls	r2, r2, #23
 8002c8e:	0a40      	lsrs	r0, r0, #9
 8002c90:	07c9      	lsls	r1, r1, #31
 8002c92:	4310      	orrs	r0, r2
 8002c94:	4308      	orrs	r0, r1
 8002c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c98:	4335      	orrs	r5, r6
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d104      	bne.n	8002ca8 <__aeabi_d2f+0x80>
 8002c9e:	2d00      	cmp	r5, #0
 8002ca0:	d10a      	bne.n	8002cb8 <__aeabi_d2f+0x90>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e7f0      	b.n	8002c8a <__aeabi_d2f+0x62>
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	d0ec      	beq.n	8002c86 <__aeabi_d2f+0x5e>
 8002cac:	2080      	movs	r0, #128	; 0x80
 8002cae:	03c0      	lsls	r0, r0, #15
 8002cb0:	4330      	orrs	r0, r6
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	e7e9      	b.n	8002c8a <__aeabi_d2f+0x62>
 8002cb6:	2400      	movs	r4, #0
 8002cb8:	2300      	movs	r3, #0
 8002cba:	025b      	lsls	r3, r3, #9
 8002cbc:	0a58      	lsrs	r0, r3, #9
 8002cbe:	b2e2      	uxtb	r2, r4
 8002cc0:	e7e3      	b.n	8002c8a <__aeabi_d2f+0x62>
 8002cc2:	08db      	lsrs	r3, r3, #3
 8002cc4:	003c      	movs	r4, r7
 8002cc6:	e7f8      	b.n	8002cba <__aeabi_d2f+0x92>
 8002cc8:	003b      	movs	r3, r7
 8002cca:	3317      	adds	r3, #23
 8002ccc:	dbf3      	blt.n	8002cb6 <__aeabi_d2f+0x8e>
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	4333      	orrs	r3, r6
 8002cd4:	261e      	movs	r6, #30
 8002cd6:	1bf6      	subs	r6, r6, r7
 8002cd8:	2e1f      	cmp	r6, #31
 8002cda:	dd14      	ble.n	8002d06 <__aeabi_d2f+0xde>
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4252      	negs	r2, r2
 8002ce0:	1bd7      	subs	r7, r2, r7
 8002ce2:	001a      	movs	r2, r3
 8002ce4:	40fa      	lsrs	r2, r7
 8002ce6:	0017      	movs	r7, r2
 8002ce8:	2e20      	cmp	r6, #32
 8002cea:	d004      	beq.n	8002cf6 <__aeabi_d2f+0xce>
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <__aeabi_d2f+0x100>)
 8002cee:	4694      	mov	ip, r2
 8002cf0:	4464      	add	r4, ip
 8002cf2:	40a3      	lsls	r3, r4
 8002cf4:	431d      	orrs	r5, r3
 8002cf6:	002b      	movs	r3, r5
 8002cf8:	1e5d      	subs	r5, r3, #1
 8002cfa:	41ab      	sbcs	r3, r5
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	433b      	orrs	r3, r7
 8002d00:	401a      	ands	r2, r3
 8002d02:	2700      	movs	r7, #0
 8002d04:	e7ad      	b.n	8002c62 <__aeabi_d2f+0x3a>
 8002d06:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <__aeabi_d2f+0x104>)
 8002d08:	0028      	movs	r0, r5
 8002d0a:	18a2      	adds	r2, r4, r2
 8002d0c:	4095      	lsls	r5, r2
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	1e6c      	subs	r4, r5, #1
 8002d12:	41a5      	sbcs	r5, r4
 8002d14:	40f0      	lsrs	r0, r6
 8002d16:	2207      	movs	r2, #7
 8002d18:	432b      	orrs	r3, r5
 8002d1a:	4303      	orrs	r3, r0
 8002d1c:	401a      	ands	r2, r3
 8002d1e:	2700      	movs	r7, #0
 8002d20:	e79f      	b.n	8002c62 <__aeabi_d2f+0x3a>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	fffffc80 	.word	0xfffffc80
 8002d28:	fffffca2 	.word	0xfffffca2
 8002d2c:	fffffc82 	.word	0xfffffc82

08002d30 <__clzsi2>:
 8002d30:	211c      	movs	r1, #28
 8002d32:	2301      	movs	r3, #1
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	4298      	cmp	r0, r3
 8002d38:	d301      	bcc.n	8002d3e <__clzsi2+0xe>
 8002d3a:	0c00      	lsrs	r0, r0, #16
 8002d3c:	3910      	subs	r1, #16
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	4298      	cmp	r0, r3
 8002d42:	d301      	bcc.n	8002d48 <__clzsi2+0x18>
 8002d44:	0a00      	lsrs	r0, r0, #8
 8002d46:	3908      	subs	r1, #8
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	4298      	cmp	r0, r3
 8002d4c:	d301      	bcc.n	8002d52 <__clzsi2+0x22>
 8002d4e:	0900      	lsrs	r0, r0, #4
 8002d50:	3904      	subs	r1, #4
 8002d52:	a202      	add	r2, pc, #8	; (adr r2, 8002d5c <__clzsi2+0x2c>)
 8002d54:	5c10      	ldrb	r0, [r2, r0]
 8002d56:	1840      	adds	r0, r0, r1
 8002d58:	4770      	bx	lr
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	02020304 	.word	0x02020304
 8002d60:	01010101 	.word	0x01010101
	...

08002d6c <__clzdi2>:
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	d103      	bne.n	8002d7a <__clzdi2+0xe>
 8002d72:	f7ff ffdd 	bl	8002d30 <__clzsi2>
 8002d76:	3020      	adds	r0, #32
 8002d78:	e002      	b.n	8002d80 <__clzdi2+0x14>
 8002d7a:	1c08      	adds	r0, r1, #0
 8002d7c:	f7ff ffd8 	bl	8002d30 <__clzsi2>
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)

08002d84 <pi_controller>:
		.kd = KD / DT_SAMPLE_TIME,
};


uint16_t pi_controller(uint8_t process_variable)
{
 8002d84:	b570      	push	{r4, r5, r6, lr}


	//uint16_t bias = min_pwm_val;
	float error = setpoint_humidity - process_variable;
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <pi_controller+0xb0>)
 8002d88:	681c      	ldr	r4, [r3, #0]
 8002d8a:	f7fe f95b 	bl	8001044 <__aeabi_i2f>
 8002d8e:	1c01      	adds	r1, r0, #0
 8002d90:	1c20      	adds	r0, r4, #0
 8002d92:	f7fd ff73 	bl	8000c7c <__aeabi_fsub>
 8002d96:	1c05      	adds	r5, r0, #0
	error_integral += error;
 8002d98:	4e27      	ldr	r6, [pc, #156]	; (8002e38 <pi_controller+0xb4>)
 8002d9a:	6831      	ldr	r1, [r6, #0]
 8002d9c:	f7fd fbdc 	bl	8000558 <__aeabi_fadd>
 8002da0:	1c04      	adds	r4, r0, #0
 8002da2:	6030      	str	r0, [r6, #0]

	//Integralfehler begrenzen (Anti-Windup)
	if(error_integral > max_error_integral){
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <pi_controller+0xb8>)
 8002da6:	881e      	ldrh	r6, [r3, #0]
 8002da8:	0030      	movs	r0, r6
 8002daa:	f7fe f94b 	bl	8001044 <__aeabi_i2f>
 8002dae:	1c01      	adds	r1, r0, #0
 8002db0:	1c20      	adds	r0, r4, #0
 8002db2:	f7fd fa99 	bl	80002e8 <__aeabi_fcmpgt>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d028      	beq.n	8002e0c <pi_controller+0x88>
		error_integral = max_error_integral;
 8002dba:	0030      	movs	r0, r6
 8002dbc:	f7fe f98c 	bl	80010d8 <__aeabi_ui2f>
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <pi_controller+0xb4>)
 8002dc2:	6018      	str	r0, [r3, #0]
	}
	else if(error_integral < min_error_integral ){
		error_integral = min_error_integral;
	}

	uint16_t pi_output = ((pi_param.kp * error) + (pi_param.ki * error_integral)) * (-1);
 8002dc4:	4c1e      	ldr	r4, [pc, #120]	; (8002e40 <pi_controller+0xbc>)
 8002dc6:	7820      	ldrb	r0, [r4, #0]
 8002dc8:	f7fe f93c 	bl	8001044 <__aeabi_i2f>
 8002dcc:	1c29      	adds	r1, r5, #0
 8002dce:	f7fd fe23 	bl	8000a18 <__aeabi_fmul>
 8002dd2:	1c05      	adds	r5, r0, #0
 8002dd4:	7860      	ldrb	r0, [r4, #1]
 8002dd6:	f7fe f935 	bl	8001044 <__aeabi_i2f>
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <pi_controller+0xb4>)
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	f7fd fe1b 	bl	8000a18 <__aeabi_fmul>
 8002de2:	1c01      	adds	r1, r0, #0
 8002de4:	1c28      	adds	r0, r5, #0
 8002de6:	f7fd fbb7 	bl	8000558 <__aeabi_fadd>
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	469c      	mov	ip, r3
 8002df0:	4460      	add	r0, ip
 8002df2:	f7fd fad7 	bl	80003a4 <__aeabi_f2uiz>
 8002df6:	b283      	uxth	r3, r0
	//pi_output += bias;
	//Stellgröße (PWM) begrenzen
	if(pi_output > htim2.Init.Period){
 8002df8:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <pi_controller+0xc0>)
 8002dfa:	68d0      	ldr	r0, [r2, #12]
 8002dfc:	4283      	cmp	r3, r0
 8002dfe:	d816      	bhi.n	8002e2e <pi_controller+0xaa>
		pi_output = htim2.Init.Period;
	}
	else if(pi_output < min_pwm_val){
 8002e00:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <pi_controller+0xc4>)
 8002e02:	8810      	ldrh	r0, [r2, #0]
 8002e04:	4298      	cmp	r0, r3
 8002e06:	d813      	bhi.n	8002e30 <pi_controller+0xac>
	uint16_t pi_output = ((pi_param.kp * error) + (pi_param.ki * error_integral)) * (-1);
 8002e08:	0018      	movs	r0, r3
 8002e0a:	e011      	b.n	8002e30 <pi_controller+0xac>
	else if(error_integral < min_error_integral ){
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <pi_controller+0xc8>)
 8002e0e:	881e      	ldrh	r6, [r3, #0]
 8002e10:	0030      	movs	r0, r6
 8002e12:	f7fe f917 	bl	8001044 <__aeabi_i2f>
 8002e16:	1c01      	adds	r1, r0, #0
 8002e18:	1c20      	adds	r0, r4, #0
 8002e1a:	f7fd fa51 	bl	80002c0 <__aeabi_fcmplt>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d0d0      	beq.n	8002dc4 <pi_controller+0x40>
		error_integral = min_error_integral;
 8002e22:	0030      	movs	r0, r6
 8002e24:	f7fe f958 	bl	80010d8 <__aeabi_ui2f>
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <pi_controller+0xb4>)
 8002e2a:	6018      	str	r0, [r3, #0]
 8002e2c:	e7ca      	b.n	8002dc4 <pi_controller+0x40>
		pi_output = htim2.Init.Period;
 8002e2e:	b280      	uxth	r0, r0
		pi_output = min_pwm_val;
	}
	return pi_output;
}
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	0800743c 	.word	0x0800743c
 8002e38:	20000204 	.word	0x20000204
 8002e3c:	08007432 	.word	0x08007432
 8002e40:	20000000 	.word	0x20000000
 8002e44:	200002d0 	.word	0x200002d0
 8002e48:	0800743a 	.word	0x0800743a
 8002e4c:	08007438 	.word	0x08007438

08002e50 <reset_error_integral>:

void reset_error_integral(void){
	error_integral = 0;
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <reset_error_integral+0x8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	4770      	bx	lr
 8002e58:	20000204 	.word	0x20000204

08002e5c <adjust_pwm_value>:

void adjust_pwm_value(uint16_t new_duty){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_duty);
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <adjust_pwm_value+0x8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6358      	str	r0, [r3, #52]	; 0x34
	//falls weitere Lüfter auf geregelten wert anspringen sollen
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, new_duty);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, new_duty);
}
 8002e62:	4770      	bx	lr
 8002e64:	200002d0 	.word	0x200002d0

08002e68 <start_all_timers>:

void start_all_timers(void){
 8002e68:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e6a:	4c14      	ldr	r4, [pc, #80]	; (8002ebc <start_all_timers+0x54>)
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	0020      	movs	r0, r4
 8002e70:	f002 f8a2 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002e74:	2104      	movs	r1, #4
 8002e76:	0020      	movs	r0, r4
 8002e78:	f002 f89e 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	0020      	movs	r0, r4
 8002e80:	f002 f89a 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002e84:	210c      	movs	r1, #12
 8002e86:	0020      	movs	r0, r4
 8002e88:	f002 f896 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 8002e8c:	4c0c      	ldr	r4, [pc, #48]	; (8002ec0 <start_all_timers+0x58>)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	0020      	movs	r0, r4
 8002e92:	f002 f891 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_2);
 8002e96:	2104      	movs	r1, #4
 8002e98:	0020      	movs	r0, r4
 8002e9a:	f002 f88d 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8002e9e:	4c09      	ldr	r4, [pc, #36]	; (8002ec4 <start_all_timers+0x5c>)
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	0020      	movs	r0, r4
 8002ea4:	f002 f888 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	0020      	movs	r0, r4
 8002eac:	f002 f884 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <start_all_timers+0x60>)
 8002eb2:	8819      	ldrh	r1, [r3, #0]
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <start_all_timers+0x64>)
 8002eb6:	f001 fa73 	bl	80043a0 <HAL_LPTIM_Counter_Start_IT>
}
 8002eba:	bd10      	pop	{r4, pc}
 8002ebc:	200002d0 	.word	0x200002d0
 8002ec0:	20000310 	.word	0x20000310
 8002ec4:	20000290 	.word	0x20000290
 8002ec8:	08007430 	.word	0x08007430
 8002ecc:	20000250 	.word	0x20000250

08002ed0 <stop_all_timers>:

void stop_all_timers(void){
 8002ed0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002ed2:	4c13      	ldr	r4, [pc, #76]	; (8002f20 <stop_all_timers+0x50>)
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f002 f8d0 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002edc:	2104      	movs	r1, #4
 8002ede:	0020      	movs	r0, r4
 8002ee0:	f002 f8cc 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	0020      	movs	r0, r4
 8002ee8:	f002 f8c8 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8002eec:	210c      	movs	r1, #12
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f002 f8c4 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_1);
 8002ef4:	4c0b      	ldr	r4, [pc, #44]	; (8002f24 <stop_all_timers+0x54>)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	0020      	movs	r0, r4
 8002efa:	f002 f8bf 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_2);
 8002efe:	2104      	movs	r1, #4
 8002f00:	0020      	movs	r0, r4
 8002f02:	f002 f8bb 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_1);
 8002f06:	4c08      	ldr	r4, [pc, #32]	; (8002f28 <stop_all_timers+0x58>)
 8002f08:	2100      	movs	r1, #0
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f002 f8b6 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_2);
 8002f10:	2104      	movs	r1, #4
 8002f12:	0020      	movs	r0, r4
 8002f14:	f002 f8b2 	bl	800507c <HAL_TIM_PWM_Stop>
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8002f18:	4804      	ldr	r0, [pc, #16]	; (8002f2c <stop_all_timers+0x5c>)
 8002f1a:	f001 fa91 	bl	8004440 <HAL_LPTIM_Counter_Stop_IT>
}
 8002f1e:	bd10      	pop	{r4, pc}
 8002f20:	200002d0 	.word	0x200002d0
 8002f24:	20000310 	.word	0x20000310
 8002f28:	20000290 	.word	0x20000290
 8002f2c:	20000250 	.word	0x20000250

08002f30 <set_pwm_not_controlgroup>:
void reset_all_pwm(void){
	set_all_pwm(0);
}


void set_pwm_not_controlgroup(uint16_t TIM2_CH4, uint16_t TIM21_CH1, uint16_t TIM21_CH2, uint16_t TIM22_CH1, uint16_t TIM22_CH2){
 8002f30:	b530      	push	{r4, r5, lr}
 8002f32:	ac03      	add	r4, sp, #12
 8002f34:	8824      	ldrh	r4, [r4, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, TIM2_CH4);
 8002f36:	4d06      	ldr	r5, [pc, #24]	; (8002f50 <set_pwm_not_controlgroup+0x20>)
 8002f38:	682d      	ldr	r5, [r5, #0]
 8002f3a:	6428      	str	r0, [r5, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, TIM21_CH1);
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <set_pwm_not_controlgroup+0x24>)
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	6341      	str	r1, [r0, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_2, TIM21_CH2);
 8002f42:	6382      	str	r2, [r0, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_1, TIM22_CH1);
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <set_pwm_not_controlgroup+0x28>)
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, TIM22_CH2);
 8002f4a:	6394      	str	r4, [r2, #56]	; 0x38
}
 8002f4c:	bd30      	pop	{r4, r5, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	200002d0 	.word	0x200002d0
 8002f54:	20000310 	.word	0x20000310
 8002f58:	20000290 	.word	0x20000290

08002f5c <set_all_pwm>:

void set_all_pwm(uint16_t pwm_value){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_value);
 8002f5c:	4b07      	ldr	r3, [pc, #28]	; (8002f7c <set_all_pwm+0x20>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6358      	str	r0, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_value);
 8002f62:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_value);
 8002f64:	63d8      	str	r0, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm_value);
 8002f66:	6418      	str	r0, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, pwm_value);
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <set_all_pwm+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6358      	str	r0, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_2, pwm_value);
 8002f6e:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_1, pwm_value);
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <set_all_pwm+0x28>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6358      	str	r0, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, pwm_value);
 8002f76:	6398      	str	r0, [r3, #56]	; 0x38
}
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	200002d0 	.word	0x200002d0
 8002f80:	20000310 	.word	0x20000310
 8002f84:	20000290 	.word	0x20000290

08002f88 <reset_all_pwm>:
void reset_all_pwm(void){
 8002f88:	b510      	push	{r4, lr}
	set_all_pwm(0);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7ff ffe6 	bl	8002f5c <set_all_pwm>
}
 8002f90:	bd10      	pop	{r4, pc}
	...

08002f94 <toggle_all_gpios>:
	reset_all_pwm();
	HAL_Delay(1000);
	toggle_all_gpios();
}

void toggle_all_gpios(void){
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);		//Lüfter 1 &htim2 , ersten drei sind in der controlgroup
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	4c14      	ldr	r4, [pc, #80]	; (8002fec <toggle_all_gpios+0x58>)
 8002f9a:	0089      	lsls	r1, r1, #2
 8002f9c:	0020      	movs	r0, r4
 8002f9e:	f001 f89f 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002fa2:	2780      	movs	r7, #128	; 0x80
 8002fa4:	007f      	lsls	r7, r7, #1
 8002fa6:	0039      	movs	r1, r7
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f001 f899 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	25a0      	movs	r5, #160	; 0xa0
 8002fb2:	05ed      	lsls	r5, r5, #23
 8002fb4:	0149      	lsls	r1, r1, #5
 8002fb6:	0028      	movs	r0, r5
 8002fb8:	f001 f892 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002fbc:	2680      	movs	r6, #128	; 0x80
 8002fbe:	0136      	lsls	r6, r6, #4
 8002fc0:	0031      	movs	r1, r6
 8002fc2:	0028      	movs	r0, r5
 8002fc4:	f001 f88c 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);		//Lüfter 5 &htim21
 8002fc8:	0039      	movs	r1, r7
 8002fca:	0028      	movs	r0, r5
 8002fcc:	f001 f888 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	f001 f884 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);		//Lüfter 7 &htim22
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	00c9      	lsls	r1, r1, #3
 8002fdc:	0020      	movs	r0, r4
 8002fde:	f001 f87f 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8002fe2:	0031      	movs	r1, r6
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	f001 f87b 	bl	80040e0 <HAL_GPIO_TogglePin>
}
 8002fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fec:	50000400 	.word	0x50000400

08002ff0 <switch_all_directions>:
void switch_all_directions(void){
 8002ff0:	b510      	push	{r4, lr}
	reset_all_pwm();
 8002ff2:	f7ff ffc9 	bl	8002f88 <reset_all_pwm>
	HAL_Delay(1000);
 8002ff6:	20fa      	movs	r0, #250	; 0xfa
 8002ff8:	0080      	lsls	r0, r0, #2
 8002ffa:	f000 fef5 	bl	8003de8 <HAL_Delay>
	toggle_all_gpios();
 8002ffe:	f7ff ffc9 	bl	8002f94 <toggle_all_gpios>
}
 8003002:	bd10      	pop	{r4, pc}

08003004 <toggle_gpios_not_controlgroup>:

void toggle_gpios_not_controlgroup(void){
 8003004:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8003006:	2580      	movs	r5, #128	; 0x80
 8003008:	012d      	lsls	r5, r5, #4
 800300a:	24a0      	movs	r4, #160	; 0xa0
 800300c:	05e4      	lsls	r4, r4, #23
 800300e:	0029      	movs	r1, r5
 8003010:	0020      	movs	r0, r4
 8003012:	f001 f865 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	0049      	lsls	r1, r1, #1
 800301a:	0020      	movs	r0, r4
 800301c:	f001 f860 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8003020:	4c07      	ldr	r4, [pc, #28]	; (8003040 <toggle_gpios_not_controlgroup+0x3c>)
 8003022:	2104      	movs	r1, #4
 8003024:	0020      	movs	r0, r4
 8003026:	f001 f85b 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	00c9      	lsls	r1, r1, #3
 800302e:	0020      	movs	r0, r4
 8003030:	f001 f856 	bl	80040e0 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8003034:	0029      	movs	r1, r5
 8003036:	0020      	movs	r0, r4
 8003038:	f001 f852 	bl	80040e0 <HAL_GPIO_TogglePin>
}
 800303c:	bd70      	pop	{r4, r5, r6, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	50000400 	.word	0x50000400

08003044 <switch_directions_not_controlgroup>:
void switch_directions_not_controlgroup(void){
 8003044:	b500      	push	{lr}
 8003046:	b083      	sub	sp, #12
	set_pwm_not_controlgroup(0, 0, 0, 0, 0);
 8003048:	2300      	movs	r3, #0
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	2100      	movs	r1, #0
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff ff6d 	bl	8002f30 <set_pwm_not_controlgroup>
	HAL_Delay(1000);
 8003056:	20fa      	movs	r0, #250	; 0xfa
 8003058:	0080      	lsls	r0, r0, #2
 800305a:	f000 fec5 	bl	8003de8 <HAL_Delay>
	toggle_gpios_not_controlgroup();
 800305e:	f7ff ffd1 	bl	8003004 <toggle_gpios_not_controlgroup>
}
 8003062:	b003      	add	sp, #12
 8003064:	bd00      	pop	{pc}
	...

08003068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	2214      	movs	r2, #20
 800306e:	2100      	movs	r1, #0
 8003070:	a803      	add	r0, sp, #12
 8003072:	f002 ff53 	bl	8005f1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <MX_GPIO_Init+0x78>)
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	2501      	movs	r5, #1
 800307c:	432a      	orrs	r2, r5
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	402a      	ands	r2, r5
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308a:	2202      	movs	r2, #2
 800308c:	4311      	orrs	r1, r2
 800308e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	401a      	ands	r2, r3
 8003094:	9202      	str	r2, [sp, #8]
 8003096:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8003098:	4c12      	ldr	r4, [pc, #72]	; (80030e4 <MX_GPIO_Init+0x7c>)
 800309a:	4f13      	ldr	r7, [pc, #76]	; (80030e8 <MX_GPIO_Init+0x80>)
 800309c:	2200      	movs	r2, #0
 800309e:	0021      	movs	r1, r4
 80030a0:	0038      	movs	r0, r7
 80030a2:	f001 f817 	bl	80040d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80030a6:	26c8      	movs	r6, #200	; 0xc8
 80030a8:	0176      	lsls	r6, r6, #5
 80030aa:	2200      	movs	r2, #0
 80030ac:	0031      	movs	r1, r6
 80030ae:	20a0      	movs	r0, #160	; 0xa0
 80030b0:	05c0      	lsls	r0, r0, #23
 80030b2:	f001 f80f 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 80030b6:	9403      	str	r4, [sp, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2400      	movs	r4, #0
 80030bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	a903      	add	r1, sp, #12
 80030c2:	0038      	movs	r0, r7
 80030c4:	f000 ff48 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80030c8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ca:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d0:	a903      	add	r1, sp, #12
 80030d2:	20a0      	movs	r0, #160	; 0xa0
 80030d4:	05c0      	lsls	r0, r0, #23
 80030d6:	f000 ff3f 	bl	8003f58 <HAL_GPIO_Init>

}
 80030da:	b009      	add	sp, #36	; 0x24
 80030dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	00000f04 	.word	0x00000f04
 80030e8:	50000400 	.word	0x50000400

080030ec <is_knx_controlbyte>:

uint8_t knx_controlbytes[2];
uint8_t listen_group_address_counter = 0;

bool is_knx_controlbyte(uint8_t byte){
  return ((byte | 0b00101100) == 0b10111100 ); // Ignore repeat flag and priority flag
 80030ec:	232c      	movs	r3, #44	; 0x2c
 80030ee:	4318      	orrs	r0, r3
 80030f0:	38bc      	subs	r0, #188	; 0xbc
 80030f2:	4243      	negs	r3, r0
 80030f4:	4158      	adcs	r0, r3
 80030f6:	b2c0      	uxtb	r0, r0
}
 80030f8:	4770      	bx	lr

080030fa <get_payload_length>:

uint8_t get_payload_length(uint8_t *address_buffer){
  uint8_t length = (address_buffer[4] & 0b00001111) + 1;
 80030fa:	7903      	ldrb	r3, [r0, #4]
 80030fc:	200f      	movs	r0, #15
 80030fe:	4018      	ands	r0, r3
 8003100:	3001      	adds	r0, #1
  return length;
}
 8003102:	4770      	bx	lr

08003104 <is_target_group>:

bool is_target_group(uint8_t *address_buffer){
  return address_buffer[4] & 0b10000000; 	//Letztes bit von zielbyte auslesen, wenn 1 dann gruppenadresse
 8003104:	7900      	ldrb	r0, [r0, #4]
 8003106:	09c0      	lsrs	r0, r0, #7
}
 8003108:	4770      	bx	lr

0800310a <get_target_maingroup>:

uint8_t get_target_maingroup(uint8_t *address_buffer){
  return ((address_buffer[2] & 0b01111000) >> 3);
 800310a:	7883      	ldrb	r3, [r0, #2]
 800310c:	10db      	asrs	r3, r3, #3
 800310e:	200f      	movs	r0, #15
 8003110:	4018      	ands	r0, r3
}
 8003112:	4770      	bx	lr

08003114 <get_target_middlegroup>:

uint8_t get_target_middlegroup(uint8_t *address_buffer){
  return (address_buffer[2] & 0b00000111);
 8003114:	7883      	ldrb	r3, [r0, #2]
 8003116:	2007      	movs	r0, #7
 8003118:	4018      	ands	r0, r3
}
 800311a:	4770      	bx	lr

0800311c <get_target_subgroup>:

uint8_t get_target_subgroup(uint8_t *address_buffer){
  return address_buffer[3];
 800311c:	78c0      	ldrb	r0, [r0, #3]
}
 800311e:	4770      	bx	lr

08003120 <get_2byte_float_value>:

float get_2byte_float_value(uint8_t *payload_buffer){
 8003120:	b5d0      	push	{r4, r6, r7, lr}
	  uint8_t exponent = (payload_buffer[2] & 0b01111000) >> 3;
 8003122:	7883      	ldrb	r3, [r0, #2]
 8003124:	08dc      	lsrs	r4, r3, #3
 8003126:	210f      	movs	r1, #15
 8003128:	400c      	ands	r4, r1
	  uint8_t mantisse = ((payload_buffer[2] & 0b00000111) << 8) | (payload_buffer[3]);
 800312a:	78c0      	ldrb	r0, [r0, #3]

	  //falls negatives vorzeichen(eigentlich nie)
	  if (payload_buffer[2] & 0b10000000) {
 800312c:	b25b      	sxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	db1a      	blt.n	8003168 <get_2byte_float_value+0x48>
	    return ((-2048 + mantisse) * 0.01) * pow(2.0, exponent);
	  }

	  return (mantisse * 0.01) * pow(2.0, exponent);
 8003132:	f7ff fd0d 	bl	8002b50 <__aeabi_i2d>
 8003136:	4a1b      	ldr	r2, [pc, #108]	; (80031a4 <get_2byte_float_value+0x84>)
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <get_2byte_float_value+0x88>)
 800313a:	f7fe ff33 	bl	8001fa4 <__aeabi_dmul>
 800313e:	0006      	movs	r6, r0
 8003140:	000f      	movs	r7, r1
 8003142:	0020      	movs	r0, r4
 8003144:	f7ff fd3e 	bl	8002bc4 <__aeabi_ui2d>
 8003148:	0002      	movs	r2, r0
 800314a:	000b      	movs	r3, r1
 800314c:	2000      	movs	r0, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	05c9      	lsls	r1, r1, #23
 8003152:	f003 f8b5 	bl	80062c0 <pow>
 8003156:	0002      	movs	r2, r0
 8003158:	000b      	movs	r3, r1
 800315a:	0030      	movs	r0, r6
 800315c:	0039      	movs	r1, r7
 800315e:	f7fe ff21 	bl	8001fa4 <__aeabi_dmul>
 8003162:	f7ff fd61 	bl	8002c28 <__aeabi_d2f>
}
 8003166:	bdd0      	pop	{r4, r6, r7, pc}
	    return ((-2048 + mantisse) * 0.01) * pow(2.0, exponent);
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <get_2byte_float_value+0x8c>)
 800316a:	469c      	mov	ip, r3
 800316c:	4460      	add	r0, ip
 800316e:	f7ff fcef 	bl	8002b50 <__aeabi_i2d>
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <get_2byte_float_value+0x84>)
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <get_2byte_float_value+0x88>)
 8003176:	f7fe ff15 	bl	8001fa4 <__aeabi_dmul>
 800317a:	0006      	movs	r6, r0
 800317c:	000f      	movs	r7, r1
 800317e:	0020      	movs	r0, r4
 8003180:	f7ff fd20 	bl	8002bc4 <__aeabi_ui2d>
 8003184:	0002      	movs	r2, r0
 8003186:	000b      	movs	r3, r1
 8003188:	2000      	movs	r0, #0
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	05c9      	lsls	r1, r1, #23
 800318e:	f003 f897 	bl	80062c0 <pow>
 8003192:	0002      	movs	r2, r0
 8003194:	000b      	movs	r3, r1
 8003196:	0030      	movs	r0, r6
 8003198:	0039      	movs	r1, r7
 800319a:	f7fe ff03 	bl	8001fa4 <__aeabi_dmul>
 800319e:	f7ff fd43 	bl	8002c28 <__aeabi_d2f>
 80031a2:	e7e0      	b.n	8003166 <get_2byte_float_value+0x46>
 80031a4:	47ae147b 	.word	0x47ae147b
 80031a8:	3f847ae1 	.word	0x3f847ae1
 80031ac:	fffff800 	.word	0xfffff800

080031b0 <check_for_controlbyte>:

bool check_for_controlbyte(uint8_t *buffer, uint8_t size){
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	0005      	movs	r5, r0
	bool rtrn_buffer[size];
 80031b6:	1dcb      	adds	r3, r1, #7
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	466a      	mov	r2, sp
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	469d      	mov	sp, r3
 80031c2:	466e      	mov	r6, sp
	bool rtrn = false;
	for(int i = 0; i < size; i++){
 80031c4:	2200      	movs	r2, #0
	bool rtrn = false;
 80031c6:	2000      	movs	r0, #0
	for(int i = 0; i < size; i++){
 80031c8:	e001      	b.n	80031ce <check_for_controlbyte+0x1e>
		rtrn_buffer[i] = ((buffer[i] | 0b00101100) == 0b10111100);
		rtrn = rtrn || rtrn_buffer[i];
 80031ca:	2001      	movs	r0, #1
	for(int i = 0; i < size; i++){
 80031cc:	3201      	adds	r2, #1
 80031ce:	4291      	cmp	r1, r2
 80031d0:	dd0f      	ble.n	80031f2 <check_for_controlbyte+0x42>
		rtrn_buffer[i] = ((buffer[i] | 0b00101100) == 0b10111100);
 80031d2:	5cab      	ldrb	r3, [r5, r2]
 80031d4:	242c      	movs	r4, #44	; 0x2c
 80031d6:	4323      	orrs	r3, r4
 80031d8:	3bbc      	subs	r3, #188	; 0xbc
 80031da:	425c      	negs	r4, r3
 80031dc:	4163      	adcs	r3, r4
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	54b3      	strb	r3, [r6, r2]
		rtrn = rtrn || rtrn_buffer[i];
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d1f1      	bne.n	80031ca <check_for_controlbyte+0x1a>
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <check_for_controlbyte+0x3e>
 80031ea:	3001      	adds	r0, #1
 80031ec:	e7ee      	b.n	80031cc <check_for_controlbyte+0x1c>
 80031ee:	2000      	movs	r0, #0
 80031f0:	e7ec      	b.n	80031cc <check_for_controlbyte+0x1c>
	}
	return rtrn;
}
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031f8 <add_listen_group_address>:
	return interested;
}



void add_listen_group_address(char *address){
 80031f8:	b510      	push	{r4, lr}
	char *maingroup;
	char *middlegroup;
	char *subgroup;
	*/
	char *token;
	token = strtok(address, "/");
 80031fa:	490d      	ldr	r1, [pc, #52]	; (8003230 <add_listen_group_address+0x38>)
 80031fc:	f002 ff50 	bl	80060a0 <strtok>
	for (int i = 0; i < 3; i++){
 8003200:	2400      	movs	r4, #0
 8003202:	e00d      	b.n	8003220 <add_listen_group_address+0x28>
		listen_group_addresses[listen_group_address_counter][i] = atoi(token);
 8003204:	f002 fe45 	bl	8005e92 <atoi>
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <add_listen_group_address+0x3c>)
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	0053      	lsls	r3, r2, #1
 800320e:	189a      	adds	r2, r3, r2
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <add_listen_group_address+0x40>)
 8003212:	189b      	adds	r3, r3, r2
 8003214:	5518      	strb	r0, [r3, r4]
		token = strtok(NULL, "/");
 8003216:	4906      	ldr	r1, [pc, #24]	; (8003230 <add_listen_group_address+0x38>)
 8003218:	2000      	movs	r0, #0
 800321a:	f002 ff41 	bl	80060a0 <strtok>
	for (int i = 0; i < 3; i++){
 800321e:	3401      	adds	r4, #1
 8003220:	2c02      	cmp	r4, #2
 8003222:	ddef      	ble.n	8003204 <add_listen_group_address+0xc>
	}

	listen_group_address_counter++;
 8003224:	4a03      	ldr	r2, [pc, #12]	; (8003234 <add_listen_group_address+0x3c>)
 8003226:	7813      	ldrb	r3, [r2, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	7013      	strb	r3, [r2, #0]
	listen_group_addresses[listen_group_address_counter][0] = atoi(substring1);
	listen_group_addresses[listen_group_address_counter][1] = atoi(substring2);
	listen_group_addresses[listen_group_address_counter][2] = atoi(substring3);
	*/

}
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	08007440 	.word	0x08007440
 8003234:	2000020c 	.word	0x2000020c
 8003238:	2000022c 	.word	0x2000022c

0800323c <is_listening_to_group_address>:

bool is_listening_to_group_address(uint8_t maingroup, uint8_t middlegroup, uint8_t subgroup){
 800323c:	b530      	push	{r4, r5, lr}
  for (int i = 0; i < listen_group_address_counter; i++){
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <is_listening_to_group_address+0x8>
 8003242:	3301      	adds	r3, #1
 8003244:	4c0d      	ldr	r4, [pc, #52]	; (800327c <is_listening_to_group_address+0x40>)
 8003246:	7824      	ldrb	r4, [r4, #0]
 8003248:	429c      	cmp	r4, r3
 800324a:	dd15      	ble.n	8003278 <is_listening_to_group_address+0x3c>
    if ((listen_group_addresses[i][0] == maingroup)
 800324c:	005c      	lsls	r4, r3, #1
 800324e:	18e4      	adds	r4, r4, r3
 8003250:	4d0b      	ldr	r5, [pc, #44]	; (8003280 <is_listening_to_group_address+0x44>)
 8003252:	5d64      	ldrb	r4, [r4, r5]
 8003254:	4284      	cmp	r4, r0
 8003256:	d1f4      	bne.n	8003242 <is_listening_to_group_address+0x6>
         && (listen_group_addresses[i][1] == middlegroup)
 8003258:	005d      	lsls	r5, r3, #1
 800325a:	18ed      	adds	r5, r5, r3
 800325c:	4c08      	ldr	r4, [pc, #32]	; (8003280 <is_listening_to_group_address+0x44>)
 800325e:	1964      	adds	r4, r4, r5
 8003260:	7864      	ldrb	r4, [r4, #1]
 8003262:	428c      	cmp	r4, r1
 8003264:	d1ed      	bne.n	8003242 <is_listening_to_group_address+0x6>
         && (listen_group_addresses[i][2] == subgroup)){
 8003266:	005d      	lsls	r5, r3, #1
 8003268:	18ed      	adds	r5, r5, r3
 800326a:	4c05      	ldr	r4, [pc, #20]	; (8003280 <is_listening_to_group_address+0x44>)
 800326c:	1964      	adds	r4, r4, r5
 800326e:	78a4      	ldrb	r4, [r4, #2]
 8003270:	4294      	cmp	r4, r2
 8003272:	d1e6      	bne.n	8003242 <is_listening_to_group_address+0x6>
      return true;
 8003274:	2001      	movs	r0, #1
 8003276:	e000      	b.n	800327a <is_listening_to_group_address+0x3e>
    }
  }
  return false;
 8003278:	2000      	movs	r0, #0
}
 800327a:	bd30      	pop	{r4, r5, pc}
 800327c:	2000020c 	.word	0x2000020c
 8003280:	2000022c 	.word	0x2000022c

08003284 <check_interest>:
bool check_interest(uint8_t *address_buffer){
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	0004      	movs	r4, r0
	uint8_t maingroup = get_target_maingroup(address_buffer);
 8003288:	f7ff ff3f 	bl	800310a <get_target_maingroup>
 800328c:	0005      	movs	r5, r0
	uint8_t middlegroup = get_target_middlegroup(address_buffer);
 800328e:	0020      	movs	r0, r4
 8003290:	f7ff ff40 	bl	8003114 <get_target_middlegroup>
 8003294:	0006      	movs	r6, r0
	uint8_t subgroup = get_target_subgroup(address_buffer);
 8003296:	0020      	movs	r0, r4
 8003298:	f7ff ff40 	bl	800311c <get_target_subgroup>
 800329c:	0007      	movs	r7, r0
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 800329e:	0020      	movs	r0, r4
 80032a0:	f7ff ff30 	bl	8003104 <is_target_group>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d00a      	beq.n	80032be <check_interest+0x3a>
 80032a8:	003a      	movs	r2, r7
 80032aa:	0031      	movs	r1, r6
 80032ac:	0028      	movs	r0, r5
 80032ae:	f7ff ffc5 	bl	800323c <is_listening_to_group_address>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d101      	bne.n	80032ba <check_interest+0x36>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e002      	b.n	80032c0 <check_interest+0x3c>
 80032ba:	2001      	movs	r0, #1
 80032bc:	e000      	b.n	80032c0 <check_interest+0x3c>
 80032be:	2000      	movs	r0, #0
}
 80032c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032c4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80032c4:	b510      	push	{r4, lr}
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <MX_LPTIM1_Init+0x2c>)
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <MX_LPTIM1_Init+0x30>)
 80032ca:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80032cc:	2300      	movs	r3, #0
 80032ce:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80032d0:	22e0      	movs	r2, #224	; 0xe0
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80032d6:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <MX_LPTIM1_Init+0x34>)
 80032d8:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80032da:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80032dc:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80032de:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80032e0:	f000 ff26 	bl	8004130 <HAL_LPTIM_Init>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d100      	bne.n	80032ea <MX_LPTIM1_Init+0x26>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80032e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80032ea:	f000 f831 	bl	8003350 <Error_Handler>
}
 80032ee:	e7fb      	b.n	80032e8 <MX_LPTIM1_Init+0x24>
 80032f0:	20000250 	.word	0x20000250
 80032f4:	40007c00 	.word	0x40007c00
 80032f8:	0000ffff 	.word	0x0000ffff

080032fc <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80032fc:	b510      	push	{r4, lr}

  if(lptimHandle->Instance==LPTIM1)
 80032fe:	6802      	ldr	r2, [r0, #0]
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <HAL_LPTIM_MspInit+0x2c>)
 8003302:	429a      	cmp	r2, r3
 8003304:	d000      	beq.n	8003308 <HAL_LPTIM_MspInit+0xc>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003306:	bd10      	pop	{r4, pc}
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <HAL_LPTIM_MspInit+0x30>)
 800330a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	430b      	orrs	r3, r1
 8003312:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	200d      	movs	r0, #13
 800331a:	f000 fd77 	bl	8003e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800331e:	200d      	movs	r0, #13
 8003320:	f000 fda6 	bl	8003e70 <HAL_NVIC_EnableIRQ>
}
 8003324:	e7ef      	b.n	8003306 <HAL_LPTIM_MspInit+0xa>
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	40007c00 	.word	0x40007c00
 800332c:	40021000 	.word	0x40021000

08003330 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003330:	b510      	push	{r4, lr}
	statemachine_uart();
 8003332:	f000 fa81 	bl	8003838 <statemachine_uart>
}
 8003336:	bd10      	pop	{r4, pc}

08003338 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	__NOP();
 8003338:	46c0      	nop			; (mov r8, r8)
}
 800333a:	4770      	bx	lr

0800333c <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 800333c:	b510      	push	{r4, lr}
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <HAL_LPTIM_AutoReloadMatchCallback+0x10>)
 8003340:	f001 f87e 	bl	8004440 <HAL_LPTIM_Counter_Stop_IT>
	set_flag_lptim_interrupt();
 8003344:	f000 f92c 	bl	80035a0 <set_flag_lptim_interrupt>
}
 8003348:	bd10      	pop	{r4, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	20000250 	.word	0x20000250

08003350 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003350:	b672      	cpsid	i
 8003352:	e7fe      	b.n	8003352 <Error_Handler+0x2>

08003354 <SystemClock_Config>:
{
 8003354:	b500      	push	{lr}
 8003356:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003358:	2234      	movs	r2, #52	; 0x34
 800335a:	2100      	movs	r1, #0
 800335c:	a80b      	add	r0, sp, #44	; 0x2c
 800335e:	f002 fddd 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003362:	2214      	movs	r2, #20
 8003364:	2100      	movs	r1, #0
 8003366:	a806      	add	r0, sp, #24
 8003368:	f002 fdd8 	bl	8005f1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800336c:	2218      	movs	r2, #24
 800336e:	2100      	movs	r1, #0
 8003370:	4668      	mov	r0, sp
 8003372:	f002 fdd3 	bl	8005f1c <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003376:	4920      	ldr	r1, [pc, #128]	; (80033f8 <SystemClock_Config+0xa4>)
 8003378:	680b      	ldr	r3, [r1, #0]
 800337a:	4a20      	ldr	r2, [pc, #128]	; (80033fc <SystemClock_Config+0xa8>)
 800337c:	401a      	ands	r2, r3
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003386:	230a      	movs	r3, #10
 8003388:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800338a:	3b09      	subs	r3, #9
 800338c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800338e:	2210      	movs	r2, #16
 8003390:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003392:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003394:	3301      	adds	r3, #1
 8003396:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003398:	2300      	movs	r3, #0
 800339a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	03db      	lsls	r3, r3, #15
 80033a6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a8:	a80b      	add	r0, sp, #44	; 0x2c
 80033aa:	f001 f8c7 	bl	800453c <HAL_RCC_OscConfig>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d11b      	bne.n	80033ea <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b2:	230f      	movs	r3, #15
 80033b4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b6:	3b0c      	subs	r3, #12
 80033b8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ba:	2300      	movs	r3, #0
 80033bc:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033c0:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80033c2:	2101      	movs	r1, #1
 80033c4:	a806      	add	r0, sp, #24
 80033c6:	f001 fb47 	bl	8004a58 <HAL_RCC_ClockConfig>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d10f      	bne.n	80033ee <SystemClock_Config+0x9a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80033ce:	2382      	movs	r3, #130	; 0x82
 80033d0:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033d2:	2300      	movs	r3, #0
 80033d4:	9302      	str	r3, [sp, #8]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	02db      	lsls	r3, r3, #11
 80033da:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033dc:	4668      	mov	r0, sp
 80033de:	f001 fc4d 	bl	8004c7c <HAL_RCCEx_PeriphCLKConfig>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d105      	bne.n	80033f2 <SystemClock_Config+0x9e>
}
 80033e6:	b019      	add	sp, #100	; 0x64
 80033e8:	bd00      	pop	{pc}
    Error_Handler();
 80033ea:	f7ff ffb1 	bl	8003350 <Error_Handler>
    Error_Handler();
 80033ee:	f7ff ffaf 	bl	8003350 <Error_Handler>
    Error_Handler();
 80033f2:	f7ff ffad 	bl	8003350 <Error_Handler>
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	40007000 	.word	0x40007000
 80033fc:	ffffe7ff 	.word	0xffffe7ff

08003400 <main>:
{
 8003400:	b500      	push	{lr}
 8003402:	b083      	sub	sp, #12
  HAL_Init();
 8003404:	f000 fcca 	bl	8003d9c <HAL_Init>
  SystemClock_Config();
 8003408:	f7ff ffa4 	bl	8003354 <SystemClock_Config>
  MX_GPIO_Init();
 800340c:	f7ff fe2c 	bl	8003068 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003410:	f000 fb1e 	bl	8003a50 <MX_TIM2_Init>
  MX_TIM21_Init();
 8003414:	f000 fb7e 	bl	8003b14 <MX_TIM21_Init>
  MX_TIM22_Init();
 8003418:	f000 fbca 	bl	8003bb0 <MX_TIM22_Init>
  MX_USART2_UART_Init();
 800341c:	f000 fc16 	bl	8003c4c <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8003420:	f7ff ff50 	bl	80032c4 <MX_LPTIM1_Init>
  uint8_t test_buffer_address[5] =  {0, 0, 120, 3, 128};
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <main+0x48>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	9200      	str	r2, [sp, #0]
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	466a      	mov	r2, sp
 800342e:	7113      	strb	r3, [r2, #4]
  add_listen_group_address("15/0/3");
 8003430:	4806      	ldr	r0, [pc, #24]	; (800344c <main+0x4c>)
 8003432:	f7ff fee1 	bl	80031f8 <add_listen_group_address>
  test_interest = check_interest(test_buffer_address);
 8003436:	4668      	mov	r0, sp
 8003438:	f7ff ff24 	bl	8003284 <check_interest>
	  statemachine_process();
 800343c:	f000 f894 	bl	8003568 <statemachine_process>
	  extract_data();
 8003440:	f000 fa16 	bl	8003870 <extract_data>
 8003444:	e7fa      	b.n	800343c <main+0x3c>
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	08007368 	.word	0x08007368
 800344c:	08007444 	.word	0x08007444

08003450 <statemachine_standby_state>:
	}
}



void statemachine_standby_state(void){
 8003450:	b510      	push	{r4, lr}
	reset_all_pwm();
 8003452:	f7ff fd99 	bl	8002f88 <reset_all_pwm>
	stop_all_timers();
 8003456:	f7ff fd3b 	bl	8002ed0 <stop_all_timers>
	statemachine_process_state = INIT_STATE;
 800345a:	4b02      	ldr	r3, [pc, #8]	; (8003464 <statemachine_standby_state+0x14>)
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
}
 8003460:	bd10      	pop	{r4, pc}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	2000020e 	.word	0x2000020e

08003468 <statemachine_init_state>:


void statemachine_init_state(void){
 8003468:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 800346a:	2201      	movs	r2, #1
 800346c:	4905      	ldr	r1, [pc, #20]	; (8003484 <statemachine_init_state+0x1c>)
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <statemachine_init_state+0x20>)
 8003470:	f002 fcd0 	bl	8005e14 <HAL_UART_Receive_IT>
	start_all_timers();
 8003474:	f7ff fcf8 	bl	8002e68 <start_all_timers>
	reset_all_pwm();
 8003478:	f7ff fd86 	bl	8002f88 <reset_all_pwm>
	statemachine_process_state = SET_STATE;
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <statemachine_init_state+0x24>)
 800347e:	2203      	movs	r2, #3
 8003480:	701a      	strb	r2, [r3, #0]
}
 8003482:	bd10      	pop	{r4, pc}
 8003484:	2000024c 	.word	0x2000024c
 8003488:	20000350 	.word	0x20000350
 800348c:	2000020e 	.word	0x2000020e

08003490 <statemachine_set_state>:


void statemachine_set_state(void){
 8003490:	b510      	push	{r4, lr}
	set_all_pwm(min_pwm_val);
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <statemachine_set_state+0x14>)
 8003494:	8818      	ldrh	r0, [r3, #0]
 8003496:	f7ff fd61 	bl	8002f5c <set_all_pwm>
	statemachine_process_state = STANDARD_STATE;
 800349a:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <statemachine_set_state+0x18>)
 800349c:	2202      	movs	r2, #2
 800349e:	701a      	strb	r2, [r3, #0]
}
 80034a0:	bd10      	pop	{r4, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	0800743a 	.word	0x0800743a
 80034a8:	2000020e 	.word	0x2000020e

080034ac <statemachine_standard_state>:


void statemachine_standard_state(void){
 80034ac:	b510      	push	{r4, lr}
	if(actual_humidity >= max_humidity_allowed){
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <statemachine_standard_state+0x44>)
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <statemachine_standard_state+0x48>)
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	f7fc ff21 	bl	80002fc <__aeabi_fcmpge>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d104      	bne.n	80034c8 <statemachine_standard_state+0x1c>
		reset_error_integral();
		statemachine_process_state = CONTROLLED_STATE;
	}
	else if(flag_lptim_interrupt == FLAG_TRUE){
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <statemachine_standard_state+0x4c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <statemachine_standard_state+0x28>
		switch_all_directions();
		flag_lptim_interrupt = FLAG_FALSE;
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
		statemachine_process_state = SET_STATE;
	}
}
 80034c6:	bd10      	pop	{r4, pc}
		reset_error_integral();
 80034c8:	f7ff fcc2 	bl	8002e50 <reset_error_integral>
		statemachine_process_state = CONTROLLED_STATE;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <statemachine_standard_state+0x50>)
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e7f8      	b.n	80034c6 <statemachine_standard_state+0x1a>
		switch_all_directions();
 80034d4:	f7ff fd8c 	bl	8002ff0 <switch_all_directions>
		flag_lptim_interrupt = FLAG_FALSE;
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <statemachine_standard_state+0x4c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <statemachine_standard_state+0x54>)
 80034e0:	8819      	ldrh	r1, [r3, #0]
 80034e2:	4808      	ldr	r0, [pc, #32]	; (8003504 <statemachine_standard_state+0x58>)
 80034e4:	f000 ff5c 	bl	80043a0 <HAL_LPTIM_Counter_Start_IT>
		statemachine_process_state = SET_STATE;
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <statemachine_standard_state+0x50>)
 80034ea:	2203      	movs	r2, #3
 80034ec:	701a      	strb	r2, [r3, #0]
}
 80034ee:	e7ea      	b.n	80034c6 <statemachine_standard_state+0x1a>
 80034f0:	20000208 	.word	0x20000208
 80034f4:	08007434 	.word	0x08007434
 80034f8:	2000020d 	.word	0x2000020d
 80034fc:	2000020e 	.word	0x2000020e
 8003500:	08007430 	.word	0x08007430
 8003504:	20000250 	.word	0x20000250

08003508 <statemachine_controlled_state>:


void statemachine_controlled_state(void){
 8003508:	b510      	push	{r4, lr}

	uint16_t new_dutycycle = pi_controller(actual_humidity);
 800350a:	4c11      	ldr	r4, [pc, #68]	; (8003550 <statemachine_controlled_state+0x48>)
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	f7fc ff49 	bl	80003a4 <__aeabi_f2uiz>
 8003512:	b2c0      	uxtb	r0, r0
 8003514:	f7ff fc36 	bl	8002d84 <pi_controller>
	adjust_pwm_value(new_dutycycle);
 8003518:	f7ff fca0 	bl	8002e5c <adjust_pwm_value>

	if(actual_humidity <= setpoint_humidity){
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <statemachine_controlled_state+0x4c>)
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	f7fc fed7 	bl	80002d4 <__aeabi_fcmple>
 8003526:	2800      	cmp	r0, #0
 8003528:	d10e      	bne.n	8003548 <statemachine_controlled_state+0x40>
		statemachine_process_state = SET_STATE;
	}
	else if(flag_lptim_interrupt == FLAG_TRUE){
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <statemachine_controlled_state+0x50>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <statemachine_controlled_state+0x46>
		switch_directions_not_controlgroup();
 8003532:	f7ff fd87 	bl	8003044 <switch_directions_not_controlgroup>
		flag_lptim_interrupt = FLAG_FALSE;
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <statemachine_controlled_state+0x50>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <statemachine_controlled_state+0x54>)
 800353e:	8819      	ldrh	r1, [r3, #0]
 8003540:	4807      	ldr	r0, [pc, #28]	; (8003560 <statemachine_controlled_state+0x58>)
 8003542:	f000 ff2d 	bl	80043a0 <HAL_LPTIM_Counter_Start_IT>
	}
}
 8003546:	e002      	b.n	800354e <statemachine_controlled_state+0x46>
		statemachine_process_state = SET_STATE;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <statemachine_controlled_state+0x5c>)
 800354a:	2203      	movs	r2, #3
 800354c:	701a      	strb	r2, [r3, #0]
}
 800354e:	bd10      	pop	{r4, pc}
 8003550:	20000208 	.word	0x20000208
 8003554:	0800743c 	.word	0x0800743c
 8003558:	2000020d 	.word	0x2000020d
 800355c:	08007430 	.word	0x08007430
 8003560:	20000250 	.word	0x20000250
 8003564:	2000020e 	.word	0x2000020e

08003568 <statemachine_process>:
{
 8003568:	b510      	push	{r4, lr}
	switch(statemachine_process_state){
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <statemachine_process+0x30>)
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	2a04      	cmp	r2, #4
 8003570:	d805      	bhi.n	800357e <statemachine_process+0x16>
 8003572:	0093      	lsls	r3, r2, #2
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <statemachine_process+0x34>)
 8003576:	58d3      	ldr	r3, [r2, r3]
 8003578:	469f      	mov	pc, r3
		statemachine_standby_state();
 800357a:	f7ff ff69 	bl	8003450 <statemachine_standby_state>
}
 800357e:	bd10      	pop	{r4, pc}
		statemachine_init_state();
 8003580:	f7ff ff72 	bl	8003468 <statemachine_init_state>
		break;
 8003584:	e7fb      	b.n	800357e <statemachine_process+0x16>
		statemachine_set_state();
 8003586:	f7ff ff83 	bl	8003490 <statemachine_set_state>
		break;
 800358a:	e7f8      	b.n	800357e <statemachine_process+0x16>
		statemachine_standard_state();
 800358c:	f7ff ff8e 	bl	80034ac <statemachine_standard_state>
		break;
 8003590:	e7f5      	b.n	800357e <statemachine_process+0x16>
		statemachine_controlled_state();
 8003592:	f7ff ffb9 	bl	8003508 <statemachine_controlled_state>
}
 8003596:	e7f2      	b.n	800357e <statemachine_process+0x16>
 8003598:	2000020e 	.word	0x2000020e
 800359c:	0800744c 	.word	0x0800744c

080035a0 <set_flag_lptim_interrupt>:

void set_flag_lptim_interrupt(void){
	flag_lptim_interrupt = FLAG_TRUE;
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <set_flag_lptim_interrupt+0x8>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
}
 80035a6:	4770      	bx	lr
 80035a8:	2000020d 	.word	0x2000020d

080035ac <statemachine_first_controlbyte_state>:
	default:
		break;
	}
}

void statemachine_first_controlbyte_state(void){
 80035ac:	b510      	push	{r4, lr}
	if(is_knx_controlbyte(knx_controlbytes[0]) && flag_data_processed == FLAG_TRUE){
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <statemachine_first_controlbyte_state+0x34>)
 80035b0:	7818      	ldrb	r0, [r3, #0]
 80035b2:	f7ff fd9b 	bl	80030ec <is_knx_controlbyte>
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d003      	beq.n	80035c2 <statemachine_first_controlbyte_state+0x16>
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <statemachine_first_controlbyte_state+0x38>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <statemachine_first_controlbyte_state+0x22>
		statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
		HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
	}
	else{
		HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 80035c2:	2201      	movs	r2, #1
 80035c4:	4906      	ldr	r1, [pc, #24]	; (80035e0 <statemachine_first_controlbyte_state+0x34>)
 80035c6:	4808      	ldr	r0, [pc, #32]	; (80035e8 <statemachine_first_controlbyte_state+0x3c>)
 80035c8:	f002 fc24 	bl	8005e14 <HAL_UART_Receive_IT>
	}
}
 80035cc:	bd10      	pop	{r4, pc}
		statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <statemachine_first_controlbyte_state+0x40>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
 80035d4:	3a02      	subs	r2, #2
 80035d6:	4906      	ldr	r1, [pc, #24]	; (80035f0 <statemachine_first_controlbyte_state+0x44>)
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <statemachine_first_controlbyte_state+0x3c>)
 80035da:	f002 fc1b 	bl	8005e14 <HAL_UART_Receive_IT>
 80035de:	e7f5      	b.n	80035cc <statemachine_first_controlbyte_state+0x20>
 80035e0:	2000024c 	.word	0x2000024c
 80035e4:	20000004 	.word	0x20000004
 80035e8:	20000350 	.word	0x20000350
 80035ec:	2000021c 	.word	0x2000021c
 80035f0:	2000024d 	.word	0x2000024d

080035f4 <statemachine_second_controlbyte_state>:

void statemachine_second_controlbyte_state(void){
 80035f4:	b510      	push	{r4, lr}
	if(is_knx_controlbyte(knx_controlbytes[1])){
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <statemachine_second_controlbyte_state+0x34>)
 80035f8:	7858      	ldrb	r0, [r3, #1]
 80035fa:	f7ff fd77 	bl	80030ec <is_knx_controlbyte>
 80035fe:	2800      	cmp	r0, #0
 8003600:	d108      	bne.n	8003614 <statemachine_second_controlbyte_state+0x20>
		statemachine_uart_state = ADDRESS_STATE;
		HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
	}
	else{
		statemachine_uart_state = FIRST_CONTROLBYTE_STATE;
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <statemachine_second_controlbyte_state+0x38>)
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 8003608:	3201      	adds	r2, #1
 800360a:	4907      	ldr	r1, [pc, #28]	; (8003628 <statemachine_second_controlbyte_state+0x34>)
 800360c:	4808      	ldr	r0, [pc, #32]	; (8003630 <statemachine_second_controlbyte_state+0x3c>)
 800360e:	f002 fc01 	bl	8005e14 <HAL_UART_Receive_IT>
	}
}
 8003612:	bd10      	pop	{r4, pc}
		statemachine_uart_state = ADDRESS_STATE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <statemachine_second_controlbyte_state+0x38>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 800361a:	3204      	adds	r2, #4
 800361c:	4905      	ldr	r1, [pc, #20]	; (8003634 <statemachine_second_controlbyte_state+0x40>)
 800361e:	4804      	ldr	r0, [pc, #16]	; (8003630 <statemachine_second_controlbyte_state+0x3c>)
 8003620:	f002 fbf8 	bl	8005e14 <HAL_UART_Receive_IT>
 8003624:	e7f5      	b.n	8003612 <statemachine_second_controlbyte_state+0x1e>
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	2000024c 	.word	0x2000024c
 800362c:	2000021c 	.word	0x2000021c
 8003630:	20000350 	.word	0x20000350
 8003634:	20000288 	.word	0x20000288

08003638 <statemachine_address_state>:


//Richtiges controllbyte wurde empfangen
void statemachine_address_state(void){
 8003638:	b510      	push	{r4, lr}
	if(check_for_controlbyte(buffer_knx_address, sizeof(buffer_knx_address))){
 800363a:	2105      	movs	r1, #5
 800363c:	481d      	ldr	r0, [pc, #116]	; (80036b4 <statemachine_address_state+0x7c>)
 800363e:	f7ff fdb7 	bl	80031b0 <check_for_controlbyte>
 8003642:	2800      	cmp	r0, #0
 8003644:	d023      	beq.n	800368e <statemachine_address_state+0x56>
		if(is_knx_controlbyte(buffer_knx_address[4])){
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <statemachine_address_state+0x7c>)
 8003648:	7918      	ldrb	r0, [r3, #4]
 800364a:	f7ff fd4f 	bl	80030ec <is_knx_controlbyte>
 800364e:	2800      	cmp	r0, #0
 8003650:	d014      	beq.n	800367c <statemachine_address_state+0x44>
			if(is_knx_controlbyte(buffer_knx_address[3])){
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <statemachine_address_state+0x7c>)
 8003654:	78d8      	ldrb	r0, [r3, #3]
 8003656:	f7ff fd49 	bl	80030ec <is_knx_controlbyte>
 800365a:	2800      	cmp	r0, #0
 800365c:	d005      	beq.n	800366a <statemachine_address_state+0x32>
				HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 800365e:	2205      	movs	r2, #5
 8003660:	4914      	ldr	r1, [pc, #80]	; (80036b4 <statemachine_address_state+0x7c>)
 8003662:	4815      	ldr	r0, [pc, #84]	; (80036b8 <statemachine_address_state+0x80>)
 8003664:	f002 fbd6 	bl	8005e14 <HAL_UART_Receive_IT>
 8003668:	e023      	b.n	80036b2 <statemachine_address_state+0x7a>
			}
			else{
			statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <statemachine_address_state+0x84>)
 800366c:	2203      	movs	r2, #3
 800366e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
 8003670:	3a02      	subs	r2, #2
 8003672:	4913      	ldr	r1, [pc, #76]	; (80036c0 <statemachine_address_state+0x88>)
 8003674:	4810      	ldr	r0, [pc, #64]	; (80036b8 <statemachine_address_state+0x80>)
 8003676:	f002 fbcd 	bl	8005e14 <HAL_UART_Receive_IT>
 800367a:	e01a      	b.n	80036b2 <statemachine_address_state+0x7a>
			}
		}
		else{
			statemachine_uart_state = FIRST_CONTROLBYTE_STATE;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <statemachine_address_state+0x84>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 8003682:	3201      	adds	r2, #1
 8003684:	490f      	ldr	r1, [pc, #60]	; (80036c4 <statemachine_address_state+0x8c>)
 8003686:	480c      	ldr	r0, [pc, #48]	; (80036b8 <statemachine_address_state+0x80>)
 8003688:	f002 fbc4 	bl	8005e14 <HAL_UART_Receive_IT>
 800368c:	e011      	b.n	80036b2 <statemachine_address_state+0x7a>
		}
	}
	else{
		payload_length = get_payload_length(buffer_knx_address);
 800368e:	4809      	ldr	r0, [pc, #36]	; (80036b4 <statemachine_address_state+0x7c>)
 8003690:	f7ff fd33 	bl	80030fa <get_payload_length>
 8003694:	0004      	movs	r4, r0
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <statemachine_address_state+0x90>)
 8003698:	7018      	strb	r0, [r3, #0]
		buffer_knx_payload = (uint8_t *) malloc( sizeof(uint8_t) * payload_length );			//speicher nach auswertung freigeben
 800369a:	f002 fc2b 	bl	8005ef4 <malloc>
 800369e:	0001      	movs	r1, r0
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <statemachine_address_state+0x94>)
 80036a2:	6018      	str	r0, [r3, #0]
		statemachine_uart_state = PAYLOAD_STATE;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <statemachine_address_state+0x84>)
 80036a6:	2202      	movs	r2, #2
 80036a8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, buffer_knx_payload, payload_length);
 80036aa:	b2a2      	uxth	r2, r4
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <statemachine_address_state+0x80>)
 80036ae:	f002 fbb1 	bl	8005e14 <HAL_UART_Receive_IT>
	}
}
 80036b2:	bd10      	pop	{r4, pc}
 80036b4:	20000288 	.word	0x20000288
 80036b8:	20000350 	.word	0x20000350
 80036bc:	2000021c 	.word	0x2000021c
 80036c0:	2000024d 	.word	0x2000024d
 80036c4:	2000024c 	.word	0x2000024c
 80036c8:	2000021b 	.word	0x2000021b
 80036cc:	20000210 	.word	0x20000210

080036d0 <statemachine_payload_state>:

void statemachine_payload_state(void){
 80036d0:	b510      	push	{r4, lr}
	buffer_val1 = buffer_knx_payload[0];
 80036d2:	4b27      	ldr	r3, [pc, #156]	; (8003770 <statemachine_payload_state+0xa0>)
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	7802      	ldrb	r2, [r0, #0]
 80036d8:	4b26      	ldr	r3, [pc, #152]	; (8003774 <statemachine_payload_state+0xa4>)
 80036da:	701a      	strb	r2, [r3, #0]
	buffer_val2 = buffer_knx_payload[1];
 80036dc:	7842      	ldrb	r2, [r0, #1]
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <statemachine_payload_state+0xa8>)
 80036e0:	701a      	strb	r2, [r3, #0]
	buffer_val3 = buffer_knx_payload[2];
 80036e2:	7882      	ldrb	r2, [r0, #2]
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <statemachine_payload_state+0xac>)
 80036e6:	701a      	strb	r2, [r3, #0]
	buffer_val4 = buffer_knx_payload[3];
 80036e8:	78c2      	ldrb	r2, [r0, #3]
 80036ea:	4b25      	ldr	r3, [pc, #148]	; (8003780 <statemachine_payload_state+0xb0>)
 80036ec:	701a      	strb	r2, [r3, #0]
	buffer_val5 = buffer_knx_payload[4];
 80036ee:	7902      	ldrb	r2, [r0, #4]
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <statemachine_payload_state+0xb4>)
 80036f2:	701a      	strb	r2, [r3, #0]

	if(check_for_controlbyte(buffer_knx_payload, sizeof(buffer_knx_payload))){
 80036f4:	2104      	movs	r1, #4
 80036f6:	f7ff fd5b 	bl	80031b0 <check_for_controlbyte>
 80036fa:	2800      	cmp	r0, #0
 80036fc:	d02e      	beq.n	800375c <statemachine_payload_state+0x8c>
		if(is_knx_controlbyte(buffer_knx_payload[payload_length - 1])){
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <statemachine_payload_state+0xb8>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	3b01      	subs	r3, #1
 8003704:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <statemachine_payload_state+0xa0>)
 8003706:	6812      	ldr	r2, [r2, #0]
 8003708:	5cd0      	ldrb	r0, [r2, r3]
 800370a:	f7ff fcef 	bl	80030ec <is_knx_controlbyte>
 800370e:	2800      	cmp	r0, #0
 8003710:	d01b      	beq.n	800374a <statemachine_payload_state+0x7a>
			if(is_knx_controlbyte(buffer_knx_payload[payload_length - 2])){
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <statemachine_payload_state+0xb8>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	3b02      	subs	r3, #2
 8003718:	4a15      	ldr	r2, [pc, #84]	; (8003770 <statemachine_payload_state+0xa0>)
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	5cd0      	ldrb	r0, [r2, r3]
 800371e:	f7ff fce5 	bl	80030ec <is_knx_controlbyte>
 8003722:	2800      	cmp	r0, #0
 8003724:	d008      	beq.n	8003738 <statemachine_payload_state+0x68>
				statemachine_uart_state = ADDRESS_STATE;
 8003726:	4b19      	ldr	r3, [pc, #100]	; (800378c <statemachine_payload_state+0xbc>)
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 800372c:	3204      	adds	r2, #4
 800372e:	4918      	ldr	r1, [pc, #96]	; (8003790 <statemachine_payload_state+0xc0>)
 8003730:	4818      	ldr	r0, [pc, #96]	; (8003794 <statemachine_payload_state+0xc4>)
 8003732:	f002 fb6f 	bl	8005e14 <HAL_UART_Receive_IT>
 8003736:	e019      	b.n	800376c <statemachine_payload_state+0x9c>
			}
			else{
				statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <statemachine_payload_state+0xbc>)
 800373a:	2203      	movs	r2, #3
 800373c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
 800373e:	3a02      	subs	r2, #2
 8003740:	4915      	ldr	r1, [pc, #84]	; (8003798 <statemachine_payload_state+0xc8>)
 8003742:	4814      	ldr	r0, [pc, #80]	; (8003794 <statemachine_payload_state+0xc4>)
 8003744:	f002 fb66 	bl	8005e14 <HAL_UART_Receive_IT>
 8003748:	e010      	b.n	800376c <statemachine_payload_state+0x9c>
			}
		}
		else{
			statemachine_uart_state = FIRST_CONTROLBYTE_STATE;
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <statemachine_payload_state+0xbc>)
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 8003750:	3201      	adds	r2, #1
 8003752:	4912      	ldr	r1, [pc, #72]	; (800379c <statemachine_payload_state+0xcc>)
 8003754:	480f      	ldr	r0, [pc, #60]	; (8003794 <statemachine_payload_state+0xc4>)
 8003756:	f002 fb5d 	bl	8005e14 <HAL_UART_Receive_IT>
 800375a:	e007      	b.n	800376c <statemachine_payload_state+0x9c>
		}
	}
	else{
		statemachine_uart_state = ACK_STATE;
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <statemachine_payload_state+0xbc>)
 800375e:	2204      	movs	r2, #4
 8003760:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 8003762:	3a03      	subs	r2, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <statemachine_payload_state+0xd0>)
 8003766:	480b      	ldr	r0, [pc, #44]	; (8003794 <statemachine_payload_state+0xc4>)
 8003768:	f002 fb54 	bl	8005e14 <HAL_UART_Receive_IT>
	}
}
 800376c:	bd10      	pop	{r4, pc}
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	20000210 	.word	0x20000210
 8003774:	20000214 	.word	0x20000214
 8003778:	20000215 	.word	0x20000215
 800377c:	20000216 	.word	0x20000216
 8003780:	20000217 	.word	0x20000217
 8003784:	20000218 	.word	0x20000218
 8003788:	2000021b 	.word	0x2000021b
 800378c:	2000021c 	.word	0x2000021c
 8003790:	20000288 	.word	0x20000288
 8003794:	20000350 	.word	0x20000350
 8003798:	2000024d 	.word	0x2000024d
 800379c:	2000024c 	.word	0x2000024c
 80037a0:	20000286 	.word	0x20000286

080037a4 <statemachine_ack_state>:

void statemachine_ack_state(void){
 80037a4:	b510      	push	{r4, lr}

	if(is_knx_controlbyte(knx_checksum_byte)){
 80037a6:	4b19      	ldr	r3, [pc, #100]	; (800380c <statemachine_ack_state+0x68>)
 80037a8:	7818      	ldrb	r0, [r3, #0]
 80037aa:	f7ff fc9f 	bl	80030ec <is_knx_controlbyte>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d11a      	bne.n	80037e8 <statemachine_ack_state+0x44>
			statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
			HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
	}
	else{
		if(check_interest(buffer_knx_address)){
 80037b2:	4817      	ldr	r0, [pc, #92]	; (8003810 <statemachine_ack_state+0x6c>)
 80037b4:	f7ff fd66 	bl	8003284 <check_interest>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d01e      	beq.n	80037fa <statemachine_ack_state+0x56>
			HAL_UART_Transmit_IT(&huart2, &interested_byte, sizeof(interested_byte));
 80037bc:	2201      	movs	r2, #1
 80037be:	4915      	ldr	r1, [pc, #84]	; (8003814 <statemachine_ack_state+0x70>)
 80037c0:	4815      	ldr	r0, [pc, #84]	; (8003818 <statemachine_ack_state+0x74>)
 80037c2:	f001 fdb9 	bl	8005338 <HAL_UART_Transmit_IT>
			flag_knx_message_interested = FLAG_TRUE;
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <statemachine_ack_state+0x78>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
			flag_knx_message_interested = FLAG_FALSE;
		}
		flag_uart_reception_complete = FLAG_TRUE;
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <statemachine_ack_state+0x7c>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
		flag_data_processed = FLAG_FALSE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	4a13      	ldr	r2, [pc, #76]	; (8003824 <statemachine_ack_state+0x80>)
 80037d6:	7013      	strb	r3, [r2, #0]
		statemachine_uart_state = FIRST_CONTROLBYTE_STATE;
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <statemachine_ack_state+0x84>)
 80037da:	7013      	strb	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart2, &knx_controlbytes[0], sizeof(uint8_t));
 80037dc:	2201      	movs	r2, #1
 80037de:	4913      	ldr	r1, [pc, #76]	; (800382c <statemachine_ack_state+0x88>)
 80037e0:	480d      	ldr	r0, [pc, #52]	; (8003818 <statemachine_ack_state+0x74>)
 80037e2:	f002 fb17 	bl	8005e14 <HAL_UART_Receive_IT>
	}
}
 80037e6:	bd10      	pop	{r4, pc}
			statemachine_uart_state = SECOND_CONTROLBYTE_STATE;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <statemachine_ack_state+0x84>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &knx_controlbytes[1], sizeof(uint8_t));
 80037ee:	3a02      	subs	r2, #2
 80037f0:	490f      	ldr	r1, [pc, #60]	; (8003830 <statemachine_ack_state+0x8c>)
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <statemachine_ack_state+0x74>)
 80037f4:	f002 fb0e 	bl	8005e14 <HAL_UART_Receive_IT>
 80037f8:	e7f5      	b.n	80037e6 <statemachine_ack_state+0x42>
			HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
 80037fa:	2201      	movs	r2, #1
 80037fc:	490d      	ldr	r1, [pc, #52]	; (8003834 <statemachine_ack_state+0x90>)
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <statemachine_ack_state+0x74>)
 8003800:	f001 fd9a 	bl	8005338 <HAL_UART_Transmit_IT>
			flag_knx_message_interested = FLAG_FALSE;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <statemachine_ack_state+0x78>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e7df      	b.n	80037cc <statemachine_ack_state+0x28>
 800380c:	20000286 	.word	0x20000286
 8003810:	20000288 	.word	0x20000288
 8003814:	20000005 	.word	0x20000005
 8003818:	20000350 	.word	0x20000350
 800381c:	20000219 	.word	0x20000219
 8003820:	2000021a 	.word	0x2000021a
 8003824:	20000004 	.word	0x20000004
 8003828:	2000021c 	.word	0x2000021c
 800382c:	2000024c 	.word	0x2000024c
 8003830:	2000024d 	.word	0x2000024d
 8003834:	20000006 	.word	0x20000006

08003838 <statemachine_uart>:
void statemachine_uart(void){
 8003838:	b510      	push	{r4, lr}
	switch(statemachine_uart_state){
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <statemachine_uart+0x30>)
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	2a04      	cmp	r2, #4
 8003840:	d805      	bhi.n	800384e <statemachine_uart+0x16>
 8003842:	0093      	lsls	r3, r2, #2
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <statemachine_uart+0x34>)
 8003846:	58d3      	ldr	r3, [r2, r3]
 8003848:	469f      	mov	pc, r3
		statemachine_first_controlbyte_state();
 800384a:	f7ff feaf 	bl	80035ac <statemachine_first_controlbyte_state>
}
 800384e:	bd10      	pop	{r4, pc}
		statemachine_second_controlbyte_state();
 8003850:	f7ff fed0 	bl	80035f4 <statemachine_second_controlbyte_state>
		break;
 8003854:	e7fb      	b.n	800384e <statemachine_uart+0x16>
		statemachine_address_state();
 8003856:	f7ff feef 	bl	8003638 <statemachine_address_state>
		break;
 800385a:	e7f8      	b.n	800384e <statemachine_uart+0x16>
		statemachine_payload_state();
 800385c:	f7ff ff38 	bl	80036d0 <statemachine_payload_state>
		break;
 8003860:	e7f5      	b.n	800384e <statemachine_uart+0x16>
		statemachine_ack_state();
 8003862:	f7ff ff9f 	bl	80037a4 <statemachine_ack_state>
}
 8003866:	e7f2      	b.n	800384e <statemachine_uart+0x16>
 8003868:	2000021c 	.word	0x2000021c
 800386c:	08007460 	.word	0x08007460

08003870 <extract_data>:



void extract_data(void){
 8003870:	b510      	push	{r4, lr}
	if(flag_uart_reception_complete == FLAG_TRUE){
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <extract_data+0x38>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <extract_data+0x26>
		if(flag_knx_message_interested == FLAG_TRUE){
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <extract_data+0x3c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <extract_data+0x28>
			actual_humidity = get_2byte_float_value(buffer_knx_payload);
		}
		free(buffer_knx_payload);
 8003882:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <extract_data+0x40>)
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	f002 fb3f 	bl	8005f08 <free>
		flag_uart_reception_complete = FLAG_FALSE;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <extract_data+0x38>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
		flag_data_processed = FLAG_TRUE;
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <extract_data+0x44>)
 8003892:	3201      	adds	r2, #1
 8003894:	701a      	strb	r2, [r3, #0]
	  }
}
 8003896:	bd10      	pop	{r4, pc}
			actual_humidity = get_2byte_float_value(buffer_knx_payload);
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <extract_data+0x40>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	f7ff fc40 	bl	8003120 <get_2byte_float_value>
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <extract_data+0x48>)
 80038a2:	6018      	str	r0, [r3, #0]
 80038a4:	e7ed      	b.n	8003882 <extract_data+0x12>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	2000021a 	.word	0x2000021a
 80038ac:	20000219 	.word	0x20000219
 80038b0:	20000210 	.word	0x20000210
 80038b4:	20000004 	.word	0x20000004
 80038b8:	20000208 	.word	0x20000208

080038bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_MspInit+0x18>)
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	2101      	movs	r1, #1
 80038c2:	430a      	orrs	r2, r1
 80038c4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0552      	lsls	r2, r2, #21
 80038cc:	430a      	orrs	r2, r1
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038d0:	4770      	bx	lr
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40021000 	.word	0x40021000

080038d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80038d8:	e7fe      	b.n	80038d8 <NMI_Handler>

080038da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038da:	e7fe      	b.n	80038da <HardFault_Handler>

080038dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80038dc:	4770      	bx	lr

080038de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038de:	4770      	bx	lr

080038e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038e2:	f000 fa6f 	bl	8003dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80038e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038ea:	4802      	ldr	r0, [pc, #8]	; (80038f4 <LPTIM1_IRQHandler+0xc>)
 80038ec:	f000 fc7a 	bl	80041e4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80038f0:	bd10      	pop	{r4, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	20000250 	.word	0x20000250

080038f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80038f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038fa:	4802      	ldr	r0, [pc, #8]	; (8003904 <USART2_IRQHandler+0xc>)
 80038fc:	f001 fd8c 	bl	8005418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003900:	bd10      	pop	{r4, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000350 	.word	0x20000350

08003908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003908:	b510      	push	{r4, lr}
 800390a:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <_sbrk+0x38>)
 800390e:	490d      	ldr	r1, [pc, #52]	; (8003944 <_sbrk+0x3c>)
 8003910:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003912:	490d      	ldr	r1, [pc, #52]	; (8003948 <_sbrk+0x40>)
 8003914:	6809      	ldr	r1, [r1, #0]
 8003916:	2900      	cmp	r1, #0
 8003918:	d007      	beq.n	800392a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800391a:	490b      	ldr	r1, [pc, #44]	; (8003948 <_sbrk+0x40>)
 800391c:	6808      	ldr	r0, [r1, #0]
 800391e:	18c3      	adds	r3, r0, r3
 8003920:	4293      	cmp	r3, r2
 8003922:	d806      	bhi.n	8003932 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <_sbrk+0x40>)
 8003926:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003928:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800392a:	4907      	ldr	r1, [pc, #28]	; (8003948 <_sbrk+0x40>)
 800392c:	4807      	ldr	r0, [pc, #28]	; (800394c <_sbrk+0x44>)
 800392e:	6008      	str	r0, [r1, #0]
 8003930:	e7f3      	b.n	800391a <_sbrk+0x12>
    errno = ENOMEM;
 8003932:	f002 fab5 	bl	8005ea0 <__errno>
 8003936:	230c      	movs	r3, #12
 8003938:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800393a:	2001      	movs	r0, #1
 800393c:	4240      	negs	r0, r0
 800393e:	e7f3      	b.n	8003928 <_sbrk+0x20>
 8003940:	20002000 	.word	0x20002000
 8003944:	00000400 	.word	0x00000400
 8003948:	20000220 	.word	0x20000220
 800394c:	200003e0 	.word	0x200003e0

08003950 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003950:	4770      	bx	lr
	...

08003954 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 8003954:	6803      	ldr	r3, [r0, #0]
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	05d2      	lsls	r2, r2, #23
 800395a:	4293      	cmp	r3, r2
 800395c:	d006      	beq.n	800396c <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM21)
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_TIM_PWM_MspInit+0x3c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_TIM_PWM_MspInit+0x24>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM22)
 8003964:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <HAL_TIM_PWM_MspInit+0x40>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_PWM_MspInit+0x30>
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 800396a:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 800396c:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <HAL_TIM_PWM_MspInit+0x44>)
 800396e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003970:	2101      	movs	r1, #1
 8003972:	430b      	orrs	r3, r1
 8003974:	6393      	str	r3, [r2, #56]	; 0x38
 8003976:	e7f8      	b.n	800396a <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_TIM_PWM_MspInit+0x44>)
 800397a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800397c:	2104      	movs	r1, #4
 800397e:	430b      	orrs	r3, r1
 8003980:	6353      	str	r3, [r2, #52]	; 0x34
 8003982:	e7f2      	b.n	800396a <HAL_TIM_PWM_MspInit+0x16>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_TIM_PWM_MspInit+0x44>)
 8003986:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003988:	2120      	movs	r1, #32
 800398a:	430b      	orrs	r3, r1
 800398c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800398e:	e7ec      	b.n	800396a <HAL_TIM_PWM_MspInit+0x16>
 8003990:	40010800 	.word	0x40010800
 8003994:	40011400 	.word	0x40011400
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800399c:	b510      	push	{r4, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a2:	2214      	movs	r2, #20
 80039a4:	2100      	movs	r1, #0
 80039a6:	a803      	add	r0, sp, #12
 80039a8:	f002 fab8 	bl	8005f1c <memset>
  if(timHandle->Instance==TIM2)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	05d2      	lsls	r2, r2, #23
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_TIM_MspPostInit+0x2a>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM21)
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <HAL_TIM_MspPostInit+0xa4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_TIM_MspPostInit+0x52>

  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM22)
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_TIM_MspPostInit+0xa8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d029      	beq.n	8003a16 <HAL_TIM_MspPostInit+0x7a>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 80039c2:	b008      	add	sp, #32
 80039c4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c6:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <HAL_TIM_MspPostInit+0xac>)
 80039c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039ca:	2301      	movs	r3, #1
 80039cc:	4319      	orrs	r1, r3
 80039ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039d2:	4013      	ands	r3, r2
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80039d8:	230f      	movs	r3, #15
 80039da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	3b0d      	subs	r3, #13
 80039de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80039e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	20a0      	movs	r0, #160	; 0xa0
 80039e4:	a903      	add	r1, sp, #12
 80039e6:	05c0      	lsls	r0, r0, #23
 80039e8:	f000 fab6 	bl	8003f58 <HAL_GPIO_Init>
 80039ec:	e7e9      	b.n	80039c2 <HAL_TIM_MspPostInit+0x26>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ee:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <HAL_TIM_MspPostInit+0xac>)
 80039f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039f2:	2302      	movs	r3, #2
 80039f4:	4319      	orrs	r1, r3
 80039f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039fa:	401a      	ands	r2, r3
 80039fc:	9201      	str	r2, [sp, #4]
 80039fe:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003a00:	22c0      	movs	r2, #192	; 0xc0
 8003a02:	01d2      	lsls	r2, r2, #7
 8003a04:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8003a08:	3303      	adds	r3, #3
 8003a0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0c:	a903      	add	r1, sp, #12
 8003a0e:	480f      	ldr	r0, [pc, #60]	; (8003a4c <HAL_TIM_MspPostInit+0xb0>)
 8003a10:	f000 faa2 	bl	8003f58 <HAL_GPIO_Init>
 8003a14:	e7d5      	b.n	80039c2 <HAL_TIM_MspPostInit+0x26>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_TIM_MspPostInit+0xac>)
 8003a18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4319      	orrs	r1, r3
 8003a1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a22:	4013      	ands	r3, r2
 8003a24:	9302      	str	r3, [sp, #8]
 8003a26:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a28:	23c0      	movs	r3, #192	; 0xc0
 8003a2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2c:	3bbe      	subs	r3, #190	; 0xbe
 8003a2e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8003a30:	3303      	adds	r3, #3
 8003a32:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a34:	20a0      	movs	r0, #160	; 0xa0
 8003a36:	a903      	add	r1, sp, #12
 8003a38:	05c0      	lsls	r0, r0, #23
 8003a3a:	f000 fa8d 	bl	8003f58 <HAL_GPIO_Init>
}
 8003a3e:	e7c0      	b.n	80039c2 <HAL_TIM_MspPostInit+0x26>
 8003a40:	40010800 	.word	0x40010800
 8003a44:	40011400 	.word	0x40011400
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	50000400 	.word	0x50000400

08003a50 <MX_TIM2_Init>:
{
 8003a50:	b500      	push	{lr}
 8003a52:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	2208      	movs	r2, #8
 8003a56:	2100      	movs	r1, #0
 8003a58:	a804      	add	r0, sp, #16
 8003a5a:	f002 fa5f 	bl	8005f1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a5e:	2210      	movs	r2, #16
 8003a60:	2100      	movs	r1, #0
 8003a62:	4668      	mov	r0, sp
 8003a64:	f002 fa5a 	bl	8005f1c <memset>
  htim2.Instance = TIM2;
 8003a68:	4829      	ldr	r0, [pc, #164]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003a74:	2220      	movs	r2, #32
 8003a76:	6082      	str	r2, [r0, #8]
  htim2.Init.Period = 4000;
 8003a78:	22fa      	movs	r2, #250	; 0xfa
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7e:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a80:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a82:	f001 fa74 	bl	8004f6e <HAL_TIM_PWM_Init>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d12f      	bne.n	8003aea <MX_TIM2_Init+0x9a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8e:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a90:	a904      	add	r1, sp, #16
 8003a92:	481f      	ldr	r0, [pc, #124]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003a94:	f001 fb90 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d129      	bne.n	8003af0 <MX_TIM2_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a9c:	2360      	movs	r3, #96	; 0x60
 8003a9e:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa4:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa6:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4669      	mov	r1, sp
 8003aac:	4818      	ldr	r0, [pc, #96]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003aae:	f001 fb0f 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d11f      	bne.n	8003af6 <MX_TIM2_Init+0xa6>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	4669      	mov	r1, sp
 8003aba:	4815      	ldr	r0, [pc, #84]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003abc:	f001 fb08 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d11b      	bne.n	8003afc <MX_TIM2_Init+0xac>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4669      	mov	r1, sp
 8003ac8:	4811      	ldr	r0, [pc, #68]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003aca:	f001 fb01 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003ace:	2800      	cmp	r0, #0
 8003ad0:	d117      	bne.n	8003b02 <MX_TIM2_Init+0xb2>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003ad2:	220c      	movs	r2, #12
 8003ad4:	4669      	mov	r1, sp
 8003ad6:	480e      	ldr	r0, [pc, #56]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003ad8:	f001 fafa 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d113      	bne.n	8003b08 <MX_TIM2_Init+0xb8>
  HAL_TIM_MspPostInit(&htim2);
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <MX_TIM2_Init+0xc0>)
 8003ae2:	f7ff ff5b 	bl	800399c <HAL_TIM_MspPostInit>
}
 8003ae6:	b007      	add	sp, #28
 8003ae8:	bd00      	pop	{pc}
    Error_Handler();
 8003aea:	f7ff fc31 	bl	8003350 <Error_Handler>
 8003aee:	e7cc      	b.n	8003a8a <MX_TIM2_Init+0x3a>
    Error_Handler();
 8003af0:	f7ff fc2e 	bl	8003350 <Error_Handler>
 8003af4:	e7d2      	b.n	8003a9c <MX_TIM2_Init+0x4c>
    Error_Handler();
 8003af6:	f7ff fc2b 	bl	8003350 <Error_Handler>
 8003afa:	e7dc      	b.n	8003ab6 <MX_TIM2_Init+0x66>
    Error_Handler();
 8003afc:	f7ff fc28 	bl	8003350 <Error_Handler>
 8003b00:	e7e0      	b.n	8003ac4 <MX_TIM2_Init+0x74>
    Error_Handler();
 8003b02:	f7ff fc25 	bl	8003350 <Error_Handler>
 8003b06:	e7e4      	b.n	8003ad2 <MX_TIM2_Init+0x82>
    Error_Handler();
 8003b08:	f7ff fc22 	bl	8003350 <Error_Handler>
 8003b0c:	e7e8      	b.n	8003ae0 <MX_TIM2_Init+0x90>
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	200002d0 	.word	0x200002d0

08003b14 <MX_TIM21_Init>:
{
 8003b14:	b500      	push	{lr}
 8003b16:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b18:	2208      	movs	r2, #8
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	a804      	add	r0, sp, #16
 8003b1e:	f002 f9fd 	bl	8005f1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b22:	2210      	movs	r2, #16
 8003b24:	2100      	movs	r1, #0
 8003b26:	4668      	mov	r0, sp
 8003b28:	f002 f9f8 	bl	8005f1c <memset>
  htim21.Instance = TIM21;
 8003b2c:	481e      	ldr	r0, [pc, #120]	; (8003ba8 <MX_TIM21_Init+0x94>)
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <MX_TIM21_Init+0x98>)
 8003b30:	6003      	str	r3, [r0, #0]
  htim21.Init.Prescaler = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	6043      	str	r3, [r0, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003b36:	2220      	movs	r2, #32
 8003b38:	6082      	str	r2, [r0, #8]
  htim21.Init.Period = 4000;
 8003b3a:	22fa      	movs	r2, #250	; 0xfa
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	60c2      	str	r2, [r0, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b40:	6103      	str	r3, [r0, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b42:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8003b44:	f001 fa13 	bl	8004f6e <HAL_TIM_PWM_Init>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d121      	bne.n	8003b90 <MX_TIM21_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b50:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003b52:	a904      	add	r1, sp, #16
 8003b54:	4814      	ldr	r0, [pc, #80]	; (8003ba8 <MX_TIM21_Init+0x94>)
 8003b56:	f001 fb2f 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d11b      	bne.n	8003b96 <MX_TIM21_Init+0x82>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b5e:	2360      	movs	r3, #96	; 0x60
 8003b60:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b66:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b68:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	4669      	mov	r1, sp
 8003b6e:	480e      	ldr	r0, [pc, #56]	; (8003ba8 <MX_TIM21_Init+0x94>)
 8003b70:	f001 faae 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003b74:	2800      	cmp	r0, #0
 8003b76:	d111      	bne.n	8003b9c <MX_TIM21_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4669      	mov	r1, sp
 8003b7c:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <MX_TIM21_Init+0x94>)
 8003b7e:	f001 faa7 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d10d      	bne.n	8003ba2 <MX_TIM21_Init+0x8e>
  HAL_TIM_MspPostInit(&htim21);
 8003b86:	4808      	ldr	r0, [pc, #32]	; (8003ba8 <MX_TIM21_Init+0x94>)
 8003b88:	f7ff ff08 	bl	800399c <HAL_TIM_MspPostInit>
}
 8003b8c:	b007      	add	sp, #28
 8003b8e:	bd00      	pop	{pc}
    Error_Handler();
 8003b90:	f7ff fbde 	bl	8003350 <Error_Handler>
 8003b94:	e7da      	b.n	8003b4c <MX_TIM21_Init+0x38>
    Error_Handler();
 8003b96:	f7ff fbdb 	bl	8003350 <Error_Handler>
 8003b9a:	e7e0      	b.n	8003b5e <MX_TIM21_Init+0x4a>
    Error_Handler();
 8003b9c:	f7ff fbd8 	bl	8003350 <Error_Handler>
 8003ba0:	e7ea      	b.n	8003b78 <MX_TIM21_Init+0x64>
    Error_Handler();
 8003ba2:	f7ff fbd5 	bl	8003350 <Error_Handler>
 8003ba6:	e7ee      	b.n	8003b86 <MX_TIM21_Init+0x72>
 8003ba8:	20000310 	.word	0x20000310
 8003bac:	40010800 	.word	0x40010800

08003bb0 <MX_TIM22_Init>:
{
 8003bb0:	b500      	push	{lr}
 8003bb2:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	a804      	add	r0, sp, #16
 8003bba:	f002 f9af 	bl	8005f1c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4668      	mov	r0, sp
 8003bc4:	f002 f9aa 	bl	8005f1c <memset>
  htim22.Instance = TIM22;
 8003bc8:	481e      	ldr	r0, [pc, #120]	; (8003c44 <MX_TIM22_Init+0x94>)
 8003bca:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <MX_TIM22_Init+0x98>)
 8003bcc:	6003      	str	r3, [r0, #0]
  htim22.Init.Prescaler = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6043      	str	r3, [r0, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	6082      	str	r2, [r0, #8]
  htim22.Init.Period = 4000;
 8003bd6:	22fa      	movs	r2, #250	; 0xfa
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	60c2      	str	r2, [r0, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bdc:	6103      	str	r3, [r0, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bde:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8003be0:	f001 f9c5 	bl	8004f6e <HAL_TIM_PWM_Init>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	d121      	bne.n	8003c2c <MX_TIM22_Init+0x7c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be8:	2300      	movs	r3, #0
 8003bea:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bec:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003bee:	a904      	add	r1, sp, #16
 8003bf0:	4814      	ldr	r0, [pc, #80]	; (8003c44 <MX_TIM22_Init+0x94>)
 8003bf2:	f001 fae1 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d11b      	bne.n	8003c32 <MX_TIM22_Init+0x82>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bfa:	2360      	movs	r3, #96	; 0x60
 8003bfc:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c02:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c04:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c06:	2200      	movs	r2, #0
 8003c08:	4669      	mov	r1, sp
 8003c0a:	480e      	ldr	r0, [pc, #56]	; (8003c44 <MX_TIM22_Init+0x94>)
 8003c0c:	f001 fa60 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d111      	bne.n	8003c38 <MX_TIM22_Init+0x88>
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c14:	2204      	movs	r2, #4
 8003c16:	4669      	mov	r1, sp
 8003c18:	480a      	ldr	r0, [pc, #40]	; (8003c44 <MX_TIM22_Init+0x94>)
 8003c1a:	f001 fa59 	bl	80050d0 <HAL_TIM_PWM_ConfigChannel>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d10d      	bne.n	8003c3e <MX_TIM22_Init+0x8e>
  HAL_TIM_MspPostInit(&htim22);
 8003c22:	4808      	ldr	r0, [pc, #32]	; (8003c44 <MX_TIM22_Init+0x94>)
 8003c24:	f7ff feba 	bl	800399c <HAL_TIM_MspPostInit>
}
 8003c28:	b007      	add	sp, #28
 8003c2a:	bd00      	pop	{pc}
    Error_Handler();
 8003c2c:	f7ff fb90 	bl	8003350 <Error_Handler>
 8003c30:	e7da      	b.n	8003be8 <MX_TIM22_Init+0x38>
    Error_Handler();
 8003c32:	f7ff fb8d 	bl	8003350 <Error_Handler>
 8003c36:	e7e0      	b.n	8003bfa <MX_TIM22_Init+0x4a>
    Error_Handler();
 8003c38:	f7ff fb8a 	bl	8003350 <Error_Handler>
 8003c3c:	e7ea      	b.n	8003c14 <MX_TIM22_Init+0x64>
    Error_Handler();
 8003c3e:	f7ff fb87 	bl	8003350 <Error_Handler>
 8003c42:	e7ee      	b.n	8003c22 <MX_TIM22_Init+0x72>
 8003c44:	20000290 	.word	0x20000290
 8003c48:	40011400 	.word	0x40011400

08003c4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c4c:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c4e:	480c      	ldr	r0, [pc, #48]	; (8003c80 <MX_USART2_UART_Init+0x34>)
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_USART2_UART_Init+0x38>)
 8003c52:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 19200;
 8003c54:	2396      	movs	r3, #150	; 0x96
 8003c56:	01db      	lsls	r3, r3, #7
 8003c58:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c5e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c60:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c62:	220c      	movs	r2, #12
 8003c64:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c66:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c68:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c6a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c6c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c6e:	f002 f82f 	bl	8005cd0 <HAL_UART_Init>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d100      	bne.n	8003c78 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c76:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003c78:	f7ff fb6a 	bl	8003350 <Error_Handler>
}
 8003c7c:	e7fb      	b.n	8003c76 <MX_USART2_UART_Init+0x2a>
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	20000350 	.word	0x20000350
 8003c84:	40004400 	.word	0x40004400

08003c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c88:	b510      	push	{r4, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8e:	2214      	movs	r2, #20
 8003c90:	2100      	movs	r1, #0
 8003c92:	a801      	add	r0, sp, #4
 8003c94:	f002 f942 	bl	8005f1c <memset>
  if(uartHandle->Instance==USART2)
 8003c98:	6822      	ldr	r2, [r4, #0]
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_UART_MspInit+0x68>)
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ca0:	b006      	add	sp, #24
 8003ca2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_UART_MspInit+0x6c>)
 8003ca6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003ca8:	2280      	movs	r2, #128	; 0x80
 8003caa:	0292      	lsls	r2, r2, #10
 8003cac:	430a      	orrs	r2, r1
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	401a      	ands	r2, r3
 8003cbc:	9200      	str	r2, [sp, #0]
 8003cbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003cc0:	23c0      	movs	r3, #192	; 0xc0
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cca:	3301      	adds	r3, #1
 8003ccc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003cce:	3301      	adds	r3, #1
 8003cd0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cd2:	20a0      	movs	r0, #160	; 0xa0
 8003cd4:	a901      	add	r1, sp, #4
 8003cd6:	05c0      	lsls	r0, r0, #23
 8003cd8:	f000 f93e 	bl	8003f58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2100      	movs	r1, #0
 8003ce0:	201c      	movs	r0, #28
 8003ce2:	f000 f893 	bl	8003e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ce6:	201c      	movs	r0, #28
 8003ce8:	f000 f8c2 	bl	8003e70 <HAL_NVIC_EnableIRQ>
}
 8003cec:	e7d8      	b.n	8003ca0 <HAL_UART_MspInit+0x18>
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	40021000 	.word	0x40021000

08003cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cfc:	480d      	ldr	r0, [pc, #52]	; (8003d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cfe:	490e      	ldr	r1, [pc, #56]	; (8003d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d00:	4a0e      	ldr	r2, [pc, #56]	; (8003d3c <LoopForever+0xe>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d04:	e002      	b.n	8003d0c <LoopCopyDataInit>

08003d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0a:	3304      	adds	r3, #4

08003d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d10:	d3f9      	bcc.n	8003d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d12:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d14:	4c0b      	ldr	r4, [pc, #44]	; (8003d44 <LoopForever+0x16>)
  movs r3, #0
 8003d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d18:	e001      	b.n	8003d1e <LoopFillZerobss>

08003d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d1c:	3204      	adds	r2, #4

08003d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d20:	d3fb      	bcc.n	8003d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d22:	f7ff fe15 	bl	8003950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d26:	f002 f8c1 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2a:	f7ff fb69 	bl	8003400 <main>

08003d2e <LoopForever>:

LoopForever:
    b LoopForever
 8003d2e:	e7fe      	b.n	8003d2e <LoopForever>
   ldr   r0, =_estack
 8003d30:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d38:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003d3c:	08007640 	.word	0x08007640
  ldr r2, =_sbss
 8003d40:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003d44:	200003dc 	.word	0x200003dc

08003d48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC1_COMP_IRQHandler>
	...

08003d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b510      	push	{r4, lr}
 8003d4e:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_InitTick+0x44>)
 8003d52:	7819      	ldrb	r1, [r3, #0]
 8003d54:	20fa      	movs	r0, #250	; 0xfa
 8003d56:	0080      	lsls	r0, r0, #2
 8003d58:	f7fc f9d6 	bl	8000108 <__udivsi3>
 8003d5c:	0001      	movs	r1, r0
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_InitTick+0x48>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	f7fc f9d1 	bl	8000108 <__udivsi3>
 8003d66:	f000 f88f 	bl	8003e88 <HAL_SYSTICK_Config>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d10d      	bne.n	8003d8a <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d6e:	2c03      	cmp	r4, #3
 8003d70:	d901      	bls.n	8003d76 <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8003d72:	2001      	movs	r0, #1
 8003d74:	e00a      	b.n	8003d8c <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d76:	3001      	adds	r0, #1
 8003d78:	2200      	movs	r2, #0
 8003d7a:	0021      	movs	r1, r4
 8003d7c:	4240      	negs	r0, r0
 8003d7e:	f000 f845 	bl	8003e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d82:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <HAL_InitTick+0x4c>)
 8003d84:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d86:	2000      	movs	r0, #0
 8003d88:	e000      	b.n	8003d8c <HAL_InitTick+0x40>
    return HAL_ERROR;
 8003d8a:	2001      	movs	r0, #1
}
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	2000000c 	.word	0x2000000c
 8003d94:	20000008 	.word	0x20000008
 8003d98:	20000010 	.word	0x20000010

08003d9c <HAL_Init>:
{
 8003d9c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003d9e:	4a08      	ldr	r2, [pc, #32]	; (8003dc0 <HAL_Init+0x24>)
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7ff ffcf 	bl	8003d4c <HAL_InitTick>
 8003dae:	1e04      	subs	r4, r0, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8003db2:	2401      	movs	r4, #1
}
 8003db4:	0020      	movs	r0, r4
 8003db6:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8003db8:	f7ff fd80 	bl	80038bc <HAL_MspInit>
 8003dbc:	e7fa      	b.n	8003db4 <HAL_Init+0x18>
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	40022000 	.word	0x40022000

08003dc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003dc4:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <HAL_IncTick+0x10>)
 8003dc6:	6811      	ldr	r1, [r2, #0]
 8003dc8:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <HAL_IncTick+0x14>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	185b      	adds	r3, r3, r1
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	4770      	bx	lr
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	200003d4 	.word	0x200003d4
 8003dd8:	2000000c 	.word	0x2000000c

08003ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ddc:	4b01      	ldr	r3, [pc, #4]	; (8003de4 <HAL_GetTick+0x8>)
 8003dde:	6818      	ldr	r0, [r3, #0]
}
 8003de0:	4770      	bx	lr
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	200003d4 	.word	0x200003d4

08003de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff fff6 	bl	8003ddc <HAL_GetTick>
 8003df0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df2:	1c63      	adds	r3, r4, #1
 8003df4:	d002      	beq.n	8003dfc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003df6:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <HAL_Delay+0x20>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dfc:	f7ff ffee 	bl	8003ddc <HAL_GetTick>
 8003e00:	1b40      	subs	r0, r0, r5
 8003e02:	42a0      	cmp	r0, r4
 8003e04:	d3fa      	bcc.n	8003dfc <HAL_Delay+0x14>
  {
  }
}
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	db11      	blt.n	8003e36 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e12:	0883      	lsrs	r3, r0, #2
 8003e14:	4d14      	ldr	r5, [pc, #80]	; (8003e68 <HAL_NVIC_SetPriority+0x5c>)
 8003e16:	33c0      	adds	r3, #192	; 0xc0
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	595c      	ldr	r4, [r3, r5]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	4010      	ands	r0, r2
 8003e20:	00c0      	lsls	r0, r0, #3
 8003e22:	32fc      	adds	r2, #252	; 0xfc
 8003e24:	0016      	movs	r6, r2
 8003e26:	4086      	lsls	r6, r0
 8003e28:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e2a:	0189      	lsls	r1, r1, #6
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e30:	4322      	orrs	r2, r4
 8003e32:	515a      	str	r2, [r3, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e36:	b2c0      	uxtb	r0, r0
 8003e38:	230f      	movs	r3, #15
 8003e3a:	4003      	ands	r3, r0
 8003e3c:	3b08      	subs	r3, #8
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3306      	adds	r3, #6
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_NVIC_SetPriority+0x60>)
 8003e46:	4694      	mov	ip, r2
 8003e48:	4463      	add	r3, ip
 8003e4a:	685d      	ldr	r5, [r3, #4]
 8003e4c:	2403      	movs	r4, #3
 8003e4e:	4020      	ands	r0, r4
 8003e50:	00c0      	lsls	r0, r0, #3
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	0014      	movs	r4, r2
 8003e56:	4084      	lsls	r4, r0
 8003e58:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e5a:	0189      	lsls	r1, r1, #6
 8003e5c:	4011      	ands	r1, r2
 8003e5e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e60:	4329      	orrs	r1, r5
 8003e62:	6059      	str	r1, [r3, #4]
 8003e64:	e7e6      	b.n	8003e34 <HAL_NVIC_SetPriority+0x28>
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e70:	2800      	cmp	r0, #0
 8003e72:	db05      	blt.n	8003e80 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e74:	231f      	movs	r3, #31
 8003e76:	4018      	ands	r0, r3
 8003e78:	3b1e      	subs	r3, #30
 8003e7a:	4083      	lsls	r3, r0
 8003e7c:	4a01      	ldr	r2, [pc, #4]	; (8003e84 <HAL_NVIC_EnableIRQ+0x14>)
 8003e7e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e80:	4770      	bx	lr
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	e000e100 	.word	0xe000e100

08003e88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e88:	3801      	subs	r0, #1
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_SYSTICK_Config+0x2c>)
 8003e8c:	4298      	cmp	r0, r3
 8003e8e:	d80f      	bhi.n	8003eb0 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e90:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <HAL_SYSTICK_Config+0x30>)
 8003e92:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e94:	4809      	ldr	r0, [pc, #36]	; (8003ebc <HAL_SYSTICK_Config+0x34>)
 8003e96:	6a03      	ldr	r3, [r0, #32]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	21c0      	movs	r1, #192	; 0xc0
 8003e9e:	0609      	lsls	r1, r1, #24
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eac:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003eae:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003eb0:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8003eb2:	e7fc      	b.n	8003eae <HAL_SYSTICK_Config+0x26>
 8003eb4:	00ffffff 	.word	0x00ffffff
 8003eb8:	e000e010 	.word	0xe000e010
 8003ebc:	e000ed00 	.word	0xe000ed00

08003ec0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec2:	2325      	movs	r3, #37	; 0x25
 8003ec4:	5cc3      	ldrb	r3, [r0, r3]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d006      	beq.n	8003ed8 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eca:	2304      	movs	r3, #4
 8003ecc:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ece:	3320      	adds	r3, #32
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 8003ed4:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8003ed6:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ed8:	6802      	ldr	r2, [r0, #0]
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	210e      	movs	r1, #14
 8003ede:	438b      	bics	r3, r1
 8003ee0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ee2:	6801      	ldr	r1, [r0, #0]
 8003ee4:	680a      	ldr	r2, [r1, #0]
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	439a      	bics	r2, r3
 8003eea:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eec:	221c      	movs	r2, #28
 8003eee:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003ef4:	001c      	movs	r4, r3
 8003ef6:	4094      	lsls	r4, r2
 8003ef8:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003efa:	2225      	movs	r2, #37	; 0x25
 8003efc:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003efe:	3323      	adds	r3, #35	; 0x23
 8003f00:	2200      	movs	r2, #0
 8003f02:	54c2      	strb	r2, [r0, r3]
    return status;
 8003f04:	2000      	movs	r0, #0
 8003f06:	e7e6      	b.n	8003ed6 <HAL_DMA_Abort+0x16>

08003f08 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f08:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f0a:	2325      	movs	r3, #37	; 0x25
 8003f0c:	5cc3      	ldrb	r3, [r0, r3]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f12:	2304      	movs	r3, #4
 8003f14:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8003f16:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003f18:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1a:	6802      	ldr	r2, [r0, #0]
 8003f1c:	6813      	ldr	r3, [r2, #0]
 8003f1e:	210e      	movs	r1, #14
 8003f20:	438b      	bics	r3, r1
 8003f22:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003f24:	6801      	ldr	r1, [r0, #0]
 8003f26:	680a      	ldr	r2, [r1, #0]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	439a      	bics	r2, r3
 8003f2c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f2e:	221c      	movs	r2, #28
 8003f30:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003f32:	400a      	ands	r2, r1
 8003f34:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f36:	001c      	movs	r4, r3
 8003f38:	4094      	lsls	r4, r2
 8003f3a:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	2225      	movs	r2, #37	; 0x25
 8003f3e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8003f40:	3323      	adds	r3, #35	; 0x23
 8003f42:	2200      	movs	r2, #0
 8003f44:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8003f46:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 8003f4c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e7e2      	b.n	8003f18 <HAL_DMA_Abort_IT+0x10>
 8003f52:	2000      	movs	r0, #0
 8003f54:	e7e0      	b.n	8003f18 <HAL_DMA_Abort_IT+0x10>
	...

08003f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8003f5a:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f5c:	e057      	b.n	800400e <HAL_GPIO_Init+0xb6>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f5e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f60:	005f      	lsls	r7, r3, #1
 8003f62:	2603      	movs	r6, #3
 8003f64:	40be      	lsls	r6, r7
 8003f66:	43b5      	bics	r5, r6
 8003f68:	002e      	movs	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6a:	68cd      	ldr	r5, [r1, #12]
 8003f6c:	40bd      	lsls	r5, r7
 8003f6e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003f70:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f72:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f74:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f76:	684c      	ldr	r4, [r1, #4]
 8003f78:	0926      	lsrs	r6, r4, #4
 8003f7a:	2401      	movs	r4, #1
 8003f7c:	4034      	ands	r4, r6
 8003f7e:	409c      	lsls	r4, r3
 8003f80:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003f82:	6044      	str	r4, [r0, #4]
 8003f84:	e051      	b.n	800402a <HAL_GPIO_Init+0xd2>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f86:	08dd      	lsrs	r5, r3, #3
 8003f88:	3508      	adds	r5, #8
 8003f8a:	00ad      	lsls	r5, r5, #2
 8003f8c:	582e      	ldr	r6, [r5, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003f8e:	3405      	adds	r4, #5
 8003f90:	401c      	ands	r4, r3
 8003f92:	00a4      	lsls	r4, r4, #2
 8003f94:	270f      	movs	r7, #15
 8003f96:	40a7      	lsls	r7, r4
 8003f98:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003f9a:	690f      	ldr	r7, [r1, #16]
 8003f9c:	40a7      	lsls	r7, r4
 8003f9e:	003c      	movs	r4, r7
 8003fa0:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = temp;
 8003fa2:	502c      	str	r4, [r5, r0]
 8003fa4:	e055      	b.n	8004052 <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fa6:	2605      	movs	r6, #5
 8003fa8:	e000      	b.n	8003fac <HAL_GPIO_Init+0x54>
 8003faa:	2600      	movs	r6, #0
 8003fac:	40ae      	lsls	r6, r5
 8003fae:	0035      	movs	r5, r6
 8003fb0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fb2:	3402      	adds	r4, #2
 8003fb4:	00a4      	lsls	r4, r4, #2
 8003fb6:	4e41      	ldr	r6, [pc, #260]	; (80040bc <HAL_GPIO_Init+0x164>)
 8003fb8:	51a5      	str	r5, [r4, r6]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fba:	4c41      	ldr	r4, [pc, #260]	; (80040c0 <HAL_GPIO_Init+0x168>)
 8003fbc:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003fbe:	43d4      	mvns	r4, r2
 8003fc0:	002e      	movs	r6, r5
 8003fc2:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fc4:	684f      	ldr	r7, [r1, #4]
 8003fc6:	03ff      	lsls	r7, r7, #15
 8003fc8:	d501      	bpl.n	8003fce <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003fca:	4315      	orrs	r5, r2
 8003fcc:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8003fce:	4d3c      	ldr	r5, [pc, #240]	; (80040c0 <HAL_GPIO_Init+0x168>)
 8003fd0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8003fd2:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8003fd4:	002e      	movs	r6, r5
 8003fd6:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fd8:	684f      	ldr	r7, [r1, #4]
 8003fda:	03bf      	lsls	r7, r7, #14
 8003fdc:	d501      	bpl.n	8003fe2 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8003fde:	4315      	orrs	r5, r2
 8003fe0:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8003fe2:	4d37      	ldr	r5, [pc, #220]	; (80040c0 <HAL_GPIO_Init+0x168>)
 8003fe4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	002e      	movs	r6, r5
 8003fea:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fec:	684f      	ldr	r7, [r1, #4]
 8003fee:	02ff      	lsls	r7, r7, #11
 8003ff0:	d501      	bpl.n	8003ff6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003ff2:	4315      	orrs	r5, r2
 8003ff4:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8003ff6:	4d32      	ldr	r5, [pc, #200]	; (80040c0 <HAL_GPIO_Init+0x168>)
 8003ff8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8003ffa:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8003ffc:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ffe:	684e      	ldr	r6, [r1, #4]
 8004000:	02b6      	lsls	r6, r6, #10
 8004002:	d501      	bpl.n	8004008 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 8004004:	432a      	orrs	r2, r5
 8004006:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <HAL_GPIO_Init+0x168>)
 800400a:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 800400c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800400e:	680a      	ldr	r2, [r1, #0]
 8004010:	0014      	movs	r4, r2
 8004012:	40dc      	lsrs	r4, r3
 8004014:	d051      	beq.n	80040ba <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004016:	2401      	movs	r4, #1
 8004018:	409c      	lsls	r4, r3
 800401a:	4022      	ands	r2, r4
    if (iocurrent)
 800401c:	d0f6      	beq.n	800400c <HAL_GPIO_Init+0xb4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800401e:	2503      	movs	r5, #3
 8004020:	684e      	ldr	r6, [r1, #4]
 8004022:	4035      	ands	r5, r6
 8004024:	3d01      	subs	r5, #1
 8004026:	2d01      	cmp	r5, #1
 8004028:	d999      	bls.n	8003f5e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800402a:	2403      	movs	r4, #3
 800402c:	684d      	ldr	r5, [r1, #4]
 800402e:	402c      	ands	r4, r5
 8004030:	2c03      	cmp	r4, #3
 8004032:	d009      	beq.n	8004048 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 8004034:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004036:	005e      	lsls	r6, r3, #1
 8004038:	2503      	movs	r5, #3
 800403a:	40b5      	lsls	r5, r6
 800403c:	43ac      	bics	r4, r5
 800403e:	0025      	movs	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004040:	688c      	ldr	r4, [r1, #8]
 8004042:	40b4      	lsls	r4, r6
 8004044:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8004046:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004048:	2403      	movs	r4, #3
 800404a:	684d      	ldr	r5, [r1, #4]
 800404c:	402c      	ands	r4, r5
 800404e:	2c02      	cmp	r4, #2
 8004050:	d099      	beq.n	8003f86 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004052:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004054:	005e      	lsls	r6, r3, #1
 8004056:	2403      	movs	r4, #3
 8004058:	0027      	movs	r7, r4
 800405a:	40b7      	lsls	r7, r6
 800405c:	43bd      	bics	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800405e:	684f      	ldr	r7, [r1, #4]
 8004060:	403c      	ands	r4, r7
 8004062:	40b4      	lsls	r4, r6
 8004064:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8004066:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004068:	24c0      	movs	r4, #192	; 0xc0
 800406a:	02a4      	lsls	r4, r4, #10
 800406c:	684d      	ldr	r5, [r1, #4]
 800406e:	4225      	tst	r5, r4
 8004070:	d0cc      	beq.n	800400c <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004072:	4d14      	ldr	r5, [pc, #80]	; (80040c4 <HAL_GPIO_Init+0x16c>)
 8004074:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8004076:	2601      	movs	r6, #1
 8004078:	4334      	orrs	r4, r6
 800407a:	636c      	str	r4, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 800407c:	089c      	lsrs	r4, r3, #2
 800407e:	1ca5      	adds	r5, r4, #2
 8004080:	00ad      	lsls	r5, r5, #2
 8004082:	4e0e      	ldr	r6, [pc, #56]	; (80040bc <HAL_GPIO_Init+0x164>)
 8004084:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004086:	2503      	movs	r5, #3
 8004088:	401d      	ands	r5, r3
 800408a:	00ad      	lsls	r5, r5, #2
 800408c:	260f      	movs	r6, #15
 800408e:	40ae      	lsls	r6, r5
 8004090:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004092:	26a0      	movs	r6, #160	; 0xa0
 8004094:	05f6      	lsls	r6, r6, #23
 8004096:	42b0      	cmp	r0, r6
 8004098:	d087      	beq.n	8003faa <HAL_GPIO_Init+0x52>
 800409a:	4e0b      	ldr	r6, [pc, #44]	; (80040c8 <HAL_GPIO_Init+0x170>)
 800409c:	42b0      	cmp	r0, r6
 800409e:	d008      	beq.n	80040b2 <HAL_GPIO_Init+0x15a>
 80040a0:	4e0a      	ldr	r6, [pc, #40]	; (80040cc <HAL_GPIO_Init+0x174>)
 80040a2:	42b0      	cmp	r0, r6
 80040a4:	d007      	beq.n	80040b6 <HAL_GPIO_Init+0x15e>
 80040a6:	4e0a      	ldr	r6, [pc, #40]	; (80040d0 <HAL_GPIO_Init+0x178>)
 80040a8:	42b0      	cmp	r0, r6
 80040aa:	d100      	bne.n	80040ae <HAL_GPIO_Init+0x156>
 80040ac:	e77b      	b.n	8003fa6 <HAL_GPIO_Init+0x4e>
 80040ae:	2606      	movs	r6, #6
 80040b0:	e77c      	b.n	8003fac <HAL_GPIO_Init+0x54>
 80040b2:	2601      	movs	r6, #1
 80040b4:	e77a      	b.n	8003fac <HAL_GPIO_Init+0x54>
 80040b6:	2602      	movs	r6, #2
 80040b8:	e778      	b.n	8003fac <HAL_GPIO_Init+0x54>
  }
}
 80040ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040bc:	40010000 	.word	0x40010000
 80040c0:	40010400 	.word	0x40010400
 80040c4:	40021000 	.word	0x40021000
 80040c8:	50000400 	.word	0x50000400
 80040cc:	50000800 	.word	0x50000800
 80040d0:	50001c00 	.word	0x50001c00

080040d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d4:	2a00      	cmp	r2, #0
 80040d6:	d101      	bne.n	80040dc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 80040d8:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80040da:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80040dc:	6181      	str	r1, [r0, #24]
 80040de:	e7fc      	b.n	80040da <HAL_GPIO_WritePin+0x6>

080040e0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e2:	0013      	movs	r3, r2
 80040e4:	400b      	ands	r3, r1
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	4391      	bics	r1, r2
 80040ea:	4319      	orrs	r1, r3
 80040ec:	6181      	str	r1, [r0, #24]
}
 80040ee:	4770      	bx	lr

080040f0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	0005      	movs	r5, r0
 80040f4:	000c      	movs	r4, r1
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <LPTIM_WaitForFlag+0x38>)
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	490c      	ldr	r1, [pc, #48]	; (800412c <LPTIM_WaitForFlag+0x3c>)
 80040fc:	f7fc f804 	bl	8000108 <__udivsi3>
 8004100:	0143      	lsls	r3, r0, #5
 8004102:	1a1b      	subs	r3, r3, r0
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	1818      	adds	r0, r3, r0
 8004108:	00c3      	lsls	r3, r0, #3
  HAL_StatusTypeDef result = HAL_OK;
 800410a:	2000      	movs	r0, #0
  do
  {
    count--;
 800410c:	3b01      	subs	r3, #1
    if (count == 0UL)
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <LPTIM_WaitForFlag+0x32>
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004112:	682a      	ldr	r2, [r5, #0]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	4022      	ands	r2, r4
 8004118:	42a2      	cmp	r2, r4
 800411a:	d001      	beq.n	8004120 <LPTIM_WaitForFlag+0x30>
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f5      	bne.n	800410c <LPTIM_WaitForFlag+0x1c>

  return result;
}
 8004120:	bd70      	pop	{r4, r5, r6, pc}
      result = HAL_TIMEOUT;
 8004122:	2003      	movs	r0, #3
 8004124:	e7f5      	b.n	8004112 <LPTIM_WaitForFlag+0x22>
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	20000008 	.word	0x20000008
 800412c:	00004e20 	.word	0x00004e20

08004130 <HAL_LPTIM_Init>:
{
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	1e04      	subs	r4, r0, #0
  if (hlptim == NULL)
 8004134:	d047      	beq.n	80041c6 <HAL_LPTIM_Init+0x96>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004136:	232e      	movs	r3, #46	; 0x2e
 8004138:	5cc3      	ldrb	r3, [r0, r3]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03d      	beq.n	80041ba <HAL_LPTIM_Init+0x8a>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800413e:	232e      	movs	r3, #46	; 0x2e
 8004140:	2202      	movs	r2, #2
 8004142:	54e2      	strb	r2, [r4, r3]
  tmpcfgr = hlptim->Instance->CFGR;
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	68eb      	ldr	r3, [r5, #12]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004148:	6860      	ldr	r0, [r4, #4]
 800414a:	2801      	cmp	r0, #1
 800414c:	d004      	beq.n	8004158 <HAL_LPTIM_Init+0x28>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800414e:	2280      	movs	r2, #128	; 0x80
 8004150:	0412      	lsls	r2, r2, #16
 8004152:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004154:	4291      	cmp	r1, r2
 8004156:	d101      	bne.n	800415c <HAL_LPTIM_Init+0x2c>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004158:	221e      	movs	r2, #30
 800415a:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800415c:	6961      	ldr	r1, [r4, #20]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <HAL_LPTIM_Init+0x9c>)
 8004160:	4291      	cmp	r1, r2
 8004162:	d001      	beq.n	8004168 <HAL_LPTIM_Init+0x38>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004164:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_LPTIM_Init+0xa0>)
 8004166:	4013      	ands	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_LPTIM_Init+0xa4>)
 800416a:	401a      	ands	r2, r3
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800416c:	68a3      	ldr	r3, [r4, #8]
 800416e:	4303      	orrs	r3, r0
              hlptim->Init.Clock.Prescaler |
 8004170:	6a26      	ldr	r6, [r4, #32]
 8004172:	4333      	orrs	r3, r6
              hlptim->Init.OutputPolarity  |
 8004174:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004176:	4333      	orrs	r3, r6
              hlptim->Init.CounterSource);
 8004178:	6aa6      	ldr	r6, [r4, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800417a:	4333      	orrs	r3, r6
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800417c:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800417e:	2800      	cmp	r0, #0
 8004180:	d103      	bne.n	800418a <HAL_LPTIM_Init+0x5a>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004182:	69e2      	ldr	r2, [r4, #28]
 8004184:	6927      	ldr	r7, [r4, #16]
 8004186:	433a      	orrs	r2, r7
 8004188:	4313      	orrs	r3, r2
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800418a:	2801      	cmp	r0, #1
 800418c:	d003      	beq.n	8004196 <HAL_LPTIM_Init+0x66>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	0412      	lsls	r2, r2, #16
 8004192:	4296      	cmp	r6, r2
 8004194:	d103      	bne.n	800419e <HAL_LPTIM_Init+0x6e>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004196:	68e2      	ldr	r2, [r4, #12]
 8004198:	6920      	ldr	r0, [r4, #16]
 800419a:	4302      	orrs	r2, r0
 800419c:	4313      	orrs	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800419e:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <HAL_LPTIM_Init+0x9c>)
 80041a0:	4291      	cmp	r1, r2
 80041a2:	d004      	beq.n	80041ae <HAL_LPTIM_Init+0x7e>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80041a4:	69a2      	ldr	r2, [r4, #24]
 80041a6:	4311      	orrs	r1, r2
                hlptim->Init.Trigger.ActiveEdge |
 80041a8:	69e2      	ldr	r2, [r4, #28]
 80041aa:	4311      	orrs	r1, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80041ac:	430b      	orrs	r3, r1
  hlptim->Instance->CFGR = tmpcfgr;
 80041ae:	60eb      	str	r3, [r5, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80041b0:	232e      	movs	r3, #46	; 0x2e
 80041b2:	2201      	movs	r2, #1
 80041b4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80041b6:	2000      	movs	r0, #0
}
 80041b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hlptim->Lock = HAL_UNLOCKED;
 80041ba:	332d      	adds	r3, #45	; 0x2d
 80041bc:	2200      	movs	r2, #0
 80041be:	54c2      	strb	r2, [r0, r3]
    HAL_LPTIM_MspInit(hlptim);
 80041c0:	f7ff f89c 	bl	80032fc <HAL_LPTIM_MspInit>
 80041c4:	e7bb      	b.n	800413e <HAL_LPTIM_Init+0xe>
    return HAL_ERROR;
 80041c6:	2001      	movs	r0, #1
 80041c8:	e7f6      	b.n	80041b8 <HAL_LPTIM_Init+0x88>
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	0000ffff 	.word	0x0000ffff
 80041d0:	ffff1f3f 	.word	0xffff1f3f
 80041d4:	ff19f1fe 	.word	0xff19f1fe

080041d8 <HAL_LPTIM_CompareMatchCallback>:
}
 80041d8:	4770      	bx	lr

080041da <HAL_LPTIM_TriggerCallback>:
}
 80041da:	4770      	bx	lr

080041dc <HAL_LPTIM_CompareWriteCallback>:
}
 80041dc:	4770      	bx	lr

080041de <HAL_LPTIM_AutoReloadWriteCallback>:
}
 80041de:	4770      	bx	lr

080041e0 <HAL_LPTIM_DirectionUpCallback>:
}
 80041e0:	4770      	bx	lr

080041e2 <HAL_LPTIM_DirectionDownCallback>:
}
 80041e2:	4770      	bx	lr

080041e4 <HAL_LPTIM_IRQHandler>:
{
 80041e4:	b510      	push	{r4, lr}
 80041e6:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80041e8:	6803      	ldr	r3, [r0, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	07d2      	lsls	r2, r2, #31
 80041ee:	d502      	bpl.n	80041f6 <HAL_LPTIM_IRQHandler+0x12>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	07d2      	lsls	r2, r2, #31
 80041f4:	d42a      	bmi.n	800424c <HAL_LPTIM_IRQHandler+0x68>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	0792      	lsls	r2, r2, #30
 80041fc:	d502      	bpl.n	8004204 <HAL_LPTIM_IRQHandler+0x20>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	0792      	lsls	r2, r2, #30
 8004202:	d428      	bmi.n	8004256 <HAL_LPTIM_IRQHandler+0x72>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	0752      	lsls	r2, r2, #29
 800420a:	d502      	bpl.n	8004212 <HAL_LPTIM_IRQHandler+0x2e>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	0752      	lsls	r2, r2, #29
 8004210:	d427      	bmi.n	8004262 <HAL_LPTIM_IRQHandler+0x7e>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	0712      	lsls	r2, r2, #28
 8004218:	d502      	bpl.n	8004220 <HAL_LPTIM_IRQHandler+0x3c>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	0712      	lsls	r2, r2, #28
 800421e:	d426      	bmi.n	800426e <HAL_LPTIM_IRQHandler+0x8a>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	06d2      	lsls	r2, r2, #27
 8004226:	d502      	bpl.n	800422e <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	06d2      	lsls	r2, r2, #27
 800422c:	d425      	bmi.n	800427a <HAL_LPTIM_IRQHandler+0x96>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	0692      	lsls	r2, r2, #26
 8004234:	d502      	bpl.n	800423c <HAL_LPTIM_IRQHandler+0x58>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	0692      	lsls	r2, r2, #26
 800423a:	d424      	bmi.n	8004286 <HAL_LPTIM_IRQHandler+0xa2>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	0652      	lsls	r2, r2, #25
 8004242:	d502      	bpl.n	800424a <HAL_LPTIM_IRQHandler+0x66>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	0652      	lsls	r2, r2, #25
 8004248:	d423      	bmi.n	8004292 <HAL_LPTIM_IRQHandler+0xae>
}
 800424a:	bd10      	pop	{r4, pc}
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800424c:	2201      	movs	r2, #1
 800424e:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004250:	f7ff ffc2 	bl	80041d8 <HAL_LPTIM_CompareMatchCallback>
 8004254:	e7cf      	b.n	80041f6 <HAL_LPTIM_IRQHandler+0x12>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004256:	2202      	movs	r2, #2
 8004258:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800425a:	0020      	movs	r0, r4
 800425c:	f7ff f86e 	bl	800333c <HAL_LPTIM_AutoReloadMatchCallback>
 8004260:	e7d0      	b.n	8004204 <HAL_LPTIM_IRQHandler+0x20>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004262:	2204      	movs	r2, #4
 8004264:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8004266:	0020      	movs	r0, r4
 8004268:	f7ff ffb7 	bl	80041da <HAL_LPTIM_TriggerCallback>
 800426c:	e7d1      	b.n	8004212 <HAL_LPTIM_IRQHandler+0x2e>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800426e:	2208      	movs	r2, #8
 8004270:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004272:	0020      	movs	r0, r4
 8004274:	f7ff ffb2 	bl	80041dc <HAL_LPTIM_CompareWriteCallback>
 8004278:	e7d2      	b.n	8004220 <HAL_LPTIM_IRQHandler+0x3c>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800427a:	2210      	movs	r2, #16
 800427c:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800427e:	0020      	movs	r0, r4
 8004280:	f7ff ffad 	bl	80041de <HAL_LPTIM_AutoReloadWriteCallback>
 8004284:	e7d3      	b.n	800422e <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004286:	2220      	movs	r2, #32
 8004288:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800428a:	0020      	movs	r0, r4
 800428c:	f7ff ffa8 	bl	80041e0 <HAL_LPTIM_DirectionUpCallback>
 8004290:	e7d4      	b.n	800423c <HAL_LPTIM_IRQHandler+0x58>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004292:	2240      	movs	r2, #64	; 0x40
 8004294:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004296:	0020      	movs	r0, r4
 8004298:	f7ff ffa3 	bl	80041e2 <HAL_LPTIM_DirectionDownCallback>
}
 800429c:	e7d5      	b.n	800424a <HAL_LPTIM_IRQHandler+0x66>

0800429e <HAL_LPTIM_GetState>:
  return hlptim->State;
 800429e:	232e      	movs	r3, #46	; 0x2e
 80042a0:	5cc0      	ldrb	r0, [r0, r3]
 80042a2:	b2c0      	uxtb	r0, r0
}
 80042a4:	4770      	bx	lr
	...

080042a8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	46c6      	mov	lr, r8
 80042ac:	b500      	push	{lr}
 80042ae:	0004      	movs	r4, r0
 80042b0:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80042b2:	6803      	ldr	r3, [r0, #0]
 80042b4:	0019      	movs	r1, r3
 80042b6:	4a37      	ldr	r2, [pc, #220]	; (8004394 <LPTIM_Disable+0xec>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d13e      	bne.n	800433a <LPTIM_Disable+0x92>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80042bc:	4a36      	ldr	r2, [pc, #216]	; (8004398 <LPTIM_Disable+0xf0>)
 80042be:	6cd7      	ldr	r7, [r2, #76]	; 0x4c
 80042c0:	22c0      	movs	r2, #192	; 0xc0
 80042c2:	0312      	lsls	r2, r2, #12
 80042c4:	4017      	ands	r7, r2
 80042c6:	46b8      	mov	r8, r7
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80042c8:	689e      	ldr	r6, [r3, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 80042ca:	68dd      	ldr	r5, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 80042cc:	695a      	ldr	r2, [r3, #20]
  tmpARR = hlptim->Instance->ARR;
 80042ce:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80042d0:	4b30      	ldr	r3, [pc, #192]	; (8004394 <LPTIM_Disable+0xec>)
 80042d2:	4299      	cmp	r1, r3
 80042d4:	d109      	bne.n	80042ea <LPTIM_Disable+0x42>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80042d6:	4930      	ldr	r1, [pc, #192]	; (8004398 <LPTIM_Disable+0xf0>)
 80042d8:	6a88      	ldr	r0, [r1, #40]	; 0x28
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	4303      	orrs	r3, r0
 80042e0:	628b      	str	r3, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80042e2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	628b      	str	r3, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80042ea:	0013      	movs	r3, r2
 80042ec:	433b      	orrs	r3, r7
 80042ee:	d017      	beq.n	8004320 <LPTIM_Disable+0x78>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80042f0:	4b28      	ldr	r3, [pc, #160]	; (8004394 <LPTIM_Disable+0xec>)
 80042f2:	6821      	ldr	r1, [r4, #0]
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d104      	bne.n	8004302 <LPTIM_Disable+0x5a>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80042f8:	4927      	ldr	r1, [pc, #156]	; (8004398 <LPTIM_Disable+0xf0>)
 80042fa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80042fc:	4827      	ldr	r0, [pc, #156]	; (800439c <LPTIM_Disable+0xf4>)
 80042fe:	4003      	ands	r3, r0
 8004300:	64cb      	str	r3, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 8004302:	2a00      	cmp	r2, #0
 8004304:	d11c      	bne.n	8004340 <LPTIM_Disable+0x98>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
    }

    if (tmpARR != 0UL)
 8004306:	2f00      	cmp	r7, #0
 8004308:	d12f      	bne.n	800436a <LPTIM_Disable+0xc2>

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <LPTIM_Disable+0xec>)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d106      	bne.n	8004320 <LPTIM_Disable+0x78>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004312:	4a21      	ldr	r2, [pc, #132]	; (8004398 <LPTIM_Disable+0xf0>)
 8004314:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004316:	4921      	ldr	r1, [pc, #132]	; (800439c <LPTIM_Disable+0xf4>)
 8004318:	400b      	ands	r3, r1
 800431a:	4647      	mov	r7, r8
 800431c:	431f      	orrs	r7, r3
 800431e:	64d7      	str	r7, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	6913      	ldr	r3, [r2, #16]
 8004324:	2101      	movs	r1, #1
 8004326:	438b      	bics	r3, r1
 8004328:	6113      	str	r3, [r2, #16]
  hlptim->Instance->IER = tmpIER;
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	609e      	str	r6, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004332:	b662      	cpsie	i

  __enable_irq();
}
 8004334:	bc04      	pop	{r2}
 8004336:	4690      	mov	r8, r2
 8004338:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmpclksource = 0;
 800433a:	2200      	movs	r2, #0
 800433c:	4690      	mov	r8, r2
 800433e:	e7c3      	b.n	80042c8 <LPTIM_Disable+0x20>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	690b      	ldr	r3, [r1, #16]
 8004344:	2001      	movs	r0, #1
 8004346:	4303      	orrs	r3, r0
 8004348:	610b      	str	r3, [r1, #16]
      hlptim->Instance->CMP = tmpCMP;
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	615a      	str	r2, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800434e:	2108      	movs	r1, #8
 8004350:	0020      	movs	r0, r4
 8004352:	f7ff fecd 	bl	80040f0 <LPTIM_WaitForFlag>
 8004356:	2803      	cmp	r0, #3
 8004358:	d003      	beq.n	8004362 <LPTIM_Disable+0xba>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	2208      	movs	r2, #8
 800435e:	605a      	str	r2, [r3, #4]
 8004360:	e7d1      	b.n	8004306 <LPTIM_Disable+0x5e>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004362:	232e      	movs	r3, #46	; 0x2e
 8004364:	2203      	movs	r2, #3
 8004366:	54e2      	strb	r2, [r4, r3]
 8004368:	e7f7      	b.n	800435a <LPTIM_Disable+0xb2>
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	6913      	ldr	r3, [r2, #16]
 800436e:	2101      	movs	r1, #1
 8004370:	430b      	orrs	r3, r1
 8004372:	6113      	str	r3, [r2, #16]
      hlptim->Instance->ARR = tmpARR;
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004378:	310f      	adds	r1, #15
 800437a:	0020      	movs	r0, r4
 800437c:	f7ff feb8 	bl	80040f0 <LPTIM_WaitForFlag>
 8004380:	2803      	cmp	r0, #3
 8004382:	d003      	beq.n	800438c <LPTIM_Disable+0xe4>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	2210      	movs	r2, #16
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	e7be      	b.n	800430a <LPTIM_Disable+0x62>
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800438c:	232e      	movs	r3, #46	; 0x2e
 800438e:	2203      	movs	r2, #3
 8004390:	54e2      	strb	r2, [r4, r3]
 8004392:	e7f7      	b.n	8004384 <LPTIM_Disable+0xdc>
 8004394:	40007c00 	.word	0x40007c00
 8004398:	40021000 	.word	0x40021000
 800439c:	fff3ffff 	.word	0xfff3ffff

080043a0 <HAL_LPTIM_Counter_Start_IT>:
{
 80043a0:	b510      	push	{r4, lr}
 80043a2:	0004      	movs	r4, r0
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043a4:	232e      	movs	r3, #46	; 0x2e
 80043a6:	2202      	movs	r2, #2
 80043a8:	54c2      	strb	r2, [r0, r3]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 80043aa:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_LPTIM_Counter_Start_IT+0x98>)
 80043ac:	6810      	ldr	r0, [r2, #0]
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	059b      	lsls	r3, r3, #22
 80043b2:	4303      	orrs	r3, r0
 80043b4:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80043b6:	6863      	ldr	r3, [r4, #4]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d004      	beq.n	80043c6 <HAL_LPTIM_Counter_Start_IT+0x26>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d02f      	beq.n	8004426 <HAL_LPTIM_Counter_Start_IT+0x86>
  __HAL_LPTIM_ENABLE(hlptim);
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	6913      	ldr	r3, [r2, #16]
 80043ca:	2001      	movs	r0, #1
 80043cc:	4303      	orrs	r3, r0
 80043ce:	6113      	str	r3, [r2, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	605a      	str	r2, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80043da:	2110      	movs	r1, #16
 80043dc:	0020      	movs	r0, r4
 80043de:	f7ff fe87 	bl	80040f0 <LPTIM_WaitForFlag>
 80043e2:	2803      	cmp	r0, #3
 80043e4:	d01e      	beq.n	8004424 <HAL_LPTIM_Counter_Start_IT+0x84>
  __HAL_LPTIM_DISABLE(hlptim);
 80043e6:	0020      	movs	r0, r4
 80043e8:	f7ff ff5e 	bl	80042a8 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80043ec:	0020      	movs	r0, r4
 80043ee:	f7ff ff56 	bl	800429e <HAL_LPTIM_GetState>
 80043f2:	2803      	cmp	r0, #3
 80043f4:	d01d      	beq.n	8004432 <HAL_LPTIM_Counter_Start_IT+0x92>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80043f6:	6822      	ldr	r2, [r4, #0]
 80043f8:	6893      	ldr	r3, [r2, #8]
 80043fa:	2110      	movs	r1, #16
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	6893      	ldr	r3, [r2, #8]
 8004404:	390e      	subs	r1, #14
 8004406:	430b      	orrs	r3, r1
 8004408:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 800440a:	6821      	ldr	r1, [r4, #0]
 800440c:	690b      	ldr	r3, [r1, #16]
 800440e:	2201      	movs	r2, #1
 8004410:	4313      	orrs	r3, r2
 8004412:	610b      	str	r3, [r1, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004414:	6821      	ldr	r1, [r4, #0]
 8004416:	690b      	ldr	r3, [r1, #16]
 8004418:	2004      	movs	r0, #4
 800441a:	4303      	orrs	r3, r0
 800441c:	610b      	str	r3, [r1, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 800441e:	232e      	movs	r3, #46	; 0x2e
 8004420:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8004422:	2000      	movs	r0, #0
}
 8004424:	bd10      	pop	{r4, pc}
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	68d3      	ldr	r3, [r2, #12]
 800442a:	4804      	ldr	r0, [pc, #16]	; (800443c <HAL_LPTIM_Counter_Start_IT+0x9c>)
 800442c:	4003      	ands	r3, r0
 800442e:	60d3      	str	r3, [r2, #12]
 8004430:	e7c9      	b.n	80043c6 <HAL_LPTIM_Counter_Start_IT+0x26>
    return HAL_TIMEOUT;
 8004432:	2003      	movs	r0, #3
 8004434:	e7f6      	b.n	8004424 <HAL_LPTIM_Counter_Start_IT+0x84>
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	40010400 	.word	0x40010400
 800443c:	fffff1ff 	.word	0xfffff1ff

08004440 <HAL_LPTIM_Counter_Stop_IT>:
{
 8004440:	b510      	push	{r4, lr}
 8004442:	0004      	movs	r4, r0
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004444:	232e      	movs	r3, #46	; 0x2e
 8004446:	2202      	movs	r2, #2
 8004448:	54c2      	strb	r2, [r0, r3]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_LPTIM_Counter_Stop_IT+0x44>)
 800444c:	6813      	ldr	r3, [r2, #0]
 800444e:	490e      	ldr	r1, [pc, #56]	; (8004488 <HAL_LPTIM_Counter_Stop_IT+0x48>)
 8004450:	400b      	ands	r3, r1
 8004452:	6013      	str	r3, [r2, #0]
  __HAL_LPTIM_DISABLE(hlptim);
 8004454:	f7ff ff28 	bl	80042a8 <LPTIM_Disable>
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004458:	0020      	movs	r0, r4
 800445a:	f7ff ff20 	bl	800429e <HAL_LPTIM_GetState>
 800445e:	2803      	cmp	r0, #3
 8004460:	d00e      	beq.n	8004480 <HAL_LPTIM_Counter_Stop_IT+0x40>
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	6893      	ldr	r3, [r2, #8]
 8004466:	2110      	movs	r1, #16
 8004468:	438b      	bics	r3, r1
 800446a:	6093      	str	r3, [r2, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	6893      	ldr	r3, [r2, #8]
 8004470:	390e      	subs	r1, #14
 8004472:	438b      	bics	r3, r1
 8004474:	6093      	str	r3, [r2, #8]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004476:	232e      	movs	r3, #46	; 0x2e
 8004478:	2201      	movs	r2, #1
 800447a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800447c:	2000      	movs	r0, #0
}
 800447e:	bd10      	pop	{r4, pc}
    return HAL_TIMEOUT;
 8004480:	2003      	movs	r0, #3
 8004482:	e7fc      	b.n	800447e <HAL_LPTIM_Counter_Stop_IT+0x3e>
 8004484:	40010400 	.word	0x40010400
 8004488:	dfffffff 	.word	0xdfffffff

0800448c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800448c:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800448e:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004490:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004492:	230c      	movs	r3, #12
 8004494:	4013      	ands	r3, r2
 8004496:	2b08      	cmp	r3, #8
 8004498:	d042      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x94>
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d011      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x36>
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	0b52      	lsrs	r2, r2, #13
 80044a8:	2307      	movs	r3, #7
 80044aa:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80044ac:	3301      	adds	r3, #1
 80044ae:	2080      	movs	r0, #128	; 0x80
 80044b0:	0200      	lsls	r0, r0, #8
 80044b2:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80044b4:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	06db      	lsls	r3, r3, #27
 80044bc:	d532      	bpl.n	8004524 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 80044be:	481b      	ldr	r0, [pc, #108]	; (800452c <HAL_RCC_GetSysClockFreq+0xa0>)
 80044c0:	e7f8      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044c2:	0c91      	lsrs	r1, r2, #18
 80044c4:	230f      	movs	r3, #15
 80044c6:	400b      	ands	r3, r1
 80044c8:	4919      	ldr	r1, [pc, #100]	; (8004530 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044ca:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80044cc:	0d92      	lsrs	r2, r2, #22
 80044ce:	2303      	movs	r3, #3
 80044d0:	401a      	ands	r2, r3
 80044d2:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044d4:	4b14      	ldr	r3, [pc, #80]	; (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	03db      	lsls	r3, r3, #15
 80044da:	d40d      	bmi.n	80044f8 <HAL_RCC_GetSysClockFreq+0x6c>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	06db      	lsls	r3, r3, #27
 80044e2:	d513      	bpl.n	800450c <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <HAL_RCC_GetSysClockFreq+0xa0>)
 80044e6:	2300      	movs	r3, #0
 80044e8:	2100      	movs	r1, #0
 80044ea:	f7fb ff31 	bl	8000350 <__aeabi_lmul>
 80044ee:	0022      	movs	r2, r4
 80044f0:	2300      	movs	r3, #0
 80044f2:	f7fb ff0d 	bl	8000310 <__aeabi_uldivmod>
 80044f6:	e7dd      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_GetSysClockFreq+0xa8>)
 80044fa:	2300      	movs	r3, #0
 80044fc:	2100      	movs	r1, #0
 80044fe:	f7fb ff27 	bl	8000350 <__aeabi_lmul>
 8004502:	0022      	movs	r2, r4
 8004504:	2300      	movs	r3, #0
 8004506:	f7fb ff03 	bl	8000310 <__aeabi_uldivmod>
 800450a:	e7d3      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <HAL_RCC_GetSysClockFreq+0xac>)
 800450e:	2300      	movs	r3, #0
 8004510:	2100      	movs	r1, #0
 8004512:	f7fb ff1d 	bl	8000350 <__aeabi_lmul>
 8004516:	0022      	movs	r2, r4
 8004518:	2300      	movs	r3, #0
 800451a:	f7fb fef9 	bl	8000310 <__aeabi_uldivmod>
 800451e:	e7c9      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004522:	e7c7      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8004524:	4804      	ldr	r0, [pc, #16]	; (8004538 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8004526:	e7c5      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x28>
 8004528:	40021000 	.word	0x40021000
 800452c:	003d0900 	.word	0x003d0900
 8004530:	0800748c 	.word	0x0800748c
 8004534:	007a1200 	.word	0x007a1200
 8004538:	00f42400 	.word	0x00f42400

0800453c <HAL_RCC_OscConfig>:
{
 800453c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800453e:	b083      	sub	sp, #12
 8004540:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8004542:	d100      	bne.n	8004546 <HAL_RCC_OscConfig+0xa>
 8004544:	e269      	b.n	8004a1a <HAL_RCC_OscConfig+0x4de>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004546:	4bc5      	ldr	r3, [pc, #788]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	250c      	movs	r5, #12
 800454c:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	2680      	movs	r6, #128	; 0x80
 8004552:	0276      	lsls	r6, r6, #9
 8004554:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004556:	6803      	ldr	r3, [r0, #0]
 8004558:	07db      	lsls	r3, r3, #31
 800455a:	d536      	bpl.n	80045ca <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800455c:	2d08      	cmp	r5, #8
 800455e:	d02c      	beq.n	80045ba <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004560:	2d0c      	cmp	r5, #12
 8004562:	d028      	beq.n	80045b6 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004564:	6863      	ldr	r3, [r4, #4]
 8004566:	2280      	movs	r2, #128	; 0x80
 8004568:	0252      	lsls	r2, r2, #9
 800456a:	4293      	cmp	r3, r2
 800456c:	d055      	beq.n	800461a <HAL_RCC_OscConfig+0xde>
 800456e:	22a0      	movs	r2, #160	; 0xa0
 8004570:	02d2      	lsls	r2, r2, #11
 8004572:	4293      	cmp	r3, r2
 8004574:	d058      	beq.n	8004628 <HAL_RCC_OscConfig+0xec>
 8004576:	4bb9      	ldr	r3, [pc, #740]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	49b9      	ldr	r1, [pc, #740]	; (8004860 <HAL_RCC_OscConfig+0x324>)
 800457c:	400a      	ands	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	2180      	movs	r1, #128	; 0x80
 8004584:	0249      	lsls	r1, r1, #9
 8004586:	400a      	ands	r2, r1
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	9a01      	ldr	r2, [sp, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	49b5      	ldr	r1, [pc, #724]	; (8004864 <HAL_RCC_OscConfig+0x328>)
 8004590:	400a      	ands	r2, r1
 8004592:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d052      	beq.n	8004640 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800459a:	f7ff fc1f 	bl	8003ddc <HAL_GetTick>
 800459e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045a0:	4bae      	ldr	r3, [pc, #696]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	039b      	lsls	r3, r3, #14
 80045a6:	d410      	bmi.n	80045ca <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7ff fc18 	bl	8003ddc <HAL_GetTick>
 80045ac:	1bc0      	subs	r0, r0, r7
 80045ae:	2864      	cmp	r0, #100	; 0x64
 80045b0:	d9f6      	bls.n	80045a0 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 80045b2:	2003      	movs	r0, #3
 80045b4:	e232      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	d0d4      	beq.n	8004564 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ba:	4ba8      	ldr	r3, [pc, #672]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	039b      	lsls	r3, r3, #14
 80045c0:	d503      	bpl.n	80045ca <HAL_RCC_OscConfig+0x8e>
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d100      	bne.n	80045ca <HAL_RCC_OscConfig+0x8e>
 80045c8:	e22a      	b.n	8004a20 <HAL_RCC_OscConfig+0x4e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d56d      	bpl.n	80046ac <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 80045d0:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80045d2:	069a      	lsls	r2, r3, #26
 80045d4:	d505      	bpl.n	80045e2 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80045d6:	48a1      	ldr	r0, [pc, #644]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80045d8:	6802      	ldr	r2, [r0, #0]
 80045da:	2120      	movs	r1, #32
 80045dc:	430a      	orrs	r2, r1
 80045de:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80045e0:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e2:	2d04      	cmp	r5, #4
 80045e4:	d03c      	beq.n	8004660 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045e6:	2d0c      	cmp	r5, #12
 80045e8:	d038      	beq.n	800465c <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d100      	bne.n	80045f0 <HAL_RCC_OscConfig+0xb4>
 80045ee:	e0b0      	b.n	8004752 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045f0:	499a      	ldr	r1, [pc, #616]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80045f2:	680a      	ldr	r2, [r1, #0]
 80045f4:	2009      	movs	r0, #9
 80045f6:	4382      	bics	r2, r0
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80045fc:	f7ff fbee 	bl	8003ddc <HAL_GetTick>
 8004600:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004602:	4b96      	ldr	r3, [pc, #600]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	075b      	lsls	r3, r3, #29
 8004608:	d500      	bpl.n	800460c <HAL_RCC_OscConfig+0xd0>
 800460a:	e099      	b.n	8004740 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460c:	f7ff fbe6 	bl	8003ddc <HAL_GetTick>
 8004610:	1b80      	subs	r0, r0, r6
 8004612:	2802      	cmp	r0, #2
 8004614:	d9f5      	bls.n	8004602 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8004616:	2003      	movs	r0, #3
 8004618:	e200      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461a:	4a90      	ldr	r2, [pc, #576]	; (800485c <HAL_RCC_OscConfig+0x320>)
 800461c:	6811      	ldr	r1, [r2, #0]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	430b      	orrs	r3, r1
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e7b5      	b.n	8004594 <HAL_RCC_OscConfig+0x58>
 8004628:	4b8c      	ldr	r3, [pc, #560]	; (800485c <HAL_RCC_OscConfig+0x320>)
 800462a:	6819      	ldr	r1, [r3, #0]
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	02d2      	lsls	r2, r2, #11
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	6819      	ldr	r1, [r3, #0]
 8004636:	2280      	movs	r2, #128	; 0x80
 8004638:	0252      	lsls	r2, r2, #9
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e7a9      	b.n	8004594 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8004640:	f7ff fbcc 	bl	8003ddc <HAL_GetTick>
 8004644:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	039b      	lsls	r3, r3, #14
 800464c:	d5bd      	bpl.n	80045ca <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464e:	f7ff fbc5 	bl	8003ddc <HAL_GetTick>
 8004652:	1bc0      	subs	r0, r0, r7
 8004654:	2864      	cmp	r0, #100	; 0x64
 8004656:	d9f6      	bls.n	8004646 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8004658:	2003      	movs	r0, #3
 800465a:	e1df      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800465c:	2e00      	cmp	r6, #0
 800465e:	d1c4      	bne.n	80045ea <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004660:	4a7e      	ldr	r2, [pc, #504]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	0752      	lsls	r2, r2, #29
 8004666:	d502      	bpl.n	800466e <HAL_RCC_OscConfig+0x132>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d100      	bne.n	800466e <HAL_RCC_OscConfig+0x132>
 800466c:	e1da      	b.n	8004a24 <HAL_RCC_OscConfig+0x4e8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4e7b      	ldr	r6, [pc, #492]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004670:	6872      	ldr	r2, [r6, #4]
 8004672:	497d      	ldr	r1, [pc, #500]	; (8004868 <HAL_RCC_OscConfig+0x32c>)
 8004674:	400a      	ands	r2, r1
 8004676:	6921      	ldr	r1, [r4, #16]
 8004678:	0209      	lsls	r1, r1, #8
 800467a:	430a      	orrs	r2, r1
 800467c:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800467e:	6832      	ldr	r2, [r6, #0]
 8004680:	2109      	movs	r1, #9
 8004682:	438a      	bics	r2, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004688:	f7ff ff00 	bl	800448c <HAL_RCC_GetSysClockFreq>
 800468c:	68f2      	ldr	r2, [r6, #12]
 800468e:	0912      	lsrs	r2, r2, #4
 8004690:	230f      	movs	r3, #15
 8004692:	4013      	ands	r3, r2
 8004694:	4a75      	ldr	r2, [pc, #468]	; (800486c <HAL_RCC_OscConfig+0x330>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	40d8      	lsrs	r0, r3
 800469a:	4b75      	ldr	r3, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x334>)
 800469c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800469e:	4b75      	ldr	r3, [pc, #468]	; (8004874 <HAL_RCC_OscConfig+0x338>)
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f7ff fb53 	bl	8003d4c <HAL_InitTick>
      if(status != HAL_OK)
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d000      	beq.n	80046ac <HAL_RCC_OscConfig+0x170>
 80046aa:	e1b7      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	06db      	lsls	r3, r3, #27
 80046b0:	d52d      	bpl.n	800470e <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	d160      	bne.n	8004778 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046b6:	4b69      	ldr	r3, [pc, #420]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	059b      	lsls	r3, r3, #22
 80046bc:	d503      	bpl.n	80046c6 <HAL_RCC_OscConfig+0x18a>
 80046be:	69a3      	ldr	r3, [r4, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d100      	bne.n	80046c6 <HAL_RCC_OscConfig+0x18a>
 80046c4:	e1b0      	b.n	8004a28 <HAL_RCC_OscConfig+0x4ec>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046c6:	4a65      	ldr	r2, [pc, #404]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80046c8:	6853      	ldr	r3, [r2, #4]
 80046ca:	496b      	ldr	r1, [pc, #428]	; (8004878 <HAL_RCC_OscConfig+0x33c>)
 80046cc:	400b      	ands	r3, r1
 80046ce:	6a21      	ldr	r1, [r4, #32]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d4:	6853      	ldr	r3, [r2, #4]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	69e1      	ldr	r1, [r4, #28]
 80046dc:	0609      	lsls	r1, r1, #24
 80046de:	430b      	orrs	r3, r1
 80046e0:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046e2:	6a23      	ldr	r3, [r4, #32]
 80046e4:	0b59      	lsrs	r1, r3, #13
 80046e6:	3101      	adds	r1, #1
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046ee:	68d1      	ldr	r1, [r2, #12]
 80046f0:	0909      	lsrs	r1, r1, #4
 80046f2:	220f      	movs	r2, #15
 80046f4:	400a      	ands	r2, r1
 80046f6:	495d      	ldr	r1, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x330>)
 80046f8:	5c8a      	ldrb	r2, [r1, r2]
 80046fa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046fc:	4a5c      	ldr	r2, [pc, #368]	; (8004870 <HAL_RCC_OscConfig+0x334>)
 80046fe:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8004700:	4b5c      	ldr	r3, [pc, #368]	; (8004874 <HAL_RCC_OscConfig+0x338>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	f7ff fb22 	bl	8003d4c <HAL_InitTick>
        if(status != HAL_OK)
 8004708:	2800      	cmp	r0, #0
 800470a:	d000      	beq.n	800470e <HAL_RCC_OscConfig+0x1d2>
 800470c:	e186      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	d57d      	bpl.n	8004810 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004714:	6963      	ldr	r3, [r4, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d067      	beq.n	80047ea <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 800471a:	4a50      	ldr	r2, [pc, #320]	; (800485c <HAL_RCC_OscConfig+0x320>)
 800471c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800471e:	2101      	movs	r1, #1
 8004720:	430b      	orrs	r3, r1
 8004722:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004724:	f7ff fb5a 	bl	8003ddc <HAL_GetTick>
 8004728:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800472a:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x320>)
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	079b      	lsls	r3, r3, #30
 8004730:	d46e      	bmi.n	8004810 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004732:	f7ff fb53 	bl	8003ddc <HAL_GetTick>
 8004736:	1b80      	subs	r0, r0, r6
 8004738:	2802      	cmp	r0, #2
 800473a:	d9f6      	bls.n	800472a <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 800473c:	2003      	movs	r0, #3
 800473e:	e16d      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4946      	ldr	r1, [pc, #280]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004742:	684b      	ldr	r3, [r1, #4]
 8004744:	4a48      	ldr	r2, [pc, #288]	; (8004868 <HAL_RCC_OscConfig+0x32c>)
 8004746:	4013      	ands	r3, r2
 8004748:	6922      	ldr	r2, [r4, #16]
 800474a:	0212      	lsls	r2, r2, #8
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	e7ac      	b.n	80046ac <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8004752:	4a42      	ldr	r2, [pc, #264]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	2101      	movs	r1, #1
 8004758:	438b      	bics	r3, r1
 800475a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800475c:	f7ff fb3e 	bl	8003ddc <HAL_GetTick>
 8004760:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	075b      	lsls	r3, r3, #29
 8004768:	d5a0      	bpl.n	80046ac <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7ff fb37 	bl	8003ddc <HAL_GetTick>
 800476e:	1b80      	subs	r0, r0, r6
 8004770:	2802      	cmp	r0, #2
 8004772:	d9f6      	bls.n	8004762 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8004774:	2003      	movs	r0, #3
 8004776:	e151      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004778:	69a3      	ldr	r3, [r4, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d022      	beq.n	80047c4 <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 800477e:	4a37      	ldr	r2, [pc, #220]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	430b      	orrs	r3, r1
 8004788:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800478a:	f7ff fb27 	bl	8003ddc <HAL_GetTick>
 800478e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	059b      	lsls	r3, r3, #22
 8004796:	d406      	bmi.n	80047a6 <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004798:	f7ff fb20 	bl	8003ddc <HAL_GetTick>
 800479c:	1b80      	subs	r0, r0, r6
 800479e:	2802      	cmp	r0, #2
 80047a0:	d9f6      	bls.n	8004790 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 80047a2:	2003      	movs	r0, #3
 80047a4:	e13a      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a6:	4a2d      	ldr	r2, [pc, #180]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80047a8:	6853      	ldr	r3, [r2, #4]
 80047aa:	4933      	ldr	r1, [pc, #204]	; (8004878 <HAL_RCC_OscConfig+0x33c>)
 80047ac:	400b      	ands	r3, r1
 80047ae:	6a21      	ldr	r1, [r4, #32]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b4:	6853      	ldr	r3, [r2, #4]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	69e1      	ldr	r1, [r4, #28]
 80047bc:	0609      	lsls	r1, r1, #24
 80047be:	430b      	orrs	r3, r1
 80047c0:	6053      	str	r3, [r2, #4]
 80047c2:	e7a4      	b.n	800470e <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	492c      	ldr	r1, [pc, #176]	; (800487c <HAL_RCC_OscConfig+0x340>)
 80047ca:	400b      	ands	r3, r1
 80047cc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047ce:	f7ff fb05 	bl	8003ddc <HAL_GetTick>
 80047d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80047d4:	4b21      	ldr	r3, [pc, #132]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	059b      	lsls	r3, r3, #22
 80047da:	d598      	bpl.n	800470e <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047dc:	f7ff fafe 	bl	8003ddc <HAL_GetTick>
 80047e0:	1b80      	subs	r0, r0, r6
 80047e2:	2802      	cmp	r0, #2
 80047e4:	d9f6      	bls.n	80047d4 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 80047e6:	2003      	movs	r0, #3
 80047e8:	e118      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_LSI_DISABLE();
 80047ea:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80047ec:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80047ee:	2101      	movs	r1, #1
 80047f0:	438b      	bics	r3, r1
 80047f2:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80047f4:	f7ff faf2 	bl	8003ddc <HAL_GetTick>
 80047f8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <HAL_RCC_OscConfig+0x320>)
 80047fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fe:	079b      	lsls	r3, r3, #30
 8004800:	d506      	bpl.n	8004810 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004802:	f7ff faeb 	bl	8003ddc <HAL_GetTick>
 8004806:	1b80      	subs	r0, r0, r6
 8004808:	2802      	cmp	r0, #2
 800480a:	d9f6      	bls.n	80047fa <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800480c:	2003      	movs	r0, #3
 800480e:	e105      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	075b      	lsls	r3, r3, #29
 8004814:	d400      	bmi.n	8004818 <HAL_RCC_OscConfig+0x2dc>
 8004816:	e08e      	b.n	8004936 <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004818:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x320>)
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	d41b      	bmi.n	8004858 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4a0e      	ldr	r2, [pc, #56]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004822:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	055b      	lsls	r3, r3, #21
 8004828:	430b      	orrs	r3, r1
 800482a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 800482c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <HAL_RCC_OscConfig+0x344>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	d528      	bpl.n	8004888 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004836:	68a3      	ldr	r3, [r4, #8]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	0052      	lsls	r2, r2, #1
 800483c:	4293      	cmp	r3, r2
 800483e:	d037      	beq.n	80048b0 <HAL_RCC_OscConfig+0x374>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d14d      	bne.n	80048e0 <HAL_RCC_OscConfig+0x3a4>
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_OscConfig+0x320>)
 8004846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <HAL_RCC_OscConfig+0x340>)
 800484a:	400a      	ands	r2, r1
 800484c:	651a      	str	r2, [r3, #80]	; 0x50
 800484e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004850:	490c      	ldr	r1, [pc, #48]	; (8004884 <HAL_RCC_OscConfig+0x348>)
 8004852:	400a      	ands	r2, r1
 8004854:	651a      	str	r2, [r3, #80]	; 0x50
 8004856:	e031      	b.n	80048bc <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8004858:	2600      	movs	r6, #0
 800485a:	e7e8      	b.n	800482e <HAL_RCC_OscConfig+0x2f2>
 800485c:	40021000 	.word	0x40021000
 8004860:	fffeffff 	.word	0xfffeffff
 8004864:	fffbffff 	.word	0xfffbffff
 8004868:	ffffe0ff 	.word	0xffffe0ff
 800486c:	08007474 	.word	0x08007474
 8004870:	20000008 	.word	0x20000008
 8004874:	20000010 	.word	0x20000010
 8004878:	ffff1fff 	.word	0xffff1fff
 800487c:	fffffeff 	.word	0xfffffeff
 8004880:	40007000 	.word	0x40007000
 8004884:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004888:	4a6b      	ldr	r2, [pc, #428]	; (8004a38 <HAL_RCC_OscConfig+0x4fc>)
 800488a:	6811      	ldr	r1, [r2, #0]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	430b      	orrs	r3, r1
 8004892:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004894:	f7ff faa2 	bl	8003ddc <HAL_GetTick>
 8004898:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_RCC_OscConfig+0x4fc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	05db      	lsls	r3, r3, #23
 80048a0:	d4c9      	bmi.n	8004836 <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048a2:	f7ff fa9b 	bl	8003ddc <HAL_GetTick>
 80048a6:	1bc0      	subs	r0, r0, r7
 80048a8:	2864      	cmp	r0, #100	; 0x64
 80048aa:	d9f6      	bls.n	800489a <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 80048ac:	2003      	movs	r0, #3
 80048ae:	e0b5      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b0:	4a62      	ldr	r2, [pc, #392]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80048b2:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d028      	beq.n	8004914 <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 80048c2:	f7ff fa8b 	bl	8003ddc <HAL_GetTick>
 80048c6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c8:	4b5c      	ldr	r3, [pc, #368]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	059b      	lsls	r3, r3, #22
 80048ce:	d430      	bmi.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7ff fa84 	bl	8003ddc <HAL_GetTick>
 80048d4:	1bc0      	subs	r0, r0, r7
 80048d6:	4b5a      	ldr	r3, [pc, #360]	; (8004a40 <HAL_RCC_OscConfig+0x504>)
 80048d8:	4298      	cmp	r0, r3
 80048da:	d9f5      	bls.n	80048c8 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80048dc:	2003      	movs	r0, #3
 80048de:	e09d      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048e0:	22a0      	movs	r2, #160	; 0xa0
 80048e2:	00d2      	lsls	r2, r2, #3
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_RCC_OscConfig+0x3c0>
 80048e8:	4b54      	ldr	r3, [pc, #336]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80048ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048ec:	4955      	ldr	r1, [pc, #340]	; (8004a44 <HAL_RCC_OscConfig+0x508>)
 80048ee:	400a      	ands	r2, r1
 80048f0:	651a      	str	r2, [r3, #80]	; 0x50
 80048f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f4:	4954      	ldr	r1, [pc, #336]	; (8004a48 <HAL_RCC_OscConfig+0x50c>)
 80048f6:	400a      	ands	r2, r1
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50
 80048fa:	e7df      	b.n	80048bc <HAL_RCC_OscConfig+0x380>
 80048fc:	4b4f      	ldr	r3, [pc, #316]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80048fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004900:	3a01      	subs	r2, #1
 8004902:	3aff      	subs	r2, #255	; 0xff
 8004904:	430a      	orrs	r2, r1
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
 8004908:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	0052      	lsls	r2, r2, #1
 800490e:	430a      	orrs	r2, r1
 8004910:	651a      	str	r2, [r3, #80]	; 0x50
 8004912:	e7d3      	b.n	80048bc <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8004914:	f7ff fa62 	bl	8003ddc <HAL_GetTick>
 8004918:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800491a:	4b48      	ldr	r3, [pc, #288]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	059b      	lsls	r3, r3, #22
 8004920:	d507      	bpl.n	8004932 <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7ff fa5b 	bl	8003ddc <HAL_GetTick>
 8004926:	1bc0      	subs	r0, r0, r7
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_RCC_OscConfig+0x504>)
 800492a:	4298      	cmp	r0, r3
 800492c:	d9f5      	bls.n	800491a <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 800492e:	2003      	movs	r0, #3
 8004930:	e074      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
    if(pwrclkchanged == SET)
 8004932:	2e01      	cmp	r6, #1
 8004934:	d01a      	beq.n	800496c <HAL_RCC_OscConfig+0x430>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d100      	bne.n	800493e <HAL_RCC_OscConfig+0x402>
 800493c:	e076      	b.n	8004a2c <HAL_RCC_OscConfig+0x4f0>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800493e:	2d0c      	cmp	r5, #12
 8004940:	d04f      	beq.n	80049e2 <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004942:	2b02      	cmp	r3, #2
 8004944:	d018      	beq.n	8004978 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
 8004946:	4a3d      	ldr	r2, [pc, #244]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 8004948:	6813      	ldr	r3, [r2, #0]
 800494a:	4940      	ldr	r1, [pc, #256]	; (8004a4c <HAL_RCC_OscConfig+0x510>)
 800494c:	400b      	ands	r3, r1
 800494e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004950:	f7ff fa44 	bl	8003ddc <HAL_GetTick>
 8004954:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	019b      	lsls	r3, r3, #6
 800495c:	d53f      	bpl.n	80049de <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800495e:	f7ff fa3d 	bl	8003ddc <HAL_GetTick>
 8004962:	1b00      	subs	r0, r0, r4
 8004964:	2802      	cmp	r0, #2
 8004966:	d9f6      	bls.n	8004956 <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8004968:	2003      	movs	r0, #3
 800496a:	e057      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 800496e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004970:	4937      	ldr	r1, [pc, #220]	; (8004a50 <HAL_RCC_OscConfig+0x514>)
 8004972:	400b      	ands	r3, r1
 8004974:	6393      	str	r3, [r2, #56]	; 0x38
 8004976:	e7de      	b.n	8004936 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_DISABLE();
 8004978:	4a30      	ldr	r2, [pc, #192]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 800497a:	6813      	ldr	r3, [r2, #0]
 800497c:	4933      	ldr	r1, [pc, #204]	; (8004a4c <HAL_RCC_OscConfig+0x510>)
 800497e:	400b      	ands	r3, r1
 8004980:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004982:	f7ff fa2b 	bl	8003ddc <HAL_GetTick>
 8004986:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	019b      	lsls	r3, r3, #6
 800498e:	d506      	bpl.n	800499e <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004990:	f7ff fa24 	bl	8003ddc <HAL_GetTick>
 8004994:	1b40      	subs	r0, r0, r5
 8004996:	2802      	cmp	r0, #2
 8004998:	d9f6      	bls.n	8004988 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 800499a:	2003      	movs	r0, #3
 800499c:	e03e      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800499e:	4927      	ldr	r1, [pc, #156]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80049a0:	68cb      	ldr	r3, [r1, #12]
 80049a2:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <HAL_RCC_OscConfig+0x518>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80049aa:	4302      	orrs	r2, r0
 80049ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80049ae:	4302      	orrs	r2, r0
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 80049b4:	680a      	ldr	r2, [r1, #0]
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	045b      	lsls	r3, r3, #17
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80049be:	f7ff fa0d 	bl	8003ddc <HAL_GetTick>
 80049c2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	d406      	bmi.n	80049da <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049cc:	f7ff fa06 	bl	8003ddc <HAL_GetTick>
 80049d0:	1b00      	subs	r0, r0, r4
 80049d2:	2802      	cmp	r0, #2
 80049d4:	d9f6      	bls.n	80049c4 <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
 80049d6:	2003      	movs	r0, #3
 80049d8:	e020      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  return HAL_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e01e      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
 80049de:	2000      	movs	r0, #0
 80049e0:	e01c      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d024      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4f4>
        pll_config = RCC->CFGR;
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <HAL_RCC_OscConfig+0x500>)
 80049e8:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	025b      	lsls	r3, r3, #9
 80049ee:	4013      	ands	r3, r2
 80049f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80049f2:	428b      	cmp	r3, r1
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x4be>
          return HAL_ERROR;
 80049f6:	2001      	movs	r0, #1
 80049f8:	e010      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049fa:	23f0      	movs	r3, #240	; 0xf0
 80049fc:	039b      	lsls	r3, r3, #14
 80049fe:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004a02:	428b      	cmp	r3, r1
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x4ce>
          return HAL_ERROR;
 8004a06:	2001      	movs	r0, #1
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a0a:	23c0      	movs	r3, #192	; 0xc0
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	401a      	ands	r2, r3
 8004a10:	6b23      	ldr	r3, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d00e      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4f8>
          return HAL_ERROR;
 8004a16:	2001      	movs	r0, #1
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
    return HAL_ERROR;
 8004a1a:	2001      	movs	r0, #1
}
 8004a1c:	b003      	add	sp, #12
 8004a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7fb      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
 8004a26:	e7f9      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
 8004a2a:	e7f7      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  return HAL_OK;
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e7f5      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
        return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
 8004a32:	e7f3      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
  return HAL_OK;
 8004a34:	2000      	movs	r0, #0
 8004a36:	e7f1      	b.n	8004a1c <HAL_RCC_OscConfig+0x4e0>
 8004a38:	40007000 	.word	0x40007000
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	00001388 	.word	0x00001388
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	fffffbff 	.word	0xfffffbff
 8004a4c:	feffffff 	.word	0xfeffffff
 8004a50:	efffffff 	.word	0xefffffff
 8004a54:	ff02ffff 	.word	0xff02ffff

08004a58 <HAL_RCC_ClockConfig>:
{
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d100      	bne.n	8004a64 <HAL_RCC_ClockConfig+0xc>
 8004a62:	e0d1      	b.n	8004c08 <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a64:	4b6a      	ldr	r3, [pc, #424]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	d319      	bcc.n	8004aa4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	079b      	lsls	r3, r3, #30
 8004a74:	d506      	bpl.n	8004a84 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a76:	4a67      	ldr	r2, [pc, #412]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	68d3      	ldr	r3, [r2, #12]
 8004a7a:	21f0      	movs	r1, #240	; 0xf0
 8004a7c:	438b      	bics	r3, r1
 8004a7e:	68a9      	ldr	r1, [r5, #8]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	07db      	lsls	r3, r3, #31
 8004a88:	d57b      	bpl.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	686b      	ldr	r3, [r5, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d020      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d040      	beq.n	8004b16 <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d044      	beq.n	8004b22 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a98:	4a5e      	ldr	r2, [pc, #376]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	0592      	lsls	r2, r2, #22
 8004a9e:	d41d      	bmi.n	8004adc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	e099      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa4:	4a5a      	ldr	r2, [pc, #360]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	438b      	bics	r3, r1
 8004aac:	4323      	orrs	r3, r4
 8004aae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ab0:	f7ff f994 	bl	8003ddc <HAL_GetTick>
 8004ab4:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b56      	ldr	r3, [pc, #344]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	2301      	movs	r3, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	d0d6      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac2:	f7ff f98b 	bl	8003ddc <HAL_GetTick>
 8004ac6:	1b80      	subs	r0, r0, r6
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004aca:	4298      	cmp	r0, r3
 8004acc:	d9f3      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8004ace:	2003      	movs	r0, #3
 8004ad0:	e082      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ad2:	4a50      	ldr	r2, [pc, #320]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	0392      	lsls	r2, r2, #14
 8004ad8:	d400      	bmi.n	8004adc <HAL_RCC_ClockConfig+0x84>
 8004ada:	e097      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004adc:	494d      	ldr	r1, [pc, #308]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	68ca      	ldr	r2, [r1, #12]
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	4382      	bics	r2, r0
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8004ae8:	f7ff f978 	bl	8003ddc <HAL_GetTick>
 8004aec:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aee:	686b      	ldr	r3, [r5, #4]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d01c      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d028      	beq.n	8004b4a <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d034      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004afc:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	220c      	movs	r2, #12
 8004b02:	421a      	tst	r2, r3
 8004b04:	d03d      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b06:	f7ff f969 	bl	8003ddc <HAL_GetTick>
 8004b0a:	1b80      	subs	r0, r0, r6
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0e:	4298      	cmp	r0, r3
 8004b10:	d9f4      	bls.n	8004afc <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8004b12:	2003      	movs	r0, #3
 8004b14:	e060      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b16:	4a3f      	ldr	r2, [pc, #252]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	0192      	lsls	r2, r2, #6
 8004b1c:	d4de      	bmi.n	8004adc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
 8004b20:	e05a      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b22:	4a3c      	ldr	r2, [pc, #240]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	0752      	lsls	r2, r2, #29
 8004b28:	d4d8      	bmi.n	8004adc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	e054      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b2e:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	230c      	movs	r3, #12
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d023      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3a:	f7ff f94f 	bl	8003ddc <HAL_GetTick>
 8004b3e:	1b80      	subs	r0, r0, r6
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b42:	4298      	cmp	r0, r3
 8004b44:	d9f3      	bls.n	8004b2e <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8004b46:	2003      	movs	r0, #3
 8004b48:	e046      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4a:	4b32      	ldr	r3, [pc, #200]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	230c      	movs	r3, #12
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d015      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b56:	f7ff f941 	bl	8003ddc <HAL_GetTick>
 8004b5a:	1b80      	subs	r0, r0, r6
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5e:	4298      	cmp	r0, r3
 8004b60:	d9f3      	bls.n	8004b4a <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 8004b62:	2003      	movs	r0, #3
 8004b64:	e038      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b66:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d007      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b72:	f7ff f933 	bl	8003ddc <HAL_GetTick>
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004b7a:	4298      	cmp	r0, r3
 8004b7c:	d9f3      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8004b7e:	2003      	movs	r0, #3
 8004b80:	e02a      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b82:	4b23      	ldr	r3, [pc, #140]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2301      	movs	r3, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	d825      	bhi.n	8004bda <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	075b      	lsls	r3, r3, #29
 8004b92:	d506      	bpl.n	8004ba2 <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4a1f      	ldr	r2, [pc, #124]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	68d3      	ldr	r3, [r2, #12]
 8004b98:	4920      	ldr	r1, [pc, #128]	; (8004c1c <HAL_RCC_ClockConfig+0x1c4>)
 8004b9a:	400b      	ands	r3, r1
 8004b9c:	68e9      	ldr	r1, [r5, #12]
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	d507      	bpl.n	8004bb8 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ba8:	491a      	ldr	r1, [pc, #104]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	68cb      	ldr	r3, [r1, #12]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	692a      	ldr	r2, [r5, #16]
 8004bb2:	00d2      	lsls	r2, r2, #3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bb8:	f7ff fc68 	bl	800448c <HAL_RCC_GetSysClockFreq>
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	0912      	lsrs	r2, r2, #4
 8004bc2:	230f      	movs	r3, #15
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <HAL_RCC_ClockConfig+0x1cc>)
 8004bc8:	5cd3      	ldrb	r3, [r2, r3]
 8004bca:	40d8      	lsrs	r0, r3
 8004bcc:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_RCC_ClockConfig+0x1d0>)
 8004bce:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004bd0:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_RCC_ClockConfig+0x1d4>)
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	f7ff f8ba 	bl	8003d4c <HAL_InitTick>
}
 8004bd8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	6813      	ldr	r3, [r2, #0]
 8004bde:	2101      	movs	r1, #1
 8004be0:	438b      	bics	r3, r1
 8004be2:	4323      	orrs	r3, r4
 8004be4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004be6:	f7ff f8f9 	bl	8003ddc <HAL_GetTick>
 8004bea:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <HAL_RCC_ClockConfig+0x1b8>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d0ca      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7ff f8f0 	bl	8003ddc <HAL_GetTick>
 8004bfc:	1b80      	subs	r0, r0, r6
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	4298      	cmp	r0, r3
 8004c02:	d9f3      	bls.n	8004bec <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 8004c04:	2003      	movs	r0, #3
 8004c06:	e7e7      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 8004c08:	2001      	movs	r0, #1
 8004c0a:	e7e5      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	e7e3      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x180>
 8004c10:	40022000 	.word	0x40022000
 8004c14:	40021000 	.word	0x40021000
 8004c18:	00001388 	.word	0x00001388
 8004c1c:	fffff8ff 	.word	0xfffff8ff
 8004c20:	ffffc7ff 	.word	0xffffc7ff
 8004c24:	08007474 	.word	0x08007474
 8004c28:	20000008 	.word	0x20000008
 8004c2c:	20000010 	.word	0x20000010

08004c30 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004c30:	4b01      	ldr	r3, [pc, #4]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x8>)
 8004c32:	6818      	ldr	r0, [r3, #0]
}
 8004c34:	4770      	bx	lr
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	20000008 	.word	0x20000008

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c3e:	f7ff fff7 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	0a12      	lsrs	r2, r2, #8
 8004c48:	2307      	movs	r3, #7
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	4a02      	ldr	r2, [pc, #8]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c4e:	5cd3      	ldrb	r3, [r2, r3]
 8004c50:	40d8      	lsrs	r0, r3
}
 8004c52:	bd10      	pop	{r4, pc}
 8004c54:	40021000 	.word	0x40021000
 8004c58:	08007484 	.word	0x08007484

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c5e:	f7ff ffe7 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	0ad2      	lsrs	r2, r2, #11
 8004c68:	2307      	movs	r3, #7
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	4a02      	ldr	r2, [pc, #8]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c6e:	5cd3      	ldrb	r3, [r2, r3]
 8004c70:	40d8      	lsrs	r0, r3
}
 8004c72:	bd10      	pop	{r4, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	08007484 	.word	0x08007484

08004c7c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c80:	6803      	ldr	r3, [r0, #0]
 8004c82:	069b      	lsls	r3, r3, #26
 8004c84:	d54c      	bpl.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b5b      	ldr	r3, [pc, #364]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	d500      	bpl.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8004c8e:	e071      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4a58      	ldr	r2, [pc, #352]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004c92:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	055b      	lsls	r3, r3, #21
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8004c9c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	4b56      	ldr	r3, [pc, #344]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	05db      	lsls	r3, r3, #23
 8004ca4:	d568      	bpl.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	23c0      	movs	r3, #192	; 0xc0
 8004cac:	039b      	lsls	r3, r3, #14
 8004cae:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cb0:	6862      	ldr	r2, [r4, #4]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	d006      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004cb8:	23c0      	movs	r3, #192	; 0xc0
 8004cba:	029b      	lsls	r3, r3, #10
 8004cbc:	0011      	movs	r1, r2
 8004cbe:	4019      	ands	r1, r3
 8004cc0:	4299      	cmp	r1, r3
 8004cc2:	d100      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004cc4:	e06d      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004cc6:	4b4b      	ldr	r3, [pc, #300]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	21c0      	movs	r1, #192	; 0xc0
 8004ccc:	0289      	lsls	r1, r1, #10
 8004cce:	400b      	ands	r3, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004cd0:	d015      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d012      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x82>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	069b      	lsls	r3, r3, #26
 8004cdc:	d50f      	bpl.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x82>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004cde:	4b45      	ldr	r3, [pc, #276]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004ce0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ce2:	4a46      	ldr	r2, [pc, #280]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8004ce4:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce6:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 8004ce8:	2180      	movs	r1, #128	; 0x80
 8004cea:	0309      	lsls	r1, r1, #12
 8004cec:	4331      	orrs	r1, r6
 8004cee:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cf2:	4e43      	ldr	r6, [pc, #268]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004cf4:	4031      	ands	r1, r6
 8004cf6:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004cf8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004cfa:	05c3      	lsls	r3, r0, #23
 8004cfc:	d458      	bmi.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x134>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	22c0      	movs	r2, #192	; 0xc0
 8004d02:	0292      	lsls	r2, r2, #10
 8004d04:	0019      	movs	r1, r3
 8004d06:	4011      	ands	r1, r2
 8004d08:	4291      	cmp	r1, r2
 8004d0a:	d060      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d0c:	4939      	ldr	r1, [pc, #228]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d0e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8004d10:	22c0      	movs	r2, #192	; 0xc0
 8004d12:	0292      	lsls	r2, r2, #10
 8004d14:	6860      	ldr	r0, [r4, #4]
 8004d16:	4002      	ands	r2, r0
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d1c:	2d01      	cmp	r5, #1
 8004d1e:	d060      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	079b      	lsls	r3, r3, #30
 8004d24:	d506      	bpl.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d26:	4a33      	ldr	r2, [pc, #204]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d2a:	210c      	movs	r1, #12
 8004d2c:	438b      	bics	r3, r1
 8004d2e:	68a1      	ldr	r1, [r4, #8]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	075b      	lsls	r3, r3, #29
 8004d38:	d506      	bpl.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d3c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d3e:	4931      	ldr	r1, [pc, #196]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	68e1      	ldr	r1, [r4, #12]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	071b      	lsls	r3, r3, #28
 8004d4c:	d506      	bpl.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d52:	492d      	ldr	r1, [pc, #180]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004d54:	400b      	ands	r3, r1
 8004d56:	6921      	ldr	r1, [r4, #16]
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	061b      	lsls	r3, r3, #24
 8004d60:	d545      	bpl.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004d62:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004d64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004d66:	4929      	ldr	r1, [pc, #164]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004d68:	400b      	ands	r3, r1
 8004d6a:	6961      	ldr	r1, [r4, #20]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8004d70:	2000      	movs	r0, #0
}
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
  FlagStatus       pwrclkchanged = RESET;
 8004d74:	2500      	movs	r5, #0
 8004d76:	e792      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d78:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004d7a:	6811      	ldr	r1, [r2, #0]
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d84:	f7ff f82a 	bl	8003ddc <HAL_GetTick>
 8004d88:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	05db      	lsls	r3, r3, #23
 8004d90:	d500      	bpl.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004d92:	e788      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7ff f822 	bl	8003ddc <HAL_GetTick>
 8004d98:	1b80      	subs	r0, r0, r6
 8004d9a:	2864      	cmp	r0, #100	; 0x64
 8004d9c:	d9f5      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
          return HAL_TIMEOUT;
 8004d9e:	2003      	movs	r0, #3
 8004da0:	e7e7      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	039b      	lsls	r3, r3, #14
 8004da8:	d400      	bmi.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004daa:	e78c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          return HAL_ERROR;
 8004dac:	2001      	movs	r0, #1
 8004dae:	e7e0      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        tickstart = HAL_GetTick();
 8004db0:	f7ff f814 	bl	8003ddc <HAL_GetTick>
 8004db4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	059b      	lsls	r3, r3, #22
 8004dbc:	d49f      	bmi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x82>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7ff f80d 	bl	8003ddc <HAL_GetTick>
 8004dc2:	1b80      	subs	r0, r0, r6
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	d9f5      	bls.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 8004dca:	2003      	movs	r0, #3
 8004dcc:	e7d1      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dce:	4909      	ldr	r1, [pc, #36]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8004dd0:	680a      	ldr	r2, [r1, #0]
 8004dd2:	4810      	ldr	r0, [pc, #64]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004dd4:	4002      	ands	r2, r0
 8004dd6:	20c0      	movs	r0, #192	; 0xc0
 8004dd8:	0380      	lsls	r0, r0, #14
 8004dda:	4003      	ands	r3, r0
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	e794      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	000a      	movs	r2, r1
 8004de4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004de6:	490c      	ldr	r1, [pc, #48]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004de8:	400b      	ands	r3, r1
 8004dea:	6393      	str	r3, [r2, #56]	; 0x38
 8004dec:	e798      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  return HAL_OK;
 8004dee:	2000      	movs	r0, #0
 8004df0:	e7bf      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	fffcffff 	.word	0xfffcffff
 8004e00:	fff7ffff 	.word	0xfff7ffff
 8004e04:	fffff3ff 	.word	0xfffff3ff
 8004e08:	ffffcfff 	.word	0xffffcfff
 8004e0c:	fff3ffff 	.word	0xfff3ffff
 8004e10:	00001388 	.word	0x00001388
 8004e14:	ffcfffff 	.word	0xffcfffff
 8004e18:	efffffff 	.word	0xefffffff

08004e1c <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e1c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	05d2      	lsls	r2, r2, #23
 8004e22:	4290      	cmp	r0, r2
 8004e24:	d005      	beq.n	8004e32 <TIM_Base_SetConfig+0x16>
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <TIM_Base_SetConfig+0x54>)
 8004e28:	4290      	cmp	r0, r2
 8004e2a:	d002      	beq.n	8004e32 <TIM_Base_SetConfig+0x16>
 8004e2c:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <TIM_Base_SetConfig+0x58>)
 8004e2e:	4290      	cmp	r0, r2
 8004e30:	d103      	bne.n	8004e3a <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e32:	2270      	movs	r2, #112	; 0x70
 8004e34:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004e36:	684a      	ldr	r2, [r1, #4]
 8004e38:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e3a:	2280      	movs	r2, #128	; 0x80
 8004e3c:	05d2      	lsls	r2, r2, #23
 8004e3e:	4290      	cmp	r0, r2
 8004e40:	d005      	beq.n	8004e4e <TIM_Base_SetConfig+0x32>
 8004e42:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <TIM_Base_SetConfig+0x54>)
 8004e44:	4290      	cmp	r0, r2
 8004e46:	d002      	beq.n	8004e4e <TIM_Base_SetConfig+0x32>
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <TIM_Base_SetConfig+0x58>)
 8004e4a:	4290      	cmp	r0, r2
 8004e4c:	d103      	bne.n	8004e56 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <TIM_Base_SetConfig+0x5c>)
 8004e50:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	68ca      	ldr	r2, [r1, #12]
 8004e54:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	4393      	bics	r3, r2
 8004e5a:	690a      	ldr	r2, [r1, #16]
 8004e5c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004e5e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e60:	688b      	ldr	r3, [r1, #8]
 8004e62:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e64:	680b      	ldr	r3, [r1, #0]
 8004e66:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	6143      	str	r3, [r0, #20]
}
 8004e6c:	4770      	bx	lr
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	40010800 	.word	0x40010800
 8004e74:	40011400 	.word	0x40011400
 8004e78:	fffffcff 	.word	0xfffffcff

08004e7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e7c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	6a03      	ldr	r3, [r0, #32]
 8004e80:	2201      	movs	r2, #1
 8004e82:	4393      	bics	r3, r2
 8004e84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e8c:	2573      	movs	r5, #115	; 0x73
 8004e8e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	680d      	ldr	r5, [r1, #0]
 8004e92:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e94:	2502      	movs	r5, #2
 8004e96:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e98:	688d      	ldr	r5, [r1, #8]
 8004e9a:	432b      	orrs	r3, r5

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e9e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea0:	684a      	ldr	r2, [r1, #4]
 8004ea2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea4:	6203      	str	r3, [r0, #32]
}
 8004ea6:	bd30      	pop	{r4, r5, pc}

08004ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ea8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eaa:	6a03      	ldr	r3, [r0, #32]
 8004eac:	2210      	movs	r2, #16
 8004eae:	4393      	bics	r3, r2
 8004eb0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb8:	4c08      	ldr	r4, [pc, #32]	; (8004edc <TIM_OC2_SetConfig+0x34>)
 8004eba:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebc:	680a      	ldr	r2, [r1, #0]
 8004ebe:	0212      	lsls	r2, r2, #8
 8004ec0:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec2:	2420      	movs	r4, #32
 8004ec4:	43a3      	bics	r3, r4
 8004ec6:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec8:	688b      	ldr	r3, [r1, #8]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ece:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ed0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed2:	684a      	ldr	r2, [r1, #4]
 8004ed4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	6203      	str	r3, [r0, #32]
}
 8004ed8:	bd30      	pop	{r4, r5, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	ffff8cff 	.word	0xffff8cff

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee2:	6a03      	ldr	r3, [r0, #32]
 8004ee4:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <TIM_OC3_SetConfig+0x30>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef0:	2473      	movs	r4, #115	; 0x73
 8004ef2:	43a2      	bics	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef4:	680c      	ldr	r4, [r1, #0]
 8004ef6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ef8:	4c06      	ldr	r4, [pc, #24]	; (8004f14 <TIM_OC3_SetConfig+0x34>)
 8004efa:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004efc:	688b      	ldr	r3, [r1, #8]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f04:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f06:	684a      	ldr	r2, [r1, #4]
 8004f08:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	6203      	str	r3, [r0, #32]
}
 8004f0c:	bd30      	pop	{r4, r5, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	fffffeff 	.word	0xfffffeff
 8004f14:	fffffdff 	.word	0xfffffdff

08004f18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	6a03      	ldr	r3, [r0, #32]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <TIM_OC4_SetConfig+0x30>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f26:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f28:	4c08      	ldr	r4, [pc, #32]	; (8004f4c <TIM_OC4_SetConfig+0x34>)
 8004f2a:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f2c:	680a      	ldr	r2, [r1, #0]
 8004f2e:	0212      	lsls	r2, r2, #8
 8004f30:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f32:	4c07      	ldr	r4, [pc, #28]	; (8004f50 <TIM_OC4_SetConfig+0x38>)
 8004f34:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f36:	688b      	ldr	r3, [r1, #8]
 8004f38:	031b      	lsls	r3, r3, #12
 8004f3a:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f3e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f40:	684a      	ldr	r2, [r1, #4]
 8004f42:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f44:	6203      	str	r3, [r0, #32]
}
 8004f46:	bd30      	pop	{r4, r5, pc}
 8004f48:	ffffefff 	.word	0xffffefff
 8004f4c:	ffff8cff 	.word	0xffff8cff
 8004f50:	ffffdfff 	.word	0xffffdfff

08004f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f54:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f56:	231f      	movs	r3, #31
 8004f58:	4019      	ands	r1, r3
 8004f5a:	2401      	movs	r4, #1
 8004f5c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f5e:	6a03      	ldr	r3, [r0, #32]
 8004f60:	43a3      	bics	r3, r4
 8004f62:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f64:	6a03      	ldr	r3, [r0, #32]
 8004f66:	408a      	lsls	r2, r1
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	6202      	str	r2, [r0, #32]
}
 8004f6c:	bd10      	pop	{r4, pc}

08004f6e <HAL_TIM_PWM_Init>:
{
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004f72:	d01e      	beq.n	8004fb2 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f74:	2339      	movs	r3, #57	; 0x39
 8004f76:	5cc3      	ldrb	r3, [r0, r3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d014      	beq.n	8004fa6 <HAL_TIM_PWM_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	2539      	movs	r5, #57	; 0x39
 8004f7e:	2302      	movs	r3, #2
 8004f80:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f82:	1d21      	adds	r1, r4, #4
 8004f84:	6820      	ldr	r0, [r4, #0]
 8004f86:	f7ff ff49 	bl	8004e1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	223e      	movs	r2, #62	; 0x3e
 8004f8e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	3a04      	subs	r2, #4
 8004f92:	54a3      	strb	r3, [r4, r2]
 8004f94:	3201      	adds	r2, #1
 8004f96:	54a3      	strb	r3, [r4, r2]
 8004f98:	3201      	adds	r2, #1
 8004f9a:	54a3      	strb	r3, [r4, r2]
 8004f9c:	3201      	adds	r2, #1
 8004f9e:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004fa0:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004fa2:	2000      	movs	r0, #0
}
 8004fa4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004fa6:	3338      	adds	r3, #56	; 0x38
 8004fa8:	2200      	movs	r2, #0
 8004faa:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004fac:	f7fe fcd2 	bl	8003954 <HAL_TIM_PWM_MspInit>
 8004fb0:	e7e4      	b.n	8004f7c <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	e7f6      	b.n	8004fa4 <HAL_TIM_PWM_Init+0x36>
	...

08004fb8 <HAL_TIM_PWM_Start>:
{
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	d121      	bne.n	8005004 <HAL_TIM_PWM_Start+0x4c>
 8004fc0:	233a      	movs	r3, #58	; 0x3a
 8004fc2:	5cc3      	ldrb	r3, [r0, r3]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	1e5a      	subs	r2, r3, #1
 8004fc8:	4193      	sbcs	r3, r2
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d14d      	bne.n	800506c <HAL_TIM_PWM_Start+0xb4>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	d130      	bne.n	8005036 <HAL_TIM_PWM_Start+0x7e>
 8004fd4:	333a      	adds	r3, #58	; 0x3a
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fda:	2201      	movs	r2, #1
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	f7ff ffb9 	bl	8004f54 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	05d2      	lsls	r2, r2, #23
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d034      	beq.n	8005056 <HAL_TIM_PWM_Start+0x9e>
 8004fec:	4a21      	ldr	r2, [pc, #132]	; (8005074 <HAL_TIM_PWM_Start+0xbc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d031      	beq.n	8005056 <HAL_TIM_PWM_Start+0x9e>
 8004ff2:	4a21      	ldr	r2, [pc, #132]	; (8005078 <HAL_TIM_PWM_Start+0xc0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d02e      	beq.n	8005056 <HAL_TIM_PWM_Start+0x9e>
    __HAL_TIM_ENABLE(htim);
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005000:	2000      	movs	r0, #0
 8005002:	e034      	b.n	800506e <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005004:	2904      	cmp	r1, #4
 8005006:	d008      	beq.n	800501a <HAL_TIM_PWM_Start+0x62>
 8005008:	2908      	cmp	r1, #8
 800500a:	d00d      	beq.n	8005028 <HAL_TIM_PWM_Start+0x70>
 800500c:	233d      	movs	r3, #61	; 0x3d
 800500e:	5cc3      	ldrb	r3, [r0, r3]
 8005010:	3b01      	subs	r3, #1
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	4193      	sbcs	r3, r2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e7d8      	b.n	8004fcc <HAL_TIM_PWM_Start+0x14>
 800501a:	233b      	movs	r3, #59	; 0x3b
 800501c:	5cc3      	ldrb	r3, [r0, r3]
 800501e:	3b01      	subs	r3, #1
 8005020:	1e5a      	subs	r2, r3, #1
 8005022:	4193      	sbcs	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e7d1      	b.n	8004fcc <HAL_TIM_PWM_Start+0x14>
 8005028:	233c      	movs	r3, #60	; 0x3c
 800502a:	5cc3      	ldrb	r3, [r0, r3]
 800502c:	3b01      	subs	r3, #1
 800502e:	1e5a      	subs	r2, r3, #1
 8005030:	4193      	sbcs	r3, r2
 8005032:	b2db      	uxtb	r3, r3
 8005034:	e7ca      	b.n	8004fcc <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	2904      	cmp	r1, #4
 8005038:	d005      	beq.n	8005046 <HAL_TIM_PWM_Start+0x8e>
 800503a:	2908      	cmp	r1, #8
 800503c:	d007      	beq.n	800504e <HAL_TIM_PWM_Start+0x96>
 800503e:	233d      	movs	r3, #61	; 0x3d
 8005040:	2202      	movs	r2, #2
 8005042:	54e2      	strb	r2, [r4, r3]
 8005044:	e7c9      	b.n	8004fda <HAL_TIM_PWM_Start+0x22>
 8005046:	233b      	movs	r3, #59	; 0x3b
 8005048:	2202      	movs	r2, #2
 800504a:	54e2      	strb	r2, [r4, r3]
 800504c:	e7c5      	b.n	8004fda <HAL_TIM_PWM_Start+0x22>
 800504e:	233c      	movs	r3, #60	; 0x3c
 8005050:	2202      	movs	r2, #2
 8005052:	54e2      	strb	r2, [r4, r3]
 8005054:	e7c1      	b.n	8004fda <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005056:	6899      	ldr	r1, [r3, #8]
 8005058:	2207      	movs	r2, #7
 800505a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505c:	2a06      	cmp	r2, #6
 800505e:	d007      	beq.n	8005070 <HAL_TIM_PWM_Start+0xb8>
      __HAL_TIM_ENABLE(htim);
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2101      	movs	r1, #1
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005068:	2000      	movs	r0, #0
 800506a:	e000      	b.n	800506e <HAL_TIM_PWM_Start+0xb6>
    return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
}
 800506e:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005070:	2000      	movs	r0, #0
 8005072:	e7fc      	b.n	800506e <HAL_TIM_PWM_Start+0xb6>
 8005074:	40010800 	.word	0x40010800
 8005078:	40011400 	.word	0x40011400

0800507c <HAL_TIM_PWM_Stop>:
{
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	0004      	movs	r4, r0
 8005080:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005082:	2200      	movs	r2, #0
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	f7ff ff65 	bl	8004f54 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	6a19      	ldr	r1, [r3, #32]
 800508e:	4a0f      	ldr	r2, [pc, #60]	; (80050cc <HAL_TIM_PWM_Stop+0x50>)
 8005090:	4211      	tst	r1, r2
 8005092:	d103      	bne.n	800509c <HAL_TIM_PWM_Stop+0x20>
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	2101      	movs	r1, #1
 8005098:	438a      	bics	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	2d00      	cmp	r5, #0
 800509e:	d007      	beq.n	80050b0 <HAL_TIM_PWM_Stop+0x34>
 80050a0:	2d04      	cmp	r5, #4
 80050a2:	d00a      	beq.n	80050ba <HAL_TIM_PWM_Stop+0x3e>
 80050a4:	2d08      	cmp	r5, #8
 80050a6:	d00c      	beq.n	80050c2 <HAL_TIM_PWM_Stop+0x46>
 80050a8:	233d      	movs	r3, #61	; 0x3d
 80050aa:	2201      	movs	r2, #1
 80050ac:	54e2      	strb	r2, [r4, r3]
 80050ae:	e002      	b.n	80050b6 <HAL_TIM_PWM_Stop+0x3a>
 80050b0:	233a      	movs	r3, #58	; 0x3a
 80050b2:	2201      	movs	r2, #1
 80050b4:	54e2      	strb	r2, [r4, r3]
}
 80050b6:	2000      	movs	r0, #0
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	233b      	movs	r3, #59	; 0x3b
 80050bc:	2201      	movs	r2, #1
 80050be:	54e2      	strb	r2, [r4, r3]
 80050c0:	e7f9      	b.n	80050b6 <HAL_TIM_PWM_Stop+0x3a>
 80050c2:	233c      	movs	r3, #60	; 0x3c
 80050c4:	2201      	movs	r2, #1
 80050c6:	54e2      	strb	r2, [r4, r3]
 80050c8:	e7f5      	b.n	80050b6 <HAL_TIM_PWM_Stop+0x3a>
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	00001111 	.word	0x00001111

080050d0 <HAL_TIM_PWM_ConfigChannel>:
{
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	0004      	movs	r4, r0
 80050d4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80050d6:	2338      	movs	r3, #56	; 0x38
 80050d8:	5cc3      	ldrb	r3, [r0, r3]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d068      	beq.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0xe0>
 80050de:	2338      	movs	r3, #56	; 0x38
 80050e0:	2101      	movs	r1, #1
 80050e2:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80050e4:	2a04      	cmp	r2, #4
 80050e6:	d035      	beq.n	8005154 <HAL_TIM_PWM_ConfigChannel+0x84>
 80050e8:	d91a      	bls.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x50>
 80050ea:	2a08      	cmp	r2, #8
 80050ec:	d049      	beq.n	8005182 <HAL_TIM_PWM_ConfigChannel+0xb2>
 80050ee:	2a0c      	cmp	r2, #12
 80050f0:	d15c      	bne.n	80051ac <HAL_TIM_PWM_ConfigChannel+0xdc>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050f2:	0029      	movs	r1, r5
 80050f4:	6800      	ldr	r0, [r0, #0]
 80050f6:	f7ff ff0f 	bl	8004f18 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	69d1      	ldr	r1, [r2, #28]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	430b      	orrs	r3, r1
 8005104:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	69d3      	ldr	r3, [r2, #28]
 800510a:	492a      	ldr	r1, [pc, #168]	; (80051b4 <HAL_TIM_PWM_ConfigChannel+0xe4>)
 800510c:	400b      	ands	r3, r1
 800510e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005110:	6821      	ldr	r1, [r4, #0]
 8005112:	69cb      	ldr	r3, [r1, #28]
 8005114:	68ea      	ldr	r2, [r5, #12]
 8005116:	0212      	lsls	r2, r2, #8
 8005118:	4313      	orrs	r3, r2
 800511a:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2000      	movs	r0, #0
      break;
 800511e:	e015      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x7c>
  switch (Channel)
 8005120:	2a00      	cmp	r2, #0
 8005122:	d143      	bne.n	80051ac <HAL_TIM_PWM_ConfigChannel+0xdc>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005124:	0029      	movs	r1, r5
 8005126:	6800      	ldr	r0, [r0, #0]
 8005128:	f7ff fea8 	bl	8004e7c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	6993      	ldr	r3, [r2, #24]
 8005130:	2108      	movs	r1, #8
 8005132:	430b      	orrs	r3, r1
 8005134:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	6993      	ldr	r3, [r2, #24]
 800513a:	3904      	subs	r1, #4
 800513c:	438b      	bics	r3, r1
 800513e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	6993      	ldr	r3, [r2, #24]
 8005144:	68e9      	ldr	r1, [r5, #12]
 8005146:	430b      	orrs	r3, r1
 8005148:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800514c:	2338      	movs	r3, #56	; 0x38
 800514e:	2200      	movs	r2, #0
 8005150:	54e2      	strb	r2, [r4, r3]
}
 8005152:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005154:	0029      	movs	r1, r5
 8005156:	6800      	ldr	r0, [r0, #0]
 8005158:	f7ff fea6 	bl	8004ea8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515c:	6822      	ldr	r2, [r4, #0]
 800515e:	6991      	ldr	r1, [r2, #24]
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	430b      	orrs	r3, r1
 8005166:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	6993      	ldr	r3, [r2, #24]
 800516c:	4911      	ldr	r1, [pc, #68]	; (80051b4 <HAL_TIM_PWM_ConfigChannel+0xe4>)
 800516e:	400b      	ands	r3, r1
 8005170:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	698b      	ldr	r3, [r1, #24]
 8005176:	68ea      	ldr	r2, [r5, #12]
 8005178:	0212      	lsls	r2, r2, #8
 800517a:	4313      	orrs	r3, r2
 800517c:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2000      	movs	r0, #0
      break;
 8005180:	e7e4      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x7c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	0029      	movs	r1, r5
 8005184:	6800      	ldr	r0, [r0, #0]
 8005186:	f7ff feab 	bl	8004ee0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518a:	6822      	ldr	r2, [r4, #0]
 800518c:	69d3      	ldr	r3, [r2, #28]
 800518e:	2108      	movs	r1, #8
 8005190:	430b      	orrs	r3, r1
 8005192:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005194:	6822      	ldr	r2, [r4, #0]
 8005196:	69d3      	ldr	r3, [r2, #28]
 8005198:	3904      	subs	r1, #4
 800519a:	438b      	bics	r3, r1
 800519c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800519e:	6822      	ldr	r2, [r4, #0]
 80051a0:	69d3      	ldr	r3, [r2, #28]
 80051a2:	68e9      	ldr	r1, [r5, #12]
 80051a4:	430b      	orrs	r3, r1
 80051a6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2000      	movs	r0, #0
      break;
 80051aa:	e7cf      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x7c>
      status = HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
 80051ae:	e7cd      	b.n	800514c <HAL_TIM_PWM_ConfigChannel+0x7c>
  __HAL_LOCK(htim);
 80051b0:	2002      	movs	r0, #2
 80051b2:	e7ce      	b.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x82>
 80051b4:	fffffbff 	.word	0xfffffbff

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ba:	2338      	movs	r3, #56	; 0x38
 80051bc:	5cc3      	ldrb	r3, [r0, r3]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d025      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051c2:	2338      	movs	r3, #56	; 0x38
 80051c4:	2201      	movs	r2, #1
 80051c6:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	3301      	adds	r3, #1
 80051ca:	3201      	adds	r2, #1
 80051cc:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051ce:	6803      	ldr	r3, [r0, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d2:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d4:	2570      	movs	r5, #112	; 0x70
 80051d6:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d8:	680d      	ldr	r5, [r1, #0]
 80051da:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	6803      	ldr	r3, [r0, #0]
 80051e0:	2280      	movs	r2, #128	; 0x80
 80051e2:	05d2      	lsls	r2, r2, #23
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d005      	beq.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d002      	beq.n	80051f4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d104      	bne.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f4:	2280      	movs	r2, #128	; 0x80
 80051f6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f8:	684a      	ldr	r2, [r1, #4]
 80051fa:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051fe:	2339      	movs	r3, #57	; 0x39
 8005200:	2201      	movs	r2, #1
 8005202:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005204:	3b01      	subs	r3, #1
 8005206:	2200      	movs	r2, #0
 8005208:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800520a:	2000      	movs	r0, #0
}
 800520c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800520e:	2002      	movs	r0, #2
 8005210:	e7fc      	b.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	40010800 	.word	0x40010800
 8005218:	40011400 	.word	0x40011400

0800521c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800521e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005222:	2201      	movs	r2, #1
 8005224:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005228:	6801      	ldr	r1, [r0, #0]
 800522a:	680b      	ldr	r3, [r1, #0]
 800522c:	4d11      	ldr	r5, [pc, #68]	; (8005274 <UART_EndRxTransfer+0x58>)
 800522e:	402b      	ands	r3, r5
 8005230:	600b      	str	r3, [r1, #0]
 8005232:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005236:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	6801      	ldr	r1, [r0, #0]
 8005240:	688b      	ldr	r3, [r1, #8]
 8005242:	4393      	bics	r3, r2
 8005244:	608b      	str	r3, [r1, #8]
 8005246:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800524c:	2b01      	cmp	r3, #1
 800524e:	d005      	beq.n	800525c <UART_EndRxTransfer+0x40>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	2320      	movs	r3, #32
 8005252:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	2300      	movs	r3, #0
 8005256:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005258:	6643      	str	r3, [r0, #100]	; 0x64
}
 800525a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800525c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005260:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005264:	6802      	ldr	r2, [r0, #0]
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	2410      	movs	r4, #16
 800526a:	43a3      	bics	r3, r4
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	f381 8810 	msr	PRIMASK, r1
 8005272:	e7ed      	b.n	8005250 <UART_EndRxTransfer+0x34>
 8005274:	fffffedf 	.word	0xfffffedf

08005278 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005278:	b530      	push	{r4, r5, lr}
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800527a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800527c:	2b21      	cmp	r3, #33	; 0x21
 800527e:	d000      	beq.n	8005282 <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005280:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 8005282:	3331      	adds	r3, #49	; 0x31
 8005284:	5ac3      	ldrh	r3, [r0, r3]
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800528c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	6803      	ldr	r3, [r0, #0]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005294:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005296:	3301      	adds	r3, #1
 8005298:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800529a:	2252      	movs	r2, #82	; 0x52
 800529c:	5a83      	ldrh	r3, [r0, r2]
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	5283      	strh	r3, [r0, r2]
}
 80052a4:	e7ec      	b.n	8005280 <UART_TxISR_8BIT+0x8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	2201      	movs	r2, #1
 80052ac:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80052b0:	6801      	ldr	r1, [r0, #0]
 80052b2:	680b      	ldr	r3, [r1, #0]
 80052b4:	2580      	movs	r5, #128	; 0x80
 80052b6:	43ab      	bics	r3, r5
 80052b8:	600b      	str	r3, [r1, #0]
 80052ba:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052c6:	6802      	ldr	r2, [r0, #0]
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	2040      	movs	r0, #64	; 0x40
 80052cc:	4303      	orrs	r3, r0
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	f381 8810 	msr	PRIMASK, r1
 80052d4:	e7d4      	b.n	8005280 <UART_TxISR_8BIT+0x8>

080052d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052d6:	b530      	push	{r4, r5, lr}
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80052da:	2b21      	cmp	r3, #33	; 0x21
 80052dc:	d000      	beq.n	80052e0 <UART_TxISR_16BIT+0xa>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80052de:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 80052e0:	3331      	adds	r3, #49	; 0x31
 80052e2:	5ac3      	ldrh	r3, [r0, r3]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00e      	beq.n	8005308 <UART_TxISR_16BIT+0x32>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	6802      	ldr	r2, [r0, #0]
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	0ddb      	lsrs	r3, r3, #23
 80052f4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80052f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80052f8:	3302      	adds	r3, #2
 80052fa:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80052fc:	2252      	movs	r2, #82	; 0x52
 80052fe:	5a83      	ldrh	r3, [r0, r2]
 8005300:	3b01      	subs	r3, #1
 8005302:	b29b      	uxth	r3, r3
 8005304:	5283      	strh	r3, [r0, r2]
}
 8005306:	e7ea      	b.n	80052de <UART_TxISR_16BIT+0x8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530c:	2201      	movs	r2, #1
 800530e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005312:	6801      	ldr	r1, [r0, #0]
 8005314:	680b      	ldr	r3, [r1, #0]
 8005316:	2580      	movs	r5, #128	; 0x80
 8005318:	43ab      	bics	r3, r5
 800531a:	600b      	str	r3, [r1, #0]
 800531c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005320:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005324:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005328:	6802      	ldr	r2, [r0, #0]
 800532a:	6813      	ldr	r3, [r2, #0]
 800532c:	2040      	movs	r0, #64	; 0x40
 800532e:	4303      	orrs	r3, r0
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	f381 8810 	msr	PRIMASK, r1
 8005336:	e7d2      	b.n	80052de <UART_TxISR_16BIT+0x8>

08005338 <HAL_UART_Transmit_IT>:
{
 8005338:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800533a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800533c:	2b20      	cmp	r3, #32
 800533e:	d13e      	bne.n	80053be <HAL_UART_Transmit_IT+0x86>
    if ((pData == NULL) || (Size == 0U))
 8005340:	2900      	cmp	r1, #0
 8005342:	d03e      	beq.n	80053c2 <HAL_UART_Transmit_IT+0x8a>
 8005344:	2a00      	cmp	r2, #0
 8005346:	d03e      	beq.n	80053c6 <HAL_UART_Transmit_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005348:	6883      	ldr	r3, [r0, #8]
 800534a:	2480      	movs	r4, #128	; 0x80
 800534c:	0164      	lsls	r4, r4, #5
 800534e:	42a3      	cmp	r3, r4
 8005350:	d028      	beq.n	80053a4 <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 8005352:	2474      	movs	r4, #116	; 0x74
 8005354:	5d04      	ldrb	r4, [r0, r4]
 8005356:	2c01      	cmp	r4, #1
 8005358:	d037      	beq.n	80053ca <HAL_UART_Transmit_IT+0x92>
 800535a:	2474      	movs	r4, #116	; 0x74
 800535c:	2501      	movs	r5, #1
 800535e:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8005360:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005362:	2150      	movs	r1, #80	; 0x50
 8005364:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 8005366:	3102      	adds	r1, #2
 8005368:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 800536a:	2200      	movs	r2, #0
 800536c:	6682      	str	r2, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536e:	312e      	adds	r1, #46	; 0x2e
 8005370:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005372:	3221      	adds	r2, #33	; 0x21
 8005374:	6782      	str	r2, [r0, #120]	; 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	0152      	lsls	r2, r2, #5
 800537a:	4293      	cmp	r3, r2
 800537c:	d019      	beq.n	80053b2 <HAL_UART_Transmit_IT+0x7a>
      huart->TxISR = UART_TxISR_8BIT;
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <HAL_UART_Transmit_IT+0x98>)
 8005380:	6683      	str	r3, [r0, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8005382:	2374      	movs	r3, #116	; 0x74
 8005384:	2200      	movs	r2, #0
 8005386:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800538c:	3b73      	subs	r3, #115	; 0x73
 800538e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005392:	6802      	ldr	r2, [r0, #0]
 8005394:	6813      	ldr	r3, [r2, #0]
 8005396:	2080      	movs	r0, #128	; 0x80
 8005398:	4303      	orrs	r3, r0
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80053a0:	2000      	movs	r0, #0
 80053a2:	e00d      	b.n	80053c0 <HAL_UART_Transmit_IT+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a4:	6904      	ldr	r4, [r0, #16]
 80053a6:	2c00      	cmp	r4, #0
 80053a8:	d1d3      	bne.n	8005352 <HAL_UART_Transmit_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 80053aa:	07cc      	lsls	r4, r1, #31
 80053ac:	d5d1      	bpl.n	8005352 <HAL_UART_Transmit_IT+0x1a>
        return  HAL_ERROR;
 80053ae:	2001      	movs	r0, #1
 80053b0:	e006      	b.n	80053c0 <HAL_UART_Transmit_IT+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b2:	6903      	ldr	r3, [r0, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e2      	bne.n	800537e <HAL_UART_Transmit_IT+0x46>
      huart->TxISR = UART_TxISR_16BIT;
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <HAL_UART_Transmit_IT+0x9c>)
 80053ba:	6683      	str	r3, [r0, #104]	; 0x68
 80053bc:	e7e1      	b.n	8005382 <HAL_UART_Transmit_IT+0x4a>
    return HAL_BUSY;
 80053be:	2002      	movs	r0, #2
}
 80053c0:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 80053c2:	2001      	movs	r0, #1
 80053c4:	e7fc      	b.n	80053c0 <HAL_UART_Transmit_IT+0x88>
 80053c6:	2001      	movs	r0, #1
 80053c8:	e7fa      	b.n	80053c0 <HAL_UART_Transmit_IT+0x88>
    __HAL_LOCK(huart);
 80053ca:	2002      	movs	r0, #2
 80053cc:	e7f8      	b.n	80053c0 <HAL_UART_Transmit_IT+0x88>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	08005279 	.word	0x08005279
 80053d4:	080052d7 	.word	0x080052d7

080053d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053da:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053de:	2301      	movs	r3, #1
 80053e0:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e4:	6802      	ldr	r2, [r0, #0]
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	2440      	movs	r4, #64	; 0x40
 80053ea:	43a3      	bics	r3, r4
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053f2:	2320      	movs	r3, #32
 80053f4:	6783      	str	r3, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	6683      	str	r3, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053fa:	f7fd ff9d 	bl	8003338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fe:	bd10      	pop	{r4, pc}

08005400 <HAL_UART_ErrorCallback>:
}
 8005400:	4770      	bx	lr

08005402 <UART_DMAAbortOnError>:
{
 8005402:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005404:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	225a      	movs	r2, #90	; 0x5a
 800540a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800540c:	3a08      	subs	r2, #8
 800540e:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8005410:	f7ff fff6 	bl	8005400 <HAL_UART_ErrorCallback>
}
 8005414:	bd10      	pop	{r4, pc}

08005416 <HAL_UARTEx_RxEventCallback>:
}
 8005416:	4770      	bx	lr

08005418 <HAL_UART_IRQHandler>:
{
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800541c:	6801      	ldr	r1, [r0, #0]
 800541e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005420:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005422:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005424:	4aa9      	ldr	r2, [pc, #676]	; (80056cc <HAL_UART_IRQHandler+0x2b4>)
 8005426:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8005428:	d109      	bne.n	800543e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800542a:	069e      	lsls	r6, r3, #26
 800542c:	d507      	bpl.n	800543e <HAL_UART_IRQHandler+0x26>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800542e:	0686      	lsls	r6, r0, #26
 8005430:	d505      	bpl.n	800543e <HAL_UART_IRQHandler+0x26>
      if (huart->RxISR != NULL)
 8005432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_IRQHandler+0x24>
        huart->RxISR(huart);
 8005438:	0020      	movs	r0, r4
 800543a:	4798      	blx	r3
}
 800543c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 800543e:	2a00      	cmp	r2, #0
 8005440:	d100      	bne.n	8005444 <HAL_UART_IRQHandler+0x2c>
 8005442:	e089      	b.n	8005558 <HAL_UART_IRQHandler+0x140>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005444:	2201      	movs	r2, #1
 8005446:	402a      	ands	r2, r5
 8005448:	d103      	bne.n	8005452 <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800544a:	4ea1      	ldr	r6, [pc, #644]	; (80056d0 <HAL_UART_IRQHandler+0x2b8>)
 800544c:	4230      	tst	r0, r6
 800544e:	d100      	bne.n	8005452 <HAL_UART_IRQHandler+0x3a>
 8005450:	e082      	b.n	8005558 <HAL_UART_IRQHandler+0x140>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005452:	07dd      	lsls	r5, r3, #31
 8005454:	d507      	bpl.n	8005466 <HAL_UART_IRQHandler+0x4e>
 8005456:	05c5      	lsls	r5, r0, #23
 8005458:	d505      	bpl.n	8005466 <HAL_UART_IRQHandler+0x4e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800545a:	2601      	movs	r6, #1
 800545c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800545e:	2580      	movs	r5, #128	; 0x80
 8005460:	5961      	ldr	r1, [r4, r5]
 8005462:	4331      	orrs	r1, r6
 8005464:	5161      	str	r1, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005466:	0799      	lsls	r1, r3, #30
 8005468:	d509      	bpl.n	800547e <HAL_UART_IRQHandler+0x66>
 800546a:	2a00      	cmp	r2, #0
 800546c:	d007      	beq.n	800547e <HAL_UART_IRQHandler+0x66>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800546e:	6821      	ldr	r1, [r4, #0]
 8005470:	2502      	movs	r5, #2
 8005472:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005474:	357e      	adds	r5, #126	; 0x7e
 8005476:	5961      	ldr	r1, [r4, r5]
 8005478:	2604      	movs	r6, #4
 800547a:	4331      	orrs	r1, r6
 800547c:	5161      	str	r1, [r4, r5]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800547e:	0759      	lsls	r1, r3, #29
 8005480:	d509      	bpl.n	8005496 <HAL_UART_IRQHandler+0x7e>
 8005482:	2a00      	cmp	r2, #0
 8005484:	d007      	beq.n	8005496 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	2504      	movs	r5, #4
 800548a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800548c:	357c      	adds	r5, #124	; 0x7c
 800548e:	5961      	ldr	r1, [r4, r5]
 8005490:	2602      	movs	r6, #2
 8005492:	4331      	orrs	r1, r6
 8005494:	5161      	str	r1, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005496:	0719      	lsls	r1, r3, #28
 8005498:	d50a      	bpl.n	80054b0 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800549a:	0681      	lsls	r1, r0, #26
 800549c:	d401      	bmi.n	80054a2 <HAL_UART_IRQHandler+0x8a>
 800549e:	2a00      	cmp	r2, #0
 80054a0:	d006      	beq.n	80054b0 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	2508      	movs	r5, #8
 80054a6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	5862      	ldr	r2, [r4, r1]
 80054ac:	432a      	orrs	r2, r5
 80054ae:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054b0:	051a      	lsls	r2, r3, #20
 80054b2:	d50a      	bpl.n	80054ca <HAL_UART_IRQHandler+0xb2>
 80054b4:	0142      	lsls	r2, r0, #5
 80054b6:	d508      	bpl.n	80054ca <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b8:	6822      	ldr	r2, [r4, #0]
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	0109      	lsls	r1, r1, #4
 80054be:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	5862      	ldr	r2, [r4, r1]
 80054c4:	2520      	movs	r5, #32
 80054c6:	432a      	orrs	r2, r5
 80054c8:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	58a2      	ldr	r2, [r4, r2]
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d0b4      	beq.n	800543c <HAL_UART_IRQHandler+0x24>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054d2:	069b      	lsls	r3, r3, #26
 80054d4:	d506      	bpl.n	80054e4 <HAL_UART_IRQHandler+0xcc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054d6:	0683      	lsls	r3, r0, #26
 80054d8:	d504      	bpl.n	80054e4 <HAL_UART_IRQHandler+0xcc>
        if (huart->RxISR != NULL)
 80054da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_UART_IRQHandler+0xcc>
          huart->RxISR(huart);
 80054e0:	0020      	movs	r0, r4
 80054e2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	065b      	lsls	r3, r3, #25
 80054ee:	d402      	bmi.n	80054f6 <HAL_UART_IRQHandler+0xde>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054f0:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f2:	4213      	tst	r3, r2
 80054f4:	d029      	beq.n	800554a <HAL_UART_IRQHandler+0x132>
        UART_EndRxTransfer(huart);
 80054f6:	0020      	movs	r0, r4
 80054f8:	f7ff fe90 	bl	800521c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	065b      	lsls	r3, r3, #25
 8005502:	d51e      	bpl.n	8005542 <HAL_UART_IRQHandler+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005504:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	2301      	movs	r3, #1
 800550a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	6893      	ldr	r3, [r2, #8]
 8005512:	2040      	movs	r0, #64	; 0x40
 8005514:	4383      	bics	r3, r0
 8005516:	6093      	str	r3, [r2, #8]
 8005518:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800551c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_UART_IRQHandler+0x122>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005522:	4a6c      	ldr	r2, [pc, #432]	; (80056d4 <HAL_UART_IRQHandler+0x2bc>)
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005526:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005528:	f7fe fcee 	bl	8003f08 <HAL_DMA_Abort_IT>
 800552c:	2800      	cmp	r0, #0
 800552e:	d100      	bne.n	8005532 <HAL_UART_IRQHandler+0x11a>
 8005530:	e784      	b.n	800543c <HAL_UART_IRQHandler+0x24>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005532:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005534:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005536:	4798      	blx	r3
 8005538:	e780      	b.n	800543c <HAL_UART_IRQHandler+0x24>
            HAL_UART_ErrorCallback(huart);
 800553a:	0020      	movs	r0, r4
 800553c:	f7ff ff60 	bl	8005400 <HAL_UART_ErrorCallback>
 8005540:	e77c      	b.n	800543c <HAL_UART_IRQHandler+0x24>
          HAL_UART_ErrorCallback(huart);
 8005542:	0020      	movs	r0, r4
 8005544:	f7ff ff5c 	bl	8005400 <HAL_UART_ErrorCallback>
 8005548:	e778      	b.n	800543c <HAL_UART_IRQHandler+0x24>
        HAL_UART_ErrorCallback(huart);
 800554a:	0020      	movs	r0, r4
 800554c:	f7ff ff58 	bl	8005400 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	2380      	movs	r3, #128	; 0x80
 8005552:	2200      	movs	r2, #0
 8005554:	50e2      	str	r2, [r4, r3]
 8005556:	e771      	b.n	800543c <HAL_UART_IRQHandler+0x24>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800555a:	2a01      	cmp	r2, #1
 800555c:	d011      	beq.n	8005582 <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800555e:	02da      	lsls	r2, r3, #11
 8005560:	d502      	bpl.n	8005568 <HAL_UART_IRQHandler+0x150>
 8005562:	026a      	lsls	r2, r5, #9
 8005564:	d500      	bpl.n	8005568 <HAL_UART_IRQHandler+0x150>
 8005566:	e09f      	b.n	80056a8 <HAL_UART_IRQHandler+0x290>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005568:	061a      	lsls	r2, r3, #24
 800556a:	d400      	bmi.n	800556e <HAL_UART_IRQHandler+0x156>
 800556c:	e0a3      	b.n	80056b6 <HAL_UART_IRQHandler+0x29e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800556e:	0602      	lsls	r2, r0, #24
 8005570:	d400      	bmi.n	8005574 <HAL_UART_IRQHandler+0x15c>
 8005572:	e0a0      	b.n	80056b6 <HAL_UART_IRQHandler+0x29e>
    if (huart->TxISR != NULL)
 8005574:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005576:	2b00      	cmp	r3, #0
 8005578:	d100      	bne.n	800557c <HAL_UART_IRQHandler+0x164>
 800557a:	e75f      	b.n	800543c <HAL_UART_IRQHandler+0x24>
      huart->TxISR(huart);
 800557c:	0020      	movs	r0, r4
 800557e:	4798      	blx	r3
 8005580:	e75c      	b.n	800543c <HAL_UART_IRQHandler+0x24>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005582:	06da      	lsls	r2, r3, #27
 8005584:	d5eb      	bpl.n	800555e <HAL_UART_IRQHandler+0x146>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005586:	06c2      	lsls	r2, r0, #27
 8005588:	d5e9      	bpl.n	800555e <HAL_UART_IRQHandler+0x146>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800558a:	2310      	movs	r3, #16
 800558c:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	065b      	lsls	r3, r3, #25
 8005594:	d550      	bpl.n	8005638 <HAL_UART_IRQHandler+0x220>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005596:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005598:	6813      	ldr	r3, [r2, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d100      	bne.n	80055a4 <HAL_UART_IRQHandler+0x18c>
 80055a2:	e74b      	b.n	800543c <HAL_UART_IRQHandler+0x24>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055a4:	2158      	movs	r1, #88	; 0x58
 80055a6:	5a61      	ldrh	r1, [r4, r1]
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d800      	bhi.n	80055ae <HAL_UART_IRQHandler+0x196>
 80055ac:	e746      	b.n	800543c <HAL_UART_IRQHandler+0x24>
        huart->RxXferCount = nb_remaining_rx_data;
 80055ae:	215a      	movs	r1, #90	; 0x5a
 80055b0:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	069b      	lsls	r3, r3, #26
 80055b8:	d509      	bpl.n	80055ce <HAL_UART_IRQHandler+0x1b6>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055ba:	2358      	movs	r3, #88	; 0x58
 80055bc:	5ae1      	ldrh	r1, [r4, r3]
 80055be:	3302      	adds	r3, #2
 80055c0:	5ae3      	ldrh	r3, [r4, r3]
 80055c2:	1ac9      	subs	r1, r1, r3
 80055c4:	b289      	uxth	r1, r1
 80055c6:	0020      	movs	r0, r4
 80055c8:	f7ff ff25 	bl	8005416 <HAL_UARTEx_RxEventCallback>
 80055cc:	e736      	b.n	800543c <HAL_UART_IRQHandler+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	2301      	movs	r3, #1
 80055d4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	680a      	ldr	r2, [r1, #0]
 80055dc:	4d3e      	ldr	r5, [pc, #248]	; (80056d8 <HAL_UART_IRQHandler+0x2c0>)
 80055de:	402a      	ands	r2, r5
 80055e0:	600a      	str	r2, [r1, #0]
 80055e2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	688a      	ldr	r2, [r1, #8]
 80055f2:	439a      	bics	r2, r3
 80055f4:	608a      	str	r2, [r1, #8]
 80055f6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fe:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	6821      	ldr	r1, [r4, #0]
 8005604:	688a      	ldr	r2, [r1, #8]
 8005606:	3542      	adds	r5, #66	; 0x42
 8005608:	35ff      	adds	r5, #255	; 0xff
 800560a:	43aa      	bics	r2, r5
 800560c:	608a      	str	r2, [r1, #8]
 800560e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8005612:	2220      	movs	r2, #32
 8005614:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	2200      	movs	r2, #0
 8005618:	6622      	str	r2, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	6813      	ldr	r3, [r2, #0]
 8005626:	2010      	movs	r0, #16
 8005628:	4383      	bics	r3, r0
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005630:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005632:	f7fe fc45 	bl	8003ec0 <HAL_DMA_Abort>
 8005636:	e7c0      	b.n	80055ba <HAL_UART_IRQHandler+0x1a2>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005638:	2358      	movs	r3, #88	; 0x58
 800563a:	5ae1      	ldrh	r1, [r4, r3]
 800563c:	3302      	adds	r3, #2
 800563e:	5ae2      	ldrh	r2, [r4, r3]
 8005640:	1a89      	subs	r1, r1, r2
 8005642:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005644:	5ae3      	ldrh	r3, [r4, r3]
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d100      	bne.n	800564e <HAL_UART_IRQHandler+0x236>
 800564c:	e6f6      	b.n	800543c <HAL_UART_IRQHandler+0x24>
          && (nb_rx_data > 0U))
 800564e:	2900      	cmp	r1, #0
 8005650:	d100      	bne.n	8005654 <HAL_UART_IRQHandler+0x23c>
 8005652:	e6f3      	b.n	800543c <HAL_UART_IRQHandler+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	2301      	movs	r3, #1
 800565a:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	6802      	ldr	r2, [r0, #0]
 8005662:	4e1e      	ldr	r6, [pc, #120]	; (80056dc <HAL_UART_IRQHandler+0x2c4>)
 8005664:	4032      	ands	r2, r6
 8005666:	6002      	str	r2, [r0, #0]
 8005668:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005670:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	6882      	ldr	r2, [r0, #8]
 8005678:	439a      	bics	r2, r3
 800567a:	6082      	str	r2, [r0, #8]
 800567c:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8005680:	2220      	movs	r2, #32
 8005682:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	2200      	movs	r2, #0
 8005686:	6622      	str	r2, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8005688:	6662      	str	r2, [r4, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	6813      	ldr	r3, [r2, #0]
 8005696:	2510      	movs	r5, #16
 8005698:	43ab      	bics	r3, r5
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a0:	0020      	movs	r0, r4
 80056a2:	f7ff feb8 	bl	8005416 <HAL_UARTEx_RxEventCallback>
 80056a6:	e6c9      	b.n	800543c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	035b      	lsls	r3, r3, #13
 80056ac:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80056ae:	0020      	movs	r0, r4
 80056b0:	f000 fbee 	bl	8005e90 <HAL_UARTEx_WakeupCallback>
    return;
 80056b4:	e6c2      	b.n	800543c <HAL_UART_IRQHandler+0x24>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056b6:	065b      	lsls	r3, r3, #25
 80056b8:	d400      	bmi.n	80056bc <HAL_UART_IRQHandler+0x2a4>
 80056ba:	e6bf      	b.n	800543c <HAL_UART_IRQHandler+0x24>
 80056bc:	0643      	lsls	r3, r0, #25
 80056be:	d400      	bmi.n	80056c2 <HAL_UART_IRQHandler+0x2aa>
 80056c0:	e6bc      	b.n	800543c <HAL_UART_IRQHandler+0x24>
    UART_EndTransmit_IT(huart);
 80056c2:	0020      	movs	r0, r4
 80056c4:	f7ff fe88 	bl	80053d8 <UART_EndTransmit_IT>
    return;
 80056c8:	e6b8      	b.n	800543c <HAL_UART_IRQHandler+0x24>
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	0000080f 	.word	0x0000080f
 80056d0:	04000120 	.word	0x04000120
 80056d4:	08005403 	.word	0x08005403
 80056d8:	fffffeff 	.word	0xfffffeff
 80056dc:	fffffedf 	.word	0xfffffedf

080056e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056e0:	b570      	push	{r4, r5, r6, lr}
  uint16_t uhMask = huart->Mask;
 80056e2:	235c      	movs	r3, #92	; 0x5c
 80056e4:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056e6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80056e8:	2a22      	cmp	r2, #34	; 0x22
 80056ea:	d005      	beq.n	80056f8 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ec:	6802      	ldr	r2, [r0, #0]
 80056ee:	6993      	ldr	r3, [r2, #24]
 80056f0:	2108      	movs	r1, #8
 80056f2:	430b      	orrs	r3, r1
 80056f4:	6193      	str	r3, [r2, #24]
  }
}
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056f8:	6802      	ldr	r2, [r0, #0]
 80056fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4013      	ands	r3, r2
 8005700:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005702:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005704:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005706:	3301      	adds	r3, #1
 8005708:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800570a:	225a      	movs	r2, #90	; 0x5a
 800570c:	5a83      	ldrh	r3, [r0, r2]
 800570e:	3b01      	subs	r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8005714:	5a83      	ldrh	r3, [r0, r2]
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ec      	bne.n	80056f6 <UART_RxISR_8BIT+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	3a59      	subs	r2, #89	; 0x59
 8005722:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	6801      	ldr	r1, [r0, #0]
 8005728:	680b      	ldr	r3, [r1, #0]
 800572a:	4d18      	ldr	r5, [pc, #96]	; (800578c <UART_RxISR_8BIT+0xac>)
 800572c:	402b      	ands	r3, r5
 800572e:	600b      	str	r3, [r1, #0]
 8005730:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005738:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573c:	6801      	ldr	r1, [r0, #0]
 800573e:	688b      	ldr	r3, [r1, #8]
 8005740:	4393      	bics	r3, r2
 8005742:	608b      	str	r3, [r1, #8]
 8005744:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 8005748:	2320      	movs	r3, #32
 800574a:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005752:	2b01      	cmp	r3, #1
 8005754:	d117      	bne.n	8005786 <UART_RxISR_8BIT+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005756:	2300      	movs	r3, #0
 8005758:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800575a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	3301      	adds	r3, #1
 8005760:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005764:	6801      	ldr	r1, [r0, #0]
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	320f      	adds	r2, #15
 800576a:	4393      	bics	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
 800576e:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005772:	6803      	ldr	r3, [r0, #0]
 8005774:	69d9      	ldr	r1, [r3, #28]
 8005776:	420a      	tst	r2, r1
 8005778:	d000      	beq.n	800577c <UART_RxISR_8BIT+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800577a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577c:	2358      	movs	r3, #88	; 0x58
 800577e:	5ac1      	ldrh	r1, [r0, r3]
 8005780:	f7ff fe49 	bl	8005416 <HAL_UARTEx_RxEventCallback>
 8005784:	e7b7      	b.n	80056f6 <UART_RxISR_8BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 8005786:	f7fd fdd3 	bl	8003330 <HAL_UART_RxCpltCallback>
 800578a:	e7b4      	b.n	80056f6 <UART_RxISR_8BIT+0x16>
 800578c:	fffffedf 	.word	0xfffffedf

08005790 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005790:	b570      	push	{r4, r5, r6, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005792:	235c      	movs	r3, #92	; 0x5c
 8005794:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005796:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005798:	2b22      	cmp	r3, #34	; 0x22
 800579a:	d005      	beq.n	80057a8 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800579c:	6802      	ldr	r2, [r0, #0]
 800579e:	6993      	ldr	r3, [r2, #24]
 80057a0:	2108      	movs	r1, #8
 80057a2:	430b      	orrs	r3, r1
 80057a4:	6193      	str	r3, [r2, #24]
  }
}
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a8:	6803      	ldr	r3, [r0, #0]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80057ac:	4013      	ands	r3, r2
 80057ae:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80057b0:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80057b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80057b4:	3302      	adds	r3, #2
 80057b6:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80057b8:	225a      	movs	r2, #90	; 0x5a
 80057ba:	5a83      	ldrh	r3, [r0, r2]
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29b      	uxth	r3, r3
 80057c0:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80057c2:	5a83      	ldrh	r3, [r0, r2]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1ed      	bne.n	80057a6 <UART_RxISR_16BIT+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	3a59      	subs	r2, #89	; 0x59
 80057d0:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d4:	6801      	ldr	r1, [r0, #0]
 80057d6:	680b      	ldr	r3, [r1, #0]
 80057d8:	4d18      	ldr	r5, [pc, #96]	; (800583c <UART_RxISR_16BIT+0xac>)
 80057da:	402b      	ands	r3, r5
 80057dc:	600b      	str	r3, [r1, #0]
 80057de:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e6:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	6801      	ldr	r1, [r0, #0]
 80057ec:	688b      	ldr	r3, [r1, #8]
 80057ee:	4393      	bics	r3, r2
 80057f0:	608b      	str	r3, [r1, #8]
 80057f2:	f384 8810 	msr	PRIMASK, r4
      huart->RxState = HAL_UART_STATE_READY;
 80057f6:	2320      	movs	r3, #32
 80057f8:	67c3      	str	r3, [r0, #124]	; 0x7c
      huart->RxISR = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	6643      	str	r3, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8005800:	2b01      	cmp	r3, #1
 8005802:	d117      	bne.n	8005834 <UART_RxISR_16BIT+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005804:	2300      	movs	r3, #0
 8005806:	6603      	str	r3, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580c:	3301      	adds	r3, #1
 800580e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	6801      	ldr	r1, [r0, #0]
 8005814:	680b      	ldr	r3, [r1, #0]
 8005816:	320f      	adds	r2, #15
 8005818:	4393      	bics	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
 800581c:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005820:	6803      	ldr	r3, [r0, #0]
 8005822:	69d9      	ldr	r1, [r3, #28]
 8005824:	420a      	tst	r2, r1
 8005826:	d000      	beq.n	800582a <UART_RxISR_16BIT+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005828:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800582a:	2358      	movs	r3, #88	; 0x58
 800582c:	5ac1      	ldrh	r1, [r0, r3]
 800582e:	f7ff fdf2 	bl	8005416 <HAL_UARTEx_RxEventCallback>
 8005832:	e7b8      	b.n	80057a6 <UART_RxISR_16BIT+0x16>
        HAL_UART_RxCpltCallback(huart);
 8005834:	f7fd fd7c 	bl	8003330 <HAL_UART_RxCpltCallback>
 8005838:	e7b5      	b.n	80057a6 <UART_RxISR_16BIT+0x16>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	fffffedf 	.word	0xfffffedf

08005840 <UART_SetConfig>:
{
 8005840:	b5d0      	push	{r4, r6, r7, lr}
 8005842:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005844:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005846:	6883      	ldr	r3, [r0, #8]
 8005848:	6902      	ldr	r2, [r0, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	6942      	ldr	r2, [r0, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	69c2      	ldr	r2, [r0, #28]
 8005852:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005854:	680a      	ldr	r2, [r1, #0]
 8005856:	4889      	ldr	r0, [pc, #548]	; (8005a7c <UART_SetConfig+0x23c>)
 8005858:	4002      	ands	r2, r0
 800585a:	4313      	orrs	r3, r2
 800585c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	6853      	ldr	r3, [r2, #4]
 8005862:	4987      	ldr	r1, [pc, #540]	; (8005a80 <UART_SetConfig+0x240>)
 8005864:	400b      	ands	r3, r1
 8005866:	68e1      	ldr	r1, [r4, #12]
 8005868:	430b      	orrs	r3, r1
 800586a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800586c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	4b84      	ldr	r3, [pc, #528]	; (8005a84 <UART_SetConfig+0x244>)
 8005872:	429a      	cmp	r2, r3
 8005874:	d001      	beq.n	800587a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8005876:	6a23      	ldr	r3, [r4, #32]
 8005878:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800587a:	6893      	ldr	r3, [r2, #8]
 800587c:	4882      	ldr	r0, [pc, #520]	; (8005a88 <UART_SetConfig+0x248>)
 800587e:	4003      	ands	r3, r0
 8005880:	430b      	orrs	r3, r1
 8005882:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005884:	6822      	ldr	r2, [r4, #0]
 8005886:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <UART_SetConfig+0x24c>)
 8005888:	429a      	cmp	r2, r3
 800588a:	d012      	beq.n	80058b2 <UART_SetConfig+0x72>
 800588c:	4b7d      	ldr	r3, [pc, #500]	; (8005a84 <UART_SetConfig+0x244>)
 800588e:	429a      	cmp	r2, r3
 8005890:	d024      	beq.n	80058dc <UART_SetConfig+0x9c>
 8005892:	2310      	movs	r3, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005894:	497b      	ldr	r1, [pc, #492]	; (8005a84 <UART_SetConfig+0x244>)
 8005896:	428a      	cmp	r2, r1
 8005898:	d040      	beq.n	800591c <UART_SetConfig+0xdc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589a:	2280      	movs	r2, #128	; 0x80
 800589c:	0212      	lsls	r2, r2, #8
 800589e:	69e1      	ldr	r1, [r4, #28]
 80058a0:	4291      	cmp	r1, r2
 80058a2:	d076      	beq.n	8005992 <UART_SetConfig+0x152>
    switch (clocksource)
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d900      	bls.n	80058aa <UART_SetConfig+0x6a>
 80058a8:	e0e1      	b.n	8005a6e <UART_SetConfig+0x22e>
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4a78      	ldr	r2, [pc, #480]	; (8005a90 <UART_SetConfig+0x250>)
 80058ae:	58d3      	ldr	r3, [r2, r3]
 80058b0:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b2:	4b78      	ldr	r3, [pc, #480]	; (8005a94 <UART_SetConfig+0x254>)
 80058b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80058b6:	230c      	movs	r3, #12
 80058b8:	400b      	ands	r3, r1
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d00a      	beq.n	80058d4 <UART_SetConfig+0x94>
 80058be:	d905      	bls.n	80058cc <UART_SetConfig+0x8c>
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d027      	beq.n	8005914 <UART_SetConfig+0xd4>
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	d107      	bne.n	80058d8 <UART_SetConfig+0x98>
 80058c8:	2308      	movs	r3, #8
 80058ca:	e7e3      	b.n	8005894 <UART_SetConfig+0x54>
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <UART_SetConfig+0x98>
 80058d0:	2300      	movs	r3, #0
 80058d2:	e7df      	b.n	8005894 <UART_SetConfig+0x54>
 80058d4:	2304      	movs	r3, #4
 80058d6:	e7dd      	b.n	8005894 <UART_SetConfig+0x54>
 80058d8:	2310      	movs	r3, #16
 80058da:	e7db      	b.n	8005894 <UART_SetConfig+0x54>
 80058dc:	4b6d      	ldr	r3, [pc, #436]	; (8005a94 <UART_SetConfig+0x254>)
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e0:	21c0      	movs	r1, #192	; 0xc0
 80058e2:	0109      	lsls	r1, r1, #4
 80058e4:	400b      	ands	r3, r1
 80058e6:	2180      	movs	r1, #128	; 0x80
 80058e8:	00c9      	lsls	r1, r1, #3
 80058ea:	428b      	cmp	r3, r1
 80058ec:	d00e      	beq.n	800590c <UART_SetConfig+0xcc>
 80058ee:	d909      	bls.n	8005904 <UART_SetConfig+0xc4>
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	0109      	lsls	r1, r1, #4
 80058f4:	428b      	cmp	r3, r1
 80058f6:	d00f      	beq.n	8005918 <UART_SetConfig+0xd8>
 80058f8:	21c0      	movs	r1, #192	; 0xc0
 80058fa:	0109      	lsls	r1, r1, #4
 80058fc:	428b      	cmp	r3, r1
 80058fe:	d107      	bne.n	8005910 <UART_SetConfig+0xd0>
 8005900:	2308      	movs	r3, #8
 8005902:	e7c7      	b.n	8005894 <UART_SetConfig+0x54>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d103      	bne.n	8005910 <UART_SetConfig+0xd0>
 8005908:	2300      	movs	r3, #0
 800590a:	e7c3      	b.n	8005894 <UART_SetConfig+0x54>
 800590c:	2304      	movs	r3, #4
 800590e:	e7c1      	b.n	8005894 <UART_SetConfig+0x54>
 8005910:	2310      	movs	r3, #16
 8005912:	e7bf      	b.n	8005894 <UART_SetConfig+0x54>
 8005914:	2302      	movs	r3, #2
 8005916:	e7bd      	b.n	8005894 <UART_SetConfig+0x54>
 8005918:	2302      	movs	r3, #2
 800591a:	e7bb      	b.n	8005894 <UART_SetConfig+0x54>
    switch (clocksource)
 800591c:	2b02      	cmp	r3, #2
 800591e:	d02d      	beq.n	800597c <UART_SetConfig+0x13c>
 8005920:	d907      	bls.n	8005932 <UART_SetConfig+0xf2>
 8005922:	2b04      	cmp	r3, #4
 8005924:	d030      	beq.n	8005988 <UART_SetConfig+0x148>
 8005926:	2b08      	cmp	r3, #8
 8005928:	d000      	beq.n	800592c <UART_SetConfig+0xec>
 800592a:	e090      	b.n	8005a4e <UART_SetConfig+0x20e>
        pclk = (uint32_t) LSE_VALUE;
 800592c:	2080      	movs	r0, #128	; 0x80
 800592e:	0200      	lsls	r0, r0, #8
 8005930:	e007      	b.n	8005942 <UART_SetConfig+0x102>
    switch (clocksource)
 8005932:	2b00      	cmp	r3, #0
 8005934:	d000      	beq.n	8005938 <UART_SetConfig+0xf8>
 8005936:	e08a      	b.n	8005a4e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005938:	f7ff f980 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800593c:	2800      	cmp	r0, #0
 800593e:	d100      	bne.n	8005942 <UART_SetConfig+0x102>
 8005940:	e087      	b.n	8005a52 <UART_SetConfig+0x212>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	0053      	lsls	r3, r2, #1
 8005946:	189b      	adds	r3, r3, r2
 8005948:	4283      	cmp	r3, r0
 800594a:	d900      	bls.n	800594e <UART_SetConfig+0x10e>
 800594c:	e083      	b.n	8005a56 <UART_SetConfig+0x216>
          (pclk > (4096U * huart->Init.BaudRate)))
 800594e:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005950:	4283      	cmp	r3, r0
 8005952:	d200      	bcs.n	8005956 <UART_SetConfig+0x116>
 8005954:	e081      	b.n	8005a5a <UART_SetConfig+0x21a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005956:	0e07      	lsrs	r7, r0, #24
 8005958:	0206      	lsls	r6, r0, #8
 800595a:	0850      	lsrs	r0, r2, #1
 800595c:	2100      	movs	r1, #0
 800595e:	1980      	adds	r0, r0, r6
 8005960:	4179      	adcs	r1, r7
 8005962:	2300      	movs	r3, #0
 8005964:	f7fa fcd4 	bl	8000310 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005968:	4b4b      	ldr	r3, [pc, #300]	; (8005a98 <UART_SetConfig+0x258>)
 800596a:	18c2      	adds	r2, r0, r3
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <UART_SetConfig+0x25c>)
 800596e:	429a      	cmp	r2, r3
 8005970:	d900      	bls.n	8005974 <UART_SetConfig+0x134>
 8005972:	e074      	b.n	8005a5e <UART_SetConfig+0x21e>
          huart->Instance->BRR = usartdiv;
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	60d8      	str	r0, [r3, #12]
 8005978:	2000      	movs	r0, #0
 800597a:	e053      	b.n	8005a24 <UART_SetConfig+0x1e4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597c:	4b45      	ldr	r3, [pc, #276]	; (8005a94 <UART_SetConfig+0x254>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	06db      	lsls	r3, r3, #27
 8005982:	d404      	bmi.n	800598e <UART_SetConfig+0x14e>
          pclk = (uint32_t) HSI_VALUE;
 8005984:	4846      	ldr	r0, [pc, #280]	; (8005aa0 <UART_SetConfig+0x260>)
 8005986:	e7dc      	b.n	8005942 <UART_SetConfig+0x102>
        pclk = HAL_RCC_GetSysClockFreq();
 8005988:	f7fe fd80 	bl	800448c <HAL_RCC_GetSysClockFreq>
        break;
 800598c:	e7d6      	b.n	800593c <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800598e:	4845      	ldr	r0, [pc, #276]	; (8005aa4 <UART_SetConfig+0x264>)
 8005990:	e7d7      	b.n	8005942 <UART_SetConfig+0x102>
    switch (clocksource)
 8005992:	2b08      	cmp	r3, #8
 8005994:	d865      	bhi.n	8005a62 <UART_SetConfig+0x222>
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a43      	ldr	r2, [pc, #268]	; (8005aa8 <UART_SetConfig+0x268>)
 800599a:	58d3      	ldr	r3, [r2, r3]
 800599c:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 800599e:	f7ff f94d 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d05f      	beq.n	8005a66 <UART_SetConfig+0x226>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059a6:	0040      	lsls	r0, r0, #1
 80059a8:	6863      	ldr	r3, [r4, #4]
 80059aa:	085b      	lsrs	r3, r3, #1
 80059ac:	18c0      	adds	r0, r0, r3
 80059ae:	6861      	ldr	r1, [r4, #4]
 80059b0:	f7fa fbaa 	bl	8000108 <__udivsi3>
 80059b4:	b283      	uxth	r3, r0
 80059b6:	0400      	lsls	r0, r0, #16
 80059b8:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ba:	0001      	movs	r1, r0
 80059bc:	3910      	subs	r1, #16
 80059be:	4a3b      	ldr	r2, [pc, #236]	; (8005aac <UART_SetConfig+0x26c>)
 80059c0:	4291      	cmp	r1, r2
 80059c2:	d852      	bhi.n	8005a6a <UART_SetConfig+0x22a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059c4:	220f      	movs	r2, #15
 80059c6:	4393      	bics	r3, r2
 80059c8:	001a      	movs	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ca:	0840      	lsrs	r0, r0, #1
 80059cc:	2307      	movs	r3, #7
 80059ce:	4018      	ands	r0, r3
 80059d0:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	60d8      	str	r0, [r3, #12]
 80059d6:	2000      	movs	r0, #0
 80059d8:	e024      	b.n	8005a24 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80059da:	f7ff f93f 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
        break;
 80059de:	e7e0      	b.n	80059a2 <UART_SetConfig+0x162>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059e0:	4b2c      	ldr	r3, [pc, #176]	; (8005a94 <UART_SetConfig+0x254>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	06db      	lsls	r3, r3, #27
 80059e6:	d407      	bmi.n	80059f8 <UART_SetConfig+0x1b8>
          pclk = (uint32_t) HSI_VALUE;
 80059e8:	482d      	ldr	r0, [pc, #180]	; (8005aa0 <UART_SetConfig+0x260>)
 80059ea:	e7dc      	b.n	80059a6 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetSysClockFreq();
 80059ec:	f7fe fd4e 	bl	800448c <HAL_RCC_GetSysClockFreq>
        break;
 80059f0:	e7d7      	b.n	80059a2 <UART_SetConfig+0x162>
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	2080      	movs	r0, #128	; 0x80
 80059f4:	0200      	lsls	r0, r0, #8
 80059f6:	e7d6      	b.n	80059a6 <UART_SetConfig+0x166>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80059f8:	482a      	ldr	r0, [pc, #168]	; (8005aa4 <UART_SetConfig+0x264>)
 80059fa:	e7d4      	b.n	80059a6 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7ff f91e 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d036      	beq.n	8005a72 <UART_SetConfig+0x232>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a04:	6863      	ldr	r3, [r4, #4]
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	1818      	adds	r0, r3, r0
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	f7fa fb7c 	bl	8000108 <__udivsi3>
 8005a10:	0400      	lsls	r0, r0, #16
 8005a12:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a14:	0002      	movs	r2, r0
 8005a16:	3a10      	subs	r2, #16
 8005a18:	4b24      	ldr	r3, [pc, #144]	; (8005aac <UART_SetConfig+0x26c>)
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d82b      	bhi.n	8005a76 <UART_SetConfig+0x236>
        huart->Instance->BRR = usartdiv;
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	60d8      	str	r0, [r3, #12]
 8005a22:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005a28:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005a2a:	bdd0      	pop	{r4, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a2c:	f7ff f916 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
        break;
 8005a30:	e7e6      	b.n	8005a00 <UART_SetConfig+0x1c0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a32:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <UART_SetConfig+0x254>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	06db      	lsls	r3, r3, #27
 8005a38:	d407      	bmi.n	8005a4a <UART_SetConfig+0x20a>
          pclk = (uint32_t) HSI_VALUE;
 8005a3a:	4819      	ldr	r0, [pc, #100]	; (8005aa0 <UART_SetConfig+0x260>)
 8005a3c:	e7e2      	b.n	8005a04 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fe fd25 	bl	800448c <HAL_RCC_GetSysClockFreq>
        break;
 8005a42:	e7dd      	b.n	8005a00 <UART_SetConfig+0x1c0>
        pclk = (uint32_t) LSE_VALUE;
 8005a44:	2080      	movs	r0, #128	; 0x80
 8005a46:	0200      	lsls	r0, r0, #8
 8005a48:	e7dc      	b.n	8005a04 <UART_SetConfig+0x1c4>
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a4a:	4816      	ldr	r0, [pc, #88]	; (8005aa4 <UART_SetConfig+0x264>)
 8005a4c:	e7da      	b.n	8005a04 <UART_SetConfig+0x1c4>
        ret = HAL_ERROR;
 8005a4e:	2001      	movs	r0, #1
 8005a50:	e7e8      	b.n	8005a24 <UART_SetConfig+0x1e4>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7e6      	b.n	8005a24 <UART_SetConfig+0x1e4>
        ret = HAL_ERROR;
 8005a56:	2001      	movs	r0, #1
 8005a58:	e7e4      	b.n	8005a24 <UART_SetConfig+0x1e4>
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e7e2      	b.n	8005a24 <UART_SetConfig+0x1e4>
          ret = HAL_ERROR;
 8005a5e:	2001      	movs	r0, #1
 8005a60:	e7e0      	b.n	8005a24 <UART_SetConfig+0x1e4>
        ret = HAL_ERROR;
 8005a62:	2001      	movs	r0, #1
 8005a64:	e7de      	b.n	8005a24 <UART_SetConfig+0x1e4>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7dc      	b.n	8005a24 <UART_SetConfig+0x1e4>
        ret = HAL_ERROR;
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	e7da      	b.n	8005a24 <UART_SetConfig+0x1e4>
        ret = HAL_ERROR;
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e7d8      	b.n	8005a24 <UART_SetConfig+0x1e4>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e7d6      	b.n	8005a24 <UART_SetConfig+0x1e4>
        ret = HAL_ERROR;
 8005a76:	2001      	movs	r0, #1
 8005a78:	e7d4      	b.n	8005a24 <UART_SetConfig+0x1e4>
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	efff69f3 	.word	0xefff69f3
 8005a80:	ffffcfff 	.word	0xffffcfff
 8005a84:	40004800 	.word	0x40004800
 8005a88:	fffff4ff 	.word	0xfffff4ff
 8005a8c:	40004400 	.word	0x40004400
 8005a90:	08007498 	.word	0x08007498
 8005a94:	40021000 	.word	0x40021000
 8005a98:	fffffd00 	.word	0xfffffd00
 8005a9c:	000ffcff 	.word	0x000ffcff
 8005aa0:	00f42400 	.word	0x00f42400
 8005aa4:	003d0900 	.word	0x003d0900
 8005aa8:	080074bc 	.word	0x080074bc
 8005aac:	0000ffef 	.word	0x0000ffef

08005ab0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ab2:	07db      	lsls	r3, r3, #31
 8005ab4:	d506      	bpl.n	8005ac4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ab6:	6802      	ldr	r2, [r0, #0]
 8005ab8:	6853      	ldr	r3, [r2, #4]
 8005aba:	492c      	ldr	r1, [pc, #176]	; (8005b6c <UART_AdvFeatureConfig+0xbc>)
 8005abc:	400b      	ands	r3, r1
 8005abe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ac6:	079b      	lsls	r3, r3, #30
 8005ac8:	d506      	bpl.n	8005ad8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aca:	6802      	ldr	r2, [r0, #0]
 8005acc:	6853      	ldr	r3, [r2, #4]
 8005ace:	4928      	ldr	r1, [pc, #160]	; (8005b70 <UART_AdvFeatureConfig+0xc0>)
 8005ad0:	400b      	ands	r3, r1
 8005ad2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ada:	075b      	lsls	r3, r3, #29
 8005adc:	d506      	bpl.n	8005aec <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ade:	6802      	ldr	r2, [r0, #0]
 8005ae0:	6853      	ldr	r3, [r2, #4]
 8005ae2:	4924      	ldr	r1, [pc, #144]	; (8005b74 <UART_AdvFeatureConfig+0xc4>)
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005aee:	071b      	lsls	r3, r3, #28
 8005af0:	d506      	bpl.n	8005b00 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005af2:	6802      	ldr	r2, [r0, #0]
 8005af4:	6853      	ldr	r3, [r2, #4]
 8005af6:	4920      	ldr	r1, [pc, #128]	; (8005b78 <UART_AdvFeatureConfig+0xc8>)
 8005af8:	400b      	ands	r3, r1
 8005afa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b02:	06db      	lsls	r3, r3, #27
 8005b04:	d506      	bpl.n	8005b14 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	6893      	ldr	r3, [r2, #8]
 8005b0a:	491c      	ldr	r1, [pc, #112]	; (8005b7c <UART_AdvFeatureConfig+0xcc>)
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b16:	069b      	lsls	r3, r3, #26
 8005b18:	d506      	bpl.n	8005b28 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1a:	6802      	ldr	r2, [r0, #0]
 8005b1c:	6893      	ldr	r3, [r2, #8]
 8005b1e:	4918      	ldr	r1, [pc, #96]	; (8005b80 <UART_AdvFeatureConfig+0xd0>)
 8005b20:	400b      	ands	r3, r1
 8005b22:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b2a:	065b      	lsls	r3, r3, #25
 8005b2c:	d50b      	bpl.n	8005b46 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b2e:	6802      	ldr	r2, [r0, #0]
 8005b30:	6853      	ldr	r3, [r2, #4]
 8005b32:	4914      	ldr	r1, [pc, #80]	; (8005b84 <UART_AdvFeatureConfig+0xd4>)
 8005b34:	400b      	ands	r3, r1
 8005b36:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b3c:	2380      	movs	r3, #128	; 0x80
 8005b3e:	035b      	lsls	r3, r3, #13
 8005b40:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d00a      	beq.n	8005b5c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b46:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b48:	061b      	lsls	r3, r3, #24
 8005b4a:	d506      	bpl.n	8005b5a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b4c:	6802      	ldr	r2, [r0, #0]
 8005b4e:	6853      	ldr	r3, [r2, #4]
 8005b50:	490d      	ldr	r1, [pc, #52]	; (8005b88 <UART_AdvFeatureConfig+0xd8>)
 8005b52:	400b      	ands	r3, r1
 8005b54:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6053      	str	r3, [r2, #4]
}
 8005b5a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b5c:	6802      	ldr	r2, [r0, #0]
 8005b5e:	6853      	ldr	r3, [r2, #4]
 8005b60:	490a      	ldr	r1, [pc, #40]	; (8005b8c <UART_AdvFeatureConfig+0xdc>)
 8005b62:	400b      	ands	r3, r1
 8005b64:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6053      	str	r3, [r2, #4]
 8005b6a:	e7ec      	b.n	8005b46 <UART_AdvFeatureConfig+0x96>
 8005b6c:	fffdffff 	.word	0xfffdffff
 8005b70:	fffeffff 	.word	0xfffeffff
 8005b74:	fffbffff 	.word	0xfffbffff
 8005b78:	ffff7fff 	.word	0xffff7fff
 8005b7c:	ffffefff 	.word	0xffffefff
 8005b80:	ffffdfff 	.word	0xffffdfff
 8005b84:	ffefffff 	.word	0xffefffff
 8005b88:	fff7ffff 	.word	0xfff7ffff
 8005b8c:	ff9fffff 	.word	0xff9fffff

08005b90 <UART_WaitOnFlagUntilTimeout>:
{
 8005b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b92:	46c6      	mov	lr, r8
 8005b94:	b500      	push	{lr}
 8005b96:	0005      	movs	r5, r0
 8005b98:	000c      	movs	r4, r1
 8005b9a:	0017      	movs	r7, r2
 8005b9c:	4698      	mov	r8, r3
 8005b9e:	9e06      	ldr	r6, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	4023      	ands	r3, r4
 8005ba6:	1b1b      	subs	r3, r3, r4
 8005ba8:	425a      	negs	r2, r3
 8005baa:	4153      	adcs	r3, r2
 8005bac:	42bb      	cmp	r3, r7
 8005bae:	d151      	bne.n	8005c54 <UART_WaitOnFlagUntilTimeout+0xc4>
    if (Timeout != HAL_MAX_DELAY)
 8005bb0:	1c73      	adds	r3, r6, #1
 8005bb2:	d0f5      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb4:	f7fe f912 	bl	8003ddc <HAL_GetTick>
 8005bb8:	4643      	mov	r3, r8
 8005bba:	1ac0      	subs	r0, r0, r3
 8005bbc:	42b0      	cmp	r0, r6
 8005bbe:	d82b      	bhi.n	8005c18 <UART_WaitOnFlagUntilTimeout+0x88>
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	d029      	beq.n	8005c18 <UART_WaitOnFlagUntilTimeout+0x88>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	0752      	lsls	r2, r2, #29
 8005bca:	d5e9      	bpl.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	0512      	lsls	r2, r2, #20
 8005bd0:	d5e6      	bpl.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd2:	2280      	movs	r2, #128	; 0x80
 8005bd4:	0112      	lsls	r2, r2, #4
 8005bd6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	680b      	ldr	r3, [r1, #0]
 8005be6:	4c1d      	ldr	r4, [pc, #116]	; (8005c5c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8005be8:	4023      	ands	r3, r4
 8005bea:	600b      	str	r3, [r1, #0]
 8005bec:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	6829      	ldr	r1, [r5, #0]
 8005bfa:	688b      	ldr	r3, [r1, #8]
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]
 8005c00:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8005c04:	2320      	movs	r3, #32
 8005c06:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c08:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0a:	327f      	adds	r2, #127	; 0x7f
 8005c0c:	50ab      	str	r3, [r5, r2]
          __HAL_UNLOCK(huart);
 8005c0e:	3354      	adds	r3, #84	; 0x54
 8005c10:	2200      	movs	r2, #0
 8005c12:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8005c14:	2003      	movs	r0, #3
 8005c16:	e01e      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c18:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c22:	6829      	ldr	r1, [r5, #0]
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	4c0d      	ldr	r4, [pc, #52]	; (8005c5c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8005c28:	4023      	ands	r3, r4
 8005c2a:	600b      	str	r3, [r1, #0]
 8005c2c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c34:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	6829      	ldr	r1, [r5, #0]
 8005c3a:	688b      	ldr	r3, [r1, #8]
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	608b      	str	r3, [r1, #8]
 8005c40:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005c44:	2320      	movs	r3, #32
 8005c46:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c48:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8005c4a:	3354      	adds	r3, #84	; 0x54
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8005c50:	2003      	movs	r0, #3
 8005c52:	e000      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xc6>
  return HAL_OK;
 8005c54:	2000      	movs	r0, #0
}
 8005c56:	bc04      	pop	{r2}
 8005c58:	4690      	mov	r8, r2
 8005c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c5c:	fffffe5f 	.word	0xfffffe5f

08005c60 <UART_CheckIdleState>:
{
 8005c60:	b530      	push	{r4, r5, lr}
 8005c62:	b083      	sub	sp, #12
 8005c64:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	2200      	movs	r2, #0
 8005c6a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005c6c:	f7fe f8b6 	bl	8003ddc <HAL_GetTick>
 8005c70:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	071b      	lsls	r3, r3, #28
 8005c78:	d40d      	bmi.n	8005c96 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	075b      	lsls	r3, r3, #29
 8005c80:	d416      	bmi.n	8005cb0 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8005c82:	2320      	movs	r3, #32
 8005c84:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c86:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005c8c:	2274      	movs	r2, #116	; 0x74
 8005c8e:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005c90:	2000      	movs	r0, #0
}
 8005c92:	b003      	add	sp, #12
 8005c94:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c96:	2180      	movs	r1, #128	; 0x80
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <UART_CheckIdleState+0x6c>)
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	0389      	lsls	r1, r1, #14
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f7ff ff74 	bl	8005b90 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d0e6      	beq.n	8005c7a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8005cac:	2003      	movs	r0, #3
 8005cae:	e7f0      	b.n	8005c92 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <UART_CheckIdleState+0x6c>)
 8005cb4:	9300      	str	r3, [sp, #0]
 8005cb6:	002b      	movs	r3, r5
 8005cb8:	2200      	movs	r2, #0
 8005cba:	03c9      	lsls	r1, r1, #15
 8005cbc:	0020      	movs	r0, r4
 8005cbe:	f7ff ff67 	bl	8005b90 <UART_WaitOnFlagUntilTimeout>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d0dd      	beq.n	8005c82 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8005cc6:	2003      	movs	r0, #3
 8005cc8:	e7e3      	b.n	8005c92 <UART_CheckIdleState+0x32>
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	01ffffff 	.word	0x01ffffff

08005cd0 <HAL_UART_Init>:
{
 8005cd0:	b510      	push	{r4, lr}
 8005cd2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005cd4:	d02e      	beq.n	8005d34 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d021      	beq.n	8005d20 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005cdc:	2324      	movs	r3, #36	; 0x24
 8005cde:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	6813      	ldr	r3, [r2, #0]
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	438b      	bics	r3, r1
 8005ce8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cea:	0020      	movs	r0, r4
 8005cec:	f7ff fda8 	bl	8005840 <UART_SetConfig>
 8005cf0:	2801      	cmp	r0, #1
 8005cf2:	d014      	beq.n	8005d1e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d118      	bne.n	8005d2c <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	6853      	ldr	r3, [r2, #4]
 8005cfe:	490e      	ldr	r1, [pc, #56]	; (8005d38 <HAL_UART_Init+0x68>)
 8005d00:	400b      	ands	r3, r1
 8005d02:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	6893      	ldr	r3, [r2, #8]
 8005d08:	212a      	movs	r1, #42	; 0x2a
 8005d0a:	438b      	bics	r3, r1
 8005d0c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	3929      	subs	r1, #41	; 0x29
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005d18:	0020      	movs	r0, r4
 8005d1a:	f7ff ffa1 	bl	8005c60 <UART_CheckIdleState>
}
 8005d1e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005d20:	3374      	adds	r3, #116	; 0x74
 8005d22:	2200      	movs	r2, #0
 8005d24:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8005d26:	f7fd ffaf 	bl	8003c88 <HAL_UART_MspInit>
 8005d2a:	e7d7      	b.n	8005cdc <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8005d2c:	0020      	movs	r0, r4
 8005d2e:	f7ff febf 	bl	8005ab0 <UART_AdvFeatureConfig>
 8005d32:	e7e2      	b.n	8005cfa <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8005d34:	2001      	movs	r0, #1
 8005d36:	e7f2      	b.n	8005d1e <HAL_UART_Init+0x4e>
 8005d38:	ffffb7ff 	.word	0xffffb7ff

08005d3c <UART_Start_Receive_IT>:
{
 8005d3c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8005d3e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d40:	2358      	movs	r3, #88	; 0x58
 8005d42:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8005d44:	3302      	adds	r3, #2
 8005d46:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6643      	str	r3, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005d4c:	6883      	ldr	r3, [r0, #8]
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	0152      	lsls	r2, r2, #5
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d008      	beq.n	8005d68 <UART_Start_Receive_IT+0x2c>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d115      	bne.n	8005d86 <UART_Start_Receive_IT+0x4a>
 8005d5a:	6903      	ldr	r3, [r0, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10e      	bne.n	8005d7e <UART_Start_Receive_IT+0x42>
 8005d60:	335c      	adds	r3, #92	; 0x5c
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	52c2      	strh	r2, [r0, r3]
 8005d66:	e015      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
 8005d68:	6903      	ldr	r3, [r0, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <UART_Start_Receive_IT+0x3a>
 8005d6e:	335c      	adds	r3, #92	; 0x5c
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <UART_Start_Receive_IT+0xcc>)
 8005d72:	52c2      	strh	r2, [r0, r3]
 8005d74:	e00e      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
 8005d76:	235c      	movs	r3, #92	; 0x5c
 8005d78:	22ff      	movs	r2, #255	; 0xff
 8005d7a:	52c2      	strh	r2, [r0, r3]
 8005d7c:	e00a      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
 8005d7e:	235c      	movs	r3, #92	; 0x5c
 8005d80:	227f      	movs	r2, #127	; 0x7f
 8005d82:	52c2      	strh	r2, [r0, r3]
 8005d84:	e006      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
 8005d86:	2280      	movs	r2, #128	; 0x80
 8005d88:	0552      	lsls	r2, r2, #21
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d02b      	beq.n	8005de6 <UART_Start_Receive_IT+0xaa>
 8005d8e:	235c      	movs	r3, #92	; 0x5c
 8005d90:	2200      	movs	r2, #0
 8005d92:	52c2      	strh	r2, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	2200      	movs	r2, #0
 8005d98:	50c2      	str	r2, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d9a:	3b5e      	subs	r3, #94	; 0x5e
 8005d9c:	67c3      	str	r3, [r0, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da2:	2101      	movs	r1, #1
 8005da4:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da8:	6802      	ldr	r2, [r0, #0]
 8005daa:	6893      	ldr	r3, [r2, #8]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6093      	str	r3, [r2, #8]
 8005db0:	f384 8810 	msr	PRIMASK, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	015b      	lsls	r3, r3, #5
 8005db8:	6882      	ldr	r2, [r0, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d01e      	beq.n	8005dfc <UART_Start_Receive_IT+0xc0>
    huart->RxISR = UART_RxISR_8BIT;
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <UART_Start_Receive_IT+0xd0>)
 8005dc0:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8005dc2:	2374      	movs	r3, #116	; 0x74
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	3b73      	subs	r3, #115	; 0x73
 8005dce:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005dd2:	6802      	ldr	r2, [r0, #0]
 8005dd4:	6810      	ldr	r0, [r2, #0]
 8005dd6:	3320      	adds	r3, #32
 8005dd8:	33ff      	adds	r3, #255	; 0xff
 8005dda:	4303      	orrs	r3, r0
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	f381 8810 	msr	PRIMASK, r1
}
 8005de2:	2000      	movs	r0, #0
 8005de4:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8005de6:	6903      	ldr	r3, [r0, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <UART_Start_Receive_IT+0xb8>
 8005dec:	335c      	adds	r3, #92	; 0x5c
 8005dee:	227f      	movs	r2, #127	; 0x7f
 8005df0:	52c2      	strh	r2, [r0, r3]
 8005df2:	e7cf      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
 8005df4:	235c      	movs	r3, #92	; 0x5c
 8005df6:	223f      	movs	r2, #63	; 0x3f
 8005df8:	52c2      	strh	r2, [r0, r3]
 8005dfa:	e7cb      	b.n	8005d94 <UART_Start_Receive_IT+0x58>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	6903      	ldr	r3, [r0, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1dd      	bne.n	8005dbe <UART_Start_Receive_IT+0x82>
    huart->RxISR = UART_RxISR_16BIT;
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <UART_Start_Receive_IT+0xd4>)
 8005e04:	6643      	str	r3, [r0, #100]	; 0x64
 8005e06:	e7dc      	b.n	8005dc2 <UART_Start_Receive_IT+0x86>
 8005e08:	000001ff 	.word	0x000001ff
 8005e0c:	080056e1 	.word	0x080056e1
 8005e10:	08005791 	.word	0x08005791

08005e14 <HAL_UART_Receive_IT>:
{
 8005e14:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e16:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d12f      	bne.n	8005e7c <HAL_UART_Receive_IT+0x68>
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d02f      	beq.n	8005e80 <HAL_UART_Receive_IT+0x6c>
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d02f      	beq.n	8005e84 <HAL_UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	015b      	lsls	r3, r3, #5
 8005e28:	6884      	ldr	r4, [r0, #8]
 8005e2a:	429c      	cmp	r4, r3
 8005e2c:	d01f      	beq.n	8005e6e <HAL_UART_Receive_IT+0x5a>
    __HAL_LOCK(huart);
 8005e2e:	2374      	movs	r3, #116	; 0x74
 8005e30:	5cc3      	ldrb	r3, [r0, r3]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d028      	beq.n	8005e88 <HAL_UART_Receive_IT+0x74>
 8005e36:	2374      	movs	r3, #116	; 0x74
 8005e38:	2401      	movs	r4, #1
 8005e3a:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e40:	6803      	ldr	r3, [r0, #0]
 8005e42:	4c12      	ldr	r4, [pc, #72]	; (8005e8c <HAL_UART_Receive_IT+0x78>)
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d00f      	beq.n	8005e68 <HAL_UART_Receive_IT+0x54>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	d50c      	bpl.n	8005e68 <HAL_UART_Receive_IT+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e52:	2301      	movs	r3, #1
 8005e54:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e58:	6804      	ldr	r4, [r0, #0]
 8005e5a:	6826      	ldr	r6, [r4, #0]
 8005e5c:	2380      	movs	r3, #128	; 0x80
 8005e5e:	04db      	lsls	r3, r3, #19
 8005e60:	4333      	orrs	r3, r6
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e68:	f7ff ff68 	bl	8005d3c <UART_Start_Receive_IT>
 8005e6c:	e007      	b.n	8005e7e <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6e:	6903      	ldr	r3, [r0, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1dc      	bne.n	8005e2e <HAL_UART_Receive_IT+0x1a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e74:	07cb      	lsls	r3, r1, #31
 8005e76:	d5da      	bpl.n	8005e2e <HAL_UART_Receive_IT+0x1a>
        return  HAL_ERROR;
 8005e78:	2001      	movs	r0, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8005e7c:	2002      	movs	r0, #2
}
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005e80:	2001      	movs	r0, #1
 8005e82:	e7fc      	b.n	8005e7e <HAL_UART_Receive_IT+0x6a>
 8005e84:	2001      	movs	r0, #1
 8005e86:	e7fa      	b.n	8005e7e <HAL_UART_Receive_IT+0x6a>
    __HAL_LOCK(huart);
 8005e88:	2002      	movs	r0, #2
 8005e8a:	e7f8      	b.n	8005e7e <HAL_UART_Receive_IT+0x6a>
 8005e8c:	40004800 	.word	0x40004800

08005e90 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e90:	4770      	bx	lr

08005e92 <atoi>:
 8005e92:	b510      	push	{r4, lr}
 8005e94:	220a      	movs	r2, #10
 8005e96:	2100      	movs	r1, #0
 8005e98:	f000 f9da 	bl	8006250 <strtol>
 8005e9c:	bd10      	pop	{r4, pc}
	...

08005ea0 <__errno>:
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <__errno+0x8>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	20000014 	.word	0x20000014

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	2600      	movs	r6, #0
 8005eb0:	4d0c      	ldr	r5, [pc, #48]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb2:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb4:	1b64      	subs	r4, r4, r5
 8005eb6:	10a4      	asrs	r4, r4, #2
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	2600      	movs	r6, #0
 8005ebe:	f001 fa45 	bl	800734c <_init>
 8005ec2:	4d0a      	ldr	r5, [pc, #40]	; (8005eec <__libc_init_array+0x40>)
 8005ec4:	4c0a      	ldr	r4, [pc, #40]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec6:	1b64      	subs	r4, r4, r5
 8005ec8:	10a4      	asrs	r4, r4, #2
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	00b3      	lsls	r3, r6, #2
 8005ed2:	58eb      	ldr	r3, [r5, r3]
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	00b3      	lsls	r3, r6, #2
 8005edc:	58eb      	ldr	r3, [r5, r3]
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	08007638 	.word	0x08007638
 8005ee8:	08007638 	.word	0x08007638
 8005eec:	08007638 	.word	0x08007638
 8005ef0:	0800763c 	.word	0x0800763c

08005ef4 <malloc>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4b03      	ldr	r3, [pc, #12]	; (8005f04 <malloc+0x10>)
 8005ef8:	0001      	movs	r1, r0
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	f000 f860 	bl	8005fc0 <_malloc_r>
 8005f00:	bd10      	pop	{r4, pc}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	20000014 	.word	0x20000014

08005f08 <free>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <free+0x10>)
 8005f0c:	0001      	movs	r1, r0
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	f000 f80c 	bl	8005f2c <_free_r>
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	20000014 	.word	0x20000014

08005f1c <memset>:
 8005f1c:	0003      	movs	r3, r0
 8005f1e:	1812      	adds	r2, r2, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	7019      	strb	r1, [r3, #0]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <_free_r>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	0005      	movs	r5, r0
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d010      	beq.n	8005f56 <_free_r+0x2a>
 8005f34:	1f0c      	subs	r4, r1, #4
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da00      	bge.n	8005f3e <_free_r+0x12>
 8005f3c:	18e4      	adds	r4, r4, r3
 8005f3e:	0028      	movs	r0, r5
 8005f40:	f000 f9af 	bl	80062a2 <__malloc_lock>
 8005f44:	4a1d      	ldr	r2, [pc, #116]	; (8005fbc <_free_r+0x90>)
 8005f46:	6813      	ldr	r3, [r2, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <_free_r+0x2c>
 8005f4c:	6063      	str	r3, [r4, #4]
 8005f4e:	6014      	str	r4, [r2, #0]
 8005f50:	0028      	movs	r0, r5
 8005f52:	f000 f9a7 	bl	80062a4 <__malloc_unlock>
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d909      	bls.n	8005f70 <_free_r+0x44>
 8005f5c:	6821      	ldr	r1, [r4, #0]
 8005f5e:	1860      	adds	r0, r4, r1
 8005f60:	4283      	cmp	r3, r0
 8005f62:	d1f3      	bne.n	8005f4c <_free_r+0x20>
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	1841      	adds	r1, r0, r1
 8005f6a:	6021      	str	r1, [r4, #0]
 8005f6c:	e7ee      	b.n	8005f4c <_free_r+0x20>
 8005f6e:	0013      	movs	r3, r2
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	d001      	beq.n	8005f7a <_free_r+0x4e>
 8005f76:	42a2      	cmp	r2, r4
 8005f78:	d9f9      	bls.n	8005f6e <_free_r+0x42>
 8005f7a:	6819      	ldr	r1, [r3, #0]
 8005f7c:	1858      	adds	r0, r3, r1
 8005f7e:	42a0      	cmp	r0, r4
 8005f80:	d10b      	bne.n	8005f9a <_free_r+0x6e>
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	1809      	adds	r1, r1, r0
 8005f86:	1858      	adds	r0, r3, r1
 8005f88:	6019      	str	r1, [r3, #0]
 8005f8a:	4282      	cmp	r2, r0
 8005f8c:	d1e0      	bne.n	8005f50 <_free_r+0x24>
 8005f8e:	6810      	ldr	r0, [r2, #0]
 8005f90:	6852      	ldr	r2, [r2, #4]
 8005f92:	1841      	adds	r1, r0, r1
 8005f94:	6019      	str	r1, [r3, #0]
 8005f96:	605a      	str	r2, [r3, #4]
 8005f98:	e7da      	b.n	8005f50 <_free_r+0x24>
 8005f9a:	42a0      	cmp	r0, r4
 8005f9c:	d902      	bls.n	8005fa4 <_free_r+0x78>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	602b      	str	r3, [r5, #0]
 8005fa2:	e7d5      	b.n	8005f50 <_free_r+0x24>
 8005fa4:	6821      	ldr	r1, [r4, #0]
 8005fa6:	1860      	adds	r0, r4, r1
 8005fa8:	4282      	cmp	r2, r0
 8005faa:	d103      	bne.n	8005fb4 <_free_r+0x88>
 8005fac:	6810      	ldr	r0, [r2, #0]
 8005fae:	6852      	ldr	r2, [r2, #4]
 8005fb0:	1841      	adds	r1, r0, r1
 8005fb2:	6021      	str	r1, [r4, #0]
 8005fb4:	6062      	str	r2, [r4, #4]
 8005fb6:	605c      	str	r4, [r3, #4]
 8005fb8:	e7ca      	b.n	8005f50 <_free_r+0x24>
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	20000224 	.word	0x20000224

08005fc0 <_malloc_r>:
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	1ccd      	adds	r5, r1, #3
 8005fc6:	439d      	bics	r5, r3
 8005fc8:	3508      	adds	r5, #8
 8005fca:	0006      	movs	r6, r0
 8005fcc:	2d0c      	cmp	r5, #12
 8005fce:	d21e      	bcs.n	800600e <_malloc_r+0x4e>
 8005fd0:	250c      	movs	r5, #12
 8005fd2:	42a9      	cmp	r1, r5
 8005fd4:	d81d      	bhi.n	8006012 <_malloc_r+0x52>
 8005fd6:	0030      	movs	r0, r6
 8005fd8:	f000 f963 	bl	80062a2 <__malloc_lock>
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <_malloc_r+0xb4>)
 8005fde:	6814      	ldr	r4, [r2, #0]
 8005fe0:	0021      	movs	r1, r4
 8005fe2:	2900      	cmp	r1, #0
 8005fe4:	d119      	bne.n	800601a <_malloc_r+0x5a>
 8005fe6:	4c24      	ldr	r4, [pc, #144]	; (8006078 <_malloc_r+0xb8>)
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <_malloc_r+0x36>
 8005fee:	0030      	movs	r0, r6
 8005ff0:	f000 f844 	bl	800607c <_sbrk_r>
 8005ff4:	6020      	str	r0, [r4, #0]
 8005ff6:	0029      	movs	r1, r5
 8005ff8:	0030      	movs	r0, r6
 8005ffa:	f000 f83f 	bl	800607c <_sbrk_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	d12b      	bne.n	800605a <_malloc_r+0x9a>
 8006002:	230c      	movs	r3, #12
 8006004:	0030      	movs	r0, r6
 8006006:	6033      	str	r3, [r6, #0]
 8006008:	f000 f94c 	bl	80062a4 <__malloc_unlock>
 800600c:	e003      	b.n	8006016 <_malloc_r+0x56>
 800600e:	2d00      	cmp	r5, #0
 8006010:	dadf      	bge.n	8005fd2 <_malloc_r+0x12>
 8006012:	230c      	movs	r3, #12
 8006014:	6033      	str	r3, [r6, #0]
 8006016:	2000      	movs	r0, #0
 8006018:	bd70      	pop	{r4, r5, r6, pc}
 800601a:	680b      	ldr	r3, [r1, #0]
 800601c:	1b5b      	subs	r3, r3, r5
 800601e:	d419      	bmi.n	8006054 <_malloc_r+0x94>
 8006020:	2b0b      	cmp	r3, #11
 8006022:	d903      	bls.n	800602c <_malloc_r+0x6c>
 8006024:	600b      	str	r3, [r1, #0]
 8006026:	18cc      	adds	r4, r1, r3
 8006028:	6025      	str	r5, [r4, #0]
 800602a:	e003      	b.n	8006034 <_malloc_r+0x74>
 800602c:	684b      	ldr	r3, [r1, #4]
 800602e:	428c      	cmp	r4, r1
 8006030:	d10d      	bne.n	800604e <_malloc_r+0x8e>
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	0030      	movs	r0, r6
 8006036:	f000 f935 	bl	80062a4 <__malloc_unlock>
 800603a:	0020      	movs	r0, r4
 800603c:	2207      	movs	r2, #7
 800603e:	300b      	adds	r0, #11
 8006040:	1d23      	adds	r3, r4, #4
 8006042:	4390      	bics	r0, r2
 8006044:	1ac3      	subs	r3, r0, r3
 8006046:	d0e7      	beq.n	8006018 <_malloc_r+0x58>
 8006048:	425a      	negs	r2, r3
 800604a:	50e2      	str	r2, [r4, r3]
 800604c:	e7e4      	b.n	8006018 <_malloc_r+0x58>
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	000c      	movs	r4, r1
 8006052:	e7ef      	b.n	8006034 <_malloc_r+0x74>
 8006054:	000c      	movs	r4, r1
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	e7c3      	b.n	8005fe2 <_malloc_r+0x22>
 800605a:	2303      	movs	r3, #3
 800605c:	1cc4      	adds	r4, r0, #3
 800605e:	439c      	bics	r4, r3
 8006060:	42a0      	cmp	r0, r4
 8006062:	d0e1      	beq.n	8006028 <_malloc_r+0x68>
 8006064:	1a21      	subs	r1, r4, r0
 8006066:	0030      	movs	r0, r6
 8006068:	f000 f808 	bl	800607c <_sbrk_r>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d1db      	bne.n	8006028 <_malloc_r+0x68>
 8006070:	e7c7      	b.n	8006002 <_malloc_r+0x42>
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	20000224 	.word	0x20000224
 8006078:	20000228 	.word	0x20000228

0800607c <_sbrk_r>:
 800607c:	2300      	movs	r3, #0
 800607e:	b570      	push	{r4, r5, r6, lr}
 8006080:	4c06      	ldr	r4, [pc, #24]	; (800609c <_sbrk_r+0x20>)
 8006082:	0005      	movs	r5, r0
 8006084:	0008      	movs	r0, r1
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	f7fd fc3e 	bl	8003908 <_sbrk>
 800608c:	1c43      	adds	r3, r0, #1
 800608e:	d103      	bne.n	8006098 <_sbrk_r+0x1c>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d000      	beq.n	8006098 <_sbrk_r+0x1c>
 8006096:	602b      	str	r3, [r5, #0]
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	200003d8 	.word	0x200003d8

080060a0 <strtok>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <strtok+0x4c>)
 80060a4:	0006      	movs	r6, r0
 80060a6:	681d      	ldr	r5, [r3, #0]
 80060a8:	000f      	movs	r7, r1
 80060aa:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	d116      	bne.n	80060de <strtok+0x3e>
 80060b0:	2050      	movs	r0, #80	; 0x50
 80060b2:	f7ff ff1f 	bl	8005ef4 <malloc>
 80060b6:	65a8      	str	r0, [r5, #88]	; 0x58
 80060b8:	6004      	str	r4, [r0, #0]
 80060ba:	6044      	str	r4, [r0, #4]
 80060bc:	6084      	str	r4, [r0, #8]
 80060be:	60c4      	str	r4, [r0, #12]
 80060c0:	6104      	str	r4, [r0, #16]
 80060c2:	6144      	str	r4, [r0, #20]
 80060c4:	6184      	str	r4, [r0, #24]
 80060c6:	6284      	str	r4, [r0, #40]	; 0x28
 80060c8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80060ca:	6304      	str	r4, [r0, #48]	; 0x30
 80060cc:	6344      	str	r4, [r0, #52]	; 0x34
 80060ce:	6384      	str	r4, [r0, #56]	; 0x38
 80060d0:	63c4      	str	r4, [r0, #60]	; 0x3c
 80060d2:	6404      	str	r4, [r0, #64]	; 0x40
 80060d4:	6444      	str	r4, [r0, #68]	; 0x44
 80060d6:	6484      	str	r4, [r0, #72]	; 0x48
 80060d8:	64c4      	str	r4, [r0, #76]	; 0x4c
 80060da:	7704      	strb	r4, [r0, #28]
 80060dc:	6244      	str	r4, [r0, #36]	; 0x24
 80060de:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80060e0:	0039      	movs	r1, r7
 80060e2:	0030      	movs	r0, r6
 80060e4:	2301      	movs	r3, #1
 80060e6:	f000 f803 	bl	80060f0 <__strtok_r>
 80060ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060ec:	20000014 	.word	0x20000014

080060f0 <__strtok_r>:
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d104      	bne.n	8006100 <__strtok_r+0x10>
 80060f6:	6810      	ldr	r0, [r2, #0]
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d101      	bne.n	8006100 <__strtok_r+0x10>
 80060fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fe:	0020      	movs	r0, r4
 8006100:	000e      	movs	r6, r1
 8006102:	7805      	ldrb	r5, [r0, #0]
 8006104:	1c44      	adds	r4, r0, #1
 8006106:	7837      	ldrb	r7, [r6, #0]
 8006108:	2f00      	cmp	r7, #0
 800610a:	d104      	bne.n	8006116 <__strtok_r+0x26>
 800610c:	2d00      	cmp	r5, #0
 800610e:	d110      	bne.n	8006132 <__strtok_r+0x42>
 8006110:	6015      	str	r5, [r2, #0]
 8006112:	0028      	movs	r0, r5
 8006114:	e7f2      	b.n	80060fc <__strtok_r+0xc>
 8006116:	3601      	adds	r6, #1
 8006118:	42bd      	cmp	r5, r7
 800611a:	d1f4      	bne.n	8006106 <__strtok_r+0x16>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ee      	bne.n	80060fe <__strtok_r+0xe>
 8006120:	6014      	str	r4, [r2, #0]
 8006122:	7003      	strb	r3, [r0, #0]
 8006124:	e7ea      	b.n	80060fc <__strtok_r+0xc>
 8006126:	0033      	movs	r3, r6
 8006128:	e00d      	b.n	8006146 <__strtok_r+0x56>
 800612a:	3501      	adds	r5, #1
 800612c:	2f00      	cmp	r7, #0
 800612e:	d103      	bne.n	8006138 <__strtok_r+0x48>
 8006130:	001c      	movs	r4, r3
 8006132:	000d      	movs	r5, r1
 8006134:	7826      	ldrb	r6, [r4, #0]
 8006136:	1c63      	adds	r3, r4, #1
 8006138:	782f      	ldrb	r7, [r5, #0]
 800613a:	42be      	cmp	r6, r7
 800613c:	d1f5      	bne.n	800612a <__strtok_r+0x3a>
 800613e:	2e00      	cmp	r6, #0
 8006140:	d0f1      	beq.n	8006126 <__strtok_r+0x36>
 8006142:	2100      	movs	r1, #0
 8006144:	7021      	strb	r1, [r4, #0]
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e7d8      	b.n	80060fc <__strtok_r+0xc>
	...

0800614c <_strtol_l.isra.0>:
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	001f      	movs	r7, r3
 8006150:	000e      	movs	r6, r1
 8006152:	b087      	sub	sp, #28
 8006154:	9005      	str	r0, [sp, #20]
 8006156:	9101      	str	r1, [sp, #4]
 8006158:	9202      	str	r2, [sp, #8]
 800615a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800615c:	7834      	ldrb	r4, [r6, #0]
 800615e:	f000 f88b 	bl	8006278 <__locale_ctype_ptr_l>
 8006162:	2208      	movs	r2, #8
 8006164:	1900      	adds	r0, r0, r4
 8006166:	7843      	ldrb	r3, [r0, #1]
 8006168:	1c75      	adds	r5, r6, #1
 800616a:	4013      	ands	r3, r2
 800616c:	d136      	bne.n	80061dc <_strtol_l.isra.0+0x90>
 800616e:	2c2d      	cmp	r4, #45	; 0x2d
 8006170:	d136      	bne.n	80061e0 <_strtol_l.isra.0+0x94>
 8006172:	1cb5      	adds	r5, r6, #2
 8006174:	7874      	ldrb	r4, [r6, #1]
 8006176:	2601      	movs	r6, #1
 8006178:	2f00      	cmp	r7, #0
 800617a:	d062      	beq.n	8006242 <_strtol_l.isra.0+0xf6>
 800617c:	2f10      	cmp	r7, #16
 800617e:	d109      	bne.n	8006194 <_strtol_l.isra.0+0x48>
 8006180:	2c30      	cmp	r4, #48	; 0x30
 8006182:	d107      	bne.n	8006194 <_strtol_l.isra.0+0x48>
 8006184:	2220      	movs	r2, #32
 8006186:	782b      	ldrb	r3, [r5, #0]
 8006188:	4393      	bics	r3, r2
 800618a:	2b58      	cmp	r3, #88	; 0x58
 800618c:	d154      	bne.n	8006238 <_strtol_l.isra.0+0xec>
 800618e:	2710      	movs	r7, #16
 8006190:	786c      	ldrb	r4, [r5, #1]
 8006192:	3502      	adds	r5, #2
 8006194:	4b2d      	ldr	r3, [pc, #180]	; (800624c <_strtol_l.isra.0+0x100>)
 8006196:	0039      	movs	r1, r7
 8006198:	18f3      	adds	r3, r6, r3
 800619a:	0018      	movs	r0, r3
 800619c:	9303      	str	r3, [sp, #12]
 800619e:	f7fa f839 	bl	8000214 <__aeabi_uidivmod>
 80061a2:	9104      	str	r1, [sp, #16]
 80061a4:	2101      	movs	r1, #1
 80061a6:	2300      	movs	r3, #0
 80061a8:	4249      	negs	r1, r1
 80061aa:	0002      	movs	r2, r0
 80061ac:	468c      	mov	ip, r1
 80061ae:	0018      	movs	r0, r3
 80061b0:	0021      	movs	r1, r4
 80061b2:	3930      	subs	r1, #48	; 0x30
 80061b4:	2909      	cmp	r1, #9
 80061b6:	d81a      	bhi.n	80061ee <_strtol_l.isra.0+0xa2>
 80061b8:	000c      	movs	r4, r1
 80061ba:	42a7      	cmp	r7, r4
 80061bc:	dd23      	ble.n	8006206 <_strtol_l.isra.0+0xba>
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	d009      	beq.n	80061d6 <_strtol_l.isra.0+0x8a>
 80061c2:	4663      	mov	r3, ip
 80061c4:	4282      	cmp	r2, r0
 80061c6:	d306      	bcc.n	80061d6 <_strtol_l.isra.0+0x8a>
 80061c8:	d102      	bne.n	80061d0 <_strtol_l.isra.0+0x84>
 80061ca:	9904      	ldr	r1, [sp, #16]
 80061cc:	42a1      	cmp	r1, r4
 80061ce:	db02      	blt.n	80061d6 <_strtol_l.isra.0+0x8a>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4378      	muls	r0, r7
 80061d4:	1820      	adds	r0, r4, r0
 80061d6:	782c      	ldrb	r4, [r5, #0]
 80061d8:	3501      	adds	r5, #1
 80061da:	e7e9      	b.n	80061b0 <_strtol_l.isra.0+0x64>
 80061dc:	002e      	movs	r6, r5
 80061de:	e7bc      	b.n	800615a <_strtol_l.isra.0+0xe>
 80061e0:	2c2b      	cmp	r4, #43	; 0x2b
 80061e2:	d001      	beq.n	80061e8 <_strtol_l.isra.0+0x9c>
 80061e4:	001e      	movs	r6, r3
 80061e6:	e7c7      	b.n	8006178 <_strtol_l.isra.0+0x2c>
 80061e8:	1cb5      	adds	r5, r6, #2
 80061ea:	7874      	ldrb	r4, [r6, #1]
 80061ec:	e7fa      	b.n	80061e4 <_strtol_l.isra.0+0x98>
 80061ee:	0021      	movs	r1, r4
 80061f0:	3941      	subs	r1, #65	; 0x41
 80061f2:	2919      	cmp	r1, #25
 80061f4:	d801      	bhi.n	80061fa <_strtol_l.isra.0+0xae>
 80061f6:	3c37      	subs	r4, #55	; 0x37
 80061f8:	e7df      	b.n	80061ba <_strtol_l.isra.0+0x6e>
 80061fa:	0021      	movs	r1, r4
 80061fc:	3961      	subs	r1, #97	; 0x61
 80061fe:	2919      	cmp	r1, #25
 8006200:	d801      	bhi.n	8006206 <_strtol_l.isra.0+0xba>
 8006202:	3c57      	subs	r4, #87	; 0x57
 8006204:	e7d9      	b.n	80061ba <_strtol_l.isra.0+0x6e>
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	d108      	bne.n	800621c <_strtol_l.isra.0+0xd0>
 800620a:	9a05      	ldr	r2, [sp, #20]
 800620c:	3323      	adds	r3, #35	; 0x23
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	9803      	ldr	r0, [sp, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <_strtol_l.isra.0+0xe0>
 8006218:	b007      	add	sp, #28
 800621a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800621c:	2e00      	cmp	r6, #0
 800621e:	d000      	beq.n	8006222 <_strtol_l.isra.0+0xd6>
 8006220:	4240      	negs	r0, r0
 8006222:	9a02      	ldr	r2, [sp, #8]
 8006224:	2a00      	cmp	r2, #0
 8006226:	d0f7      	beq.n	8006218 <_strtol_l.isra.0+0xcc>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <_strtol_l.isra.0+0xe4>
 800622c:	1e6b      	subs	r3, r5, #1
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e7ef      	b.n	8006218 <_strtol_l.isra.0+0xcc>
 8006238:	2430      	movs	r4, #48	; 0x30
 800623a:	2f00      	cmp	r7, #0
 800623c:	d1aa      	bne.n	8006194 <_strtol_l.isra.0+0x48>
 800623e:	2708      	movs	r7, #8
 8006240:	e7a8      	b.n	8006194 <_strtol_l.isra.0+0x48>
 8006242:	2c30      	cmp	r4, #48	; 0x30
 8006244:	d09e      	beq.n	8006184 <_strtol_l.isra.0+0x38>
 8006246:	270a      	movs	r7, #10
 8006248:	e7a4      	b.n	8006194 <_strtol_l.isra.0+0x48>
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	7fffffff 	.word	0x7fffffff

08006250 <strtol>:
 8006250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006252:	0013      	movs	r3, r2
 8006254:	4a06      	ldr	r2, [pc, #24]	; (8006270 <strtol+0x20>)
 8006256:	0005      	movs	r5, r0
 8006258:	6810      	ldr	r0, [r2, #0]
 800625a:	6a04      	ldr	r4, [r0, #32]
 800625c:	2c00      	cmp	r4, #0
 800625e:	d100      	bne.n	8006262 <strtol+0x12>
 8006260:	4c04      	ldr	r4, [pc, #16]	; (8006274 <strtol+0x24>)
 8006262:	000a      	movs	r2, r1
 8006264:	9400      	str	r4, [sp, #0]
 8006266:	0029      	movs	r1, r5
 8006268:	f7ff ff70 	bl	800614c <_strtol_l.isra.0>
 800626c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	20000014 	.word	0x20000014
 8006274:	20000078 	.word	0x20000078

08006278 <__locale_ctype_ptr_l>:
 8006278:	30ec      	adds	r0, #236	; 0xec
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	4770      	bx	lr

0800627e <__ascii_mbtowc>:
 800627e:	b082      	sub	sp, #8
 8006280:	2900      	cmp	r1, #0
 8006282:	d100      	bne.n	8006286 <__ascii_mbtowc+0x8>
 8006284:	a901      	add	r1, sp, #4
 8006286:	1e10      	subs	r0, r2, #0
 8006288:	d006      	beq.n	8006298 <__ascii_mbtowc+0x1a>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <__ascii_mbtowc+0x1e>
 800628e:	7813      	ldrb	r3, [r2, #0]
 8006290:	600b      	str	r3, [r1, #0]
 8006292:	7810      	ldrb	r0, [r2, #0]
 8006294:	1e43      	subs	r3, r0, #1
 8006296:	4198      	sbcs	r0, r3
 8006298:	b002      	add	sp, #8
 800629a:	4770      	bx	lr
 800629c:	2002      	movs	r0, #2
 800629e:	4240      	negs	r0, r0
 80062a0:	e7fa      	b.n	8006298 <__ascii_mbtowc+0x1a>

080062a2 <__malloc_lock>:
 80062a2:	4770      	bx	lr

080062a4 <__malloc_unlock>:
 80062a4:	4770      	bx	lr

080062a6 <__ascii_wctomb>:
 80062a6:	1e0b      	subs	r3, r1, #0
 80062a8:	d004      	beq.n	80062b4 <__ascii_wctomb+0xe>
 80062aa:	2aff      	cmp	r2, #255	; 0xff
 80062ac:	d904      	bls.n	80062b8 <__ascii_wctomb+0x12>
 80062ae:	238a      	movs	r3, #138	; 0x8a
 80062b0:	6003      	str	r3, [r0, #0]
 80062b2:	3b8b      	subs	r3, #139	; 0x8b
 80062b4:	0018      	movs	r0, r3
 80062b6:	4770      	bx	lr
 80062b8:	700a      	strb	r2, [r1, #0]
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7fa      	b.n	80062b4 <__ascii_wctomb+0xe>
	...

080062c0 <pow>:
 80062c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062c2:	2400      	movs	r4, #0
 80062c4:	b091      	sub	sp, #68	; 0x44
 80062c6:	001f      	movs	r7, r3
 80062c8:	9000      	str	r0, [sp, #0]
 80062ca:	9101      	str	r1, [sp, #4]
 80062cc:	0016      	movs	r6, r2
 80062ce:	f000 f98d 	bl	80065ec <__ieee754_pow>
 80062d2:	4bbe      	ldr	r3, [pc, #760]	; (80065cc <pow+0x30c>)
 80062d4:	9002      	str	r0, [sp, #8]
 80062d6:	9103      	str	r1, [sp, #12]
 80062d8:	571c      	ldrsb	r4, [r3, r4]
 80062da:	1c63      	adds	r3, r4, #1
 80062dc:	d100      	bne.n	80062e0 <pow+0x20>
 80062de:	e0d4      	b.n	800648a <pow+0x1ca>
 80062e0:	0032      	movs	r2, r6
 80062e2:	003b      	movs	r3, r7
 80062e4:	0030      	movs	r0, r6
 80062e6:	0039      	movs	r1, r7
 80062e8:	f7fc fc16 	bl	8002b18 <__aeabi_dcmpun>
 80062ec:	1e05      	subs	r5, r0, #0
 80062ee:	d000      	beq.n	80062f2 <pow+0x32>
 80062f0:	e0cb      	b.n	800648a <pow+0x1ca>
 80062f2:	9a00      	ldr	r2, [sp, #0]
 80062f4:	9b01      	ldr	r3, [sp, #4]
 80062f6:	0010      	movs	r0, r2
 80062f8:	0019      	movs	r1, r3
 80062fa:	f7fc fc0d 	bl	8002b18 <__aeabi_dcmpun>
 80062fe:	2200      	movs	r2, #0
 8006300:	9005      	str	r0, [sp, #20]
 8006302:	2800      	cmp	r0, #0
 8006304:	d01e      	beq.n	8006344 <pow+0x84>
 8006306:	2300      	movs	r3, #0
 8006308:	0030      	movs	r0, r6
 800630a:	0039      	movs	r1, r7
 800630c:	f7f9 ff98 	bl	8000240 <__aeabi_dcmpeq>
 8006310:	2800      	cmp	r0, #0
 8006312:	d100      	bne.n	8006316 <pow+0x56>
 8006314:	e0b9      	b.n	800648a <pow+0x1ca>
 8006316:	2301      	movs	r3, #1
 8006318:	9306      	str	r3, [sp, #24]
 800631a:	4bad      	ldr	r3, [pc, #692]	; (80065d0 <pow+0x310>)
 800631c:	950e      	str	r5, [sp, #56]	; 0x38
 800631e:	9307      	str	r3, [sp, #28]
 8006320:	9a00      	ldr	r2, [sp, #0]
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	9208      	str	r2, [sp, #32]
 8006326:	9309      	str	r3, [sp, #36]	; 0x24
 8006328:	2200      	movs	r2, #0
 800632a:	4baa      	ldr	r3, [pc, #680]	; (80065d4 <pow+0x314>)
 800632c:	960a      	str	r6, [sp, #40]	; 0x28
 800632e:	970b      	str	r7, [sp, #44]	; 0x2c
 8006330:	920c      	str	r2, [sp, #48]	; 0x30
 8006332:	930d      	str	r3, [sp, #52]	; 0x34
 8006334:	2c02      	cmp	r4, #2
 8006336:	d033      	beq.n	80063a0 <pow+0xe0>
 8006338:	a806      	add	r0, sp, #24
 800633a:	f000 ff0b 	bl	8007154 <matherr>
 800633e:	2800      	cmp	r0, #0
 8006340:	d125      	bne.n	800638e <pow+0xce>
 8006342:	e059      	b.n	80063f8 <pow+0x138>
 8006344:	2300      	movs	r3, #0
 8006346:	9800      	ldr	r0, [sp, #0]
 8006348:	9901      	ldr	r1, [sp, #4]
 800634a:	f7f9 ff79 	bl	8000240 <__aeabi_dcmpeq>
 800634e:	2800      	cmp	r0, #0
 8006350:	d057      	beq.n	8006402 <pow+0x142>
 8006352:	2200      	movs	r2, #0
 8006354:	2300      	movs	r3, #0
 8006356:	0030      	movs	r0, r6
 8006358:	0039      	movs	r1, r7
 800635a:	f7f9 ff71 	bl	8000240 <__aeabi_dcmpeq>
 800635e:	1e05      	subs	r5, r0, #0
 8006360:	d021      	beq.n	80063a6 <pow+0xe6>
 8006362:	2301      	movs	r3, #1
 8006364:	9306      	str	r3, [sp, #24]
 8006366:	4b9a      	ldr	r3, [pc, #616]	; (80065d0 <pow+0x310>)
 8006368:	960a      	str	r6, [sp, #40]	; 0x28
 800636a:	970b      	str	r7, [sp, #44]	; 0x2c
 800636c:	9307      	str	r3, [sp, #28]
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	930e      	str	r3, [sp, #56]	; 0x38
 8006372:	9a00      	ldr	r2, [sp, #0]
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	9208      	str	r2, [sp, #32]
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	2200      	movs	r2, #0
 800637c:	2300      	movs	r3, #0
 800637e:	920c      	str	r2, [sp, #48]	; 0x30
 8006380:	930d      	str	r3, [sp, #52]	; 0x34
 8006382:	2c00      	cmp	r4, #0
 8006384:	d0d8      	beq.n	8006338 <pow+0x78>
 8006386:	2200      	movs	r2, #0
 8006388:	4b92      	ldr	r3, [pc, #584]	; (80065d4 <pow+0x314>)
 800638a:	920c      	str	r2, [sp, #48]	; 0x30
 800638c:	930d      	str	r3, [sp, #52]	; 0x34
 800638e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <pow+0xe0>
 8006396:	f7ff fd83 	bl	8005ea0 <__errno>
 800639a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	6003      	str	r3, [r0, #0]
 80063a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80063a4:	e06f      	b.n	8006486 <pow+0x1c6>
 80063a6:	0030      	movs	r0, r6
 80063a8:	0039      	movs	r1, r7
 80063aa:	f000 fecb 	bl	8007144 <finite>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d06b      	beq.n	800648a <pow+0x1ca>
 80063b2:	2200      	movs	r2, #0
 80063b4:	2300      	movs	r3, #0
 80063b6:	0030      	movs	r0, r6
 80063b8:	0039      	movs	r1, r7
 80063ba:	f7f9 ff47 	bl	800024c <__aeabi_dcmplt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d063      	beq.n	800648a <pow+0x1ca>
 80063c2:	2301      	movs	r3, #1
 80063c4:	9306      	str	r3, [sp, #24]
 80063c6:	4b82      	ldr	r3, [pc, #520]	; (80065d0 <pow+0x310>)
 80063c8:	950e      	str	r5, [sp, #56]	; 0x38
 80063ca:	9307      	str	r3, [sp, #28]
 80063cc:	9b00      	ldr	r3, [sp, #0]
 80063ce:	9c01      	ldr	r4, [sp, #4]
 80063d0:	9308      	str	r3, [sp, #32]
 80063d2:	9409      	str	r4, [sp, #36]	; 0x24
 80063d4:	4b7d      	ldr	r3, [pc, #500]	; (80065cc <pow+0x30c>)
 80063d6:	960a      	str	r6, [sp, #40]	; 0x28
 80063d8:	970b      	str	r7, [sp, #44]	; 0x2c
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	b25b      	sxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <pow+0x12c>
 80063e2:	2300      	movs	r3, #0
 80063e4:	2400      	movs	r4, #0
 80063e6:	930c      	str	r3, [sp, #48]	; 0x30
 80063e8:	940d      	str	r4, [sp, #52]	; 0x34
 80063ea:	e7a5      	b.n	8006338 <pow+0x78>
 80063ec:	2000      	movs	r0, #0
 80063ee:	497a      	ldr	r1, [pc, #488]	; (80065d8 <pow+0x318>)
 80063f0:	900c      	str	r0, [sp, #48]	; 0x30
 80063f2:	910d      	str	r1, [sp, #52]	; 0x34
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d19f      	bne.n	8006338 <pow+0x78>
 80063f8:	f7ff fd52 	bl	8005ea0 <__errno>
 80063fc:	2321      	movs	r3, #33	; 0x21
 80063fe:	6003      	str	r3, [r0, #0]
 8006400:	e7c5      	b.n	800638e <pow+0xce>
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	f000 fe9d 	bl	8007144 <finite>
 800640a:	9005      	str	r0, [sp, #20]
 800640c:	2800      	cmp	r0, #0
 800640e:	d000      	beq.n	8006412 <pow+0x152>
 8006410:	e0a5      	b.n	800655e <pow+0x29e>
 8006412:	9800      	ldr	r0, [sp, #0]
 8006414:	9901      	ldr	r1, [sp, #4]
 8006416:	f000 fe95 	bl	8007144 <finite>
 800641a:	2800      	cmp	r0, #0
 800641c:	d100      	bne.n	8006420 <pow+0x160>
 800641e:	e09e      	b.n	800655e <pow+0x29e>
 8006420:	0030      	movs	r0, r6
 8006422:	0039      	movs	r1, r7
 8006424:	f000 fe8e 	bl	8007144 <finite>
 8006428:	2800      	cmp	r0, #0
 800642a:	d100      	bne.n	800642e <pow+0x16e>
 800642c:	e097      	b.n	800655e <pow+0x29e>
 800642e:	2500      	movs	r5, #0
 8006430:	4b66      	ldr	r3, [pc, #408]	; (80065cc <pow+0x30c>)
 8006432:	ac06      	add	r4, sp, #24
 8006434:	575d      	ldrsb	r5, [r3, r5]
 8006436:	9a02      	ldr	r2, [sp, #8]
 8006438:	9b03      	ldr	r3, [sp, #12]
 800643a:	0019      	movs	r1, r3
 800643c:	0010      	movs	r0, r2
 800643e:	f7fc fb6b 	bl	8002b18 <__aeabi_dcmpun>
 8006442:	4b63      	ldr	r3, [pc, #396]	; (80065d0 <pow+0x310>)
 8006444:	2800      	cmp	r0, #0
 8006446:	d031      	beq.n	80064ac <pow+0x1ec>
 8006448:	2201      	movs	r2, #1
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	9b05      	ldr	r3, [sp, #20]
 800644e:	9206      	str	r2, [sp, #24]
 8006450:	6223      	str	r3, [r4, #32]
 8006452:	6126      	str	r6, [r4, #16]
 8006454:	6167      	str	r7, [r4, #20]
 8006456:	9a00      	ldr	r2, [sp, #0]
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	60a2      	str	r2, [r4, #8]
 800645c:	60e3      	str	r3, [r4, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	2d00      	cmp	r5, #0
 8006464:	d115      	bne.n	8006492 <pow+0x1d2>
 8006466:	61a2      	str	r2, [r4, #24]
 8006468:	61e3      	str	r3, [r4, #28]
 800646a:	0020      	movs	r0, r4
 800646c:	f000 fe72 	bl	8007154 <matherr>
 8006470:	2800      	cmp	r0, #0
 8006472:	d016      	beq.n	80064a2 <pow+0x1e2>
 8006474:	6a23      	ldr	r3, [r4, #32]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <pow+0x1c2>
 800647a:	f7ff fd11 	bl	8005ea0 <__errno>
 800647e:	6a23      	ldr	r3, [r4, #32]
 8006480:	6003      	str	r3, [r0, #0]
 8006482:	69a3      	ldr	r3, [r4, #24]
 8006484:	69e4      	ldr	r4, [r4, #28]
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	9403      	str	r4, [sp, #12]
 800648a:	9802      	ldr	r0, [sp, #8]
 800648c:	9903      	ldr	r1, [sp, #12]
 800648e:	b011      	add	sp, #68	; 0x44
 8006490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006492:	0010      	movs	r0, r2
 8006494:	0019      	movs	r1, r3
 8006496:	f7fb f97b 	bl	8001790 <__aeabi_ddiv>
 800649a:	61a0      	str	r0, [r4, #24]
 800649c:	61e1      	str	r1, [r4, #28]
 800649e:	2d02      	cmp	r5, #2
 80064a0:	d1e3      	bne.n	800646a <pow+0x1aa>
 80064a2:	f7ff fcfd 	bl	8005ea0 <__errno>
 80064a6:	2321      	movs	r3, #33	; 0x21
 80064a8:	6003      	str	r3, [r0, #0]
 80064aa:	e7e3      	b.n	8006474 <pow+0x1b4>
 80064ac:	2203      	movs	r2, #3
 80064ae:	6126      	str	r6, [r4, #16]
 80064b0:	6167      	str	r7, [r4, #20]
 80064b2:	9206      	str	r2, [sp, #24]
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	6220      	str	r0, [r4, #32]
 80064b8:	9a00      	ldr	r2, [sp, #0]
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	0030      	movs	r0, r6
 80064be:	60a2      	str	r2, [r4, #8]
 80064c0:	60e3      	str	r3, [r4, #12]
 80064c2:	0039      	movs	r1, r7
 80064c4:	2200      	movs	r2, #0
 80064c6:	4b45      	ldr	r3, [pc, #276]	; (80065dc <pow+0x31c>)
 80064c8:	f7fb fd6c 	bl	8001fa4 <__aeabi_dmul>
 80064cc:	0006      	movs	r6, r0
 80064ce:	000f      	movs	r7, r1
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d124      	bne.n	800651e <pow+0x25e>
 80064d4:	9800      	ldr	r0, [sp, #0]
 80064d6:	9901      	ldr	r1, [sp, #4]
 80064d8:	22e0      	movs	r2, #224	; 0xe0
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <pow+0x320>)
 80064dc:	0612      	lsls	r2, r2, #24
 80064de:	61a2      	str	r2, [r4, #24]
 80064e0:	61e3      	str	r3, [r4, #28]
 80064e2:	2200      	movs	r2, #0
 80064e4:	2300      	movs	r3, #0
 80064e6:	f7f9 feb1 	bl	800024c <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d030      	beq.n	8006550 <pow+0x290>
 80064ee:	0030      	movs	r0, r6
 80064f0:	0039      	movs	r1, r7
 80064f2:	f000 fe37 	bl	8007164 <rint>
 80064f6:	0032      	movs	r2, r6
 80064f8:	003b      	movs	r3, r7
 80064fa:	f7f9 fea1 	bl	8000240 <__aeabi_dcmpeq>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d104      	bne.n	800650c <pow+0x24c>
 8006502:	22e0      	movs	r2, #224	; 0xe0
 8006504:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <pow+0x324>)
 8006506:	0612      	lsls	r2, r2, #24
 8006508:	61a2      	str	r2, [r4, #24]
 800650a:	61e3      	str	r3, [r4, #28]
 800650c:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <pow+0x30c>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b25b      	sxtb	r3, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d11c      	bne.n	8006550 <pow+0x290>
 8006516:	f7ff fcc3 	bl	8005ea0 <__errno>
 800651a:	2322      	movs	r3, #34	; 0x22
 800651c:	e7c4      	b.n	80064a8 <pow+0x1e8>
 800651e:	2200      	movs	r2, #0
 8006520:	9800      	ldr	r0, [sp, #0]
 8006522:	9901      	ldr	r1, [sp, #4]
 8006524:	4b30      	ldr	r3, [pc, #192]	; (80065e8 <pow+0x328>)
 8006526:	61a2      	str	r2, [r4, #24]
 8006528:	61e3      	str	r3, [r4, #28]
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	f7f9 fe8d 	bl	800024c <__aeabi_dcmplt>
 8006532:	2800      	cmp	r0, #0
 8006534:	d0ea      	beq.n	800650c <pow+0x24c>
 8006536:	0030      	movs	r0, r6
 8006538:	0039      	movs	r1, r7
 800653a:	f000 fe13 	bl	8007164 <rint>
 800653e:	0032      	movs	r2, r6
 8006540:	003b      	movs	r3, r7
 8006542:	f7f9 fe7d 	bl	8000240 <__aeabi_dcmpeq>
 8006546:	2800      	cmp	r0, #0
 8006548:	d1e0      	bne.n	800650c <pow+0x24c>
 800654a:	2200      	movs	r2, #0
 800654c:	4b22      	ldr	r3, [pc, #136]	; (80065d8 <pow+0x318>)
 800654e:	e7db      	b.n	8006508 <pow+0x248>
 8006550:	0020      	movs	r0, r4
 8006552:	f000 fdff 	bl	8007154 <matherr>
 8006556:	2800      	cmp	r0, #0
 8006558:	d000      	beq.n	800655c <pow+0x29c>
 800655a:	e78b      	b.n	8006474 <pow+0x1b4>
 800655c:	e7db      	b.n	8006516 <pow+0x256>
 800655e:	2200      	movs	r2, #0
 8006560:	9802      	ldr	r0, [sp, #8]
 8006562:	9903      	ldr	r1, [sp, #12]
 8006564:	2300      	movs	r3, #0
 8006566:	f7f9 fe6b 	bl	8000240 <__aeabi_dcmpeq>
 800656a:	2800      	cmp	r0, #0
 800656c:	d100      	bne.n	8006570 <pow+0x2b0>
 800656e:	e78c      	b.n	800648a <pow+0x1ca>
 8006570:	9800      	ldr	r0, [sp, #0]
 8006572:	9901      	ldr	r1, [sp, #4]
 8006574:	f000 fde6 	bl	8007144 <finite>
 8006578:	2800      	cmp	r0, #0
 800657a:	d100      	bne.n	800657e <pow+0x2be>
 800657c:	e785      	b.n	800648a <pow+0x1ca>
 800657e:	0030      	movs	r0, r6
 8006580:	0039      	movs	r1, r7
 8006582:	f000 fddf 	bl	8007144 <finite>
 8006586:	2800      	cmp	r0, #0
 8006588:	d100      	bne.n	800658c <pow+0x2cc>
 800658a:	e77e      	b.n	800648a <pow+0x1ca>
 800658c:	2304      	movs	r3, #4
 800658e:	9306      	str	r3, [sp, #24]
 8006590:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <pow+0x310>)
 8006592:	960a      	str	r6, [sp, #40]	; 0x28
 8006594:	970b      	str	r7, [sp, #44]	; 0x2c
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	2300      	movs	r3, #0
 800659a:	930e      	str	r3, [sp, #56]	; 0x38
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	9c01      	ldr	r4, [sp, #4]
 80065a0:	9308      	str	r3, [sp, #32]
 80065a2:	9409      	str	r4, [sp, #36]	; 0x24
 80065a4:	2300      	movs	r3, #0
 80065a6:	2400      	movs	r4, #0
 80065a8:	930c      	str	r3, [sp, #48]	; 0x30
 80065aa:	940d      	str	r4, [sp, #52]	; 0x34
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <pow+0x30c>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b25b      	sxtb	r3, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d103      	bne.n	80065be <pow+0x2fe>
 80065b6:	f7ff fc73 	bl	8005ea0 <__errno>
 80065ba:	2322      	movs	r3, #34	; 0x22
 80065bc:	e71f      	b.n	80063fe <pow+0x13e>
 80065be:	a806      	add	r0, sp, #24
 80065c0:	f000 fdc8 	bl	8007154 <matherr>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d000      	beq.n	80065ca <pow+0x30a>
 80065c8:	e6e1      	b.n	800638e <pow+0xce>
 80065ca:	e7f4      	b.n	80065b6 <pow+0x2f6>
 80065cc:	200001e4 	.word	0x200001e4
 80065d0:	080075eb 	.word	0x080075eb
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	fff00000 	.word	0xfff00000
 80065dc:	3fe00000 	.word	0x3fe00000
 80065e0:	47efffff 	.word	0x47efffff
 80065e4:	c7efffff 	.word	0xc7efffff
 80065e8:	7ff00000 	.word	0x7ff00000

080065ec <__ieee754_pow>:
 80065ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ee:	b095      	sub	sp, #84	; 0x54
 80065f0:	9202      	str	r2, [sp, #8]
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	000e      	movs	r6, r1
 80065f8:	9902      	ldr	r1, [sp, #8]
 80065fa:	005d      	lsls	r5, r3, #1
 80065fc:	9304      	str	r3, [sp, #16]
 80065fe:	000b      	movs	r3, r1
 8006600:	086d      	lsrs	r5, r5, #1
 8006602:	0007      	movs	r7, r0
 8006604:	432b      	orrs	r3, r5
 8006606:	d101      	bne.n	800660c <__ieee754_pow+0x20>
 8006608:	f000 fcad 	bl	8006f66 <__ieee754_pow+0x97a>
 800660c:	4b7e      	ldr	r3, [pc, #504]	; (8006808 <__ieee754_pow+0x21c>)
 800660e:	0074      	lsls	r4, r6, #1
 8006610:	9608      	str	r6, [sp, #32]
 8006612:	9000      	str	r0, [sp, #0]
 8006614:	0864      	lsrs	r4, r4, #1
 8006616:	469c      	mov	ip, r3
 8006618:	429c      	cmp	r4, r3
 800661a:	dc0b      	bgt.n	8006634 <__ieee754_pow+0x48>
 800661c:	d104      	bne.n	8006628 <__ieee754_pow+0x3c>
 800661e:	2800      	cmp	r0, #0
 8006620:	d108      	bne.n	8006634 <__ieee754_pow+0x48>
 8006622:	42a5      	cmp	r5, r4
 8006624:	dc0c      	bgt.n	8006640 <__ieee754_pow+0x54>
 8006626:	e001      	b.n	800662c <__ieee754_pow+0x40>
 8006628:	429d      	cmp	r5, r3
 800662a:	dc03      	bgt.n	8006634 <__ieee754_pow+0x48>
 800662c:	4565      	cmp	r5, ip
 800662e:	d10d      	bne.n	800664c <__ieee754_pow+0x60>
 8006630:	2900      	cmp	r1, #0
 8006632:	d00b      	beq.n	800664c <__ieee754_pow+0x60>
 8006634:	4b75      	ldr	r3, [pc, #468]	; (800680c <__ieee754_pow+0x220>)
 8006636:	18e4      	adds	r4, r4, r3
 8006638:	4327      	orrs	r7, r4
 800663a:	d101      	bne.n	8006640 <__ieee754_pow+0x54>
 800663c:	f000 fc93 	bl	8006f66 <__ieee754_pow+0x97a>
 8006640:	4873      	ldr	r0, [pc, #460]	; (8006810 <__ieee754_pow+0x224>)
 8006642:	f000 fd89 	bl	8007158 <nan>
 8006646:	9000      	str	r0, [sp, #0]
 8006648:	9101      	str	r1, [sp, #4]
 800664a:	e061      	b.n	8006710 <__ieee754_pow+0x124>
 800664c:	2300      	movs	r3, #0
 800664e:	9306      	str	r3, [sp, #24]
 8006650:	2e00      	cmp	r6, #0
 8006652:	da17      	bge.n	8006684 <__ieee754_pow+0x98>
 8006654:	4a6f      	ldr	r2, [pc, #444]	; (8006814 <__ieee754_pow+0x228>)
 8006656:	4295      	cmp	r5, r2
 8006658:	dc4d      	bgt.n	80066f6 <__ieee754_pow+0x10a>
 800665a:	4a6f      	ldr	r2, [pc, #444]	; (8006818 <__ieee754_pow+0x22c>)
 800665c:	4295      	cmp	r5, r2
 800665e:	dd11      	ble.n	8006684 <__ieee754_pow+0x98>
 8006660:	4b6e      	ldr	r3, [pc, #440]	; (800681c <__ieee754_pow+0x230>)
 8006662:	152a      	asrs	r2, r5, #20
 8006664:	18d2      	adds	r2, r2, r3
 8006666:	2a14      	cmp	r2, #20
 8006668:	dd25      	ble.n	80066b6 <__ieee754_pow+0xca>
 800666a:	2034      	movs	r0, #52	; 0x34
 800666c:	1a82      	subs	r2, r0, r2
 800666e:	9802      	ldr	r0, [sp, #8]
 8006670:	40d0      	lsrs	r0, r2
 8006672:	0003      	movs	r3, r0
 8006674:	4093      	lsls	r3, r2
 8006676:	428b      	cmp	r3, r1
 8006678:	d104      	bne.n	8006684 <__ieee754_pow+0x98>
 800667a:	2201      	movs	r2, #1
 800667c:	4010      	ands	r0, r2
 800667e:	1892      	adds	r2, r2, r2
 8006680:	1a13      	subs	r3, r2, r0
 8006682:	9306      	str	r3, [sp, #24]
 8006684:	2900      	cmp	r1, #0
 8006686:	d15e      	bne.n	8006746 <__ieee754_pow+0x15a>
 8006688:	4565      	cmp	r5, ip
 800668a:	d123      	bne.n	80066d4 <__ieee754_pow+0xe8>
 800668c:	4b5f      	ldr	r3, [pc, #380]	; (800680c <__ieee754_pow+0x220>)
 800668e:	18e3      	adds	r3, r4, r3
 8006690:	431f      	orrs	r7, r3
 8006692:	d101      	bne.n	8006698 <__ieee754_pow+0xac>
 8006694:	f000 fc67 	bl	8006f66 <__ieee754_pow+0x97a>
 8006698:	4b5f      	ldr	r3, [pc, #380]	; (8006818 <__ieee754_pow+0x22c>)
 800669a:	429c      	cmp	r4, r3
 800669c:	dd2d      	ble.n	80066fa <__ieee754_pow+0x10e>
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	9c03      	ldr	r4, [sp, #12]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	9401      	str	r4, [sp, #4]
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	da31      	bge.n	8006710 <__ieee754_pow+0x124>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2400      	movs	r4, #0
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	9401      	str	r4, [sp, #4]
 80066b4:	e02c      	b.n	8006710 <__ieee754_pow+0x124>
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d145      	bne.n	8006746 <__ieee754_pow+0x15a>
 80066ba:	2314      	movs	r3, #20
 80066bc:	1a9a      	subs	r2, r3, r2
 80066be:	002b      	movs	r3, r5
 80066c0:	4113      	asrs	r3, r2
 80066c2:	0019      	movs	r1, r3
 80066c4:	4091      	lsls	r1, r2
 80066c6:	42a9      	cmp	r1, r5
 80066c8:	d104      	bne.n	80066d4 <__ieee754_pow+0xe8>
 80066ca:	2201      	movs	r2, #1
 80066cc:	4013      	ands	r3, r2
 80066ce:	1892      	adds	r2, r2, r2
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	9306      	str	r3, [sp, #24]
 80066d4:	4b52      	ldr	r3, [pc, #328]	; (8006820 <__ieee754_pow+0x234>)
 80066d6:	429d      	cmp	r5, r3
 80066d8:	d11e      	bne.n	8006718 <__ieee754_pow+0x12c>
 80066da:	0038      	movs	r0, r7
 80066dc:	0031      	movs	r1, r6
 80066de:	9b04      	ldr	r3, [sp, #16]
 80066e0:	9000      	str	r0, [sp, #0]
 80066e2:	9101      	str	r1, [sp, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	da13      	bge.n	8006710 <__ieee754_pow+0x124>
 80066e8:	003a      	movs	r2, r7
 80066ea:	0033      	movs	r3, r6
 80066ec:	2000      	movs	r0, #0
 80066ee:	494c      	ldr	r1, [pc, #304]	; (8006820 <__ieee754_pow+0x234>)
 80066f0:	f7fb f84e 	bl	8001790 <__aeabi_ddiv>
 80066f4:	e7a7      	b.n	8006646 <__ieee754_pow+0x5a>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e7c3      	b.n	8006682 <__ieee754_pow+0x96>
 80066fa:	9b04      	ldr	r3, [sp, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	dad5      	bge.n	80066ac <__ieee754_pow+0xc0>
 8006700:	2280      	movs	r2, #128	; 0x80
 8006702:	0612      	lsls	r2, r2, #24
 8006704:	4694      	mov	ip, r2
 8006706:	9b02      	ldr	r3, [sp, #8]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	4463      	add	r3, ip
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	9800      	ldr	r0, [sp, #0]
 8006712:	9901      	ldr	r1, [sp, #4]
 8006714:	b015      	add	sp, #84	; 0x54
 8006716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	9a04      	ldr	r2, [sp, #16]
 800671c:	05db      	lsls	r3, r3, #23
 800671e:	429a      	cmp	r2, r3
 8006720:	d106      	bne.n	8006730 <__ieee754_pow+0x144>
 8006722:	003a      	movs	r2, r7
 8006724:	0033      	movs	r3, r6
 8006726:	0038      	movs	r0, r7
 8006728:	0031      	movs	r1, r6
 800672a:	f7fb fc3b 	bl	8001fa4 <__aeabi_dmul>
 800672e:	e78a      	b.n	8006646 <__ieee754_pow+0x5a>
 8006730:	4b3c      	ldr	r3, [pc, #240]	; (8006824 <__ieee754_pow+0x238>)
 8006732:	9a04      	ldr	r2, [sp, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d106      	bne.n	8006746 <__ieee754_pow+0x15a>
 8006738:	2e00      	cmp	r6, #0
 800673a:	db04      	blt.n	8006746 <__ieee754_pow+0x15a>
 800673c:	0038      	movs	r0, r7
 800673e:	0031      	movs	r1, r6
 8006740:	f000 fc4a 	bl	8006fd8 <__ieee754_sqrt>
 8006744:	e77f      	b.n	8006646 <__ieee754_pow+0x5a>
 8006746:	0038      	movs	r0, r7
 8006748:	0031      	movs	r1, r6
 800674a:	f000 fcf7 	bl	800713c <fabs>
 800674e:	9000      	str	r0, [sp, #0]
 8006750:	9101      	str	r1, [sp, #4]
 8006752:	2f00      	cmp	r7, #0
 8006754:	d12e      	bne.n	80067b4 <__ieee754_pow+0x1c8>
 8006756:	2c00      	cmp	r4, #0
 8006758:	d004      	beq.n	8006764 <__ieee754_pow+0x178>
 800675a:	4a31      	ldr	r2, [pc, #196]	; (8006820 <__ieee754_pow+0x234>)
 800675c:	00b3      	lsls	r3, r6, #2
 800675e:	089b      	lsrs	r3, r3, #2
 8006760:	4293      	cmp	r3, r2
 8006762:	d127      	bne.n	80067b4 <__ieee754_pow+0x1c8>
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da07      	bge.n	800677a <__ieee754_pow+0x18e>
 800676a:	9a00      	ldr	r2, [sp, #0]
 800676c:	9b01      	ldr	r3, [sp, #4]
 800676e:	2000      	movs	r0, #0
 8006770:	492b      	ldr	r1, [pc, #172]	; (8006820 <__ieee754_pow+0x234>)
 8006772:	f7fb f80d 	bl	8001790 <__aeabi_ddiv>
 8006776:	9000      	str	r0, [sp, #0]
 8006778:	9101      	str	r1, [sp, #4]
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	dac7      	bge.n	8006710 <__ieee754_pow+0x124>
 8006780:	4b22      	ldr	r3, [pc, #136]	; (800680c <__ieee754_pow+0x220>)
 8006782:	18e4      	adds	r4, r4, r3
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	431c      	orrs	r4, r3
 8006788:	d108      	bne.n	800679c <__ieee754_pow+0x1b0>
 800678a:	9a00      	ldr	r2, [sp, #0]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	0010      	movs	r0, r2
 8006790:	0019      	movs	r1, r3
 8006792:	f7fb fe79 	bl	8002488 <__aeabi_dsub>
 8006796:	0002      	movs	r2, r0
 8006798:	000b      	movs	r3, r1
 800679a:	e7a9      	b.n	80066f0 <__ieee754_pow+0x104>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d1b6      	bne.n	8006710 <__ieee754_pow+0x124>
 80067a2:	9800      	ldr	r0, [sp, #0]
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	0002      	movs	r2, r0
 80067a8:	9801      	ldr	r0, [sp, #4]
 80067aa:	0609      	lsls	r1, r1, #24
 80067ac:	1843      	adds	r3, r0, r1
 80067ae:	9200      	str	r2, [sp, #0]
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	e7ad      	b.n	8006710 <__ieee754_pow+0x124>
 80067b4:	0ff3      	lsrs	r3, r6, #31
 80067b6:	3b01      	subs	r3, #1
 80067b8:	9310      	str	r3, [sp, #64]	; 0x40
 80067ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	4313      	orrs	r3, r2
 80067c0:	d104      	bne.n	80067cc <__ieee754_pow+0x1e0>
 80067c2:	003a      	movs	r2, r7
 80067c4:	0033      	movs	r3, r6
 80067c6:	0038      	movs	r0, r7
 80067c8:	0031      	movs	r1, r6
 80067ca:	e7e2      	b.n	8006792 <__ieee754_pow+0x1a6>
 80067cc:	4b16      	ldr	r3, [pc, #88]	; (8006828 <__ieee754_pow+0x23c>)
 80067ce:	429d      	cmp	r5, r3
 80067d0:	dc00      	bgt.n	80067d4 <__ieee754_pow+0x1e8>
 80067d2:	e0f7      	b.n	80069c4 <__ieee754_pow+0x3d8>
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <__ieee754_pow+0x240>)
 80067d6:	429d      	cmp	r5, r3
 80067d8:	dd0b      	ble.n	80067f2 <__ieee754_pow+0x206>
 80067da:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <__ieee754_pow+0x22c>)
 80067dc:	429c      	cmp	r4, r3
 80067de:	dc0e      	bgt.n	80067fe <__ieee754_pow+0x212>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db00      	blt.n	80067e8 <__ieee754_pow+0x1fc>
 80067e6:	e761      	b.n	80066ac <__ieee754_pow+0xc0>
 80067e8:	4a11      	ldr	r2, [pc, #68]	; (8006830 <__ieee754_pow+0x244>)
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <__ieee754_pow+0x248>)
 80067ec:	0010      	movs	r0, r2
 80067ee:	0019      	movs	r1, r3
 80067f0:	e79b      	b.n	800672a <__ieee754_pow+0x13e>
 80067f2:	4b11      	ldr	r3, [pc, #68]	; (8006838 <__ieee754_pow+0x24c>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	ddf3      	ble.n	80067e0 <__ieee754_pow+0x1f4>
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <__ieee754_pow+0x234>)
 80067fa:	429c      	cmp	r4, r3
 80067fc:	dd1e      	ble.n	800683c <__ieee754_pow+0x250>
 80067fe:	9b04      	ldr	r3, [sp, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	dcf1      	bgt.n	80067e8 <__ieee754_pow+0x1fc>
 8006804:	e752      	b.n	80066ac <__ieee754_pow+0xc0>
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	c0100000 	.word	0xc0100000
 8006810:	080074e9 	.word	0x080074e9
 8006814:	433fffff 	.word	0x433fffff
 8006818:	3fefffff 	.word	0x3fefffff
 800681c:	fffffc01 	.word	0xfffffc01
 8006820:	3ff00000 	.word	0x3ff00000
 8006824:	3fe00000 	.word	0x3fe00000
 8006828:	41e00000 	.word	0x41e00000
 800682c:	43f00000 	.word	0x43f00000
 8006830:	8800759c 	.word	0x8800759c
 8006834:	7e37e43c 	.word	0x7e37e43c
 8006838:	3feffffe 	.word	0x3feffffe
 800683c:	2200      	movs	r2, #0
 800683e:	9800      	ldr	r0, [sp, #0]
 8006840:	9901      	ldr	r1, [sp, #4]
 8006842:	4b52      	ldr	r3, [pc, #328]	; (800698c <__ieee754_pow+0x3a0>)
 8006844:	f7fb fe20 	bl	8002488 <__aeabi_dsub>
 8006848:	22c0      	movs	r2, #192	; 0xc0
 800684a:	4b51      	ldr	r3, [pc, #324]	; (8006990 <__ieee754_pow+0x3a4>)
 800684c:	05d2      	lsls	r2, r2, #23
 800684e:	0006      	movs	r6, r0
 8006850:	000f      	movs	r7, r1
 8006852:	f7fb fba7 	bl	8001fa4 <__aeabi_dmul>
 8006856:	4a4f      	ldr	r2, [pc, #316]	; (8006994 <__ieee754_pow+0x3a8>)
 8006858:	9000      	str	r0, [sp, #0]
 800685a:	9101      	str	r1, [sp, #4]
 800685c:	4b4e      	ldr	r3, [pc, #312]	; (8006998 <__ieee754_pow+0x3ac>)
 800685e:	0030      	movs	r0, r6
 8006860:	0039      	movs	r1, r7
 8006862:	f7fb fb9f 	bl	8001fa4 <__aeabi_dmul>
 8006866:	2200      	movs	r2, #0
 8006868:	9004      	str	r0, [sp, #16]
 800686a:	9105      	str	r1, [sp, #20]
 800686c:	4b4b      	ldr	r3, [pc, #300]	; (800699c <__ieee754_pow+0x3b0>)
 800686e:	0030      	movs	r0, r6
 8006870:	0039      	movs	r1, r7
 8006872:	f7fb fb97 	bl	8001fa4 <__aeabi_dmul>
 8006876:	0002      	movs	r2, r0
 8006878:	000b      	movs	r3, r1
 800687a:	4849      	ldr	r0, [pc, #292]	; (80069a0 <__ieee754_pow+0x3b4>)
 800687c:	4949      	ldr	r1, [pc, #292]	; (80069a4 <__ieee754_pow+0x3b8>)
 800687e:	f7fb fe03 	bl	8002488 <__aeabi_dsub>
 8006882:	0032      	movs	r2, r6
 8006884:	003b      	movs	r3, r7
 8006886:	f7fb fb8d 	bl	8001fa4 <__aeabi_dmul>
 800688a:	0002      	movs	r2, r0
 800688c:	000b      	movs	r3, r1
 800688e:	2000      	movs	r0, #0
 8006890:	4945      	ldr	r1, [pc, #276]	; (80069a8 <__ieee754_pow+0x3bc>)
 8006892:	f7fb fdf9 	bl	8002488 <__aeabi_dsub>
 8006896:	0032      	movs	r2, r6
 8006898:	0004      	movs	r4, r0
 800689a:	000d      	movs	r5, r1
 800689c:	003b      	movs	r3, r7
 800689e:	0030      	movs	r0, r6
 80068a0:	0039      	movs	r1, r7
 80068a2:	f7fb fb7f 	bl	8001fa4 <__aeabi_dmul>
 80068a6:	0002      	movs	r2, r0
 80068a8:	000b      	movs	r3, r1
 80068aa:	0020      	movs	r0, r4
 80068ac:	0029      	movs	r1, r5
 80068ae:	f7fb fb79 	bl	8001fa4 <__aeabi_dmul>
 80068b2:	4a3e      	ldr	r2, [pc, #248]	; (80069ac <__ieee754_pow+0x3c0>)
 80068b4:	4b36      	ldr	r3, [pc, #216]	; (8006990 <__ieee754_pow+0x3a4>)
 80068b6:	f7fb fb75 	bl	8001fa4 <__aeabi_dmul>
 80068ba:	0002      	movs	r2, r0
 80068bc:	000b      	movs	r3, r1
 80068be:	9804      	ldr	r0, [sp, #16]
 80068c0:	9905      	ldr	r1, [sp, #20]
 80068c2:	f7fb fde1 	bl	8002488 <__aeabi_dsub>
 80068c6:	0002      	movs	r2, r0
 80068c8:	000b      	movs	r3, r1
 80068ca:	0004      	movs	r4, r0
 80068cc:	000d      	movs	r5, r1
 80068ce:	9800      	ldr	r0, [sp, #0]
 80068d0:	9901      	ldr	r1, [sp, #4]
 80068d2:	f7fa fc41 	bl	8001158 <__aeabi_dadd>
 80068d6:	9a00      	ldr	r2, [sp, #0]
 80068d8:	9b01      	ldr	r3, [sp, #4]
 80068da:	2000      	movs	r0, #0
 80068dc:	9004      	str	r0, [sp, #16]
 80068de:	9105      	str	r1, [sp, #20]
 80068e0:	f7fb fdd2 	bl	8002488 <__aeabi_dsub>
 80068e4:	0002      	movs	r2, r0
 80068e6:	000b      	movs	r3, r1
 80068e8:	0020      	movs	r0, r4
 80068ea:	0029      	movs	r1, r5
 80068ec:	f7fb fdcc 	bl	8002488 <__aeabi_dsub>
 80068f0:	9b06      	ldr	r3, [sp, #24]
 80068f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068f4:	3b01      	subs	r3, #1
 80068f6:	0006      	movs	r6, r0
 80068f8:	000f      	movs	r7, r1
 80068fa:	4313      	orrs	r3, r2
 80068fc:	d000      	beq.n	8006900 <__ieee754_pow+0x314>
 80068fe:	e1de      	b.n	8006cbe <__ieee754_pow+0x6d2>
 8006900:	2300      	movs	r3, #0
 8006902:	4c2b      	ldr	r4, [pc, #172]	; (80069b0 <__ieee754_pow+0x3c4>)
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	9401      	str	r4, [sp, #4]
 8006908:	9c02      	ldr	r4, [sp, #8]
 800690a:	9d03      	ldr	r5, [sp, #12]
 800690c:	9802      	ldr	r0, [sp, #8]
 800690e:	9903      	ldr	r1, [sp, #12]
 8006910:	2400      	movs	r4, #0
 8006912:	002b      	movs	r3, r5
 8006914:	0022      	movs	r2, r4
 8006916:	f7fb fdb7 	bl	8002488 <__aeabi_dsub>
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	9b05      	ldr	r3, [sp, #20]
 800691e:	f7fb fb41 	bl	8001fa4 <__aeabi_dmul>
 8006922:	9a02      	ldr	r2, [sp, #8]
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	9006      	str	r0, [sp, #24]
 8006928:	9107      	str	r1, [sp, #28]
 800692a:	0030      	movs	r0, r6
 800692c:	0039      	movs	r1, r7
 800692e:	f7fb fb39 	bl	8001fa4 <__aeabi_dmul>
 8006932:	0002      	movs	r2, r0
 8006934:	000b      	movs	r3, r1
 8006936:	9806      	ldr	r0, [sp, #24]
 8006938:	9907      	ldr	r1, [sp, #28]
 800693a:	f7fa fc0d 	bl	8001158 <__aeabi_dadd>
 800693e:	0022      	movs	r2, r4
 8006940:	002b      	movs	r3, r5
 8006942:	9006      	str	r0, [sp, #24]
 8006944:	9107      	str	r1, [sp, #28]
 8006946:	9804      	ldr	r0, [sp, #16]
 8006948:	9905      	ldr	r1, [sp, #20]
 800694a:	f7fb fb2b 	bl	8001fa4 <__aeabi_dmul>
 800694e:	0006      	movs	r6, r0
 8006950:	000f      	movs	r7, r1
 8006952:	000b      	movs	r3, r1
 8006954:	0002      	movs	r2, r0
 8006956:	9806      	ldr	r0, [sp, #24]
 8006958:	9907      	ldr	r1, [sp, #28]
 800695a:	9604      	str	r6, [sp, #16]
 800695c:	9705      	str	r7, [sp, #20]
 800695e:	f7fa fbfb 	bl	8001158 <__aeabi_dadd>
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <__ieee754_pow+0x3c8>)
 8006964:	0005      	movs	r5, r0
 8006966:	000c      	movs	r4, r1
 8006968:	9108      	str	r1, [sp, #32]
 800696a:	4299      	cmp	r1, r3
 800696c:	dc00      	bgt.n	8006970 <__ieee754_pow+0x384>
 800696e:	e2d8      	b.n	8006f22 <__ieee754_pow+0x936>
 8006970:	4b11      	ldr	r3, [pc, #68]	; (80069b8 <__ieee754_pow+0x3cc>)
 8006972:	18cb      	adds	r3, r1, r3
 8006974:	4303      	orrs	r3, r0
 8006976:	d100      	bne.n	800697a <__ieee754_pow+0x38e>
 8006978:	e1da      	b.n	8006d30 <__ieee754_pow+0x744>
 800697a:	9800      	ldr	r0, [sp, #0]
 800697c:	9901      	ldr	r1, [sp, #4]
 800697e:	4a0f      	ldr	r2, [pc, #60]	; (80069bc <__ieee754_pow+0x3d0>)
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <__ieee754_pow+0x3d4>)
 8006982:	f7fb fb0f 	bl	8001fa4 <__aeabi_dmul>
 8006986:	4a0d      	ldr	r2, [pc, #52]	; (80069bc <__ieee754_pow+0x3d0>)
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <__ieee754_pow+0x3d4>)
 800698a:	e6ce      	b.n	800672a <__ieee754_pow+0x13e>
 800698c:	3ff00000 	.word	0x3ff00000
 8006990:	3ff71547 	.word	0x3ff71547
 8006994:	f85ddf44 	.word	0xf85ddf44
 8006998:	3e54ae0b 	.word	0x3e54ae0b
 800699c:	3fd00000 	.word	0x3fd00000
 80069a0:	55555555 	.word	0x55555555
 80069a4:	3fd55555 	.word	0x3fd55555
 80069a8:	3fe00000 	.word	0x3fe00000
 80069ac:	652b82fe 	.word	0x652b82fe
 80069b0:	bff00000 	.word	0xbff00000
 80069b4:	408fffff 	.word	0x408fffff
 80069b8:	bf700000 	.word	0xbf700000
 80069bc:	8800759c 	.word	0x8800759c
 80069c0:	7e37e43c 	.word	0x7e37e43c
 80069c4:	4bbf      	ldr	r3, [pc, #764]	; (8006cc4 <__ieee754_pow+0x6d8>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	429c      	cmp	r4, r3
 80069ca:	dc0a      	bgt.n	80069e2 <__ieee754_pow+0x3f6>
 80069cc:	9800      	ldr	r0, [sp, #0]
 80069ce:	9901      	ldr	r1, [sp, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	4bbd      	ldr	r3, [pc, #756]	; (8006cc8 <__ieee754_pow+0x6dc>)
 80069d4:	f7fb fae6 	bl	8001fa4 <__aeabi_dmul>
 80069d8:	2235      	movs	r2, #53	; 0x35
 80069da:	9000      	str	r0, [sp, #0]
 80069dc:	9101      	str	r1, [sp, #4]
 80069de:	9c01      	ldr	r4, [sp, #4]
 80069e0:	4252      	negs	r2, r2
 80069e2:	49ba      	ldr	r1, [pc, #744]	; (8006ccc <__ieee754_pow+0x6e0>)
 80069e4:	1523      	asrs	r3, r4, #20
 80069e6:	185b      	adds	r3, r3, r1
 80069e8:	189b      	adds	r3, r3, r2
 80069ea:	0324      	lsls	r4, r4, #12
 80069ec:	4db8      	ldr	r5, [pc, #736]	; (8006cd0 <__ieee754_pow+0x6e4>)
 80069ee:	4ab9      	ldr	r2, [pc, #740]	; (8006cd4 <__ieee754_pow+0x6e8>)
 80069f0:	930d      	str	r3, [sp, #52]	; 0x34
 80069f2:	0b23      	lsrs	r3, r4, #12
 80069f4:	431d      	orrs	r5, r3
 80069f6:	2400      	movs	r4, #0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	dd09      	ble.n	8006a10 <__ieee754_pow+0x424>
 80069fc:	4ab6      	ldr	r2, [pc, #728]	; (8006cd8 <__ieee754_pow+0x6ec>)
 80069fe:	3401      	adds	r4, #1
 8006a00:	4293      	cmp	r3, r2
 8006a02:	dd05      	ble.n	8006a10 <__ieee754_pow+0x424>
 8006a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a06:	191b      	adds	r3, r3, r4
 8006a08:	2400      	movs	r4, #0
 8006a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a0c:	4bb3      	ldr	r3, [pc, #716]	; (8006cdc <__ieee754_pow+0x6f0>)
 8006a0e:	18ed      	adds	r5, r5, r3
 8006a10:	9800      	ldr	r0, [sp, #0]
 8006a12:	9901      	ldr	r1, [sp, #4]
 8006a14:	0029      	movs	r1, r5
 8006a16:	00e3      	lsls	r3, r4, #3
 8006a18:	9311      	str	r3, [sp, #68]	; 0x44
 8006a1a:	4bb1      	ldr	r3, [pc, #708]	; (8006ce0 <__ieee754_pow+0x6f4>)
 8006a1c:	00e2      	lsls	r2, r4, #3
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	900e      	str	r0, [sp, #56]	; 0x38
 8006a26:	910f      	str	r1, [sp, #60]	; 0x3c
 8006a28:	920a      	str	r2, [sp, #40]	; 0x28
 8006a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2c:	f7fb fd2c 	bl	8002488 <__aeabi_dsub>
 8006a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a34:	0006      	movs	r6, r0
 8006a36:	000f      	movs	r7, r1
 8006a38:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a3c:	f7fa fb8c 	bl	8001158 <__aeabi_dadd>
 8006a40:	0002      	movs	r2, r0
 8006a42:	000b      	movs	r3, r1
 8006a44:	2000      	movs	r0, #0
 8006a46:	49a2      	ldr	r1, [pc, #648]	; (8006cd0 <__ieee754_pow+0x6e4>)
 8006a48:	f7fa fea2 	bl	8001790 <__aeabi_ddiv>
 8006a4c:	9012      	str	r0, [sp, #72]	; 0x48
 8006a4e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006a50:	0002      	movs	r2, r0
 8006a52:	000b      	movs	r3, r1
 8006a54:	0030      	movs	r0, r6
 8006a56:	0039      	movs	r1, r7
 8006a58:	f7fb faa4 	bl	8001fa4 <__aeabi_dmul>
 8006a5c:	9008      	str	r0, [sp, #32]
 8006a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8006a60:	9a08      	ldr	r2, [sp, #32]
 8006a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a64:	2180      	movs	r1, #128	; 0x80
 8006a66:	9204      	str	r2, [sp, #16]
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	0589      	lsls	r1, r1, #22
 8006a6e:	106d      	asrs	r5, r5, #1
 8006a70:	430d      	orrs	r5, r1
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	9304      	str	r3, [sp, #16]
 8006a76:	9a04      	ldr	r2, [sp, #16]
 8006a78:	9b05      	ldr	r3, [sp, #20]
 8006a7a:	9200      	str	r2, [sp, #0]
 8006a7c:	9301      	str	r3, [sp, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	0309      	lsls	r1, r1, #12
 8006a82:	186d      	adds	r5, r5, r1
 8006a84:	04a4      	lsls	r4, r4, #18
 8006a86:	192b      	adds	r3, r5, r4
 8006a88:	9800      	ldr	r0, [sp, #0]
 8006a8a:	9901      	ldr	r1, [sp, #4]
 8006a8c:	0014      	movs	r4, r2
 8006a8e:	001d      	movs	r5, r3
 8006a90:	f7fb fa88 	bl	8001fa4 <__aeabi_dmul>
 8006a94:	0002      	movs	r2, r0
 8006a96:	000b      	movs	r3, r1
 8006a98:	0030      	movs	r0, r6
 8006a9a:	0039      	movs	r1, r7
 8006a9c:	f7fb fcf4 	bl	8002488 <__aeabi_dsub>
 8006aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa4:	0006      	movs	r6, r0
 8006aa6:	000f      	movs	r7, r1
 8006aa8:	0020      	movs	r0, r4
 8006aaa:	0029      	movs	r1, r5
 8006aac:	f7fb fcec 	bl	8002488 <__aeabi_dsub>
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	000b      	movs	r3, r1
 8006ab4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ab6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ab8:	f7fb fce6 	bl	8002488 <__aeabi_dsub>
 8006abc:	9a00      	ldr	r2, [sp, #0]
 8006abe:	9b01      	ldr	r3, [sp, #4]
 8006ac0:	f7fb fa70 	bl	8001fa4 <__aeabi_dmul>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	000b      	movs	r3, r1
 8006ac8:	0030      	movs	r0, r6
 8006aca:	0039      	movs	r1, r7
 8006acc:	f7fb fcdc 	bl	8002488 <__aeabi_dsub>
 8006ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ad4:	f7fb fa66 	bl	8001fa4 <__aeabi_dmul>
 8006ad8:	9a08      	ldr	r2, [sp, #32]
 8006ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006adc:	900a      	str	r0, [sp, #40]	; 0x28
 8006ade:	910b      	str	r1, [sp, #44]	; 0x2c
 8006ae0:	0010      	movs	r0, r2
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	f7fb fa5e 	bl	8001fa4 <__aeabi_dmul>
 8006ae8:	0006      	movs	r6, r0
 8006aea:	000f      	movs	r7, r1
 8006aec:	4a7d      	ldr	r2, [pc, #500]	; (8006ce4 <__ieee754_pow+0x6f8>)
 8006aee:	4b7e      	ldr	r3, [pc, #504]	; (8006ce8 <__ieee754_pow+0x6fc>)
 8006af0:	f7fb fa58 	bl	8001fa4 <__aeabi_dmul>
 8006af4:	4a7d      	ldr	r2, [pc, #500]	; (8006cec <__ieee754_pow+0x700>)
 8006af6:	4b7e      	ldr	r3, [pc, #504]	; (8006cf0 <__ieee754_pow+0x704>)
 8006af8:	f7fa fb2e 	bl	8001158 <__aeabi_dadd>
 8006afc:	0032      	movs	r2, r6
 8006afe:	003b      	movs	r3, r7
 8006b00:	f7fb fa50 	bl	8001fa4 <__aeabi_dmul>
 8006b04:	4a7b      	ldr	r2, [pc, #492]	; (8006cf4 <__ieee754_pow+0x708>)
 8006b06:	4b7c      	ldr	r3, [pc, #496]	; (8006cf8 <__ieee754_pow+0x70c>)
 8006b08:	f7fa fb26 	bl	8001158 <__aeabi_dadd>
 8006b0c:	0032      	movs	r2, r6
 8006b0e:	003b      	movs	r3, r7
 8006b10:	f7fb fa48 	bl	8001fa4 <__aeabi_dmul>
 8006b14:	4a79      	ldr	r2, [pc, #484]	; (8006cfc <__ieee754_pow+0x710>)
 8006b16:	4b7a      	ldr	r3, [pc, #488]	; (8006d00 <__ieee754_pow+0x714>)
 8006b18:	f7fa fb1e 	bl	8001158 <__aeabi_dadd>
 8006b1c:	0032      	movs	r2, r6
 8006b1e:	003b      	movs	r3, r7
 8006b20:	f7fb fa40 	bl	8001fa4 <__aeabi_dmul>
 8006b24:	4a77      	ldr	r2, [pc, #476]	; (8006d04 <__ieee754_pow+0x718>)
 8006b26:	4b78      	ldr	r3, [pc, #480]	; (8006d08 <__ieee754_pow+0x71c>)
 8006b28:	f7fa fb16 	bl	8001158 <__aeabi_dadd>
 8006b2c:	0032      	movs	r2, r6
 8006b2e:	003b      	movs	r3, r7
 8006b30:	f7fb fa38 	bl	8001fa4 <__aeabi_dmul>
 8006b34:	4a75      	ldr	r2, [pc, #468]	; (8006d0c <__ieee754_pow+0x720>)
 8006b36:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <__ieee754_pow+0x724>)
 8006b38:	f7fa fb0e 	bl	8001158 <__aeabi_dadd>
 8006b3c:	0032      	movs	r2, r6
 8006b3e:	0004      	movs	r4, r0
 8006b40:	000d      	movs	r5, r1
 8006b42:	003b      	movs	r3, r7
 8006b44:	0030      	movs	r0, r6
 8006b46:	0039      	movs	r1, r7
 8006b48:	f7fb fa2c 	bl	8001fa4 <__aeabi_dmul>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	000b      	movs	r3, r1
 8006b50:	0020      	movs	r0, r4
 8006b52:	0029      	movs	r1, r5
 8006b54:	f7fb fa26 	bl	8001fa4 <__aeabi_dmul>
 8006b58:	9a00      	ldr	r2, [sp, #0]
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	0004      	movs	r4, r0
 8006b5e:	000d      	movs	r5, r1
 8006b60:	9808      	ldr	r0, [sp, #32]
 8006b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b64:	f7fa faf8 	bl	8001158 <__aeabi_dadd>
 8006b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b6c:	f7fb fa1a 	bl	8001fa4 <__aeabi_dmul>
 8006b70:	0022      	movs	r2, r4
 8006b72:	002b      	movs	r3, r5
 8006b74:	f7fa faf0 	bl	8001158 <__aeabi_dadd>
 8006b78:	9a00      	ldr	r2, [sp, #0]
 8006b7a:	9b01      	ldr	r3, [sp, #4]
 8006b7c:	900e      	str	r0, [sp, #56]	; 0x38
 8006b7e:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b80:	0010      	movs	r0, r2
 8006b82:	0019      	movs	r1, r3
 8006b84:	f7fb fa0e 	bl	8001fa4 <__aeabi_dmul>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <__ieee754_pow+0x728>)
 8006b8c:	0004      	movs	r4, r0
 8006b8e:	000d      	movs	r5, r1
 8006b90:	f7fa fae2 	bl	8001158 <__aeabi_dadd>
 8006b94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b98:	f7fa fade 	bl	8001158 <__aeabi_dadd>
 8006b9c:	9e04      	ldr	r6, [sp, #16]
 8006b9e:	000f      	movs	r7, r1
 8006ba0:	0032      	movs	r2, r6
 8006ba2:	000b      	movs	r3, r1
 8006ba4:	9800      	ldr	r0, [sp, #0]
 8006ba6:	9901      	ldr	r1, [sp, #4]
 8006ba8:	f7fb f9fc 	bl	8001fa4 <__aeabi_dmul>
 8006bac:	2200      	movs	r2, #0
 8006bae:	9000      	str	r0, [sp, #0]
 8006bb0:	9101      	str	r1, [sp, #4]
 8006bb2:	4b58      	ldr	r3, [pc, #352]	; (8006d14 <__ieee754_pow+0x728>)
 8006bb4:	0030      	movs	r0, r6
 8006bb6:	0039      	movs	r1, r7
 8006bb8:	f7fb fc66 	bl	8002488 <__aeabi_dsub>
 8006bbc:	0022      	movs	r2, r4
 8006bbe:	002b      	movs	r3, r5
 8006bc0:	f7fb fc62 	bl	8002488 <__aeabi_dsub>
 8006bc4:	0002      	movs	r2, r0
 8006bc6:	000b      	movs	r3, r1
 8006bc8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006bca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bcc:	f7fb fc5c 	bl	8002488 <__aeabi_dsub>
 8006bd0:	9a08      	ldr	r2, [sp, #32]
 8006bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd4:	f7fb f9e6 	bl	8001fa4 <__aeabi_dmul>
 8006bd8:	0032      	movs	r2, r6
 8006bda:	0004      	movs	r4, r0
 8006bdc:	000d      	movs	r5, r1
 8006bde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be2:	003b      	movs	r3, r7
 8006be4:	f7fb f9de 	bl	8001fa4 <__aeabi_dmul>
 8006be8:	0002      	movs	r2, r0
 8006bea:	000b      	movs	r3, r1
 8006bec:	0020      	movs	r0, r4
 8006bee:	0029      	movs	r1, r5
 8006bf0:	f7fa fab2 	bl	8001158 <__aeabi_dadd>
 8006bf4:	0004      	movs	r4, r0
 8006bf6:	000d      	movs	r5, r1
 8006bf8:	0002      	movs	r2, r0
 8006bfa:	000b      	movs	r3, r1
 8006bfc:	9800      	ldr	r0, [sp, #0]
 8006bfe:	9901      	ldr	r1, [sp, #4]
 8006c00:	f7fa faaa 	bl	8001158 <__aeabi_dadd>
 8006c04:	22e0      	movs	r2, #224	; 0xe0
 8006c06:	9e04      	ldr	r6, [sp, #16]
 8006c08:	0612      	lsls	r2, r2, #24
 8006c0a:	4b43      	ldr	r3, [pc, #268]	; (8006d18 <__ieee754_pow+0x72c>)
 8006c0c:	0030      	movs	r0, r6
 8006c0e:	000f      	movs	r7, r1
 8006c10:	f7fb f9c8 	bl	8001fa4 <__aeabi_dmul>
 8006c14:	9008      	str	r0, [sp, #32]
 8006c16:	9109      	str	r1, [sp, #36]	; 0x24
 8006c18:	9a00      	ldr	r2, [sp, #0]
 8006c1a:	9b01      	ldr	r3, [sp, #4]
 8006c1c:	0030      	movs	r0, r6
 8006c1e:	0039      	movs	r1, r7
 8006c20:	f7fb fc32 	bl	8002488 <__aeabi_dsub>
 8006c24:	0002      	movs	r2, r0
 8006c26:	000b      	movs	r3, r1
 8006c28:	0020      	movs	r0, r4
 8006c2a:	0029      	movs	r1, r5
 8006c2c:	f7fb fc2c 	bl	8002488 <__aeabi_dsub>
 8006c30:	4a3a      	ldr	r2, [pc, #232]	; (8006d1c <__ieee754_pow+0x730>)
 8006c32:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <__ieee754_pow+0x72c>)
 8006c34:	f7fb f9b6 	bl	8001fa4 <__aeabi_dmul>
 8006c38:	4a39      	ldr	r2, [pc, #228]	; (8006d20 <__ieee754_pow+0x734>)
 8006c3a:	0004      	movs	r4, r0
 8006c3c:	000d      	movs	r5, r1
 8006c3e:	4b39      	ldr	r3, [pc, #228]	; (8006d24 <__ieee754_pow+0x738>)
 8006c40:	0030      	movs	r0, r6
 8006c42:	0039      	movs	r1, r7
 8006c44:	f7fb f9ae 	bl	8001fa4 <__aeabi_dmul>
 8006c48:	0002      	movs	r2, r0
 8006c4a:	000b      	movs	r3, r1
 8006c4c:	0020      	movs	r0, r4
 8006c4e:	0029      	movs	r1, r5
 8006c50:	f7fa fa82 	bl	8001158 <__aeabi_dadd>
 8006c54:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <__ieee754_pow+0x73c>)
 8006c58:	189b      	adds	r3, r3, r2
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f7fa fa7b 	bl	8001158 <__aeabi_dadd>
 8006c62:	9000      	str	r0, [sp, #0]
 8006c64:	9101      	str	r1, [sp, #4]
 8006c66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c68:	f7fb ff72 	bl	8002b50 <__aeabi_i2d>
 8006c6c:	0004      	movs	r4, r0
 8006c6e:	000d      	movs	r5, r1
 8006c70:	9808      	ldr	r0, [sp, #32]
 8006c72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c76:	4b2d      	ldr	r3, [pc, #180]	; (8006d2c <__ieee754_pow+0x740>)
 8006c78:	189b      	adds	r3, r3, r2
 8006c7a:	681e      	ldr	r6, [r3, #0]
 8006c7c:	685f      	ldr	r7, [r3, #4]
 8006c7e:	9a00      	ldr	r2, [sp, #0]
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	f7fa fa69 	bl	8001158 <__aeabi_dadd>
 8006c86:	0032      	movs	r2, r6
 8006c88:	003b      	movs	r3, r7
 8006c8a:	f7fa fa65 	bl	8001158 <__aeabi_dadd>
 8006c8e:	0022      	movs	r2, r4
 8006c90:	002b      	movs	r3, r5
 8006c92:	f7fa fa61 	bl	8001158 <__aeabi_dadd>
 8006c96:	9804      	ldr	r0, [sp, #16]
 8006c98:	0022      	movs	r2, r4
 8006c9a:	002b      	movs	r3, r5
 8006c9c:	9004      	str	r0, [sp, #16]
 8006c9e:	9105      	str	r1, [sp, #20]
 8006ca0:	f7fb fbf2 	bl	8002488 <__aeabi_dsub>
 8006ca4:	0032      	movs	r2, r6
 8006ca6:	003b      	movs	r3, r7
 8006ca8:	f7fb fbee 	bl	8002488 <__aeabi_dsub>
 8006cac:	9a08      	ldr	r2, [sp, #32]
 8006cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb0:	f7fb fbea 	bl	8002488 <__aeabi_dsub>
 8006cb4:	0002      	movs	r2, r0
 8006cb6:	000b      	movs	r3, r1
 8006cb8:	9800      	ldr	r0, [sp, #0]
 8006cba:	9901      	ldr	r1, [sp, #4]
 8006cbc:	e616      	b.n	80068ec <__ieee754_pow+0x300>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4c03      	ldr	r4, [pc, #12]	; (8006cd0 <__ieee754_pow+0x6e4>)
 8006cc2:	e61f      	b.n	8006904 <__ieee754_pow+0x318>
 8006cc4:	000fffff 	.word	0x000fffff
 8006cc8:	43400000 	.word	0x43400000
 8006ccc:	fffffc01 	.word	0xfffffc01
 8006cd0:	3ff00000 	.word	0x3ff00000
 8006cd4:	0003988e 	.word	0x0003988e
 8006cd8:	000bb679 	.word	0x000bb679
 8006cdc:	fff00000 	.word	0xfff00000
 8006ce0:	080075f0 	.word	0x080075f0
 8006ce4:	4a454eef 	.word	0x4a454eef
 8006ce8:	3fca7e28 	.word	0x3fca7e28
 8006cec:	93c9db65 	.word	0x93c9db65
 8006cf0:	3fcd864a 	.word	0x3fcd864a
 8006cf4:	a91d4101 	.word	0xa91d4101
 8006cf8:	3fd17460 	.word	0x3fd17460
 8006cfc:	518f264d 	.word	0x518f264d
 8006d00:	3fd55555 	.word	0x3fd55555
 8006d04:	db6fabff 	.word	0xdb6fabff
 8006d08:	3fdb6db6 	.word	0x3fdb6db6
 8006d0c:	33333303 	.word	0x33333303
 8006d10:	3fe33333 	.word	0x3fe33333
 8006d14:	40080000 	.word	0x40080000
 8006d18:	3feec709 	.word	0x3feec709
 8006d1c:	dc3a03fd 	.word	0xdc3a03fd
 8006d20:	145b01f5 	.word	0x145b01f5
 8006d24:	be3e2fe0 	.word	0xbe3e2fe0
 8006d28:	08007610 	.word	0x08007610
 8006d2c:	08007600 	.word	0x08007600
 8006d30:	4a8f      	ldr	r2, [pc, #572]	; (8006f70 <__ieee754_pow+0x984>)
 8006d32:	4b90      	ldr	r3, [pc, #576]	; (8006f74 <__ieee754_pow+0x988>)
 8006d34:	9806      	ldr	r0, [sp, #24]
 8006d36:	9907      	ldr	r1, [sp, #28]
 8006d38:	f7fa fa0e 	bl	8001158 <__aeabi_dadd>
 8006d3c:	0032      	movs	r2, r6
 8006d3e:	9002      	str	r0, [sp, #8]
 8006d40:	9103      	str	r1, [sp, #12]
 8006d42:	003b      	movs	r3, r7
 8006d44:	0028      	movs	r0, r5
 8006d46:	0021      	movs	r1, r4
 8006d48:	f7fb fb9e 	bl	8002488 <__aeabi_dsub>
 8006d4c:	0002      	movs	r2, r0
 8006d4e:	000b      	movs	r3, r1
 8006d50:	9802      	ldr	r0, [sp, #8]
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	f7f9 fa8e 	bl	8000274 <__aeabi_dcmpgt>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d000      	beq.n	8006d5e <__ieee754_pow+0x772>
 8006d5c:	e60d      	b.n	800697a <__ieee754_pow+0x38e>
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4a85      	ldr	r2, [pc, #532]	; (8006f78 <__ieee754_pow+0x98c>)
 8006d62:	0063      	lsls	r3, r4, #1
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	9102      	str	r1, [sp, #8]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	dd25      	ble.n	8006db8 <__ieee754_pow+0x7cc>
 8006d6c:	4a83      	ldr	r2, [pc, #524]	; (8006f7c <__ieee754_pow+0x990>)
 8006d6e:	151b      	asrs	r3, r3, #20
 8006d70:	189b      	adds	r3, r3, r2
 8006d72:	2280      	movs	r2, #128	; 0x80
 8006d74:	0352      	lsls	r2, r2, #13
 8006d76:	4694      	mov	ip, r2
 8006d78:	411a      	asrs	r2, r3
 8006d7a:	1914      	adds	r4, r2, r4
 8006d7c:	0060      	lsls	r0, r4, #1
 8006d7e:	4b80      	ldr	r3, [pc, #512]	; (8006f80 <__ieee754_pow+0x994>)
 8006d80:	0d40      	lsrs	r0, r0, #21
 8006d82:	4d80      	ldr	r5, [pc, #512]	; (8006f84 <__ieee754_pow+0x998>)
 8006d84:	18c0      	adds	r0, r0, r3
 8006d86:	4105      	asrs	r5, r0
 8006d88:	0021      	movs	r1, r4
 8006d8a:	43a9      	bics	r1, r5
 8006d8c:	000b      	movs	r3, r1
 8006d8e:	4661      	mov	r1, ip
 8006d90:	0324      	lsls	r4, r4, #12
 8006d92:	0b24      	lsrs	r4, r4, #12
 8006d94:	4321      	orrs	r1, r4
 8006d96:	2414      	movs	r4, #20
 8006d98:	1a20      	subs	r0, r4, r0
 8006d9a:	4101      	asrs	r1, r0
 8006d9c:	9102      	str	r1, [sp, #8]
 8006d9e:	9908      	ldr	r1, [sp, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2900      	cmp	r1, #0
 8006da4:	da02      	bge.n	8006dac <__ieee754_pow+0x7c0>
 8006da6:	9902      	ldr	r1, [sp, #8]
 8006da8:	4249      	negs	r1, r1
 8006daa:	9102      	str	r1, [sp, #8]
 8006dac:	0030      	movs	r0, r6
 8006dae:	0039      	movs	r1, r7
 8006db0:	f7fb fb6a 	bl	8002488 <__aeabi_dsub>
 8006db4:	9004      	str	r0, [sp, #16]
 8006db6:	9105      	str	r1, [sp, #20]
 8006db8:	9a06      	ldr	r2, [sp, #24]
 8006dba:	9b07      	ldr	r3, [sp, #28]
 8006dbc:	9804      	ldr	r0, [sp, #16]
 8006dbe:	9905      	ldr	r1, [sp, #20]
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	f7fa f9c9 	bl	8001158 <__aeabi_dadd>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	; (8006f88 <__ieee754_pow+0x99c>)
 8006dca:	0030      	movs	r0, r6
 8006dcc:	000f      	movs	r7, r1
 8006dce:	f7fb f8e9 	bl	8001fa4 <__aeabi_dmul>
 8006dd2:	9a04      	ldr	r2, [sp, #16]
 8006dd4:	9b05      	ldr	r3, [sp, #20]
 8006dd6:	9008      	str	r0, [sp, #32]
 8006dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8006dda:	0030      	movs	r0, r6
 8006ddc:	0039      	movs	r1, r7
 8006dde:	f7fb fb53 	bl	8002488 <__aeabi_dsub>
 8006de2:	0002      	movs	r2, r0
 8006de4:	000b      	movs	r3, r1
 8006de6:	9806      	ldr	r0, [sp, #24]
 8006de8:	9907      	ldr	r1, [sp, #28]
 8006dea:	f7fb fb4d 	bl	8002488 <__aeabi_dsub>
 8006dee:	4a67      	ldr	r2, [pc, #412]	; (8006f8c <__ieee754_pow+0x9a0>)
 8006df0:	4b67      	ldr	r3, [pc, #412]	; (8006f90 <__ieee754_pow+0x9a4>)
 8006df2:	f7fb f8d7 	bl	8001fa4 <__aeabi_dmul>
 8006df6:	4a67      	ldr	r2, [pc, #412]	; (8006f94 <__ieee754_pow+0x9a8>)
 8006df8:	0004      	movs	r4, r0
 8006dfa:	000d      	movs	r5, r1
 8006dfc:	4b66      	ldr	r3, [pc, #408]	; (8006f98 <__ieee754_pow+0x9ac>)
 8006dfe:	0030      	movs	r0, r6
 8006e00:	0039      	movs	r1, r7
 8006e02:	f7fb f8cf 	bl	8001fa4 <__aeabi_dmul>
 8006e06:	0002      	movs	r2, r0
 8006e08:	000b      	movs	r3, r1
 8006e0a:	0020      	movs	r0, r4
 8006e0c:	0029      	movs	r1, r5
 8006e0e:	f7fa f9a3 	bl	8001158 <__aeabi_dadd>
 8006e12:	0004      	movs	r4, r0
 8006e14:	000d      	movs	r5, r1
 8006e16:	0002      	movs	r2, r0
 8006e18:	000b      	movs	r3, r1
 8006e1a:	9808      	ldr	r0, [sp, #32]
 8006e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e1e:	f7fa f99b 	bl	8001158 <__aeabi_dadd>
 8006e22:	9a08      	ldr	r2, [sp, #32]
 8006e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e26:	0006      	movs	r6, r0
 8006e28:	000f      	movs	r7, r1
 8006e2a:	f7fb fb2d 	bl	8002488 <__aeabi_dsub>
 8006e2e:	0002      	movs	r2, r0
 8006e30:	000b      	movs	r3, r1
 8006e32:	0020      	movs	r0, r4
 8006e34:	0029      	movs	r1, r5
 8006e36:	f7fb fb27 	bl	8002488 <__aeabi_dsub>
 8006e3a:	0032      	movs	r2, r6
 8006e3c:	9004      	str	r0, [sp, #16]
 8006e3e:	9105      	str	r1, [sp, #20]
 8006e40:	003b      	movs	r3, r7
 8006e42:	0030      	movs	r0, r6
 8006e44:	0039      	movs	r1, r7
 8006e46:	f7fb f8ad 	bl	8001fa4 <__aeabi_dmul>
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	000d      	movs	r5, r1
 8006e4e:	4a53      	ldr	r2, [pc, #332]	; (8006f9c <__ieee754_pow+0x9b0>)
 8006e50:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <__ieee754_pow+0x9b4>)
 8006e52:	f7fb f8a7 	bl	8001fa4 <__aeabi_dmul>
 8006e56:	4a53      	ldr	r2, [pc, #332]	; (8006fa4 <__ieee754_pow+0x9b8>)
 8006e58:	4b53      	ldr	r3, [pc, #332]	; (8006fa8 <__ieee754_pow+0x9bc>)
 8006e5a:	f7fb fb15 	bl	8002488 <__aeabi_dsub>
 8006e5e:	0022      	movs	r2, r4
 8006e60:	002b      	movs	r3, r5
 8006e62:	f7fb f89f 	bl	8001fa4 <__aeabi_dmul>
 8006e66:	4a51      	ldr	r2, [pc, #324]	; (8006fac <__ieee754_pow+0x9c0>)
 8006e68:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <__ieee754_pow+0x9c4>)
 8006e6a:	f7fa f975 	bl	8001158 <__aeabi_dadd>
 8006e6e:	0022      	movs	r2, r4
 8006e70:	002b      	movs	r3, r5
 8006e72:	f7fb f897 	bl	8001fa4 <__aeabi_dmul>
 8006e76:	4a4f      	ldr	r2, [pc, #316]	; (8006fb4 <__ieee754_pow+0x9c8>)
 8006e78:	4b4f      	ldr	r3, [pc, #316]	; (8006fb8 <__ieee754_pow+0x9cc>)
 8006e7a:	f7fb fb05 	bl	8002488 <__aeabi_dsub>
 8006e7e:	0022      	movs	r2, r4
 8006e80:	002b      	movs	r3, r5
 8006e82:	f7fb f88f 	bl	8001fa4 <__aeabi_dmul>
 8006e86:	4a4d      	ldr	r2, [pc, #308]	; (8006fbc <__ieee754_pow+0x9d0>)
 8006e88:	4b4d      	ldr	r3, [pc, #308]	; (8006fc0 <__ieee754_pow+0x9d4>)
 8006e8a:	f7fa f965 	bl	8001158 <__aeabi_dadd>
 8006e8e:	0022      	movs	r2, r4
 8006e90:	002b      	movs	r3, r5
 8006e92:	f7fb f887 	bl	8001fa4 <__aeabi_dmul>
 8006e96:	0002      	movs	r2, r0
 8006e98:	000b      	movs	r3, r1
 8006e9a:	0030      	movs	r0, r6
 8006e9c:	0039      	movs	r1, r7
 8006e9e:	f7fb faf3 	bl	8002488 <__aeabi_dsub>
 8006ea2:	0004      	movs	r4, r0
 8006ea4:	000d      	movs	r5, r1
 8006ea6:	0002      	movs	r2, r0
 8006ea8:	000b      	movs	r3, r1
 8006eaa:	0030      	movs	r0, r6
 8006eac:	0039      	movs	r1, r7
 8006eae:	f7fb f879 	bl	8001fa4 <__aeabi_dmul>
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	9006      	str	r0, [sp, #24]
 8006eb6:	9107      	str	r1, [sp, #28]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	05db      	lsls	r3, r3, #23
 8006ebc:	0020      	movs	r0, r4
 8006ebe:	0029      	movs	r1, r5
 8006ec0:	f7fb fae2 	bl	8002488 <__aeabi_dsub>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	000b      	movs	r3, r1
 8006ec8:	9806      	ldr	r0, [sp, #24]
 8006eca:	9907      	ldr	r1, [sp, #28]
 8006ecc:	f7fa fc60 	bl	8001790 <__aeabi_ddiv>
 8006ed0:	9a04      	ldr	r2, [sp, #16]
 8006ed2:	9b05      	ldr	r3, [sp, #20]
 8006ed4:	0004      	movs	r4, r0
 8006ed6:	000d      	movs	r5, r1
 8006ed8:	0030      	movs	r0, r6
 8006eda:	0039      	movs	r1, r7
 8006edc:	f7fb f862 	bl	8001fa4 <__aeabi_dmul>
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	9b05      	ldr	r3, [sp, #20]
 8006ee4:	f7fa f938 	bl	8001158 <__aeabi_dadd>
 8006ee8:	0002      	movs	r2, r0
 8006eea:	000b      	movs	r3, r1
 8006eec:	0020      	movs	r0, r4
 8006eee:	0029      	movs	r1, r5
 8006ef0:	f7fb faca 	bl	8002488 <__aeabi_dsub>
 8006ef4:	0032      	movs	r2, r6
 8006ef6:	003b      	movs	r3, r7
 8006ef8:	f7fb fac6 	bl	8002488 <__aeabi_dsub>
 8006efc:	0002      	movs	r2, r0
 8006efe:	000b      	movs	r3, r1
 8006f00:	2000      	movs	r0, #0
 8006f02:	4930      	ldr	r1, [pc, #192]	; (8006fc4 <__ieee754_pow+0x9d8>)
 8006f04:	f7fb fac0 	bl	8002488 <__aeabi_dsub>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	051b      	lsls	r3, r3, #20
 8006f0c:	185b      	adds	r3, r3, r1
 8006f0e:	151a      	asrs	r2, r3, #20
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	dc26      	bgt.n	8006f62 <__ieee754_pow+0x976>
 8006f14:	9a02      	ldr	r2, [sp, #8]
 8006f16:	f000 f9ad 	bl	8007274 <scalbn>
 8006f1a:	9a00      	ldr	r2, [sp, #0]
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	f7ff fc04 	bl	800672a <__ieee754_pow+0x13e>
 8006f22:	4a29      	ldr	r2, [pc, #164]	; (8006fc8 <__ieee754_pow+0x9dc>)
 8006f24:	004b      	lsls	r3, r1, #1
 8006f26:	085b      	lsrs	r3, r3, #1
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	dc00      	bgt.n	8006f2e <__ieee754_pow+0x942>
 8006f2c:	e717      	b.n	8006d5e <__ieee754_pow+0x772>
 8006f2e:	4b27      	ldr	r3, [pc, #156]	; (8006fcc <__ieee754_pow+0x9e0>)
 8006f30:	18cb      	adds	r3, r1, r3
 8006f32:	4303      	orrs	r3, r0
 8006f34:	d009      	beq.n	8006f4a <__ieee754_pow+0x95e>
 8006f36:	9800      	ldr	r0, [sp, #0]
 8006f38:	9901      	ldr	r1, [sp, #4]
 8006f3a:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <__ieee754_pow+0x9e4>)
 8006f3c:	4b25      	ldr	r3, [pc, #148]	; (8006fd4 <__ieee754_pow+0x9e8>)
 8006f3e:	f7fb f831 	bl	8001fa4 <__aeabi_dmul>
 8006f42:	4a23      	ldr	r2, [pc, #140]	; (8006fd0 <__ieee754_pow+0x9e4>)
 8006f44:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <__ieee754_pow+0x9e8>)
 8006f46:	f7ff fbf0 	bl	800672a <__ieee754_pow+0x13e>
 8006f4a:	0032      	movs	r2, r6
 8006f4c:	003b      	movs	r3, r7
 8006f4e:	f7fb fa9b 	bl	8002488 <__aeabi_dsub>
 8006f52:	9a06      	ldr	r2, [sp, #24]
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	f7f9 f997 	bl	8000288 <__aeabi_dcmpge>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d100      	bne.n	8006f60 <__ieee754_pow+0x974>
 8006f5e:	e6fe      	b.n	8006d5e <__ieee754_pow+0x772>
 8006f60:	e7e9      	b.n	8006f36 <__ieee754_pow+0x94a>
 8006f62:	0019      	movs	r1, r3
 8006f64:	e7d9      	b.n	8006f1a <__ieee754_pow+0x92e>
 8006f66:	2300      	movs	r3, #0
 8006f68:	4c16      	ldr	r4, [pc, #88]	; (8006fc4 <__ieee754_pow+0x9d8>)
 8006f6a:	f7ff fba1 	bl	80066b0 <__ieee754_pow+0xc4>
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	652b82fe 	.word	0x652b82fe
 8006f74:	3c971547 	.word	0x3c971547
 8006f78:	3fe00000 	.word	0x3fe00000
 8006f7c:	fffffc02 	.word	0xfffffc02
 8006f80:	fffffc01 	.word	0xfffffc01
 8006f84:	000fffff 	.word	0x000fffff
 8006f88:	3fe62e43 	.word	0x3fe62e43
 8006f8c:	fefa39ef 	.word	0xfefa39ef
 8006f90:	3fe62e42 	.word	0x3fe62e42
 8006f94:	0ca86c39 	.word	0x0ca86c39
 8006f98:	be205c61 	.word	0xbe205c61
 8006f9c:	72bea4d0 	.word	0x72bea4d0
 8006fa0:	3e663769 	.word	0x3e663769
 8006fa4:	c5d26bf1 	.word	0xc5d26bf1
 8006fa8:	3ebbbd41 	.word	0x3ebbbd41
 8006fac:	af25de2c 	.word	0xaf25de2c
 8006fb0:	3f11566a 	.word	0x3f11566a
 8006fb4:	16bebd93 	.word	0x16bebd93
 8006fb8:	3f66c16c 	.word	0x3f66c16c
 8006fbc:	5555553e 	.word	0x5555553e
 8006fc0:	3fc55555 	.word	0x3fc55555
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	4090cbff 	.word	0x4090cbff
 8006fcc:	3f6f3400 	.word	0x3f6f3400
 8006fd0:	c2f8f359 	.word	0xc2f8f359
 8006fd4:	01a56e1f 	.word	0x01a56e1f

08006fd8 <__ieee754_sqrt>:
 8006fd8:	4b55      	ldr	r3, [pc, #340]	; (8007130 <__ieee754_sqrt+0x158>)
 8006fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fdc:	001a      	movs	r2, r3
 8006fde:	0005      	movs	r5, r0
 8006fe0:	000c      	movs	r4, r1
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d10f      	bne.n	8007008 <__ieee754_sqrt+0x30>
 8006fe8:	0002      	movs	r2, r0
 8006fea:	000b      	movs	r3, r1
 8006fec:	f7fa ffda 	bl	8001fa4 <__aeabi_dmul>
 8006ff0:	0002      	movs	r2, r0
 8006ff2:	000b      	movs	r3, r1
 8006ff4:	0028      	movs	r0, r5
 8006ff6:	0021      	movs	r1, r4
 8006ff8:	f7fa f8ae 	bl	8001158 <__aeabi_dadd>
 8006ffc:	0005      	movs	r5, r0
 8006ffe:	000c      	movs	r4, r1
 8007000:	0028      	movs	r0, r5
 8007002:	0021      	movs	r1, r4
 8007004:	b003      	add	sp, #12
 8007006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007008:	0002      	movs	r2, r0
 800700a:	2900      	cmp	r1, #0
 800700c:	dc10      	bgt.n	8007030 <__ieee754_sqrt+0x58>
 800700e:	004b      	lsls	r3, r1, #1
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	4303      	orrs	r3, r0
 8007014:	d0f4      	beq.n	8007000 <__ieee754_sqrt+0x28>
 8007016:	2000      	movs	r0, #0
 8007018:	4281      	cmp	r1, r0
 800701a:	d100      	bne.n	800701e <__ieee754_sqrt+0x46>
 800701c:	e07f      	b.n	800711e <__ieee754_sqrt+0x146>
 800701e:	000b      	movs	r3, r1
 8007020:	0028      	movs	r0, r5
 8007022:	f7fb fa31 	bl	8002488 <__aeabi_dsub>
 8007026:	0002      	movs	r2, r0
 8007028:	000b      	movs	r3, r1
 800702a:	f7fa fbb1 	bl	8001790 <__aeabi_ddiv>
 800702e:	e7e5      	b.n	8006ffc <__ieee754_sqrt+0x24>
 8007030:	1508      	asrs	r0, r1, #20
 8007032:	d074      	beq.n	800711e <__ieee754_sqrt+0x146>
 8007034:	4b3f      	ldr	r3, [pc, #252]	; (8007134 <__ieee754_sqrt+0x15c>)
 8007036:	0309      	lsls	r1, r1, #12
 8007038:	18c0      	adds	r0, r0, r3
 800703a:	2380      	movs	r3, #128	; 0x80
 800703c:	0b09      	lsrs	r1, r1, #12
 800703e:	035b      	lsls	r3, r3, #13
 8007040:	4319      	orrs	r1, r3
 8007042:	07c3      	lsls	r3, r0, #31
 8007044:	d503      	bpl.n	800704e <__ieee754_sqrt+0x76>
 8007046:	0fd3      	lsrs	r3, r2, #31
 8007048:	0049      	lsls	r1, r1, #1
 800704a:	18c9      	adds	r1, r1, r3
 800704c:	0052      	lsls	r2, r2, #1
 800704e:	2400      	movs	r4, #0
 8007050:	1043      	asrs	r3, r0, #1
 8007052:	0049      	lsls	r1, r1, #1
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	2580      	movs	r5, #128	; 0x80
 8007058:	0fd3      	lsrs	r3, r2, #31
 800705a:	18cb      	adds	r3, r1, r3
 800705c:	0020      	movs	r0, r4
 800705e:	2116      	movs	r1, #22
 8007060:	0052      	lsls	r2, r2, #1
 8007062:	03ad      	lsls	r5, r5, #14
 8007064:	1946      	adds	r6, r0, r5
 8007066:	429e      	cmp	r6, r3
 8007068:	dc02      	bgt.n	8007070 <__ieee754_sqrt+0x98>
 800706a:	1970      	adds	r0, r6, r5
 800706c:	1b9b      	subs	r3, r3, r6
 800706e:	1964      	adds	r4, r4, r5
 8007070:	0fd6      	lsrs	r6, r2, #31
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	3901      	subs	r1, #1
 8007076:	199b      	adds	r3, r3, r6
 8007078:	0052      	lsls	r2, r2, #1
 800707a:	086d      	lsrs	r5, r5, #1
 800707c:	2900      	cmp	r1, #0
 800707e:	d1f1      	bne.n	8007064 <__ieee754_sqrt+0x8c>
 8007080:	2520      	movs	r5, #32
 8007082:	2680      	movs	r6, #128	; 0x80
 8007084:	46ac      	mov	ip, r5
 8007086:	9100      	str	r1, [sp, #0]
 8007088:	0636      	lsls	r6, r6, #24
 800708a:	9d00      	ldr	r5, [sp, #0]
 800708c:	1977      	adds	r7, r6, r5
 800708e:	4283      	cmp	r3, r0
 8007090:	dc02      	bgt.n	8007098 <__ieee754_sqrt+0xc0>
 8007092:	d112      	bne.n	80070ba <__ieee754_sqrt+0xe2>
 8007094:	4297      	cmp	r7, r2
 8007096:	d810      	bhi.n	80070ba <__ieee754_sqrt+0xe2>
 8007098:	19bd      	adds	r5, r7, r6
 800709a:	9500      	str	r5, [sp, #0]
 800709c:	0005      	movs	r5, r0
 800709e:	2f00      	cmp	r7, #0
 80070a0:	da03      	bge.n	80070aa <__ieee754_sqrt+0xd2>
 80070a2:	9d00      	ldr	r5, [sp, #0]
 80070a4:	43ed      	mvns	r5, r5
 80070a6:	0fed      	lsrs	r5, r5, #31
 80070a8:	1945      	adds	r5, r0, r5
 80070aa:	1a1b      	subs	r3, r3, r0
 80070ac:	42ba      	cmp	r2, r7
 80070ae:	4180      	sbcs	r0, r0
 80070b0:	4240      	negs	r0, r0
 80070b2:	1a1b      	subs	r3, r3, r0
 80070b4:	0028      	movs	r0, r5
 80070b6:	1bd2      	subs	r2, r2, r7
 80070b8:	1989      	adds	r1, r1, r6
 80070ba:	0fd5      	lsrs	r5, r2, #31
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	18eb      	adds	r3, r5, r3
 80070c0:	2501      	movs	r5, #1
 80070c2:	426d      	negs	r5, r5
 80070c4:	44ac      	add	ip, r5
 80070c6:	4665      	mov	r5, ip
 80070c8:	0052      	lsls	r2, r2, #1
 80070ca:	0876      	lsrs	r6, r6, #1
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	d1dc      	bne.n	800708a <__ieee754_sqrt+0xb2>
 80070d0:	4313      	orrs	r3, r2
 80070d2:	d003      	beq.n	80070dc <__ieee754_sqrt+0x104>
 80070d4:	1c4b      	adds	r3, r1, #1
 80070d6:	d127      	bne.n	8007128 <__ieee754_sqrt+0x150>
 80070d8:	4661      	mov	r1, ip
 80070da:	3401      	adds	r4, #1
 80070dc:	4b16      	ldr	r3, [pc, #88]	; (8007138 <__ieee754_sqrt+0x160>)
 80070de:	1060      	asrs	r0, r4, #1
 80070e0:	18c0      	adds	r0, r0, r3
 80070e2:	0849      	lsrs	r1, r1, #1
 80070e4:	07e3      	lsls	r3, r4, #31
 80070e6:	d502      	bpl.n	80070ee <__ieee754_sqrt+0x116>
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	061b      	lsls	r3, r3, #24
 80070ec:	4319      	orrs	r1, r3
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	000d      	movs	r5, r1
 80070f2:	051c      	lsls	r4, r3, #20
 80070f4:	1823      	adds	r3, r4, r0
 80070f6:	001c      	movs	r4, r3
 80070f8:	e782      	b.n	8007000 <__ieee754_sqrt+0x28>
 80070fa:	0ad1      	lsrs	r1, r2, #11
 80070fc:	3b15      	subs	r3, #21
 80070fe:	0552      	lsls	r2, r2, #21
 8007100:	2900      	cmp	r1, #0
 8007102:	d0fa      	beq.n	80070fa <__ieee754_sqrt+0x122>
 8007104:	2480      	movs	r4, #128	; 0x80
 8007106:	0364      	lsls	r4, r4, #13
 8007108:	4221      	tst	r1, r4
 800710a:	d00a      	beq.n	8007122 <__ieee754_sqrt+0x14a>
 800710c:	2420      	movs	r4, #32
 800710e:	0016      	movs	r6, r2
 8007110:	1a24      	subs	r4, r4, r0
 8007112:	40e6      	lsrs	r6, r4
 8007114:	1e45      	subs	r5, r0, #1
 8007116:	4082      	lsls	r2, r0
 8007118:	4331      	orrs	r1, r6
 800711a:	1b58      	subs	r0, r3, r5
 800711c:	e78a      	b.n	8007034 <__ieee754_sqrt+0x5c>
 800711e:	2300      	movs	r3, #0
 8007120:	e7ee      	b.n	8007100 <__ieee754_sqrt+0x128>
 8007122:	0049      	lsls	r1, r1, #1
 8007124:	3001      	adds	r0, #1
 8007126:	e7ef      	b.n	8007108 <__ieee754_sqrt+0x130>
 8007128:	2301      	movs	r3, #1
 800712a:	3101      	adds	r1, #1
 800712c:	4399      	bics	r1, r3
 800712e:	e7d5      	b.n	80070dc <__ieee754_sqrt+0x104>
 8007130:	7ff00000 	.word	0x7ff00000
 8007134:	fffffc01 	.word	0xfffffc01
 8007138:	3fe00000 	.word	0x3fe00000

0800713c <fabs>:
 800713c:	0049      	lsls	r1, r1, #1
 800713e:	084b      	lsrs	r3, r1, #1
 8007140:	0019      	movs	r1, r3
 8007142:	4770      	bx	lr

08007144 <finite>:
 8007144:	0048      	lsls	r0, r1, #1
 8007146:	4b02      	ldr	r3, [pc, #8]	; (8007150 <finite+0xc>)
 8007148:	0840      	lsrs	r0, r0, #1
 800714a:	18c0      	adds	r0, r0, r3
 800714c:	0fc0      	lsrs	r0, r0, #31
 800714e:	4770      	bx	lr
 8007150:	80100000 	.word	0x80100000

08007154 <matherr>:
 8007154:	2000      	movs	r0, #0
 8007156:	4770      	bx	lr

08007158 <nan>:
 8007158:	2000      	movs	r0, #0
 800715a:	4901      	ldr	r1, [pc, #4]	; (8007160 <nan+0x8>)
 800715c:	4770      	bx	lr
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	7ff80000 	.word	0x7ff80000

08007164 <rint>:
 8007164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007166:	004a      	lsls	r2, r1, #1
 8007168:	4e3e      	ldr	r6, [pc, #248]	; (8007264 <rint+0x100>)
 800716a:	0d52      	lsrs	r2, r2, #21
 800716c:	b085      	sub	sp, #20
 800716e:	1996      	adds	r6, r2, r6
 8007170:	000d      	movs	r5, r1
 8007172:	9101      	str	r1, [sp, #4]
 8007174:	0003      	movs	r3, r0
 8007176:	0fcc      	lsrs	r4, r1, #31
 8007178:	2e13      	cmp	r6, #19
 800717a:	dc57      	bgt.n	800722c <rint+0xc8>
 800717c:	2e00      	cmp	r6, #0
 800717e:	da2a      	bge.n	80071d6 <rint+0x72>
 8007180:	004a      	lsls	r2, r1, #1
 8007182:	0852      	lsrs	r2, r2, #1
 8007184:	4302      	orrs	r2, r0
 8007186:	d024      	beq.n	80071d2 <rint+0x6e>
 8007188:	030a      	lsls	r2, r1, #12
 800718a:	0b12      	lsrs	r2, r2, #12
 800718c:	4302      	orrs	r2, r0
 800718e:	4253      	negs	r3, r2
 8007190:	4313      	orrs	r3, r2
 8007192:	2280      	movs	r2, #128	; 0x80
 8007194:	0c4d      	lsrs	r5, r1, #17
 8007196:	0312      	lsls	r2, r2, #12
 8007198:	0b1b      	lsrs	r3, r3, #12
 800719a:	4013      	ands	r3, r2
 800719c:	046d      	lsls	r5, r5, #17
 800719e:	432b      	orrs	r3, r5
 80071a0:	0019      	movs	r1, r3
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <rint+0x104>)
 80071a4:	00e2      	lsls	r2, r4, #3
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	681e      	ldr	r6, [r3, #0]
 80071aa:	685f      	ldr	r7, [r3, #4]
 80071ac:	0002      	movs	r2, r0
 80071ae:	000b      	movs	r3, r1
 80071b0:	0030      	movs	r0, r6
 80071b2:	0039      	movs	r1, r7
 80071b4:	f7f9 ffd0 	bl	8001158 <__aeabi_dadd>
 80071b8:	9002      	str	r0, [sp, #8]
 80071ba:	9103      	str	r1, [sp, #12]
 80071bc:	9802      	ldr	r0, [sp, #8]
 80071be:	9903      	ldr	r1, [sp, #12]
 80071c0:	003b      	movs	r3, r7
 80071c2:	0032      	movs	r2, r6
 80071c4:	f7fb f960 	bl	8002488 <__aeabi_dsub>
 80071c8:	004b      	lsls	r3, r1, #1
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	07e4      	lsls	r4, r4, #31
 80071ce:	4323      	orrs	r3, r4
 80071d0:	0019      	movs	r1, r3
 80071d2:	b005      	add	sp, #20
 80071d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071d6:	4a25      	ldr	r2, [pc, #148]	; (800726c <rint+0x108>)
 80071d8:	4132      	asrs	r2, r6
 80071da:	0017      	movs	r7, r2
 80071dc:	400f      	ands	r7, r1
 80071de:	4307      	orrs	r7, r0
 80071e0:	d0f7      	beq.n	80071d2 <rint+0x6e>
 80071e2:	0852      	lsrs	r2, r2, #1
 80071e4:	0011      	movs	r1, r2
 80071e6:	4029      	ands	r1, r5
 80071e8:	430b      	orrs	r3, r1
 80071ea:	d00a      	beq.n	8007202 <rint+0x9e>
 80071ec:	2300      	movs	r3, #0
 80071ee:	2e13      	cmp	r6, #19
 80071f0:	d101      	bne.n	80071f6 <rint+0x92>
 80071f2:	2380      	movs	r3, #128	; 0x80
 80071f4:	061b      	lsls	r3, r3, #24
 80071f6:	2780      	movs	r7, #128	; 0x80
 80071f8:	02ff      	lsls	r7, r7, #11
 80071fa:	4137      	asrs	r7, r6
 80071fc:	4395      	bics	r5, r2
 80071fe:	432f      	orrs	r7, r5
 8007200:	9701      	str	r7, [sp, #4]
 8007202:	9901      	ldr	r1, [sp, #4]
 8007204:	001a      	movs	r2, r3
 8007206:	000b      	movs	r3, r1
 8007208:	4917      	ldr	r1, [pc, #92]	; (8007268 <rint+0x104>)
 800720a:	00e4      	lsls	r4, r4, #3
 800720c:	190c      	adds	r4, r1, r4
 800720e:	6865      	ldr	r5, [r4, #4]
 8007210:	6824      	ldr	r4, [r4, #0]
 8007212:	0020      	movs	r0, r4
 8007214:	0029      	movs	r1, r5
 8007216:	f7f9 ff9f 	bl	8001158 <__aeabi_dadd>
 800721a:	9002      	str	r0, [sp, #8]
 800721c:	9103      	str	r1, [sp, #12]
 800721e:	9802      	ldr	r0, [sp, #8]
 8007220:	9903      	ldr	r1, [sp, #12]
 8007222:	0022      	movs	r2, r4
 8007224:	002b      	movs	r3, r5
 8007226:	f7fb f92f 	bl	8002488 <__aeabi_dsub>
 800722a:	e7d2      	b.n	80071d2 <rint+0x6e>
 800722c:	2e33      	cmp	r6, #51	; 0x33
 800722e:	dd08      	ble.n	8007242 <rint+0xde>
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	429e      	cmp	r6, r3
 8007236:	d1cc      	bne.n	80071d2 <rint+0x6e>
 8007238:	0002      	movs	r2, r0
 800723a:	000b      	movs	r3, r1
 800723c:	f7f9 ff8c 	bl	8001158 <__aeabi_dadd>
 8007240:	e7c7      	b.n	80071d2 <rint+0x6e>
 8007242:	2601      	movs	r6, #1
 8007244:	4d0a      	ldr	r5, [pc, #40]	; (8007270 <rint+0x10c>)
 8007246:	4276      	negs	r6, r6
 8007248:	1952      	adds	r2, r2, r5
 800724a:	40d6      	lsrs	r6, r2
 800724c:	4206      	tst	r6, r0
 800724e:	d0c0      	beq.n	80071d2 <rint+0x6e>
 8007250:	0876      	lsrs	r6, r6, #1
 8007252:	4206      	tst	r6, r0
 8007254:	d0d5      	beq.n	8007202 <rint+0x9e>
 8007256:	2180      	movs	r1, #128	; 0x80
 8007258:	05c9      	lsls	r1, r1, #23
 800725a:	4111      	asrs	r1, r2
 800725c:	43b3      	bics	r3, r6
 800725e:	430b      	orrs	r3, r1
 8007260:	e7cf      	b.n	8007202 <rint+0x9e>
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	fffffc01 	.word	0xfffffc01
 8007268:	08007620 	.word	0x08007620
 800726c:	000fffff 	.word	0x000fffff
 8007270:	fffffbed 	.word	0xfffffbed

08007274 <scalbn>:
 8007274:	004b      	lsls	r3, r1, #1
 8007276:	b570      	push	{r4, r5, r6, lr}
 8007278:	0d5b      	lsrs	r3, r3, #21
 800727a:	0014      	movs	r4, r2
 800727c:	000a      	movs	r2, r1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10d      	bne.n	800729e <scalbn+0x2a>
 8007282:	004b      	lsls	r3, r1, #1
 8007284:	085b      	lsrs	r3, r3, #1
 8007286:	4303      	orrs	r3, r0
 8007288:	d010      	beq.n	80072ac <scalbn+0x38>
 800728a:	4b21      	ldr	r3, [pc, #132]	; (8007310 <scalbn+0x9c>)
 800728c:	2200      	movs	r2, #0
 800728e:	f7fa fe89 	bl	8001fa4 <__aeabi_dmul>
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <scalbn+0xa0>)
 8007294:	429c      	cmp	r4, r3
 8007296:	da0a      	bge.n	80072ae <scalbn+0x3a>
 8007298:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <scalbn+0xa4>)
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <scalbn+0xa8>)
 800729c:	e017      	b.n	80072ce <scalbn+0x5a>
 800729e:	4d20      	ldr	r5, [pc, #128]	; (8007320 <scalbn+0xac>)
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	d108      	bne.n	80072b6 <scalbn+0x42>
 80072a4:	0002      	movs	r2, r0
 80072a6:	000b      	movs	r3, r1
 80072a8:	f7f9 ff56 	bl	8001158 <__aeabi_dadd>
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	000a      	movs	r2, r1
 80072b0:	004b      	lsls	r3, r1, #1
 80072b2:	0d5b      	lsrs	r3, r3, #21
 80072b4:	3b36      	subs	r3, #54	; 0x36
 80072b6:	4d1b      	ldr	r5, [pc, #108]	; (8007324 <scalbn+0xb0>)
 80072b8:	18e3      	adds	r3, r4, r3
 80072ba:	42ab      	cmp	r3, r5
 80072bc:	dd0a      	ble.n	80072d4 <scalbn+0x60>
 80072be:	0002      	movs	r2, r0
 80072c0:	000b      	movs	r3, r1
 80072c2:	4819      	ldr	r0, [pc, #100]	; (8007328 <scalbn+0xb4>)
 80072c4:	4919      	ldr	r1, [pc, #100]	; (800732c <scalbn+0xb8>)
 80072c6:	f000 f839 	bl	800733c <copysign>
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <scalbn+0xb4>)
 80072cc:	4b17      	ldr	r3, [pc, #92]	; (800732c <scalbn+0xb8>)
 80072ce:	f7fa fe69 	bl	8001fa4 <__aeabi_dmul>
 80072d2:	e7eb      	b.n	80072ac <scalbn+0x38>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dd05      	ble.n	80072e4 <scalbn+0x70>
 80072d8:	4c15      	ldr	r4, [pc, #84]	; (8007330 <scalbn+0xbc>)
 80072da:	051b      	lsls	r3, r3, #20
 80072dc:	4022      	ands	r2, r4
 80072de:	431a      	orrs	r2, r3
 80072e0:	0011      	movs	r1, r2
 80072e2:	e7e3      	b.n	80072ac <scalbn+0x38>
 80072e4:	001d      	movs	r5, r3
 80072e6:	3535      	adds	r5, #53	; 0x35
 80072e8:	da09      	bge.n	80072fe <scalbn+0x8a>
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <scalbn+0xc0>)
 80072ec:	0002      	movs	r2, r0
 80072ee:	429c      	cmp	r4, r3
 80072f0:	dce6      	bgt.n	80072c0 <scalbn+0x4c>
 80072f2:	000b      	movs	r3, r1
 80072f4:	4808      	ldr	r0, [pc, #32]	; (8007318 <scalbn+0xa4>)
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <scalbn+0xa8>)
 80072f8:	f000 f820 	bl	800733c <copysign>
 80072fc:	e7cc      	b.n	8007298 <scalbn+0x24>
 80072fe:	4c0c      	ldr	r4, [pc, #48]	; (8007330 <scalbn+0xbc>)
 8007300:	3336      	adds	r3, #54	; 0x36
 8007302:	4022      	ands	r2, r4
 8007304:	051b      	lsls	r3, r3, #20
 8007306:	4313      	orrs	r3, r2
 8007308:	0019      	movs	r1, r3
 800730a:	2200      	movs	r2, #0
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <scalbn+0xc4>)
 800730e:	e7de      	b.n	80072ce <scalbn+0x5a>
 8007310:	43500000 	.word	0x43500000
 8007314:	ffff3cb0 	.word	0xffff3cb0
 8007318:	c2f8f359 	.word	0xc2f8f359
 800731c:	01a56e1f 	.word	0x01a56e1f
 8007320:	000007ff 	.word	0x000007ff
 8007324:	000007fe 	.word	0x000007fe
 8007328:	8800759c 	.word	0x8800759c
 800732c:	7e37e43c 	.word	0x7e37e43c
 8007330:	800fffff 	.word	0x800fffff
 8007334:	0000c350 	.word	0x0000c350
 8007338:	3c900000 	.word	0x3c900000

0800733c <copysign>:
 800733c:	b530      	push	{r4, r5, lr}
 800733e:	004a      	lsls	r2, r1, #1
 8007340:	0fdb      	lsrs	r3, r3, #31
 8007342:	07db      	lsls	r3, r3, #31
 8007344:	0852      	lsrs	r2, r2, #1
 8007346:	431a      	orrs	r2, r3
 8007348:	0011      	movs	r1, r2
 800734a:	bd30      	pop	{r4, r5, pc}

0800734c <_init>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr

08007358 <_fini>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800735e:	bc08      	pop	{r3}
 8007360:	469e      	mov	lr, r3
 8007362:	4770      	bx	lr
