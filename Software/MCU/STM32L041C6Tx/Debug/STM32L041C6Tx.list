
STM32L041C6Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006d20  08006d20  00016d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f78  08006f78  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08006f78  08006f78  00016f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f80  08006f80  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001f0  08007178  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08007178  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ef1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000354c  00000000  00000000  00037109  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008fda  00000000  00000000  0003a655  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c70  00000000  00000000  00043630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001018  00000000  00000000  000442a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001397f  00000000  00000000  000452b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f788  00000000  00000000  00058c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007140c  00000000  00000000  000683bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d97cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e1c  00000000  00000000  000d9848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f0 	.word	0x200001f0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d04 	.word	0x08006d04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f4 	.word	0x200001f4
 8000104:	08006d04 	.word	0x08006d04

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_cdrcmple>:
 8000248:	4684      	mov	ip, r0
 800024a:	1c10      	adds	r0, r2, #0
 800024c:	4662      	mov	r2, ip
 800024e:	468c      	mov	ip, r1
 8000250:	1c19      	adds	r1, r3, #0
 8000252:	4663      	mov	r3, ip
 8000254:	e000      	b.n	8000258 <__aeabi_cdcmpeq>
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_cdcmpeq>:
 8000258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800025a:	f001 fe4f 	bl	8001efc <__ledf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	d401      	bmi.n	8000266 <__aeabi_cdcmpeq+0xe>
 8000262:	2100      	movs	r1, #0
 8000264:	42c8      	cmn	r0, r1
 8000266:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000268 <__aeabi_dcmpeq>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f001 fda7 	bl	8001dbc <__eqdf2>
 800026e:	4240      	negs	r0, r0
 8000270:	3001      	adds	r0, #1
 8000272:	bd10      	pop	{r4, pc}

08000274 <__aeabi_dcmplt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fe41 	bl	8001efc <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	db01      	blt.n	8000282 <__aeabi_dcmplt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmple>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fe37 	bl	8001efc <__ledf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dd01      	ble.n	8000296 <__aeabi_dcmple+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpgt>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fdc9 	bl	8001e34 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dc01      	bgt.n	80002aa <__aeabi_dcmpgt+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_dcmpge>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	f001 fdbf 	bl	8001e34 <__gedf2>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	da01      	bge.n	80002be <__aeabi_dcmpge+0xe>
 80002ba:	2000      	movs	r0, #0
 80002bc:	bd10      	pop	{r4, pc}
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <__aeabi_cfrcmple>:
 80002c4:	4684      	mov	ip, r0
 80002c6:	1c08      	adds	r0, r1, #0
 80002c8:	4661      	mov	r1, ip
 80002ca:	e7ff      	b.n	80002cc <__aeabi_cfcmpeq>

080002cc <__aeabi_cfcmpeq>:
 80002cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ce:	f000 fb67 	bl	80009a0 <__lesf2>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d401      	bmi.n	80002da <__aeabi_cfcmpeq+0xe>
 80002d6:	2100      	movs	r1, #0
 80002d8:	42c8      	cmn	r0, r1
 80002da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002dc <__aeabi_fcmpeq>:
 80002dc:	b510      	push	{r4, lr}
 80002de:	f000 fae9 	bl	80008b4 <__eqsf2>
 80002e2:	4240      	negs	r0, r0
 80002e4:	3001      	adds	r0, #1
 80002e6:	bd10      	pop	{r4, pc}

080002e8 <__aeabi_fcmplt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fb59 	bl	80009a0 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	db01      	blt.n	80002f6 <__aeabi_fcmplt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmple>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fb4f 	bl	80009a0 <__lesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dd01      	ble.n	800030a <__aeabi_fcmple+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpgt>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 faf7 	bl	8000904 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	dc01      	bgt.n	800031e <__aeabi_fcmpgt+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_fcmpge>:
 8000324:	b510      	push	{r4, lr}
 8000326:	f000 faed 	bl	8000904 <__gesf2>
 800032a:	2800      	cmp	r0, #0
 800032c:	da01      	bge.n	8000332 <__aeabi_fcmpge+0xe>
 800032e:	2000      	movs	r0, #0
 8000330:	bd10      	pop	{r4, pc}
 8000332:	2001      	movs	r0, #1
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			; (mov r8, r8)

08000338 <__aeabi_uldivmod>:
 8000338:	2b00      	cmp	r3, #0
 800033a:	d111      	bne.n	8000360 <__aeabi_uldivmod+0x28>
 800033c:	2a00      	cmp	r2, #0
 800033e:	d10f      	bne.n	8000360 <__aeabi_uldivmod+0x28>
 8000340:	2900      	cmp	r1, #0
 8000342:	d100      	bne.n	8000346 <__aeabi_uldivmod+0xe>
 8000344:	2800      	cmp	r0, #0
 8000346:	d002      	beq.n	800034e <__aeabi_uldivmod+0x16>
 8000348:	2100      	movs	r1, #0
 800034a:	43c9      	mvns	r1, r1
 800034c:	1c08      	adds	r0, r1, #0
 800034e:	b407      	push	{r0, r1, r2}
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <__aeabi_uldivmod+0x24>)
 8000352:	a102      	add	r1, pc, #8	; (adr r1, 800035c <__aeabi_uldivmod+0x24>)
 8000354:	1840      	adds	r0, r0, r1
 8000356:	9002      	str	r0, [sp, #8]
 8000358:	bd03      	pop	{r0, r1, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	fffffee9 	.word	0xfffffee9
 8000360:	b403      	push	{r0, r1}
 8000362:	4668      	mov	r0, sp
 8000364:	b501      	push	{r0, lr}
 8000366:	9802      	ldr	r0, [sp, #8]
 8000368:	f000 f848 	bl	80003fc <__udivmoddi4>
 800036c:	9b01      	ldr	r3, [sp, #4]
 800036e:	469e      	mov	lr, r3
 8000370:	b002      	add	sp, #8
 8000372:	bc0c      	pop	{r2, r3}
 8000374:	4770      	bx	lr
 8000376:	46c0      	nop			; (mov r8, r8)

08000378 <__aeabi_lmul>:
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	46ce      	mov	lr, r9
 800037c:	4647      	mov	r7, r8
 800037e:	0415      	lsls	r5, r2, #16
 8000380:	0c2d      	lsrs	r5, r5, #16
 8000382:	002e      	movs	r6, r5
 8000384:	b580      	push	{r7, lr}
 8000386:	0407      	lsls	r7, r0, #16
 8000388:	0c14      	lsrs	r4, r2, #16
 800038a:	0c3f      	lsrs	r7, r7, #16
 800038c:	4699      	mov	r9, r3
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	437e      	muls	r6, r7
 8000392:	435d      	muls	r5, r3
 8000394:	4367      	muls	r7, r4
 8000396:	4363      	muls	r3, r4
 8000398:	197f      	adds	r7, r7, r5
 800039a:	0c34      	lsrs	r4, r6, #16
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	469c      	mov	ip, r3
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	d903      	bls.n	80003ac <__aeabi_lmul+0x34>
 80003a4:	2380      	movs	r3, #128	; 0x80
 80003a6:	025b      	lsls	r3, r3, #9
 80003a8:	4698      	mov	r8, r3
 80003aa:	44c4      	add	ip, r8
 80003ac:	464b      	mov	r3, r9
 80003ae:	4343      	muls	r3, r0
 80003b0:	4351      	muls	r1, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	0436      	lsls	r6, r6, #16
 80003b6:	4465      	add	r5, ip
 80003b8:	0c36      	lsrs	r6, r6, #16
 80003ba:	0424      	lsls	r4, r4, #16
 80003bc:	19a4      	adds	r4, r4, r6
 80003be:	195b      	adds	r3, r3, r5
 80003c0:	1859      	adds	r1, r3, r1
 80003c2:	0020      	movs	r0, r4
 80003c4:	bc0c      	pop	{r2, r3}
 80003c6:	4690      	mov	r8, r2
 80003c8:	4699      	mov	r9, r3
 80003ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003cc <__aeabi_f2uiz>:
 80003cc:	219e      	movs	r1, #158	; 0x9e
 80003ce:	b510      	push	{r4, lr}
 80003d0:	05c9      	lsls	r1, r1, #23
 80003d2:	1c04      	adds	r4, r0, #0
 80003d4:	f7ff ffa6 	bl	8000324 <__aeabi_fcmpge>
 80003d8:	2800      	cmp	r0, #0
 80003da:	d103      	bne.n	80003e4 <__aeabi_f2uiz+0x18>
 80003dc:	1c20      	adds	r0, r4, #0
 80003de:	f000 fe25 	bl	800102c <__aeabi_f2iz>
 80003e2:	bd10      	pop	{r4, pc}
 80003e4:	219e      	movs	r1, #158	; 0x9e
 80003e6:	1c20      	adds	r0, r4, #0
 80003e8:	05c9      	lsls	r1, r1, #23
 80003ea:	f000 fc5b 	bl	8000ca4 <__aeabi_fsub>
 80003ee:	f000 fe1d 	bl	800102c <__aeabi_f2iz>
 80003f2:	2380      	movs	r3, #128	; 0x80
 80003f4:	061b      	lsls	r3, r3, #24
 80003f6:	469c      	mov	ip, r3
 80003f8:	4460      	add	r0, ip
 80003fa:	e7f2      	b.n	80003e2 <__aeabi_f2uiz+0x16>

080003fc <__udivmoddi4>:
 80003fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fe:	464f      	mov	r7, r9
 8000400:	4646      	mov	r6, r8
 8000402:	46d6      	mov	lr, sl
 8000404:	b5c0      	push	{r6, r7, lr}
 8000406:	0004      	movs	r4, r0
 8000408:	b082      	sub	sp, #8
 800040a:	000d      	movs	r5, r1
 800040c:	4691      	mov	r9, r2
 800040e:	4698      	mov	r8, r3
 8000410:	428b      	cmp	r3, r1
 8000412:	d82f      	bhi.n	8000474 <__udivmoddi4+0x78>
 8000414:	d02c      	beq.n	8000470 <__udivmoddi4+0x74>
 8000416:	4641      	mov	r1, r8
 8000418:	4648      	mov	r0, r9
 800041a:	f002 fcbb 	bl	8002d94 <__clzdi2>
 800041e:	0029      	movs	r1, r5
 8000420:	0006      	movs	r6, r0
 8000422:	0020      	movs	r0, r4
 8000424:	f002 fcb6 	bl	8002d94 <__clzdi2>
 8000428:	1a33      	subs	r3, r6, r0
 800042a:	469c      	mov	ip, r3
 800042c:	3b20      	subs	r3, #32
 800042e:	469a      	mov	sl, r3
 8000430:	d500      	bpl.n	8000434 <__udivmoddi4+0x38>
 8000432:	e076      	b.n	8000522 <__udivmoddi4+0x126>
 8000434:	464b      	mov	r3, r9
 8000436:	4652      	mov	r2, sl
 8000438:	4093      	lsls	r3, r2
 800043a:	001f      	movs	r7, r3
 800043c:	464b      	mov	r3, r9
 800043e:	4662      	mov	r2, ip
 8000440:	4093      	lsls	r3, r2
 8000442:	001e      	movs	r6, r3
 8000444:	42af      	cmp	r7, r5
 8000446:	d828      	bhi.n	800049a <__udivmoddi4+0x9e>
 8000448:	d025      	beq.n	8000496 <__udivmoddi4+0x9a>
 800044a:	4653      	mov	r3, sl
 800044c:	1ba4      	subs	r4, r4, r6
 800044e:	41bd      	sbcs	r5, r7
 8000450:	2b00      	cmp	r3, #0
 8000452:	da00      	bge.n	8000456 <__udivmoddi4+0x5a>
 8000454:	e07b      	b.n	800054e <__udivmoddi4+0x152>
 8000456:	2200      	movs	r2, #0
 8000458:	2300      	movs	r3, #0
 800045a:	9200      	str	r2, [sp, #0]
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	2301      	movs	r3, #1
 8000460:	4652      	mov	r2, sl
 8000462:	4093      	lsls	r3, r2
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	2301      	movs	r3, #1
 8000468:	4662      	mov	r2, ip
 800046a:	4093      	lsls	r3, r2
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	e018      	b.n	80004a2 <__udivmoddi4+0xa6>
 8000470:	4282      	cmp	r2, r0
 8000472:	d9d0      	bls.n	8000416 <__udivmoddi4+0x1a>
 8000474:	2200      	movs	r2, #0
 8000476:	2300      	movs	r3, #0
 8000478:	9200      	str	r2, [sp, #0]
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <__udivmoddi4+0x8a>
 8000482:	601c      	str	r4, [r3, #0]
 8000484:	605d      	str	r5, [r3, #4]
 8000486:	9800      	ldr	r0, [sp, #0]
 8000488:	9901      	ldr	r1, [sp, #4]
 800048a:	b002      	add	sp, #8
 800048c:	bc1c      	pop	{r2, r3, r4}
 800048e:	4690      	mov	r8, r2
 8000490:	4699      	mov	r9, r3
 8000492:	46a2      	mov	sl, r4
 8000494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000496:	42a3      	cmp	r3, r4
 8000498:	d9d7      	bls.n	800044a <__udivmoddi4+0x4e>
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
 800049e:	9200      	str	r2, [sp, #0]
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	4663      	mov	r3, ip
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0e9      	beq.n	800047c <__udivmoddi4+0x80>
 80004a8:	07fb      	lsls	r3, r7, #31
 80004aa:	4698      	mov	r8, r3
 80004ac:	4641      	mov	r1, r8
 80004ae:	0872      	lsrs	r2, r6, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	087b      	lsrs	r3, r7, #1
 80004b4:	4666      	mov	r6, ip
 80004b6:	e00e      	b.n	80004d6 <__udivmoddi4+0xda>
 80004b8:	42ab      	cmp	r3, r5
 80004ba:	d101      	bne.n	80004c0 <__udivmoddi4+0xc4>
 80004bc:	42a2      	cmp	r2, r4
 80004be:	d80c      	bhi.n	80004da <__udivmoddi4+0xde>
 80004c0:	1aa4      	subs	r4, r4, r2
 80004c2:	419d      	sbcs	r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	1924      	adds	r4, r4, r4
 80004c8:	416d      	adcs	r5, r5
 80004ca:	2100      	movs	r1, #0
 80004cc:	3e01      	subs	r6, #1
 80004ce:	1824      	adds	r4, r4, r0
 80004d0:	414d      	adcs	r5, r1
 80004d2:	2e00      	cmp	r6, #0
 80004d4:	d006      	beq.n	80004e4 <__udivmoddi4+0xe8>
 80004d6:	42ab      	cmp	r3, r5
 80004d8:	d9ee      	bls.n	80004b8 <__udivmoddi4+0xbc>
 80004da:	3e01      	subs	r6, #1
 80004dc:	1924      	adds	r4, r4, r4
 80004de:	416d      	adcs	r5, r5
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d1f8      	bne.n	80004d6 <__udivmoddi4+0xda>
 80004e4:	9800      	ldr	r0, [sp, #0]
 80004e6:	9901      	ldr	r1, [sp, #4]
 80004e8:	4653      	mov	r3, sl
 80004ea:	1900      	adds	r0, r0, r4
 80004ec:	4169      	adcs	r1, r5
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	db23      	blt.n	800053a <__udivmoddi4+0x13e>
 80004f2:	002b      	movs	r3, r5
 80004f4:	4652      	mov	r2, sl
 80004f6:	40d3      	lsrs	r3, r2
 80004f8:	002a      	movs	r2, r5
 80004fa:	4664      	mov	r4, ip
 80004fc:	40e2      	lsrs	r2, r4
 80004fe:	001c      	movs	r4, r3
 8000500:	4653      	mov	r3, sl
 8000502:	0015      	movs	r5, r2
 8000504:	2b00      	cmp	r3, #0
 8000506:	db2d      	blt.n	8000564 <__udivmoddi4+0x168>
 8000508:	0026      	movs	r6, r4
 800050a:	4657      	mov	r7, sl
 800050c:	40be      	lsls	r6, r7
 800050e:	0033      	movs	r3, r6
 8000510:	0026      	movs	r6, r4
 8000512:	4667      	mov	r7, ip
 8000514:	40be      	lsls	r6, r7
 8000516:	0032      	movs	r2, r6
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4199      	sbcs	r1, r3
 800051c:	9000      	str	r0, [sp, #0]
 800051e:	9101      	str	r1, [sp, #4]
 8000520:	e7ac      	b.n	800047c <__udivmoddi4+0x80>
 8000522:	4662      	mov	r2, ip
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	464a      	mov	r2, r9
 800052a:	40da      	lsrs	r2, r3
 800052c:	4661      	mov	r1, ip
 800052e:	0013      	movs	r3, r2
 8000530:	4642      	mov	r2, r8
 8000532:	408a      	lsls	r2, r1
 8000534:	0017      	movs	r7, r2
 8000536:	431f      	orrs	r7, r3
 8000538:	e780      	b.n	800043c <__udivmoddi4+0x40>
 800053a:	4662      	mov	r2, ip
 800053c:	2320      	movs	r3, #32
 800053e:	1a9b      	subs	r3, r3, r2
 8000540:	002a      	movs	r2, r5
 8000542:	4666      	mov	r6, ip
 8000544:	409a      	lsls	r2, r3
 8000546:	0023      	movs	r3, r4
 8000548:	40f3      	lsrs	r3, r6
 800054a:	4313      	orrs	r3, r2
 800054c:	e7d4      	b.n	80004f8 <__udivmoddi4+0xfc>
 800054e:	4662      	mov	r2, ip
 8000550:	2320      	movs	r3, #32
 8000552:	2100      	movs	r1, #0
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	2200      	movs	r2, #0
 8000558:	9100      	str	r1, [sp, #0]
 800055a:	9201      	str	r2, [sp, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	40da      	lsrs	r2, r3
 8000560:	9201      	str	r2, [sp, #4]
 8000562:	e780      	b.n	8000466 <__udivmoddi4+0x6a>
 8000564:	2320      	movs	r3, #32
 8000566:	4662      	mov	r2, ip
 8000568:	0026      	movs	r6, r4
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	40de      	lsrs	r6, r3
 800056e:	002f      	movs	r7, r5
 8000570:	46b0      	mov	r8, r6
 8000572:	4666      	mov	r6, ip
 8000574:	40b7      	lsls	r7, r6
 8000576:	4646      	mov	r6, r8
 8000578:	003b      	movs	r3, r7
 800057a:	4333      	orrs	r3, r6
 800057c:	e7c8      	b.n	8000510 <__udivmoddi4+0x114>
 800057e:	46c0      	nop			; (mov r8, r8)

08000580 <__aeabi_fadd>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	4647      	mov	r7, r8
 8000584:	46ce      	mov	lr, r9
 8000586:	0243      	lsls	r3, r0, #9
 8000588:	0a5b      	lsrs	r3, r3, #9
 800058a:	0044      	lsls	r4, r0, #1
 800058c:	0fc2      	lsrs	r2, r0, #31
 800058e:	469c      	mov	ip, r3
 8000590:	0048      	lsls	r0, r1, #1
 8000592:	00dd      	lsls	r5, r3, #3
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	0e24      	lsrs	r4, r4, #24
 8000598:	0a5b      	lsrs	r3, r3, #9
 800059a:	0e00      	lsrs	r0, r0, #24
 800059c:	b580      	push	{r7, lr}
 800059e:	4698      	mov	r8, r3
 80005a0:	0026      	movs	r6, r4
 80005a2:	4691      	mov	r9, r2
 80005a4:	0fc9      	lsrs	r1, r1, #31
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	1a27      	subs	r7, r4, r0
 80005aa:	428a      	cmp	r2, r1
 80005ac:	d029      	beq.n	8000602 <__aeabi_fadd+0x82>
 80005ae:	2f00      	cmp	r7, #0
 80005b0:	dd15      	ble.n	80005de <__aeabi_fadd+0x5e>
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d14a      	bne.n	800064c <__aeabi_fadd+0xcc>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x3c>
 80005ba:	e095      	b.n	80006e8 <__aeabi_fadd+0x168>
 80005bc:	08ed      	lsrs	r5, r5, #3
 80005be:	2cff      	cmp	r4, #255	; 0xff
 80005c0:	d100      	bne.n	80005c4 <__aeabi_fadd+0x44>
 80005c2:	e088      	b.n	80006d6 <__aeabi_fadd+0x156>
 80005c4:	026b      	lsls	r3, r5, #9
 80005c6:	0a5b      	lsrs	r3, r3, #9
 80005c8:	b2e6      	uxtb	r6, r4
 80005ca:	025b      	lsls	r3, r3, #9
 80005cc:	05f6      	lsls	r6, r6, #23
 80005ce:	0a58      	lsrs	r0, r3, #9
 80005d0:	4330      	orrs	r0, r6
 80005d2:	07d2      	lsls	r2, r2, #31
 80005d4:	4310      	orrs	r0, r2
 80005d6:	bc0c      	pop	{r2, r3}
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005de:	2f00      	cmp	r7, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x64>
 80005e2:	e087      	b.n	80006f4 <__aeabi_fadd+0x174>
 80005e4:	1c60      	adds	r0, r4, #1
 80005e6:	b2c0      	uxtb	r0, r0
 80005e8:	2801      	cmp	r0, #1
 80005ea:	dc00      	bgt.n	80005ee <__aeabi_fadd+0x6e>
 80005ec:	e0b6      	b.n	800075c <__aeabi_fadd+0x1dc>
 80005ee:	1aee      	subs	r6, r5, r3
 80005f0:	0172      	lsls	r2, r6, #5
 80005f2:	d500      	bpl.n	80005f6 <__aeabi_fadd+0x76>
 80005f4:	e0c5      	b.n	8000782 <__aeabi_fadd+0x202>
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d13d      	bne.n	8000676 <__aeabi_fadd+0xf6>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2600      	movs	r6, #0
 80005fe:	2300      	movs	r3, #0
 8000600:	e7e3      	b.n	80005ca <__aeabi_fadd+0x4a>
 8000602:	2f00      	cmp	r7, #0
 8000604:	dc00      	bgt.n	8000608 <__aeabi_fadd+0x88>
 8000606:	e096      	b.n	8000736 <__aeabi_fadd+0x1b6>
 8000608:	2800      	cmp	r0, #0
 800060a:	d05d      	beq.n	80006c8 <__aeabi_fadd+0x148>
 800060c:	2cff      	cmp	r4, #255	; 0xff
 800060e:	d060      	beq.n	80006d2 <__aeabi_fadd+0x152>
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	04d2      	lsls	r2, r2, #19
 8000614:	4313      	orrs	r3, r2
 8000616:	2f1b      	cmp	r7, #27
 8000618:	dd00      	ble.n	800061c <__aeabi_fadd+0x9c>
 800061a:	e0ec      	b.n	80007f6 <__aeabi_fadd+0x276>
 800061c:	2220      	movs	r2, #32
 800061e:	1bd2      	subs	r2, r2, r7
 8000620:	0018      	movs	r0, r3
 8000622:	4093      	lsls	r3, r2
 8000624:	40f8      	lsrs	r0, r7
 8000626:	1e5a      	subs	r2, r3, #1
 8000628:	4193      	sbcs	r3, r2
 800062a:	4303      	orrs	r3, r0
 800062c:	18ed      	adds	r5, r5, r3
 800062e:	016b      	lsls	r3, r5, #5
 8000630:	d57b      	bpl.n	800072a <__aeabi_fadd+0x1aa>
 8000632:	3401      	adds	r4, #1
 8000634:	2cff      	cmp	r4, #255	; 0xff
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0xba>
 8000638:	e0b7      	b.n	80007aa <__aeabi_fadd+0x22a>
 800063a:	2201      	movs	r2, #1
 800063c:	2607      	movs	r6, #7
 800063e:	402a      	ands	r2, r5
 8000640:	086b      	lsrs	r3, r5, #1
 8000642:	4d9a      	ldr	r5, [pc, #616]	; (80008ac <__aeabi_fadd+0x32c>)
 8000644:	401d      	ands	r5, r3
 8000646:	4315      	orrs	r5, r2
 8000648:	402e      	ands	r6, r5
 800064a:	e029      	b.n	80006a0 <__aeabi_fadd+0x120>
 800064c:	2cff      	cmp	r4, #255	; 0xff
 800064e:	d0b5      	beq.n	80005bc <__aeabi_fadd+0x3c>
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	04d2      	lsls	r2, r2, #19
 8000654:	4313      	orrs	r3, r2
 8000656:	2f1b      	cmp	r7, #27
 8000658:	dd00      	ble.n	800065c <__aeabi_fadd+0xdc>
 800065a:	e0b2      	b.n	80007c2 <__aeabi_fadd+0x242>
 800065c:	2220      	movs	r2, #32
 800065e:	1bd2      	subs	r2, r2, r7
 8000660:	0019      	movs	r1, r3
 8000662:	4093      	lsls	r3, r2
 8000664:	40f9      	lsrs	r1, r7
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	4193      	sbcs	r3, r2
 800066a:	430b      	orrs	r3, r1
 800066c:	1aed      	subs	r5, r5, r3
 800066e:	016b      	lsls	r3, r5, #5
 8000670:	d55b      	bpl.n	800072a <__aeabi_fadd+0x1aa>
 8000672:	01ad      	lsls	r5, r5, #6
 8000674:	09ae      	lsrs	r6, r5, #6
 8000676:	0030      	movs	r0, r6
 8000678:	f002 fb6e 	bl	8002d58 <__clzsi2>
 800067c:	3805      	subs	r0, #5
 800067e:	4086      	lsls	r6, r0
 8000680:	4284      	cmp	r4, r0
 8000682:	dc65      	bgt.n	8000750 <__aeabi_fadd+0x1d0>
 8000684:	1b04      	subs	r4, r0, r4
 8000686:	0033      	movs	r3, r6
 8000688:	2020      	movs	r0, #32
 800068a:	3401      	adds	r4, #1
 800068c:	40e3      	lsrs	r3, r4
 800068e:	1b04      	subs	r4, r0, r4
 8000690:	40a6      	lsls	r6, r4
 8000692:	1e75      	subs	r5, r6, #1
 8000694:	41ae      	sbcs	r6, r5
 8000696:	4333      	orrs	r3, r6
 8000698:	2607      	movs	r6, #7
 800069a:	001d      	movs	r5, r3
 800069c:	2400      	movs	r4, #0
 800069e:	401e      	ands	r6, r3
 80006a0:	2201      	movs	r2, #1
 80006a2:	464b      	mov	r3, r9
 80006a4:	401a      	ands	r2, r3
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d004      	beq.n	80006b4 <__aeabi_fadd+0x134>
 80006aa:	230f      	movs	r3, #15
 80006ac:	402b      	ands	r3, r5
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	d000      	beq.n	80006b4 <__aeabi_fadd+0x134>
 80006b2:	3504      	adds	r5, #4
 80006b4:	016b      	lsls	r3, r5, #5
 80006b6:	d400      	bmi.n	80006ba <__aeabi_fadd+0x13a>
 80006b8:	e780      	b.n	80005bc <__aeabi_fadd+0x3c>
 80006ba:	3401      	adds	r4, #1
 80006bc:	b2e6      	uxtb	r6, r4
 80006be:	2cff      	cmp	r4, #255	; 0xff
 80006c0:	d12f      	bne.n	8000722 <__aeabi_fadd+0x1a2>
 80006c2:	26ff      	movs	r6, #255	; 0xff
 80006c4:	2300      	movs	r3, #0
 80006c6:	e780      	b.n	80005ca <__aeabi_fadd+0x4a>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d152      	bne.n	8000772 <__aeabi_fadd+0x1f2>
 80006cc:	2cff      	cmp	r4, #255	; 0xff
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fadd+0x152>
 80006d0:	e774      	b.n	80005bc <__aeabi_fadd+0x3c>
 80006d2:	000a      	movs	r2, r1
 80006d4:	08ed      	lsrs	r5, r5, #3
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d0f3      	beq.n	80006c2 <__aeabi_fadd+0x142>
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	03db      	lsls	r3, r3, #15
 80006de:	432b      	orrs	r3, r5
 80006e0:	025b      	lsls	r3, r3, #9
 80006e2:	0a5b      	lsrs	r3, r3, #9
 80006e4:	26ff      	movs	r6, #255	; 0xff
 80006e6:	e770      	b.n	80005ca <__aeabi_fadd+0x4a>
 80006e8:	3f01      	subs	r7, #1
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d0be      	beq.n	800066c <__aeabi_fadd+0xec>
 80006ee:	2cff      	cmp	r4, #255	; 0xff
 80006f0:	d1b1      	bne.n	8000656 <__aeabi_fadd+0xd6>
 80006f2:	e763      	b.n	80005bc <__aeabi_fadd+0x3c>
 80006f4:	2c00      	cmp	r4, #0
 80006f6:	d047      	beq.n	8000788 <__aeabi_fadd+0x208>
 80006f8:	28ff      	cmp	r0, #255	; 0xff
 80006fa:	d069      	beq.n	80007d0 <__aeabi_fadd+0x250>
 80006fc:	2480      	movs	r4, #128	; 0x80
 80006fe:	04e4      	lsls	r4, r4, #19
 8000700:	427a      	negs	r2, r7
 8000702:	4325      	orrs	r5, r4
 8000704:	2a1b      	cmp	r2, #27
 8000706:	dd00      	ble.n	800070a <__aeabi_fadd+0x18a>
 8000708:	e0c5      	b.n	8000896 <__aeabi_fadd+0x316>
 800070a:	002c      	movs	r4, r5
 800070c:	2620      	movs	r6, #32
 800070e:	40d4      	lsrs	r4, r2
 8000710:	1ab2      	subs	r2, r6, r2
 8000712:	4095      	lsls	r5, r2
 8000714:	1e6a      	subs	r2, r5, #1
 8000716:	4195      	sbcs	r5, r2
 8000718:	4325      	orrs	r5, r4
 800071a:	1b5d      	subs	r5, r3, r5
 800071c:	0004      	movs	r4, r0
 800071e:	4689      	mov	r9, r1
 8000720:	e7a5      	b.n	800066e <__aeabi_fadd+0xee>
 8000722:	01ab      	lsls	r3, r5, #6
 8000724:	0a5b      	lsrs	r3, r3, #9
 8000726:	e750      	b.n	80005ca <__aeabi_fadd+0x4a>
 8000728:	2400      	movs	r4, #0
 800072a:	2201      	movs	r2, #1
 800072c:	464b      	mov	r3, r9
 800072e:	401a      	ands	r2, r3
 8000730:	076b      	lsls	r3, r5, #29
 8000732:	d1ba      	bne.n	80006aa <__aeabi_fadd+0x12a>
 8000734:	e742      	b.n	80005bc <__aeabi_fadd+0x3c>
 8000736:	2f00      	cmp	r7, #0
 8000738:	d13b      	bne.n	80007b2 <__aeabi_fadd+0x232>
 800073a:	3401      	adds	r4, #1
 800073c:	b2e0      	uxtb	r0, r4
 800073e:	2801      	cmp	r0, #1
 8000740:	dd4a      	ble.n	80007d8 <__aeabi_fadd+0x258>
 8000742:	2cff      	cmp	r4, #255	; 0xff
 8000744:	d0bd      	beq.n	80006c2 <__aeabi_fadd+0x142>
 8000746:	2607      	movs	r6, #7
 8000748:	18ed      	adds	r5, r5, r3
 800074a:	086d      	lsrs	r5, r5, #1
 800074c:	402e      	ands	r6, r5
 800074e:	e7a7      	b.n	80006a0 <__aeabi_fadd+0x120>
 8000750:	2307      	movs	r3, #7
 8000752:	4d57      	ldr	r5, [pc, #348]	; (80008b0 <__aeabi_fadd+0x330>)
 8000754:	1a24      	subs	r4, r4, r0
 8000756:	4035      	ands	r5, r6
 8000758:	401e      	ands	r6, r3
 800075a:	e7a1      	b.n	80006a0 <__aeabi_fadd+0x120>
 800075c:	2c00      	cmp	r4, #0
 800075e:	d11b      	bne.n	8000798 <__aeabi_fadd+0x218>
 8000760:	2d00      	cmp	r5, #0
 8000762:	d16e      	bne.n	8000842 <__aeabi_fadd+0x2c2>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x1ea>
 8000768:	e09a      	b.n	80008a0 <__aeabi_fadd+0x320>
 800076a:	000a      	movs	r2, r1
 800076c:	001d      	movs	r5, r3
 800076e:	003c      	movs	r4, r7
 8000770:	e724      	b.n	80005bc <__aeabi_fadd+0x3c>
 8000772:	3f01      	subs	r7, #1
 8000774:	2f00      	cmp	r7, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x1fa>
 8000778:	e758      	b.n	800062c <__aeabi_fadd+0xac>
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d000      	beq.n	8000780 <__aeabi_fadd+0x200>
 800077e:	e74a      	b.n	8000616 <__aeabi_fadd+0x96>
 8000780:	e7a7      	b.n	80006d2 <__aeabi_fadd+0x152>
 8000782:	1b5e      	subs	r6, r3, r5
 8000784:	4689      	mov	r9, r1
 8000786:	e776      	b.n	8000676 <__aeabi_fadd+0xf6>
 8000788:	2d00      	cmp	r5, #0
 800078a:	d11c      	bne.n	80007c6 <__aeabi_fadd+0x246>
 800078c:	000a      	movs	r2, r1
 800078e:	28ff      	cmp	r0, #255	; 0xff
 8000790:	d01f      	beq.n	80007d2 <__aeabi_fadd+0x252>
 8000792:	0004      	movs	r4, r0
 8000794:	001d      	movs	r5, r3
 8000796:	e711      	b.n	80005bc <__aeabi_fadd+0x3c>
 8000798:	2d00      	cmp	r5, #0
 800079a:	d15d      	bne.n	8000858 <__aeabi_fadd+0x2d8>
 800079c:	2b00      	cmp	r3, #0
 800079e:	d117      	bne.n	80007d0 <__aeabi_fadd+0x250>
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	2200      	movs	r2, #0
 80007a4:	03db      	lsls	r3, r3, #15
 80007a6:	26ff      	movs	r6, #255	; 0xff
 80007a8:	e70f      	b.n	80005ca <__aeabi_fadd+0x4a>
 80007aa:	000a      	movs	r2, r1
 80007ac:	26ff      	movs	r6, #255	; 0xff
 80007ae:	2300      	movs	r3, #0
 80007b0:	e70b      	b.n	80005ca <__aeabi_fadd+0x4a>
 80007b2:	2c00      	cmp	r4, #0
 80007b4:	d121      	bne.n	80007fa <__aeabi_fadd+0x27a>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d166      	bne.n	8000888 <__aeabi_fadd+0x308>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d1e9      	bne.n	8000792 <__aeabi_fadd+0x212>
 80007be:	001d      	movs	r5, r3
 80007c0:	e787      	b.n	80006d2 <__aeabi_fadd+0x152>
 80007c2:	2301      	movs	r3, #1
 80007c4:	e752      	b.n	800066c <__aeabi_fadd+0xec>
 80007c6:	1c7a      	adds	r2, r7, #1
 80007c8:	d0a7      	beq.n	800071a <__aeabi_fadd+0x19a>
 80007ca:	43fa      	mvns	r2, r7
 80007cc:	28ff      	cmp	r0, #255	; 0xff
 80007ce:	d199      	bne.n	8000704 <__aeabi_fadd+0x184>
 80007d0:	000a      	movs	r2, r1
 80007d2:	001d      	movs	r5, r3
 80007d4:	24ff      	movs	r4, #255	; 0xff
 80007d6:	e6f1      	b.n	80005bc <__aeabi_fadd+0x3c>
 80007d8:	2e00      	cmp	r6, #0
 80007da:	d121      	bne.n	8000820 <__aeabi_fadd+0x2a0>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d04f      	beq.n	8000880 <__aeabi_fadd+0x300>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d04c      	beq.n	800087e <__aeabi_fadd+0x2fe>
 80007e4:	18ed      	adds	r5, r5, r3
 80007e6:	016b      	lsls	r3, r5, #5
 80007e8:	d59e      	bpl.n	8000728 <__aeabi_fadd+0x1a8>
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <__aeabi_fadd+0x330>)
 80007ec:	3607      	adds	r6, #7
 80007ee:	402e      	ands	r6, r5
 80007f0:	2401      	movs	r4, #1
 80007f2:	401d      	ands	r5, r3
 80007f4:	e754      	b.n	80006a0 <__aeabi_fadd+0x120>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e718      	b.n	800062c <__aeabi_fadd+0xac>
 80007fa:	28ff      	cmp	r0, #255	; 0xff
 80007fc:	d0df      	beq.n	80007be <__aeabi_fadd+0x23e>
 80007fe:	2480      	movs	r4, #128	; 0x80
 8000800:	04e4      	lsls	r4, r4, #19
 8000802:	427f      	negs	r7, r7
 8000804:	4325      	orrs	r5, r4
 8000806:	2f1b      	cmp	r7, #27
 8000808:	dc4d      	bgt.n	80008a6 <__aeabi_fadd+0x326>
 800080a:	2620      	movs	r6, #32
 800080c:	1bf6      	subs	r6, r6, r7
 800080e:	002c      	movs	r4, r5
 8000810:	40b5      	lsls	r5, r6
 8000812:	40fc      	lsrs	r4, r7
 8000814:	1e6a      	subs	r2, r5, #1
 8000816:	4195      	sbcs	r5, r2
 8000818:	4325      	orrs	r5, r4
 800081a:	18ed      	adds	r5, r5, r3
 800081c:	0004      	movs	r4, r0
 800081e:	e706      	b.n	800062e <__aeabi_fadd+0xae>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d0cc      	beq.n	80007be <__aeabi_fadd+0x23e>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d100      	bne.n	800082a <__aeabi_fadd+0x2aa>
 8000828:	e753      	b.n	80006d2 <__aeabi_fadd+0x152>
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	4660      	mov	r0, ip
 800082e:	03c9      	lsls	r1, r1, #15
 8000830:	4208      	tst	r0, r1
 8000832:	d003      	beq.n	800083c <__aeabi_fadd+0x2bc>
 8000834:	4640      	mov	r0, r8
 8000836:	4208      	tst	r0, r1
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2bc>
 800083a:	001d      	movs	r5, r3
 800083c:	2101      	movs	r1, #1
 800083e:	4011      	ands	r1, r2
 8000840:	e747      	b.n	80006d2 <__aeabi_fadd+0x152>
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x2c8>
 8000846:	e6b9      	b.n	80005bc <__aeabi_fadd+0x3c>
 8000848:	1aea      	subs	r2, r5, r3
 800084a:	0150      	lsls	r0, r2, #5
 800084c:	d525      	bpl.n	800089a <__aeabi_fadd+0x31a>
 800084e:	2607      	movs	r6, #7
 8000850:	1b5d      	subs	r5, r3, r5
 8000852:	402e      	ands	r6, r5
 8000854:	4689      	mov	r9, r1
 8000856:	e723      	b.n	80006a0 <__aeabi_fadd+0x120>
 8000858:	24ff      	movs	r4, #255	; 0xff
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0x2e0>
 800085e:	e6ad      	b.n	80005bc <__aeabi_fadd+0x3c>
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	4660      	mov	r0, ip
 8000864:	03d2      	lsls	r2, r2, #15
 8000866:	4210      	tst	r0, r2
 8000868:	d004      	beq.n	8000874 <__aeabi_fadd+0x2f4>
 800086a:	4640      	mov	r0, r8
 800086c:	4210      	tst	r0, r2
 800086e:	d101      	bne.n	8000874 <__aeabi_fadd+0x2f4>
 8000870:	001d      	movs	r5, r3
 8000872:	4689      	mov	r9, r1
 8000874:	2201      	movs	r2, #1
 8000876:	464b      	mov	r3, r9
 8000878:	24ff      	movs	r4, #255	; 0xff
 800087a:	401a      	ands	r2, r3
 800087c:	e69e      	b.n	80005bc <__aeabi_fadd+0x3c>
 800087e:	002b      	movs	r3, r5
 8000880:	08dd      	lsrs	r5, r3, #3
 8000882:	000a      	movs	r2, r1
 8000884:	2400      	movs	r4, #0
 8000886:	e69d      	b.n	80005c4 <__aeabi_fadd+0x44>
 8000888:	1c7a      	adds	r2, r7, #1
 800088a:	d0c6      	beq.n	800081a <__aeabi_fadd+0x29a>
 800088c:	43ff      	mvns	r7, r7
 800088e:	28ff      	cmp	r0, #255	; 0xff
 8000890:	d1b9      	bne.n	8000806 <__aeabi_fadd+0x286>
 8000892:	001d      	movs	r5, r3
 8000894:	e71d      	b.n	80006d2 <__aeabi_fadd+0x152>
 8000896:	2501      	movs	r5, #1
 8000898:	e73f      	b.n	800071a <__aeabi_fadd+0x19a>
 800089a:	1e15      	subs	r5, r2, #0
 800089c:	d000      	beq.n	80008a0 <__aeabi_fadd+0x320>
 800089e:	e744      	b.n	800072a <__aeabi_fadd+0x1aa>
 80008a0:	2200      	movs	r2, #0
 80008a2:	2300      	movs	r3, #0
 80008a4:	e691      	b.n	80005ca <__aeabi_fadd+0x4a>
 80008a6:	2501      	movs	r5, #1
 80008a8:	e7b7      	b.n	800081a <__aeabi_fadd+0x29a>
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	7dffffff 	.word	0x7dffffff
 80008b0:	fbffffff 	.word	0xfbffffff

080008b4 <__eqsf2>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	0042      	lsls	r2, r0, #1
 80008b8:	024e      	lsls	r6, r1, #9
 80008ba:	004c      	lsls	r4, r1, #1
 80008bc:	0245      	lsls	r5, r0, #9
 80008be:	0a6d      	lsrs	r5, r5, #9
 80008c0:	0e12      	lsrs	r2, r2, #24
 80008c2:	0fc3      	lsrs	r3, r0, #31
 80008c4:	0a76      	lsrs	r6, r6, #9
 80008c6:	0e24      	lsrs	r4, r4, #24
 80008c8:	0fc9      	lsrs	r1, r1, #31
 80008ca:	2aff      	cmp	r2, #255	; 0xff
 80008cc:	d00f      	beq.n	80008ee <__eqsf2+0x3a>
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d011      	beq.n	80008f6 <__eqsf2+0x42>
 80008d2:	2001      	movs	r0, #1
 80008d4:	42a2      	cmp	r2, r4
 80008d6:	d000      	beq.n	80008da <__eqsf2+0x26>
 80008d8:	bd70      	pop	{r4, r5, r6, pc}
 80008da:	42b5      	cmp	r5, r6
 80008dc:	d1fc      	bne.n	80008d8 <__eqsf2+0x24>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d00d      	beq.n	80008fe <__eqsf2+0x4a>
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	d1f8      	bne.n	80008d8 <__eqsf2+0x24>
 80008e6:	0028      	movs	r0, r5
 80008e8:	1e45      	subs	r5, r0, #1
 80008ea:	41a8      	sbcs	r0, r5
 80008ec:	e7f4      	b.n	80008d8 <__eqsf2+0x24>
 80008ee:	2001      	movs	r0, #1
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d1f1      	bne.n	80008d8 <__eqsf2+0x24>
 80008f4:	e7eb      	b.n	80008ce <__eqsf2+0x1a>
 80008f6:	2001      	movs	r0, #1
 80008f8:	2e00      	cmp	r6, #0
 80008fa:	d1ed      	bne.n	80008d8 <__eqsf2+0x24>
 80008fc:	e7e9      	b.n	80008d2 <__eqsf2+0x1e>
 80008fe:	2000      	movs	r0, #0
 8000900:	e7ea      	b.n	80008d8 <__eqsf2+0x24>
 8000902:	46c0      	nop			; (mov r8, r8)

08000904 <__gesf2>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	004a      	lsls	r2, r1, #1
 8000908:	024e      	lsls	r6, r1, #9
 800090a:	0245      	lsls	r5, r0, #9
 800090c:	0044      	lsls	r4, r0, #1
 800090e:	0a6d      	lsrs	r5, r5, #9
 8000910:	0e24      	lsrs	r4, r4, #24
 8000912:	0fc3      	lsrs	r3, r0, #31
 8000914:	0a76      	lsrs	r6, r6, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0fc9      	lsrs	r1, r1, #31
 800091a:	2cff      	cmp	r4, #255	; 0xff
 800091c:	d015      	beq.n	800094a <__gesf2+0x46>
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d00e      	beq.n	8000940 <__gesf2+0x3c>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d115      	bne.n	8000952 <__gesf2+0x4e>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d101      	bne.n	800092e <__gesf2+0x2a>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d01c      	beq.n	8000968 <__gesf2+0x64>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d014      	beq.n	800095c <__gesf2+0x58>
 8000932:	428b      	cmp	r3, r1
 8000934:	d027      	beq.n	8000986 <__gesf2+0x82>
 8000936:	2002      	movs	r0, #2
 8000938:	3b01      	subs	r3, #1
 800093a:	4018      	ands	r0, r3
 800093c:	3801      	subs	r0, #1
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	2e00      	cmp	r6, #0
 8000942:	d0ee      	beq.n	8000922 <__gesf2+0x1e>
 8000944:	2002      	movs	r0, #2
 8000946:	4240      	negs	r0, r0
 8000948:	e7f9      	b.n	800093e <__gesf2+0x3a>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d1fa      	bne.n	8000944 <__gesf2+0x40>
 800094e:	2aff      	cmp	r2, #255	; 0xff
 8000950:	d00e      	beq.n	8000970 <__gesf2+0x6c>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d10e      	bne.n	8000974 <__gesf2+0x70>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d0ed      	beq.n	8000936 <__gesf2+0x32>
 800095a:	e00b      	b.n	8000974 <__gesf2+0x70>
 800095c:	2301      	movs	r3, #1
 800095e:	3901      	subs	r1, #1
 8000960:	4399      	bics	r1, r3
 8000962:	0008      	movs	r0, r1
 8000964:	3001      	adds	r0, #1
 8000966:	e7ea      	b.n	800093e <__gesf2+0x3a>
 8000968:	2000      	movs	r0, #0
 800096a:	2d00      	cmp	r5, #0
 800096c:	d0e7      	beq.n	800093e <__gesf2+0x3a>
 800096e:	e7e2      	b.n	8000936 <__gesf2+0x32>
 8000970:	2e00      	cmp	r6, #0
 8000972:	d1e7      	bne.n	8000944 <__gesf2+0x40>
 8000974:	428b      	cmp	r3, r1
 8000976:	d1de      	bne.n	8000936 <__gesf2+0x32>
 8000978:	4294      	cmp	r4, r2
 800097a:	dd05      	ble.n	8000988 <__gesf2+0x84>
 800097c:	2102      	movs	r1, #2
 800097e:	1e58      	subs	r0, r3, #1
 8000980:	4008      	ands	r0, r1
 8000982:	3801      	subs	r0, #1
 8000984:	e7db      	b.n	800093e <__gesf2+0x3a>
 8000986:	2400      	movs	r4, #0
 8000988:	42a2      	cmp	r2, r4
 800098a:	dc04      	bgt.n	8000996 <__gesf2+0x92>
 800098c:	42b5      	cmp	r5, r6
 800098e:	d8d2      	bhi.n	8000936 <__gesf2+0x32>
 8000990:	2000      	movs	r0, #0
 8000992:	42b5      	cmp	r5, r6
 8000994:	d2d3      	bcs.n	800093e <__gesf2+0x3a>
 8000996:	1e58      	subs	r0, r3, #1
 8000998:	2301      	movs	r3, #1
 800099a:	4398      	bics	r0, r3
 800099c:	3001      	adds	r0, #1
 800099e:	e7ce      	b.n	800093e <__gesf2+0x3a>

080009a0 <__lesf2>:
 80009a0:	b530      	push	{r4, r5, lr}
 80009a2:	0042      	lsls	r2, r0, #1
 80009a4:	0244      	lsls	r4, r0, #9
 80009a6:	024d      	lsls	r5, r1, #9
 80009a8:	0fc3      	lsrs	r3, r0, #31
 80009aa:	0048      	lsls	r0, r1, #1
 80009ac:	0a64      	lsrs	r4, r4, #9
 80009ae:	0e12      	lsrs	r2, r2, #24
 80009b0:	0a6d      	lsrs	r5, r5, #9
 80009b2:	0e00      	lsrs	r0, r0, #24
 80009b4:	0fc9      	lsrs	r1, r1, #31
 80009b6:	2aff      	cmp	r2, #255	; 0xff
 80009b8:	d012      	beq.n	80009e0 <__lesf2+0x40>
 80009ba:	28ff      	cmp	r0, #255	; 0xff
 80009bc:	d00c      	beq.n	80009d8 <__lesf2+0x38>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d112      	bne.n	80009e8 <__lesf2+0x48>
 80009c2:	2800      	cmp	r0, #0
 80009c4:	d119      	bne.n	80009fa <__lesf2+0x5a>
 80009c6:	2d00      	cmp	r5, #0
 80009c8:	d117      	bne.n	80009fa <__lesf2+0x5a>
 80009ca:	2c00      	cmp	r4, #0
 80009cc:	d02b      	beq.n	8000a26 <__lesf2+0x86>
 80009ce:	2002      	movs	r0, #2
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4018      	ands	r0, r3
 80009d4:	3801      	subs	r0, #1
 80009d6:	e026      	b.n	8000a26 <__lesf2+0x86>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d0f0      	beq.n	80009be <__lesf2+0x1e>
 80009dc:	2002      	movs	r0, #2
 80009de:	e022      	b.n	8000a26 <__lesf2+0x86>
 80009e0:	2c00      	cmp	r4, #0
 80009e2:	d1fb      	bne.n	80009dc <__lesf2+0x3c>
 80009e4:	28ff      	cmp	r0, #255	; 0xff
 80009e6:	d01f      	beq.n	8000a28 <__lesf2+0x88>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d11f      	bne.n	8000a2c <__lesf2+0x8c>
 80009ec:	2d00      	cmp	r5, #0
 80009ee:	d11d      	bne.n	8000a2c <__lesf2+0x8c>
 80009f0:	2002      	movs	r0, #2
 80009f2:	3b01      	subs	r3, #1
 80009f4:	4018      	ands	r0, r3
 80009f6:	3801      	subs	r0, #1
 80009f8:	e015      	b.n	8000a26 <__lesf2+0x86>
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d00e      	beq.n	8000a1c <__lesf2+0x7c>
 80009fe:	428b      	cmp	r3, r1
 8000a00:	d1e5      	bne.n	80009ce <__lesf2+0x2e>
 8000a02:	2200      	movs	r2, #0
 8000a04:	4290      	cmp	r0, r2
 8000a06:	dc04      	bgt.n	8000a12 <__lesf2+0x72>
 8000a08:	42ac      	cmp	r4, r5
 8000a0a:	d8e0      	bhi.n	80009ce <__lesf2+0x2e>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	42ac      	cmp	r4, r5
 8000a10:	d209      	bcs.n	8000a26 <__lesf2+0x86>
 8000a12:	1e58      	subs	r0, r3, #1
 8000a14:	2301      	movs	r3, #1
 8000a16:	4398      	bics	r0, r3
 8000a18:	3001      	adds	r0, #1
 8000a1a:	e004      	b.n	8000a26 <__lesf2+0x86>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	3901      	subs	r1, #1
 8000a20:	4399      	bics	r1, r3
 8000a22:	0008      	movs	r0, r1
 8000a24:	3001      	adds	r0, #1
 8000a26:	bd30      	pop	{r4, r5, pc}
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	d1d7      	bne.n	80009dc <__lesf2+0x3c>
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d1ce      	bne.n	80009ce <__lesf2+0x2e>
 8000a30:	4282      	cmp	r2, r0
 8000a32:	dde7      	ble.n	8000a04 <__lesf2+0x64>
 8000a34:	2102      	movs	r1, #2
 8000a36:	1e58      	subs	r0, r3, #1
 8000a38:	4008      	ands	r0, r1
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7f3      	b.n	8000a26 <__lesf2+0x86>
 8000a3e:	46c0      	nop			; (mov r8, r8)

08000a40 <__aeabi_fmul>:
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	464e      	mov	r6, r9
 8000a44:	4657      	mov	r7, sl
 8000a46:	4645      	mov	r5, r8
 8000a48:	46de      	mov	lr, fp
 8000a4a:	b5e0      	push	{r5, r6, r7, lr}
 8000a4c:	0243      	lsls	r3, r0, #9
 8000a4e:	0a5b      	lsrs	r3, r3, #9
 8000a50:	0045      	lsls	r5, r0, #1
 8000a52:	b083      	sub	sp, #12
 8000a54:	1c0f      	adds	r7, r1, #0
 8000a56:	4699      	mov	r9, r3
 8000a58:	0e2d      	lsrs	r5, r5, #24
 8000a5a:	0fc6      	lsrs	r6, r0, #31
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d057      	beq.n	8000b10 <__aeabi_fmul+0xd0>
 8000a60:	2dff      	cmp	r5, #255	; 0xff
 8000a62:	d024      	beq.n	8000aae <__aeabi_fmul+0x6e>
 8000a64:	2080      	movs	r0, #128	; 0x80
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	04c0      	lsls	r0, r0, #19
 8000a6a:	4318      	orrs	r0, r3
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4681      	mov	r9, r0
 8000a70:	469a      	mov	sl, r3
 8000a72:	469b      	mov	fp, r3
 8000a74:	3d7f      	subs	r5, #127	; 0x7f
 8000a76:	027c      	lsls	r4, r7, #9
 8000a78:	007a      	lsls	r2, r7, #1
 8000a7a:	0ffb      	lsrs	r3, r7, #31
 8000a7c:	0a64      	lsrs	r4, r4, #9
 8000a7e:	0e12      	lsrs	r2, r2, #24
 8000a80:	4698      	mov	r8, r3
 8000a82:	d023      	beq.n	8000acc <__aeabi_fmul+0x8c>
 8000a84:	2aff      	cmp	r2, #255	; 0xff
 8000a86:	d04b      	beq.n	8000b20 <__aeabi_fmul+0xe0>
 8000a88:	00e3      	lsls	r3, r4, #3
 8000a8a:	2480      	movs	r4, #128	; 0x80
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	04e4      	lsls	r4, r4, #19
 8000a90:	3a7f      	subs	r2, #127	; 0x7f
 8000a92:	431c      	orrs	r4, r3
 8000a94:	18ad      	adds	r5, r5, r2
 8000a96:	1c6b      	adds	r3, r5, #1
 8000a98:	4647      	mov	r7, r8
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	4653      	mov	r3, sl
 8000a9e:	4077      	eors	r7, r6
 8000aa0:	003a      	movs	r2, r7
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	d848      	bhi.n	8000b38 <__aeabi_fmul+0xf8>
 8000aa6:	497d      	ldr	r1, [pc, #500]	; (8000c9c <__aeabi_fmul+0x25c>)
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	58cb      	ldr	r3, [r1, r3]
 8000aac:	469f      	mov	pc, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_fmul+0x74>
 8000ab2:	e085      	b.n	8000bc0 <__aeabi_fmul+0x180>
 8000ab4:	3308      	adds	r3, #8
 8000ab6:	469a      	mov	sl, r3
 8000ab8:	3b06      	subs	r3, #6
 8000aba:	469b      	mov	fp, r3
 8000abc:	027c      	lsls	r4, r7, #9
 8000abe:	007a      	lsls	r2, r7, #1
 8000ac0:	0ffb      	lsrs	r3, r7, #31
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	0a64      	lsrs	r4, r4, #9
 8000ac6:	0e12      	lsrs	r2, r2, #24
 8000ac8:	4698      	mov	r8, r3
 8000aca:	d1db      	bne.n	8000a84 <__aeabi_fmul+0x44>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_fmul+0x92>
 8000ad0:	e090      	b.n	8000bf4 <__aeabi_fmul+0x1b4>
 8000ad2:	4652      	mov	r2, sl
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	4692      	mov	sl, r2
 8000ada:	2001      	movs	r0, #1
 8000adc:	e7db      	b.n	8000a96 <__aeabi_fmul+0x56>
 8000ade:	464c      	mov	r4, r9
 8000ae0:	4658      	mov	r0, fp
 8000ae2:	0017      	movs	r7, r2
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d024      	beq.n	8000b32 <__aeabi_fmul+0xf2>
 8000ae8:	2803      	cmp	r0, #3
 8000aea:	d100      	bne.n	8000aee <__aeabi_fmul+0xae>
 8000aec:	e0cf      	b.n	8000c8e <__aeabi_fmul+0x24e>
 8000aee:	2200      	movs	r2, #0
 8000af0:	2300      	movs	r3, #0
 8000af2:	2801      	cmp	r0, #1
 8000af4:	d14d      	bne.n	8000b92 <__aeabi_fmul+0x152>
 8000af6:	0258      	lsls	r0, r3, #9
 8000af8:	05d2      	lsls	r2, r2, #23
 8000afa:	0a40      	lsrs	r0, r0, #9
 8000afc:	07ff      	lsls	r7, r7, #31
 8000afe:	4310      	orrs	r0, r2
 8000b00:	4338      	orrs	r0, r7
 8000b02:	b003      	add	sp, #12
 8000b04:	bc3c      	pop	{r2, r3, r4, r5}
 8000b06:	4690      	mov	r8, r2
 8000b08:	4699      	mov	r9, r3
 8000b0a:	46a2      	mov	sl, r4
 8000b0c:	46ab      	mov	fp, r5
 8000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d15b      	bne.n	8000bcc <__aeabi_fmul+0x18c>
 8000b14:	2304      	movs	r3, #4
 8000b16:	469a      	mov	sl, r3
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	469b      	mov	fp, r3
 8000b1e:	e7aa      	b.n	8000a76 <__aeabi_fmul+0x36>
 8000b20:	35ff      	adds	r5, #255	; 0xff
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d160      	bne.n	8000be8 <__aeabi_fmul+0x1a8>
 8000b26:	4652      	mov	r2, sl
 8000b28:	2302      	movs	r3, #2
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	4692      	mov	sl, r2
 8000b2e:	2002      	movs	r0, #2
 8000b30:	e7b1      	b.n	8000a96 <__aeabi_fmul+0x56>
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	2300      	movs	r3, #0
 8000b36:	e7de      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000b38:	464b      	mov	r3, r9
 8000b3a:	0c1b      	lsrs	r3, r3, #16
 8000b3c:	469c      	mov	ip, r3
 8000b3e:	464b      	mov	r3, r9
 8000b40:	0426      	lsls	r6, r4, #16
 8000b42:	0c36      	lsrs	r6, r6, #16
 8000b44:	0418      	lsls	r0, r3, #16
 8000b46:	4661      	mov	r1, ip
 8000b48:	0033      	movs	r3, r6
 8000b4a:	0c22      	lsrs	r2, r4, #16
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	0c00      	lsrs	r0, r0, #16
 8000b50:	4343      	muls	r3, r0
 8000b52:	434e      	muls	r6, r1
 8000b54:	4350      	muls	r0, r2
 8000b56:	4354      	muls	r4, r2
 8000b58:	1980      	adds	r0, r0, r6
 8000b5a:	0c1a      	lsrs	r2, r3, #16
 8000b5c:	1812      	adds	r2, r2, r0
 8000b5e:	4296      	cmp	r6, r2
 8000b60:	d903      	bls.n	8000b6a <__aeabi_fmul+0x12a>
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0249      	lsls	r1, r1, #9
 8000b66:	468c      	mov	ip, r1
 8000b68:	4464      	add	r4, ip
 8000b6a:	041b      	lsls	r3, r3, #16
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	0410      	lsls	r0, r2, #16
 8000b70:	18c0      	adds	r0, r0, r3
 8000b72:	0183      	lsls	r3, r0, #6
 8000b74:	1e5e      	subs	r6, r3, #1
 8000b76:	41b3      	sbcs	r3, r6
 8000b78:	0e80      	lsrs	r0, r0, #26
 8000b7a:	4318      	orrs	r0, r3
 8000b7c:	0c13      	lsrs	r3, r2, #16
 8000b7e:	191b      	adds	r3, r3, r4
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	4303      	orrs	r3, r0
 8000b84:	001c      	movs	r4, r3
 8000b86:	0123      	lsls	r3, r4, #4
 8000b88:	d579      	bpl.n	8000c7e <__aeabi_fmul+0x23e>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	0862      	lsrs	r2, r4, #1
 8000b8e:	401c      	ands	r4, r3
 8000b90:	4314      	orrs	r4, r2
 8000b92:	9a01      	ldr	r2, [sp, #4]
 8000b94:	327f      	adds	r2, #127	; 0x7f
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	dd4d      	ble.n	8000c36 <__aeabi_fmul+0x1f6>
 8000b9a:	0763      	lsls	r3, r4, #29
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_fmul+0x168>
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	4023      	ands	r3, r4
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_fmul+0x168>
 8000ba6:	3404      	adds	r4, #4
 8000ba8:	0123      	lsls	r3, r4, #4
 8000baa:	d503      	bpl.n	8000bb4 <__aeabi_fmul+0x174>
 8000bac:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <__aeabi_fmul+0x260>)
 8000bae:	9a01      	ldr	r2, [sp, #4]
 8000bb0:	401c      	ands	r4, r3
 8000bb2:	3280      	adds	r2, #128	; 0x80
 8000bb4:	2afe      	cmp	r2, #254	; 0xfe
 8000bb6:	dcbc      	bgt.n	8000b32 <__aeabi_fmul+0xf2>
 8000bb8:	01a3      	lsls	r3, r4, #6
 8000bba:	0a5b      	lsrs	r3, r3, #9
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	e79a      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	469a      	mov	sl, r3
 8000bc4:	3b09      	subs	r3, #9
 8000bc6:	25ff      	movs	r5, #255	; 0xff
 8000bc8:	469b      	mov	fp, r3
 8000bca:	e754      	b.n	8000a76 <__aeabi_fmul+0x36>
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 f8c3 	bl	8002d58 <__clzsi2>
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	1f43      	subs	r3, r0, #5
 8000bd6:	2576      	movs	r5, #118	; 0x76
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	2300      	movs	r3, #0
 8000bdc:	426d      	negs	r5, r5
 8000bde:	4691      	mov	r9, r2
 8000be0:	1a2d      	subs	r5, r5, r0
 8000be2:	469a      	mov	sl, r3
 8000be4:	469b      	mov	fp, r3
 8000be6:	e746      	b.n	8000a76 <__aeabi_fmul+0x36>
 8000be8:	4652      	mov	r2, sl
 8000bea:	2303      	movs	r3, #3
 8000bec:	431a      	orrs	r2, r3
 8000bee:	4692      	mov	sl, r2
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	e750      	b.n	8000a96 <__aeabi_fmul+0x56>
 8000bf4:	0020      	movs	r0, r4
 8000bf6:	f002 f8af 	bl	8002d58 <__clzsi2>
 8000bfa:	1f43      	subs	r3, r0, #5
 8000bfc:	1a2d      	subs	r5, r5, r0
 8000bfe:	409c      	lsls	r4, r3
 8000c00:	3d76      	subs	r5, #118	; 0x76
 8000c02:	2000      	movs	r0, #0
 8000c04:	e747      	b.n	8000a96 <__aeabi_fmul+0x56>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	2700      	movs	r7, #0
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	22ff      	movs	r2, #255	; 0xff
 8000c0e:	e772      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c10:	4642      	mov	r2, r8
 8000c12:	e766      	b.n	8000ae2 <__aeabi_fmul+0xa2>
 8000c14:	464c      	mov	r4, r9
 8000c16:	0032      	movs	r2, r6
 8000c18:	4658      	mov	r0, fp
 8000c1a:	e762      	b.n	8000ae2 <__aeabi_fmul+0xa2>
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	464a      	mov	r2, r9
 8000c20:	03db      	lsls	r3, r3, #15
 8000c22:	421a      	tst	r2, r3
 8000c24:	d022      	beq.n	8000c6c <__aeabi_fmul+0x22c>
 8000c26:	421c      	tst	r4, r3
 8000c28:	d120      	bne.n	8000c6c <__aeabi_fmul+0x22c>
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	0a5b      	lsrs	r3, r3, #9
 8000c30:	4647      	mov	r7, r8
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	e75f      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c36:	2301      	movs	r3, #1
 8000c38:	1a9a      	subs	r2, r3, r2
 8000c3a:	2a1b      	cmp	r2, #27
 8000c3c:	dc21      	bgt.n	8000c82 <__aeabi_fmul+0x242>
 8000c3e:	0023      	movs	r3, r4
 8000c40:	9901      	ldr	r1, [sp, #4]
 8000c42:	40d3      	lsrs	r3, r2
 8000c44:	319e      	adds	r1, #158	; 0x9e
 8000c46:	408c      	lsls	r4, r1
 8000c48:	001a      	movs	r2, r3
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	1e5c      	subs	r4, r3, #1
 8000c4e:	41a3      	sbcs	r3, r4
 8000c50:	4313      	orrs	r3, r2
 8000c52:	075a      	lsls	r2, r3, #29
 8000c54:	d004      	beq.n	8000c60 <__aeabi_fmul+0x220>
 8000c56:	220f      	movs	r2, #15
 8000c58:	401a      	ands	r2, r3
 8000c5a:	2a04      	cmp	r2, #4
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fmul+0x220>
 8000c5e:	3304      	adds	r3, #4
 8000c60:	015a      	lsls	r2, r3, #5
 8000c62:	d411      	bmi.n	8000c88 <__aeabi_fmul+0x248>
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	0a5b      	lsrs	r3, r3, #9
 8000c68:	2200      	movs	r2, #0
 8000c6a:	e744      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	464a      	mov	r2, r9
 8000c70:	03db      	lsls	r3, r3, #15
 8000c72:	4313      	orrs	r3, r2
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	0a5b      	lsrs	r3, r3, #9
 8000c78:	0037      	movs	r7, r6
 8000c7a:	22ff      	movs	r2, #255	; 0xff
 8000c7c:	e73b      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c7e:	9501      	str	r5, [sp, #4]
 8000c80:	e787      	b.n	8000b92 <__aeabi_fmul+0x152>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	e736      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e733      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	03db      	lsls	r3, r3, #15
 8000c92:	4323      	orrs	r3, r4
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	0a5b      	lsrs	r3, r3, #9
 8000c98:	22ff      	movs	r2, #255	; 0xff
 8000c9a:	e72c      	b.n	8000af6 <__aeabi_fmul+0xb6>
 8000c9c:	08006d28 	.word	0x08006d28
 8000ca0:	f7ffffff 	.word	0xf7ffffff

08000ca4 <__aeabi_fsub>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	4647      	mov	r7, r8
 8000ca8:	46ce      	mov	lr, r9
 8000caa:	0044      	lsls	r4, r0, #1
 8000cac:	0fc2      	lsrs	r2, r0, #31
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	0247      	lsls	r7, r0, #9
 8000cb2:	0248      	lsls	r0, r1, #9
 8000cb4:	0a40      	lsrs	r0, r0, #9
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	4666      	mov	r6, ip
 8000cba:	0048      	lsls	r0, r1, #1
 8000cbc:	0a7f      	lsrs	r7, r7, #9
 8000cbe:	0e24      	lsrs	r4, r4, #24
 8000cc0:	00f6      	lsls	r6, r6, #3
 8000cc2:	0025      	movs	r5, r4
 8000cc4:	4690      	mov	r8, r2
 8000cc6:	00fb      	lsls	r3, r7, #3
 8000cc8:	0e00      	lsrs	r0, r0, #24
 8000cca:	0fc9      	lsrs	r1, r1, #31
 8000ccc:	46b1      	mov	r9, r6
 8000cce:	28ff      	cmp	r0, #255	; 0xff
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x30>
 8000cd2:	e085      	b.n	8000de0 <__aeabi_fsub+0x13c>
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	4071      	eors	r1, r6
 8000cd8:	1a26      	subs	r6, r4, r0
 8000cda:	4291      	cmp	r1, r2
 8000cdc:	d057      	beq.n	8000d8e <__aeabi_fsub+0xea>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	dd43      	ble.n	8000d6a <__aeabi_fsub+0xc6>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d000      	beq.n	8000ce8 <__aeabi_fsub+0x44>
 8000ce6:	e07f      	b.n	8000de8 <__aeabi_fsub+0x144>
 8000ce8:	4649      	mov	r1, r9
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x4c>
 8000cee:	e0aa      	b.n	8000e46 <__aeabi_fsub+0x1a2>
 8000cf0:	3e01      	subs	r6, #1
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fsub+0x54>
 8000cf6:	e0f7      	b.n	8000ee8 <__aeabi_fsub+0x244>
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	015a      	lsls	r2, r3, #5
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_fsub+0x5c>
 8000cfe:	e08b      	b.n	8000e18 <__aeabi_fsub+0x174>
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	099c      	lsrs	r4, r3, #6
 8000d04:	0020      	movs	r0, r4
 8000d06:	f002 f827 	bl	8002d58 <__clzsi2>
 8000d0a:	3805      	subs	r0, #5
 8000d0c:	4084      	lsls	r4, r0
 8000d0e:	4285      	cmp	r5, r0
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_fsub+0x70>
 8000d12:	e0d3      	b.n	8000ebc <__aeabi_fsub+0x218>
 8000d14:	1b45      	subs	r5, r0, r5
 8000d16:	0023      	movs	r3, r4
 8000d18:	2020      	movs	r0, #32
 8000d1a:	3501      	adds	r5, #1
 8000d1c:	40eb      	lsrs	r3, r5
 8000d1e:	1b45      	subs	r5, r0, r5
 8000d20:	40ac      	lsls	r4, r5
 8000d22:	1e62      	subs	r2, r4, #1
 8000d24:	4194      	sbcs	r4, r2
 8000d26:	4323      	orrs	r3, r4
 8000d28:	2407      	movs	r4, #7
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	401c      	ands	r4, r3
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4641      	mov	r1, r8
 8000d32:	400a      	ands	r2, r1
 8000d34:	2c00      	cmp	r4, #0
 8000d36:	d004      	beq.n	8000d42 <__aeabi_fsub+0x9e>
 8000d38:	210f      	movs	r1, #15
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	2904      	cmp	r1, #4
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0x9e>
 8000d40:	3304      	adds	r3, #4
 8000d42:	0159      	lsls	r1, r3, #5
 8000d44:	d400      	bmi.n	8000d48 <__aeabi_fsub+0xa4>
 8000d46:	e080      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000d48:	3501      	adds	r5, #1
 8000d4a:	b2ec      	uxtb	r4, r5
 8000d4c:	2dff      	cmp	r5, #255	; 0xff
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_fsub+0xae>
 8000d50:	e0a3      	b.n	8000e9a <__aeabi_fsub+0x1f6>
 8000d52:	24ff      	movs	r4, #255	; 0xff
 8000d54:	2300      	movs	r3, #0
 8000d56:	025b      	lsls	r3, r3, #9
 8000d58:	05e4      	lsls	r4, r4, #23
 8000d5a:	0a58      	lsrs	r0, r3, #9
 8000d5c:	07d2      	lsls	r2, r2, #31
 8000d5e:	4320      	orrs	r0, r4
 8000d60:	4310      	orrs	r0, r2
 8000d62:	bc0c      	pop	{r2, r3}
 8000d64:	4690      	mov	r8, r2
 8000d66:	4699      	mov	r9, r3
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d174      	bne.n	8000e58 <__aeabi_fsub+0x1b4>
 8000d6e:	1c60      	adds	r0, r4, #1
 8000d70:	b2c0      	uxtb	r0, r0
 8000d72:	2801      	cmp	r0, #1
 8000d74:	dc00      	bgt.n	8000d78 <__aeabi_fsub+0xd4>
 8000d76:	e0a7      	b.n	8000ec8 <__aeabi_fsub+0x224>
 8000d78:	464a      	mov	r2, r9
 8000d7a:	1a9c      	subs	r4, r3, r2
 8000d7c:	0162      	lsls	r2, r4, #5
 8000d7e:	d500      	bpl.n	8000d82 <__aeabi_fsub+0xde>
 8000d80:	e0b6      	b.n	8000ef0 <__aeabi_fsub+0x24c>
 8000d82:	2c00      	cmp	r4, #0
 8000d84:	d1be      	bne.n	8000d04 <__aeabi_fsub+0x60>
 8000d86:	2200      	movs	r2, #0
 8000d88:	2400      	movs	r4, #0
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e7e3      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	dc00      	bgt.n	8000d94 <__aeabi_fsub+0xf0>
 8000d92:	e085      	b.n	8000ea0 <__aeabi_fsub+0x1fc>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d046      	beq.n	8000e26 <__aeabi_fsub+0x182>
 8000d98:	2cff      	cmp	r4, #255	; 0xff
 8000d9a:	d049      	beq.n	8000e30 <__aeabi_fsub+0x18c>
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	4648      	mov	r0, r9
 8000da0:	04d2      	lsls	r2, r2, #19
 8000da2:	4310      	orrs	r0, r2
 8000da4:	4681      	mov	r9, r0
 8000da6:	2201      	movs	r2, #1
 8000da8:	2e1b      	cmp	r6, #27
 8000daa:	dc09      	bgt.n	8000dc0 <__aeabi_fsub+0x11c>
 8000dac:	2020      	movs	r0, #32
 8000dae:	464c      	mov	r4, r9
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	4084      	lsls	r4, r0
 8000db4:	464a      	mov	r2, r9
 8000db6:	0020      	movs	r0, r4
 8000db8:	40f2      	lsrs	r2, r6
 8000dba:	1e44      	subs	r4, r0, #1
 8000dbc:	41a0      	sbcs	r0, r4
 8000dbe:	4302      	orrs	r2, r0
 8000dc0:	189b      	adds	r3, r3, r2
 8000dc2:	015a      	lsls	r2, r3, #5
 8000dc4:	d528      	bpl.n	8000e18 <__aeabi_fsub+0x174>
 8000dc6:	3501      	adds	r5, #1
 8000dc8:	2dff      	cmp	r5, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fsub+0x12a>
 8000dcc:	e0a8      	b.n	8000f20 <__aeabi_fsub+0x27c>
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2407      	movs	r4, #7
 8000dd2:	4994      	ldr	r1, [pc, #592]	; (8001024 <__aeabi_fsub+0x380>)
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	400b      	ands	r3, r1
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	401c      	ands	r4, r3
 8000dde:	e7a6      	b.n	8000d2e <__aeabi_fsub+0x8a>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d000      	beq.n	8000de6 <__aeabi_fsub+0x142>
 8000de4:	e778      	b.n	8000cd8 <__aeabi_fsub+0x34>
 8000de6:	e775      	b.n	8000cd4 <__aeabi_fsub+0x30>
 8000de8:	2cff      	cmp	r4, #255	; 0xff
 8000dea:	d054      	beq.n	8000e96 <__aeabi_fsub+0x1f2>
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	4649      	mov	r1, r9
 8000df0:	04d2      	lsls	r2, r2, #19
 8000df2:	4311      	orrs	r1, r2
 8000df4:	4689      	mov	r9, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	2e1b      	cmp	r6, #27
 8000dfa:	dc09      	bgt.n	8000e10 <__aeabi_fsub+0x16c>
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4648      	mov	r0, r9
 8000e00:	1b89      	subs	r1, r1, r6
 8000e02:	4088      	lsls	r0, r1
 8000e04:	464a      	mov	r2, r9
 8000e06:	0001      	movs	r1, r0
 8000e08:	40f2      	lsrs	r2, r6
 8000e0a:	1e48      	subs	r0, r1, #1
 8000e0c:	4181      	sbcs	r1, r0
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	015a      	lsls	r2, r3, #5
 8000e14:	d500      	bpl.n	8000e18 <__aeabi_fsub+0x174>
 8000e16:	e773      	b.n	8000d00 <__aeabi_fsub+0x5c>
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4641      	mov	r1, r8
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	0759      	lsls	r1, r3, #29
 8000e20:	d000      	beq.n	8000e24 <__aeabi_fsub+0x180>
 8000e22:	e789      	b.n	8000d38 <__aeabi_fsub+0x94>
 8000e24:	e011      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000e26:	4648      	mov	r0, r9
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d158      	bne.n	8000ede <__aeabi_fsub+0x23a>
 8000e2c:	2cff      	cmp	r4, #255	; 0xff
 8000e2e:	d10c      	bne.n	8000e4a <__aeabi_fsub+0x1a6>
 8000e30:	08db      	lsrs	r3, r3, #3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x194>
 8000e36:	e78c      	b.n	8000d52 <__aeabi_fsub+0xae>
 8000e38:	2080      	movs	r0, #128	; 0x80
 8000e3a:	03c0      	lsls	r0, r0, #15
 8000e3c:	4303      	orrs	r3, r0
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	0a5b      	lsrs	r3, r3, #9
 8000e42:	24ff      	movs	r4, #255	; 0xff
 8000e44:	e787      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8000e46:	2cff      	cmp	r4, #255	; 0xff
 8000e48:	d025      	beq.n	8000e96 <__aeabi_fsub+0x1f2>
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	2dff      	cmp	r5, #255	; 0xff
 8000e4e:	d0f0      	beq.n	8000e32 <__aeabi_fsub+0x18e>
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	0a5b      	lsrs	r3, r3, #9
 8000e54:	b2ec      	uxtb	r4, r5
 8000e56:	e77e      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d04d      	beq.n	8000ef8 <__aeabi_fsub+0x254>
 8000e5c:	28ff      	cmp	r0, #255	; 0xff
 8000e5e:	d018      	beq.n	8000e92 <__aeabi_fsub+0x1ee>
 8000e60:	2480      	movs	r4, #128	; 0x80
 8000e62:	04e4      	lsls	r4, r4, #19
 8000e64:	4272      	negs	r2, r6
 8000e66:	4323      	orrs	r3, r4
 8000e68:	2a1b      	cmp	r2, #27
 8000e6a:	dd00      	ble.n	8000e6e <__aeabi_fsub+0x1ca>
 8000e6c:	e0c4      	b.n	8000ff8 <__aeabi_fsub+0x354>
 8000e6e:	001c      	movs	r4, r3
 8000e70:	2520      	movs	r5, #32
 8000e72:	40d4      	lsrs	r4, r2
 8000e74:	1aaa      	subs	r2, r5, r2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	4193      	sbcs	r3, r2
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	464a      	mov	r2, r9
 8000e80:	0005      	movs	r5, r0
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	4688      	mov	r8, r1
 8000e86:	e738      	b.n	8000cfa <__aeabi_fsub+0x56>
 8000e88:	1c72      	adds	r2, r6, #1
 8000e8a:	d0f8      	beq.n	8000e7e <__aeabi_fsub+0x1da>
 8000e8c:	43f2      	mvns	r2, r6
 8000e8e:	28ff      	cmp	r0, #255	; 0xff
 8000e90:	d1ea      	bne.n	8000e68 <__aeabi_fsub+0x1c4>
 8000e92:	000a      	movs	r2, r1
 8000e94:	464b      	mov	r3, r9
 8000e96:	25ff      	movs	r5, #255	; 0xff
 8000e98:	e7d7      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000e9a:	019b      	lsls	r3, r3, #6
 8000e9c:	0a5b      	lsrs	r3, r3, #9
 8000e9e:	e75a      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	d141      	bne.n	8000f28 <__aeabi_fsub+0x284>
 8000ea4:	1c65      	adds	r5, r4, #1
 8000ea6:	b2e9      	uxtb	r1, r5
 8000ea8:	2901      	cmp	r1, #1
 8000eaa:	dd45      	ble.n	8000f38 <__aeabi_fsub+0x294>
 8000eac:	2dff      	cmp	r5, #255	; 0xff
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_fsub+0x20e>
 8000eb0:	e74f      	b.n	8000d52 <__aeabi_fsub+0xae>
 8000eb2:	2407      	movs	r4, #7
 8000eb4:	444b      	add	r3, r9
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	401c      	ands	r4, r3
 8000eba:	e738      	b.n	8000d2e <__aeabi_fsub+0x8a>
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <__aeabi_fsub+0x384>)
 8000ec0:	1a2d      	subs	r5, r5, r0
 8000ec2:	4023      	ands	r3, r4
 8000ec4:	4014      	ands	r4, r2
 8000ec6:	e732      	b.n	8000d2e <__aeabi_fsub+0x8a>
 8000ec8:	2c00      	cmp	r4, #0
 8000eca:	d11d      	bne.n	8000f08 <__aeabi_fsub+0x264>
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d17a      	bne.n	8000fc6 <__aeabi_fsub+0x322>
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_fsub+0x234>
 8000ed6:	e091      	b.n	8000ffc <__aeabi_fsub+0x358>
 8000ed8:	000a      	movs	r2, r1
 8000eda:	2500      	movs	r5, #0
 8000edc:	e7b5      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000ede:	3e01      	subs	r6, #1
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d119      	bne.n	8000f18 <__aeabi_fsub+0x274>
 8000ee4:	444b      	add	r3, r9
 8000ee6:	e76c      	b.n	8000dc2 <__aeabi_fsub+0x11e>
 8000ee8:	2cff      	cmp	r4, #255	; 0xff
 8000eea:	d184      	bne.n	8000df6 <__aeabi_fsub+0x152>
 8000eec:	25ff      	movs	r5, #255	; 0xff
 8000eee:	e7ac      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000ef0:	464a      	mov	r2, r9
 8000ef2:	4688      	mov	r8, r1
 8000ef4:	1ad4      	subs	r4, r2, r3
 8000ef6:	e705      	b.n	8000d04 <__aeabi_fsub+0x60>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1c5      	bne.n	8000e88 <__aeabi_fsub+0x1e4>
 8000efc:	000a      	movs	r2, r1
 8000efe:	28ff      	cmp	r0, #255	; 0xff
 8000f00:	d0c8      	beq.n	8000e94 <__aeabi_fsub+0x1f0>
 8000f02:	0005      	movs	r5, r0
 8000f04:	464b      	mov	r3, r9
 8000f06:	e7a0      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d149      	bne.n	8000fa0 <__aeabi_fsub+0x2fc>
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d077      	beq.n	8001002 <__aeabi_fsub+0x35e>
 8000f12:	000a      	movs	r2, r1
 8000f14:	25ff      	movs	r5, #255	; 0xff
 8000f16:	e798      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000f18:	2cff      	cmp	r4, #255	; 0xff
 8000f1a:	d000      	beq.n	8000f1e <__aeabi_fsub+0x27a>
 8000f1c:	e743      	b.n	8000da6 <__aeabi_fsub+0x102>
 8000f1e:	e787      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000f20:	000a      	movs	r2, r1
 8000f22:	24ff      	movs	r4, #255	; 0xff
 8000f24:	2300      	movs	r3, #0
 8000f26:	e716      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8000f28:	2c00      	cmp	r4, #0
 8000f2a:	d115      	bne.n	8000f58 <__aeabi_fsub+0x2b4>
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d157      	bne.n	8000fe0 <__aeabi_fsub+0x33c>
 8000f30:	28ff      	cmp	r0, #255	; 0xff
 8000f32:	d1e6      	bne.n	8000f02 <__aeabi_fsub+0x25e>
 8000f34:	464b      	mov	r3, r9
 8000f36:	e77b      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	d120      	bne.n	8000f7e <__aeabi_fsub+0x2da>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d057      	beq.n	8000ff0 <__aeabi_fsub+0x34c>
 8000f40:	4649      	mov	r1, r9
 8000f42:	2900      	cmp	r1, #0
 8000f44:	d053      	beq.n	8000fee <__aeabi_fsub+0x34a>
 8000f46:	444b      	add	r3, r9
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	d568      	bpl.n	800101e <__aeabi_fsub+0x37a>
 8000f4c:	2407      	movs	r4, #7
 8000f4e:	4a36      	ldr	r2, [pc, #216]	; (8001028 <__aeabi_fsub+0x384>)
 8000f50:	401c      	ands	r4, r3
 8000f52:	2501      	movs	r5, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	e6ea      	b.n	8000d2e <__aeabi_fsub+0x8a>
 8000f58:	28ff      	cmp	r0, #255	; 0xff
 8000f5a:	d0eb      	beq.n	8000f34 <__aeabi_fsub+0x290>
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	04d2      	lsls	r2, r2, #19
 8000f60:	4276      	negs	r6, r6
 8000f62:	4313      	orrs	r3, r2
 8000f64:	2e1b      	cmp	r6, #27
 8000f66:	dc53      	bgt.n	8001010 <__aeabi_fsub+0x36c>
 8000f68:	2520      	movs	r5, #32
 8000f6a:	1bad      	subs	r5, r5, r6
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	40ab      	lsls	r3, r5
 8000f70:	40f2      	lsrs	r2, r6
 8000f72:	1e5c      	subs	r4, r3, #1
 8000f74:	41a3      	sbcs	r3, r4
 8000f76:	4313      	orrs	r3, r2
 8000f78:	444b      	add	r3, r9
 8000f7a:	0005      	movs	r5, r0
 8000f7c:	e721      	b.n	8000dc2 <__aeabi_fsub+0x11e>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0d8      	beq.n	8000f34 <__aeabi_fsub+0x290>
 8000f82:	4649      	mov	r1, r9
 8000f84:	2900      	cmp	r1, #0
 8000f86:	d100      	bne.n	8000f8a <__aeabi_fsub+0x2e6>
 8000f88:	e752      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	03c9      	lsls	r1, r1, #15
 8000f8e:	420f      	tst	r7, r1
 8000f90:	d100      	bne.n	8000f94 <__aeabi_fsub+0x2f0>
 8000f92:	e74d      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000f94:	4660      	mov	r0, ip
 8000f96:	4208      	tst	r0, r1
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x2f8>
 8000f9a:	e749      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	e747      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	25ff      	movs	r5, #255	; 0xff
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_fsub+0x306>
 8000fa8:	e74f      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	03d2      	lsls	r2, r2, #15
 8000fae:	4217      	tst	r7, r2
 8000fb0:	d004      	beq.n	8000fbc <__aeabi_fsub+0x318>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	4210      	tst	r0, r2
 8000fb6:	d101      	bne.n	8000fbc <__aeabi_fsub+0x318>
 8000fb8:	464b      	mov	r3, r9
 8000fba:	4688      	mov	r8, r1
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	25ff      	movs	r5, #255	; 0xff
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	e741      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8000fc6:	4648      	mov	r0, r9
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d01f      	beq.n	800100c <__aeabi_fsub+0x368>
 8000fcc:	1a1a      	subs	r2, r3, r0
 8000fce:	0150      	lsls	r0, r2, #5
 8000fd0:	d520      	bpl.n	8001014 <__aeabi_fsub+0x370>
 8000fd2:	464a      	mov	r2, r9
 8000fd4:	2407      	movs	r4, #7
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	401c      	ands	r4, r3
 8000fda:	4688      	mov	r8, r1
 8000fdc:	2500      	movs	r5, #0
 8000fde:	e6a6      	b.n	8000d2e <__aeabi_fsub+0x8a>
 8000fe0:	1c74      	adds	r4, r6, #1
 8000fe2:	d0c9      	beq.n	8000f78 <__aeabi_fsub+0x2d4>
 8000fe4:	43f6      	mvns	r6, r6
 8000fe6:	28ff      	cmp	r0, #255	; 0xff
 8000fe8:	d1bc      	bne.n	8000f64 <__aeabi_fsub+0x2c0>
 8000fea:	464b      	mov	r3, r9
 8000fec:	e720      	b.n	8000e30 <__aeabi_fsub+0x18c>
 8000fee:	4699      	mov	r9, r3
 8000ff0:	464b      	mov	r3, r9
 8000ff2:	2500      	movs	r5, #0
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	e72b      	b.n	8000e50 <__aeabi_fsub+0x1ac>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e740      	b.n	8000e7e <__aeabi_fsub+0x1da>
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2300      	movs	r3, #0
 8001000:	e6a9      	b.n	8000d56 <__aeabi_fsub+0xb2>
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	2200      	movs	r2, #0
 8001006:	03db      	lsls	r3, r3, #15
 8001008:	24ff      	movs	r4, #255	; 0xff
 800100a:	e6a4      	b.n	8000d56 <__aeabi_fsub+0xb2>
 800100c:	2500      	movs	r5, #0
 800100e:	e71c      	b.n	8000e4a <__aeabi_fsub+0x1a6>
 8001010:	2301      	movs	r3, #1
 8001012:	e7b1      	b.n	8000f78 <__aeabi_fsub+0x2d4>
 8001014:	2a00      	cmp	r2, #0
 8001016:	d0f1      	beq.n	8000ffc <__aeabi_fsub+0x358>
 8001018:	0013      	movs	r3, r2
 800101a:	2500      	movs	r5, #0
 800101c:	e6fc      	b.n	8000e18 <__aeabi_fsub+0x174>
 800101e:	2500      	movs	r5, #0
 8001020:	e6fa      	b.n	8000e18 <__aeabi_fsub+0x174>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	7dffffff 	.word	0x7dffffff
 8001028:	fbffffff 	.word	0xfbffffff

0800102c <__aeabi_f2iz>:
 800102c:	0241      	lsls	r1, r0, #9
 800102e:	0042      	lsls	r2, r0, #1
 8001030:	0fc3      	lsrs	r3, r0, #31
 8001032:	0a49      	lsrs	r1, r1, #9
 8001034:	0e12      	lsrs	r2, r2, #24
 8001036:	2000      	movs	r0, #0
 8001038:	2a7e      	cmp	r2, #126	; 0x7e
 800103a:	d90d      	bls.n	8001058 <__aeabi_f2iz+0x2c>
 800103c:	2a9d      	cmp	r2, #157	; 0x9d
 800103e:	d80c      	bhi.n	800105a <__aeabi_f2iz+0x2e>
 8001040:	2080      	movs	r0, #128	; 0x80
 8001042:	0400      	lsls	r0, r0, #16
 8001044:	4301      	orrs	r1, r0
 8001046:	2a95      	cmp	r2, #149	; 0x95
 8001048:	dc0a      	bgt.n	8001060 <__aeabi_f2iz+0x34>
 800104a:	2096      	movs	r0, #150	; 0x96
 800104c:	1a82      	subs	r2, r0, r2
 800104e:	40d1      	lsrs	r1, r2
 8001050:	4248      	negs	r0, r1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_f2iz+0x2c>
 8001056:	0008      	movs	r0, r1
 8001058:	4770      	bx	lr
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <__aeabi_f2iz+0x3c>)
 800105c:	1898      	adds	r0, r3, r2
 800105e:	e7fb      	b.n	8001058 <__aeabi_f2iz+0x2c>
 8001060:	3a96      	subs	r2, #150	; 0x96
 8001062:	4091      	lsls	r1, r2
 8001064:	e7f4      	b.n	8001050 <__aeabi_f2iz+0x24>
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	7fffffff 	.word	0x7fffffff

0800106c <__aeabi_i2f>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	2800      	cmp	r0, #0
 8001070:	d03d      	beq.n	80010ee <__aeabi_i2f+0x82>
 8001072:	17c3      	asrs	r3, r0, #31
 8001074:	18c5      	adds	r5, r0, r3
 8001076:	405d      	eors	r5, r3
 8001078:	0fc4      	lsrs	r4, r0, #31
 800107a:	0028      	movs	r0, r5
 800107c:	f001 fe6c 	bl	8002d58 <__clzsi2>
 8001080:	229e      	movs	r2, #158	; 0x9e
 8001082:	1a12      	subs	r2, r2, r0
 8001084:	2a96      	cmp	r2, #150	; 0x96
 8001086:	dc07      	bgt.n	8001098 <__aeabi_i2f+0x2c>
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	2808      	cmp	r0, #8
 800108c:	dd33      	ble.n	80010f6 <__aeabi_i2f+0x8a>
 800108e:	3808      	subs	r0, #8
 8001090:	4085      	lsls	r5, r0
 8001092:	0268      	lsls	r0, r5, #9
 8001094:	0a40      	lsrs	r0, r0, #9
 8001096:	e023      	b.n	80010e0 <__aeabi_i2f+0x74>
 8001098:	2a99      	cmp	r2, #153	; 0x99
 800109a:	dd0b      	ble.n	80010b4 <__aeabi_i2f+0x48>
 800109c:	2305      	movs	r3, #5
 800109e:	0029      	movs	r1, r5
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	40d9      	lsrs	r1, r3
 80010a4:	0003      	movs	r3, r0
 80010a6:	331b      	adds	r3, #27
 80010a8:	409d      	lsls	r5, r3
 80010aa:	002b      	movs	r3, r5
 80010ac:	1e5d      	subs	r5, r3, #1
 80010ae:	41ab      	sbcs	r3, r5
 80010b0:	4319      	orrs	r1, r3
 80010b2:	000d      	movs	r5, r1
 80010b4:	2805      	cmp	r0, #5
 80010b6:	dd01      	ble.n	80010bc <__aeabi_i2f+0x50>
 80010b8:	1f43      	subs	r3, r0, #5
 80010ba:	409d      	lsls	r5, r3
 80010bc:	002b      	movs	r3, r5
 80010be:	490f      	ldr	r1, [pc, #60]	; (80010fc <__aeabi_i2f+0x90>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	076e      	lsls	r6, r5, #29
 80010c4:	d009      	beq.n	80010da <__aeabi_i2f+0x6e>
 80010c6:	260f      	movs	r6, #15
 80010c8:	4035      	ands	r5, r6
 80010ca:	2d04      	cmp	r5, #4
 80010cc:	d005      	beq.n	80010da <__aeabi_i2f+0x6e>
 80010ce:	3304      	adds	r3, #4
 80010d0:	015d      	lsls	r5, r3, #5
 80010d2:	d502      	bpl.n	80010da <__aeabi_i2f+0x6e>
 80010d4:	229f      	movs	r2, #159	; 0x9f
 80010d6:	400b      	ands	r3, r1
 80010d8:	1a12      	subs	r2, r2, r0
 80010da:	019b      	lsls	r3, r3, #6
 80010dc:	0a58      	lsrs	r0, r3, #9
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	0240      	lsls	r0, r0, #9
 80010e2:	05d2      	lsls	r2, r2, #23
 80010e4:	0a40      	lsrs	r0, r0, #9
 80010e6:	07e4      	lsls	r4, r4, #31
 80010e8:	4310      	orrs	r0, r2
 80010ea:	4320      	orrs	r0, r4
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
 80010ee:	2400      	movs	r4, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	2000      	movs	r0, #0
 80010f4:	e7f4      	b.n	80010e0 <__aeabi_i2f+0x74>
 80010f6:	0268      	lsls	r0, r5, #9
 80010f8:	0a40      	lsrs	r0, r0, #9
 80010fa:	e7f1      	b.n	80010e0 <__aeabi_i2f+0x74>
 80010fc:	fbffffff 	.word	0xfbffffff

08001100 <__aeabi_ui2f>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	1e04      	subs	r4, r0, #0
 8001104:	d034      	beq.n	8001170 <__aeabi_ui2f+0x70>
 8001106:	f001 fe27 	bl	8002d58 <__clzsi2>
 800110a:	229e      	movs	r2, #158	; 0x9e
 800110c:	1a12      	subs	r2, r2, r0
 800110e:	2a96      	cmp	r2, #150	; 0x96
 8001110:	dc07      	bgt.n	8001122 <__aeabi_ui2f+0x22>
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	2808      	cmp	r0, #8
 8001116:	dd2e      	ble.n	8001176 <__aeabi_ui2f+0x76>
 8001118:	3808      	subs	r0, #8
 800111a:	4084      	lsls	r4, r0
 800111c:	0260      	lsls	r0, r4, #9
 800111e:	0a40      	lsrs	r0, r0, #9
 8001120:	e021      	b.n	8001166 <__aeabi_ui2f+0x66>
 8001122:	2a99      	cmp	r2, #153	; 0x99
 8001124:	dd09      	ble.n	800113a <__aeabi_ui2f+0x3a>
 8001126:	0003      	movs	r3, r0
 8001128:	0021      	movs	r1, r4
 800112a:	331b      	adds	r3, #27
 800112c:	4099      	lsls	r1, r3
 800112e:	1e4b      	subs	r3, r1, #1
 8001130:	4199      	sbcs	r1, r3
 8001132:	2305      	movs	r3, #5
 8001134:	1a1b      	subs	r3, r3, r0
 8001136:	40dc      	lsrs	r4, r3
 8001138:	430c      	orrs	r4, r1
 800113a:	2805      	cmp	r0, #5
 800113c:	dd01      	ble.n	8001142 <__aeabi_ui2f+0x42>
 800113e:	1f43      	subs	r3, r0, #5
 8001140:	409c      	lsls	r4, r3
 8001142:	0023      	movs	r3, r4
 8001144:	490d      	ldr	r1, [pc, #52]	; (800117c <__aeabi_ui2f+0x7c>)
 8001146:	400b      	ands	r3, r1
 8001148:	0765      	lsls	r5, r4, #29
 800114a:	d009      	beq.n	8001160 <__aeabi_ui2f+0x60>
 800114c:	250f      	movs	r5, #15
 800114e:	402c      	ands	r4, r5
 8001150:	2c04      	cmp	r4, #4
 8001152:	d005      	beq.n	8001160 <__aeabi_ui2f+0x60>
 8001154:	3304      	adds	r3, #4
 8001156:	015c      	lsls	r4, r3, #5
 8001158:	d502      	bpl.n	8001160 <__aeabi_ui2f+0x60>
 800115a:	229f      	movs	r2, #159	; 0x9f
 800115c:	400b      	ands	r3, r1
 800115e:	1a12      	subs	r2, r2, r0
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	0a58      	lsrs	r0, r3, #9
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	0240      	lsls	r0, r0, #9
 8001168:	05d2      	lsls	r2, r2, #23
 800116a:	0a40      	lsrs	r0, r0, #9
 800116c:	4310      	orrs	r0, r2
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	2200      	movs	r2, #0
 8001172:	2000      	movs	r0, #0
 8001174:	e7f7      	b.n	8001166 <__aeabi_ui2f+0x66>
 8001176:	0260      	lsls	r0, r4, #9
 8001178:	0a40      	lsrs	r0, r0, #9
 800117a:	e7f4      	b.n	8001166 <__aeabi_ui2f+0x66>
 800117c:	fbffffff 	.word	0xfbffffff

08001180 <__aeabi_dadd>:
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	464f      	mov	r7, r9
 8001184:	4646      	mov	r6, r8
 8001186:	46d6      	mov	lr, sl
 8001188:	000c      	movs	r4, r1
 800118a:	0309      	lsls	r1, r1, #12
 800118c:	b5c0      	push	{r6, r7, lr}
 800118e:	0a49      	lsrs	r1, r1, #9
 8001190:	0f47      	lsrs	r7, r0, #29
 8001192:	005e      	lsls	r6, r3, #1
 8001194:	4339      	orrs	r1, r7
 8001196:	031f      	lsls	r7, r3, #12
 8001198:	0fdb      	lsrs	r3, r3, #31
 800119a:	469c      	mov	ip, r3
 800119c:	0065      	lsls	r5, r4, #1
 800119e:	0a7b      	lsrs	r3, r7, #9
 80011a0:	0f57      	lsrs	r7, r2, #29
 80011a2:	431f      	orrs	r7, r3
 80011a4:	0d6d      	lsrs	r5, r5, #21
 80011a6:	0fe4      	lsrs	r4, r4, #31
 80011a8:	0d76      	lsrs	r6, r6, #21
 80011aa:	46a1      	mov	r9, r4
 80011ac:	00c0      	lsls	r0, r0, #3
 80011ae:	46b8      	mov	r8, r7
 80011b0:	00d2      	lsls	r2, r2, #3
 80011b2:	1bab      	subs	r3, r5, r6
 80011b4:	4564      	cmp	r4, ip
 80011b6:	d07b      	beq.n	80012b0 <__aeabi_dadd+0x130>
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd5f      	ble.n	800127c <__aeabi_dadd+0xfc>
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d000      	beq.n	80011c2 <__aeabi_dadd+0x42>
 80011c0:	e0a4      	b.n	800130c <__aeabi_dadd+0x18c>
 80011c2:	003e      	movs	r6, r7
 80011c4:	4316      	orrs	r6, r2
 80011c6:	d100      	bne.n	80011ca <__aeabi_dadd+0x4a>
 80011c8:	e112      	b.n	80013f0 <__aeabi_dadd+0x270>
 80011ca:	1e5e      	subs	r6, r3, #1
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dadd+0x52>
 80011d0:	e19e      	b.n	8001510 <__aeabi_dadd+0x390>
 80011d2:	1a87      	subs	r7, r0, r2
 80011d4:	4643      	mov	r3, r8
 80011d6:	42b8      	cmp	r0, r7
 80011d8:	4180      	sbcs	r0, r0
 80011da:	2501      	movs	r5, #1
 80011dc:	1ac9      	subs	r1, r1, r3
 80011de:	4240      	negs	r0, r0
 80011e0:	1a09      	subs	r1, r1, r0
 80011e2:	020b      	lsls	r3, r1, #8
 80011e4:	d400      	bmi.n	80011e8 <__aeabi_dadd+0x68>
 80011e6:	e131      	b.n	800144c <__aeabi_dadd+0x2cc>
 80011e8:	0249      	lsls	r1, r1, #9
 80011ea:	0a4e      	lsrs	r6, r1, #9
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_dadd+0x72>
 80011f0:	e16e      	b.n	80014d0 <__aeabi_dadd+0x350>
 80011f2:	0030      	movs	r0, r6
 80011f4:	f001 fdb0 	bl	8002d58 <__clzsi2>
 80011f8:	0003      	movs	r3, r0
 80011fa:	3b08      	subs	r3, #8
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	dd00      	ble.n	8001202 <__aeabi_dadd+0x82>
 8001200:	e161      	b.n	80014c6 <__aeabi_dadd+0x346>
 8001202:	2220      	movs	r2, #32
 8001204:	0039      	movs	r1, r7
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	409e      	lsls	r6, r3
 800120a:	40d1      	lsrs	r1, r2
 800120c:	409f      	lsls	r7, r3
 800120e:	430e      	orrs	r6, r1
 8001210:	429d      	cmp	r5, r3
 8001212:	dd00      	ble.n	8001216 <__aeabi_dadd+0x96>
 8001214:	e151      	b.n	80014ba <__aeabi_dadd+0x33a>
 8001216:	1b5d      	subs	r5, r3, r5
 8001218:	1c6b      	adds	r3, r5, #1
 800121a:	2b1f      	cmp	r3, #31
 800121c:	dd00      	ble.n	8001220 <__aeabi_dadd+0xa0>
 800121e:	e17c      	b.n	800151a <__aeabi_dadd+0x39a>
 8001220:	2120      	movs	r1, #32
 8001222:	1ac9      	subs	r1, r1, r3
 8001224:	003d      	movs	r5, r7
 8001226:	0030      	movs	r0, r6
 8001228:	408f      	lsls	r7, r1
 800122a:	4088      	lsls	r0, r1
 800122c:	40dd      	lsrs	r5, r3
 800122e:	1e79      	subs	r1, r7, #1
 8001230:	418f      	sbcs	r7, r1
 8001232:	0031      	movs	r1, r6
 8001234:	2207      	movs	r2, #7
 8001236:	4328      	orrs	r0, r5
 8001238:	40d9      	lsrs	r1, r3
 800123a:	2500      	movs	r5, #0
 800123c:	4307      	orrs	r7, r0
 800123e:	403a      	ands	r2, r7
 8001240:	2a00      	cmp	r2, #0
 8001242:	d009      	beq.n	8001258 <__aeabi_dadd+0xd8>
 8001244:	230f      	movs	r3, #15
 8001246:	403b      	ands	r3, r7
 8001248:	2b04      	cmp	r3, #4
 800124a:	d005      	beq.n	8001258 <__aeabi_dadd+0xd8>
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	42bb      	cmp	r3, r7
 8001250:	41bf      	sbcs	r7, r7
 8001252:	427f      	negs	r7, r7
 8001254:	19c9      	adds	r1, r1, r7
 8001256:	001f      	movs	r7, r3
 8001258:	020b      	lsls	r3, r1, #8
 800125a:	d400      	bmi.n	800125e <__aeabi_dadd+0xde>
 800125c:	e226      	b.n	80016ac <__aeabi_dadd+0x52c>
 800125e:	1c6a      	adds	r2, r5, #1
 8001260:	4bc6      	ldr	r3, [pc, #792]	; (800157c <__aeabi_dadd+0x3fc>)
 8001262:	0555      	lsls	r5, r2, #21
 8001264:	0d6d      	lsrs	r5, r5, #21
 8001266:	429a      	cmp	r2, r3
 8001268:	d100      	bne.n	800126c <__aeabi_dadd+0xec>
 800126a:	e106      	b.n	800147a <__aeabi_dadd+0x2fa>
 800126c:	4ac4      	ldr	r2, [pc, #784]	; (8001580 <__aeabi_dadd+0x400>)
 800126e:	08ff      	lsrs	r7, r7, #3
 8001270:	400a      	ands	r2, r1
 8001272:	0753      	lsls	r3, r2, #29
 8001274:	0252      	lsls	r2, r2, #9
 8001276:	433b      	orrs	r3, r7
 8001278:	0b12      	lsrs	r2, r2, #12
 800127a:	e08e      	b.n	800139a <__aeabi_dadd+0x21a>
 800127c:	2b00      	cmp	r3, #0
 800127e:	d000      	beq.n	8001282 <__aeabi_dadd+0x102>
 8001280:	e0b8      	b.n	80013f4 <__aeabi_dadd+0x274>
 8001282:	1c6b      	adds	r3, r5, #1
 8001284:	055b      	lsls	r3, r3, #21
 8001286:	0d5b      	lsrs	r3, r3, #21
 8001288:	2b01      	cmp	r3, #1
 800128a:	dc00      	bgt.n	800128e <__aeabi_dadd+0x10e>
 800128c:	e130      	b.n	80014f0 <__aeabi_dadd+0x370>
 800128e:	1a87      	subs	r7, r0, r2
 8001290:	4643      	mov	r3, r8
 8001292:	42b8      	cmp	r0, r7
 8001294:	41b6      	sbcs	r6, r6
 8001296:	1acb      	subs	r3, r1, r3
 8001298:	4276      	negs	r6, r6
 800129a:	1b9e      	subs	r6, r3, r6
 800129c:	0233      	lsls	r3, r6, #8
 800129e:	d500      	bpl.n	80012a2 <__aeabi_dadd+0x122>
 80012a0:	e14c      	b.n	800153c <__aeabi_dadd+0x3bc>
 80012a2:	003b      	movs	r3, r7
 80012a4:	4333      	orrs	r3, r6
 80012a6:	d1a1      	bne.n	80011ec <__aeabi_dadd+0x6c>
 80012a8:	2200      	movs	r2, #0
 80012aa:	2400      	movs	r4, #0
 80012ac:	2500      	movs	r5, #0
 80012ae:	e070      	b.n	8001392 <__aeabi_dadd+0x212>
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	dc00      	bgt.n	80012b6 <__aeabi_dadd+0x136>
 80012b4:	e0e5      	b.n	8001482 <__aeabi_dadd+0x302>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d100      	bne.n	80012bc <__aeabi_dadd+0x13c>
 80012ba:	e083      	b.n	80013c4 <__aeabi_dadd+0x244>
 80012bc:	4eaf      	ldr	r6, [pc, #700]	; (800157c <__aeabi_dadd+0x3fc>)
 80012be:	42b5      	cmp	r5, r6
 80012c0:	d060      	beq.n	8001384 <__aeabi_dadd+0x204>
 80012c2:	2680      	movs	r6, #128	; 0x80
 80012c4:	0436      	lsls	r6, r6, #16
 80012c6:	4337      	orrs	r7, r6
 80012c8:	46b8      	mov	r8, r7
 80012ca:	2b38      	cmp	r3, #56	; 0x38
 80012cc:	dc00      	bgt.n	80012d0 <__aeabi_dadd+0x150>
 80012ce:	e13e      	b.n	800154e <__aeabi_dadd+0x3ce>
 80012d0:	4643      	mov	r3, r8
 80012d2:	4313      	orrs	r3, r2
 80012d4:	001f      	movs	r7, r3
 80012d6:	1e7a      	subs	r2, r7, #1
 80012d8:	4197      	sbcs	r7, r2
 80012da:	183f      	adds	r7, r7, r0
 80012dc:	4287      	cmp	r7, r0
 80012de:	4180      	sbcs	r0, r0
 80012e0:	4240      	negs	r0, r0
 80012e2:	1809      	adds	r1, r1, r0
 80012e4:	020b      	lsls	r3, r1, #8
 80012e6:	d400      	bmi.n	80012ea <__aeabi_dadd+0x16a>
 80012e8:	e0b0      	b.n	800144c <__aeabi_dadd+0x2cc>
 80012ea:	4ba4      	ldr	r3, [pc, #656]	; (800157c <__aeabi_dadd+0x3fc>)
 80012ec:	3501      	adds	r5, #1
 80012ee:	429d      	cmp	r5, r3
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dadd+0x174>
 80012f2:	e0c3      	b.n	800147c <__aeabi_dadd+0x2fc>
 80012f4:	4aa2      	ldr	r2, [pc, #648]	; (8001580 <__aeabi_dadd+0x400>)
 80012f6:	087b      	lsrs	r3, r7, #1
 80012f8:	400a      	ands	r2, r1
 80012fa:	2101      	movs	r1, #1
 80012fc:	400f      	ands	r7, r1
 80012fe:	431f      	orrs	r7, r3
 8001300:	0851      	lsrs	r1, r2, #1
 8001302:	07d3      	lsls	r3, r2, #31
 8001304:	2207      	movs	r2, #7
 8001306:	431f      	orrs	r7, r3
 8001308:	403a      	ands	r2, r7
 800130a:	e799      	b.n	8001240 <__aeabi_dadd+0xc0>
 800130c:	4e9b      	ldr	r6, [pc, #620]	; (800157c <__aeabi_dadd+0x3fc>)
 800130e:	42b5      	cmp	r5, r6
 8001310:	d038      	beq.n	8001384 <__aeabi_dadd+0x204>
 8001312:	2680      	movs	r6, #128	; 0x80
 8001314:	0436      	lsls	r6, r6, #16
 8001316:	4337      	orrs	r7, r6
 8001318:	46b8      	mov	r8, r7
 800131a:	2b38      	cmp	r3, #56	; 0x38
 800131c:	dd00      	ble.n	8001320 <__aeabi_dadd+0x1a0>
 800131e:	e0dc      	b.n	80014da <__aeabi_dadd+0x35a>
 8001320:	2b1f      	cmp	r3, #31
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x1a6>
 8001324:	e130      	b.n	8001588 <__aeabi_dadd+0x408>
 8001326:	001e      	movs	r6, r3
 8001328:	4647      	mov	r7, r8
 800132a:	3e20      	subs	r6, #32
 800132c:	40f7      	lsrs	r7, r6
 800132e:	46bc      	mov	ip, r7
 8001330:	2b20      	cmp	r3, #32
 8001332:	d004      	beq.n	800133e <__aeabi_dadd+0x1be>
 8001334:	2640      	movs	r6, #64	; 0x40
 8001336:	1af3      	subs	r3, r6, r3
 8001338:	4646      	mov	r6, r8
 800133a:	409e      	lsls	r6, r3
 800133c:	4332      	orrs	r2, r6
 800133e:	0017      	movs	r7, r2
 8001340:	4663      	mov	r3, ip
 8001342:	1e7a      	subs	r2, r7, #1
 8001344:	4197      	sbcs	r7, r2
 8001346:	431f      	orrs	r7, r3
 8001348:	e0cc      	b.n	80014e4 <__aeabi_dadd+0x364>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_dadd+0x1d0>
 800134e:	e204      	b.n	800175a <__aeabi_dadd+0x5da>
 8001350:	4643      	mov	r3, r8
 8001352:	4313      	orrs	r3, r2
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x1d8>
 8001356:	e159      	b.n	800160c <__aeabi_dadd+0x48c>
 8001358:	074b      	lsls	r3, r1, #29
 800135a:	08c0      	lsrs	r0, r0, #3
 800135c:	4318      	orrs	r0, r3
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	08c9      	lsrs	r1, r1, #3
 8001362:	031b      	lsls	r3, r3, #12
 8001364:	4219      	tst	r1, r3
 8001366:	d008      	beq.n	800137a <__aeabi_dadd+0x1fa>
 8001368:	4645      	mov	r5, r8
 800136a:	08ed      	lsrs	r5, r5, #3
 800136c:	421d      	tst	r5, r3
 800136e:	d104      	bne.n	800137a <__aeabi_dadd+0x1fa>
 8001370:	4643      	mov	r3, r8
 8001372:	08d0      	lsrs	r0, r2, #3
 8001374:	0759      	lsls	r1, r3, #29
 8001376:	4308      	orrs	r0, r1
 8001378:	0029      	movs	r1, r5
 800137a:	0f42      	lsrs	r2, r0, #29
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	4d7f      	ldr	r5, [pc, #508]	; (800157c <__aeabi_dadd+0x3fc>)
 8001380:	4311      	orrs	r1, r2
 8001382:	00c0      	lsls	r0, r0, #3
 8001384:	074b      	lsls	r3, r1, #29
 8001386:	08ca      	lsrs	r2, r1, #3
 8001388:	497c      	ldr	r1, [pc, #496]	; (800157c <__aeabi_dadd+0x3fc>)
 800138a:	08c0      	lsrs	r0, r0, #3
 800138c:	4303      	orrs	r3, r0
 800138e:	428d      	cmp	r5, r1
 8001390:	d068      	beq.n	8001464 <__aeabi_dadd+0x2e4>
 8001392:	0312      	lsls	r2, r2, #12
 8001394:	056d      	lsls	r5, r5, #21
 8001396:	0b12      	lsrs	r2, r2, #12
 8001398:	0d6d      	lsrs	r5, r5, #21
 800139a:	2100      	movs	r1, #0
 800139c:	0312      	lsls	r2, r2, #12
 800139e:	0018      	movs	r0, r3
 80013a0:	0b13      	lsrs	r3, r2, #12
 80013a2:	0d0a      	lsrs	r2, r1, #20
 80013a4:	0512      	lsls	r2, r2, #20
 80013a6:	431a      	orrs	r2, r3
 80013a8:	4b76      	ldr	r3, [pc, #472]	; (8001584 <__aeabi_dadd+0x404>)
 80013aa:	052d      	lsls	r5, r5, #20
 80013ac:	4013      	ands	r3, r2
 80013ae:	432b      	orrs	r3, r5
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	07e4      	lsls	r4, r4, #31
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	4323      	orrs	r3, r4
 80013b8:	0019      	movs	r1, r3
 80013ba:	bc1c      	pop	{r2, r3, r4}
 80013bc:	4690      	mov	r8, r2
 80013be:	4699      	mov	r9, r3
 80013c0:	46a2      	mov	sl, r4
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c4:	003e      	movs	r6, r7
 80013c6:	4316      	orrs	r6, r2
 80013c8:	d012      	beq.n	80013f0 <__aeabi_dadd+0x270>
 80013ca:	1e5e      	subs	r6, r3, #1
 80013cc:	2e00      	cmp	r6, #0
 80013ce:	d000      	beq.n	80013d2 <__aeabi_dadd+0x252>
 80013d0:	e100      	b.n	80015d4 <__aeabi_dadd+0x454>
 80013d2:	1887      	adds	r7, r0, r2
 80013d4:	4287      	cmp	r7, r0
 80013d6:	4180      	sbcs	r0, r0
 80013d8:	4441      	add	r1, r8
 80013da:	4240      	negs	r0, r0
 80013dc:	1809      	adds	r1, r1, r0
 80013de:	2501      	movs	r5, #1
 80013e0:	020b      	lsls	r3, r1, #8
 80013e2:	d533      	bpl.n	800144c <__aeabi_dadd+0x2cc>
 80013e4:	2502      	movs	r5, #2
 80013e6:	e785      	b.n	80012f4 <__aeabi_dadd+0x174>
 80013e8:	4664      	mov	r4, ip
 80013ea:	0033      	movs	r3, r6
 80013ec:	4641      	mov	r1, r8
 80013ee:	0010      	movs	r0, r2
 80013f0:	001d      	movs	r5, r3
 80013f2:	e7c7      	b.n	8001384 <__aeabi_dadd+0x204>
 80013f4:	2d00      	cmp	r5, #0
 80013f6:	d000      	beq.n	80013fa <__aeabi_dadd+0x27a>
 80013f8:	e0da      	b.n	80015b0 <__aeabi_dadd+0x430>
 80013fa:	000c      	movs	r4, r1
 80013fc:	4304      	orrs	r4, r0
 80013fe:	d0f3      	beq.n	80013e8 <__aeabi_dadd+0x268>
 8001400:	1c5c      	adds	r4, r3, #1
 8001402:	d100      	bne.n	8001406 <__aeabi_dadd+0x286>
 8001404:	e19f      	b.n	8001746 <__aeabi_dadd+0x5c6>
 8001406:	4c5d      	ldr	r4, [pc, #372]	; (800157c <__aeabi_dadd+0x3fc>)
 8001408:	42a6      	cmp	r6, r4
 800140a:	d100      	bne.n	800140e <__aeabi_dadd+0x28e>
 800140c:	e12f      	b.n	800166e <__aeabi_dadd+0x4ee>
 800140e:	43db      	mvns	r3, r3
 8001410:	2b38      	cmp	r3, #56	; 0x38
 8001412:	dd00      	ble.n	8001416 <__aeabi_dadd+0x296>
 8001414:	e166      	b.n	80016e4 <__aeabi_dadd+0x564>
 8001416:	2b1f      	cmp	r3, #31
 8001418:	dd00      	ble.n	800141c <__aeabi_dadd+0x29c>
 800141a:	e183      	b.n	8001724 <__aeabi_dadd+0x5a4>
 800141c:	2420      	movs	r4, #32
 800141e:	0005      	movs	r5, r0
 8001420:	1ae4      	subs	r4, r4, r3
 8001422:	000f      	movs	r7, r1
 8001424:	40dd      	lsrs	r5, r3
 8001426:	40d9      	lsrs	r1, r3
 8001428:	40a0      	lsls	r0, r4
 800142a:	4643      	mov	r3, r8
 800142c:	40a7      	lsls	r7, r4
 800142e:	1a5b      	subs	r3, r3, r1
 8001430:	1e44      	subs	r4, r0, #1
 8001432:	41a0      	sbcs	r0, r4
 8001434:	4698      	mov	r8, r3
 8001436:	432f      	orrs	r7, r5
 8001438:	4338      	orrs	r0, r7
 800143a:	1a17      	subs	r7, r2, r0
 800143c:	42ba      	cmp	r2, r7
 800143e:	4192      	sbcs	r2, r2
 8001440:	4643      	mov	r3, r8
 8001442:	4252      	negs	r2, r2
 8001444:	1a99      	subs	r1, r3, r2
 8001446:	4664      	mov	r4, ip
 8001448:	0035      	movs	r5, r6
 800144a:	e6ca      	b.n	80011e2 <__aeabi_dadd+0x62>
 800144c:	2207      	movs	r2, #7
 800144e:	403a      	ands	r2, r7
 8001450:	2a00      	cmp	r2, #0
 8001452:	d000      	beq.n	8001456 <__aeabi_dadd+0x2d6>
 8001454:	e6f6      	b.n	8001244 <__aeabi_dadd+0xc4>
 8001456:	074b      	lsls	r3, r1, #29
 8001458:	08ca      	lsrs	r2, r1, #3
 800145a:	4948      	ldr	r1, [pc, #288]	; (800157c <__aeabi_dadd+0x3fc>)
 800145c:	08ff      	lsrs	r7, r7, #3
 800145e:	433b      	orrs	r3, r7
 8001460:	428d      	cmp	r5, r1
 8001462:	d196      	bne.n	8001392 <__aeabi_dadd+0x212>
 8001464:	0019      	movs	r1, r3
 8001466:	4311      	orrs	r1, r2
 8001468:	d100      	bne.n	800146c <__aeabi_dadd+0x2ec>
 800146a:	e19e      	b.n	80017aa <__aeabi_dadd+0x62a>
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	0309      	lsls	r1, r1, #12
 8001470:	430a      	orrs	r2, r1
 8001472:	0312      	lsls	r2, r2, #12
 8001474:	0b12      	lsrs	r2, r2, #12
 8001476:	4d41      	ldr	r5, [pc, #260]	; (800157c <__aeabi_dadd+0x3fc>)
 8001478:	e78f      	b.n	800139a <__aeabi_dadd+0x21a>
 800147a:	0015      	movs	r5, r2
 800147c:	2200      	movs	r2, #0
 800147e:	2300      	movs	r3, #0
 8001480:	e78b      	b.n	800139a <__aeabi_dadd+0x21a>
 8001482:	2b00      	cmp	r3, #0
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x308>
 8001486:	e0c7      	b.n	8001618 <__aeabi_dadd+0x498>
 8001488:	1c6b      	adds	r3, r5, #1
 800148a:	055f      	lsls	r7, r3, #21
 800148c:	0d7f      	lsrs	r7, r7, #21
 800148e:	2f01      	cmp	r7, #1
 8001490:	dc00      	bgt.n	8001494 <__aeabi_dadd+0x314>
 8001492:	e0f1      	b.n	8001678 <__aeabi_dadd+0x4f8>
 8001494:	4d39      	ldr	r5, [pc, #228]	; (800157c <__aeabi_dadd+0x3fc>)
 8001496:	42ab      	cmp	r3, r5
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x31c>
 800149a:	e0b9      	b.n	8001610 <__aeabi_dadd+0x490>
 800149c:	1885      	adds	r5, r0, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	4285      	cmp	r5, r0
 80014a2:	4189      	sbcs	r1, r1
 80014a4:	4442      	add	r2, r8
 80014a6:	4249      	negs	r1, r1
 80014a8:	1851      	adds	r1, r2, r1
 80014aa:	2207      	movs	r2, #7
 80014ac:	07cf      	lsls	r7, r1, #31
 80014ae:	086d      	lsrs	r5, r5, #1
 80014b0:	432f      	orrs	r7, r5
 80014b2:	0849      	lsrs	r1, r1, #1
 80014b4:	403a      	ands	r2, r7
 80014b6:	001d      	movs	r5, r3
 80014b8:	e6c2      	b.n	8001240 <__aeabi_dadd+0xc0>
 80014ba:	2207      	movs	r2, #7
 80014bc:	4930      	ldr	r1, [pc, #192]	; (8001580 <__aeabi_dadd+0x400>)
 80014be:	1aed      	subs	r5, r5, r3
 80014c0:	4031      	ands	r1, r6
 80014c2:	403a      	ands	r2, r7
 80014c4:	e6bc      	b.n	8001240 <__aeabi_dadd+0xc0>
 80014c6:	003e      	movs	r6, r7
 80014c8:	3828      	subs	r0, #40	; 0x28
 80014ca:	4086      	lsls	r6, r0
 80014cc:	2700      	movs	r7, #0
 80014ce:	e69f      	b.n	8001210 <__aeabi_dadd+0x90>
 80014d0:	0038      	movs	r0, r7
 80014d2:	f001 fc41 	bl	8002d58 <__clzsi2>
 80014d6:	3020      	adds	r0, #32
 80014d8:	e68e      	b.n	80011f8 <__aeabi_dadd+0x78>
 80014da:	4643      	mov	r3, r8
 80014dc:	4313      	orrs	r3, r2
 80014de:	001f      	movs	r7, r3
 80014e0:	1e7a      	subs	r2, r7, #1
 80014e2:	4197      	sbcs	r7, r2
 80014e4:	1bc7      	subs	r7, r0, r7
 80014e6:	42b8      	cmp	r0, r7
 80014e8:	4180      	sbcs	r0, r0
 80014ea:	4240      	negs	r0, r0
 80014ec:	1a09      	subs	r1, r1, r0
 80014ee:	e678      	b.n	80011e2 <__aeabi_dadd+0x62>
 80014f0:	000e      	movs	r6, r1
 80014f2:	003b      	movs	r3, r7
 80014f4:	4306      	orrs	r6, r0
 80014f6:	4313      	orrs	r3, r2
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d161      	bne.n	80015c0 <__aeabi_dadd+0x440>
 80014fc:	2e00      	cmp	r6, #0
 80014fe:	d000      	beq.n	8001502 <__aeabi_dadd+0x382>
 8001500:	e0f4      	b.n	80016ec <__aeabi_dadd+0x56c>
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x388>
 8001506:	e11b      	b.n	8001740 <__aeabi_dadd+0x5c0>
 8001508:	4664      	mov	r4, ip
 800150a:	0039      	movs	r1, r7
 800150c:	0010      	movs	r0, r2
 800150e:	e739      	b.n	8001384 <__aeabi_dadd+0x204>
 8001510:	4f1a      	ldr	r7, [pc, #104]	; (800157c <__aeabi_dadd+0x3fc>)
 8001512:	42bb      	cmp	r3, r7
 8001514:	d07a      	beq.n	800160c <__aeabi_dadd+0x48c>
 8001516:	0033      	movs	r3, r6
 8001518:	e6ff      	b.n	800131a <__aeabi_dadd+0x19a>
 800151a:	0030      	movs	r0, r6
 800151c:	3d1f      	subs	r5, #31
 800151e:	40e8      	lsrs	r0, r5
 8001520:	2b20      	cmp	r3, #32
 8001522:	d003      	beq.n	800152c <__aeabi_dadd+0x3ac>
 8001524:	2140      	movs	r1, #64	; 0x40
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	409e      	lsls	r6, r3
 800152a:	4337      	orrs	r7, r6
 800152c:	1e7b      	subs	r3, r7, #1
 800152e:	419f      	sbcs	r7, r3
 8001530:	2207      	movs	r2, #7
 8001532:	4307      	orrs	r7, r0
 8001534:	403a      	ands	r2, r7
 8001536:	2100      	movs	r1, #0
 8001538:	2500      	movs	r5, #0
 800153a:	e789      	b.n	8001450 <__aeabi_dadd+0x2d0>
 800153c:	1a17      	subs	r7, r2, r0
 800153e:	4643      	mov	r3, r8
 8001540:	42ba      	cmp	r2, r7
 8001542:	41b6      	sbcs	r6, r6
 8001544:	1a59      	subs	r1, r3, r1
 8001546:	4276      	negs	r6, r6
 8001548:	1b8e      	subs	r6, r1, r6
 800154a:	4664      	mov	r4, ip
 800154c:	e64e      	b.n	80011ec <__aeabi_dadd+0x6c>
 800154e:	2b1f      	cmp	r3, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dadd+0x3d4>
 8001552:	e0ad      	b.n	80016b0 <__aeabi_dadd+0x530>
 8001554:	2620      	movs	r6, #32
 8001556:	4647      	mov	r7, r8
 8001558:	1af6      	subs	r6, r6, r3
 800155a:	40b7      	lsls	r7, r6
 800155c:	46b9      	mov	r9, r7
 800155e:	0017      	movs	r7, r2
 8001560:	46b2      	mov	sl, r6
 8001562:	40df      	lsrs	r7, r3
 8001564:	464e      	mov	r6, r9
 8001566:	433e      	orrs	r6, r7
 8001568:	0037      	movs	r7, r6
 800156a:	4656      	mov	r6, sl
 800156c:	40b2      	lsls	r2, r6
 800156e:	1e56      	subs	r6, r2, #1
 8001570:	41b2      	sbcs	r2, r6
 8001572:	4317      	orrs	r7, r2
 8001574:	4642      	mov	r2, r8
 8001576:	40da      	lsrs	r2, r3
 8001578:	1889      	adds	r1, r1, r2
 800157a:	e6ae      	b.n	80012da <__aeabi_dadd+0x15a>
 800157c:	000007ff 	.word	0x000007ff
 8001580:	ff7fffff 	.word	0xff7fffff
 8001584:	800fffff 	.word	0x800fffff
 8001588:	2620      	movs	r6, #32
 800158a:	4647      	mov	r7, r8
 800158c:	1af6      	subs	r6, r6, r3
 800158e:	40b7      	lsls	r7, r6
 8001590:	46b9      	mov	r9, r7
 8001592:	0017      	movs	r7, r2
 8001594:	46b2      	mov	sl, r6
 8001596:	40df      	lsrs	r7, r3
 8001598:	464e      	mov	r6, r9
 800159a:	433e      	orrs	r6, r7
 800159c:	0037      	movs	r7, r6
 800159e:	4656      	mov	r6, sl
 80015a0:	40b2      	lsls	r2, r6
 80015a2:	1e56      	subs	r6, r2, #1
 80015a4:	41b2      	sbcs	r2, r6
 80015a6:	4317      	orrs	r7, r2
 80015a8:	4642      	mov	r2, r8
 80015aa:	40da      	lsrs	r2, r3
 80015ac:	1a89      	subs	r1, r1, r2
 80015ae:	e799      	b.n	80014e4 <__aeabi_dadd+0x364>
 80015b0:	4c7f      	ldr	r4, [pc, #508]	; (80017b0 <__aeabi_dadd+0x630>)
 80015b2:	42a6      	cmp	r6, r4
 80015b4:	d05b      	beq.n	800166e <__aeabi_dadd+0x4ee>
 80015b6:	2480      	movs	r4, #128	; 0x80
 80015b8:	0424      	lsls	r4, r4, #16
 80015ba:	425b      	negs	r3, r3
 80015bc:	4321      	orrs	r1, r4
 80015be:	e727      	b.n	8001410 <__aeabi_dadd+0x290>
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d10c      	bne.n	80015de <__aeabi_dadd+0x45e>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x44a>
 80015c8:	e0cb      	b.n	8001762 <__aeabi_dadd+0x5e2>
 80015ca:	4664      	mov	r4, ip
 80015cc:	0039      	movs	r1, r7
 80015ce:	0010      	movs	r0, r2
 80015d0:	4d77      	ldr	r5, [pc, #476]	; (80017b0 <__aeabi_dadd+0x630>)
 80015d2:	e6d7      	b.n	8001384 <__aeabi_dadd+0x204>
 80015d4:	4f76      	ldr	r7, [pc, #472]	; (80017b0 <__aeabi_dadd+0x630>)
 80015d6:	42bb      	cmp	r3, r7
 80015d8:	d018      	beq.n	800160c <__aeabi_dadd+0x48c>
 80015da:	0033      	movs	r3, r6
 80015dc:	e675      	b.n	80012ca <__aeabi_dadd+0x14a>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <__aeabi_dadd+0x48c>
 80015e2:	074b      	lsls	r3, r1, #29
 80015e4:	08c0      	lsrs	r0, r0, #3
 80015e6:	4318      	orrs	r0, r3
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	08c9      	lsrs	r1, r1, #3
 80015ec:	031b      	lsls	r3, r3, #12
 80015ee:	4219      	tst	r1, r3
 80015f0:	d007      	beq.n	8001602 <__aeabi_dadd+0x482>
 80015f2:	08fc      	lsrs	r4, r7, #3
 80015f4:	421c      	tst	r4, r3
 80015f6:	d104      	bne.n	8001602 <__aeabi_dadd+0x482>
 80015f8:	0779      	lsls	r1, r7, #29
 80015fa:	08d0      	lsrs	r0, r2, #3
 80015fc:	4308      	orrs	r0, r1
 80015fe:	46e1      	mov	r9, ip
 8001600:	0021      	movs	r1, r4
 8001602:	464c      	mov	r4, r9
 8001604:	0f42      	lsrs	r2, r0, #29
 8001606:	00c9      	lsls	r1, r1, #3
 8001608:	4311      	orrs	r1, r2
 800160a:	00c0      	lsls	r0, r0, #3
 800160c:	4d68      	ldr	r5, [pc, #416]	; (80017b0 <__aeabi_dadd+0x630>)
 800160e:	e6b9      	b.n	8001384 <__aeabi_dadd+0x204>
 8001610:	001d      	movs	r5, r3
 8001612:	2200      	movs	r2, #0
 8001614:	2300      	movs	r3, #0
 8001616:	e6c0      	b.n	800139a <__aeabi_dadd+0x21a>
 8001618:	2d00      	cmp	r5, #0
 800161a:	d15b      	bne.n	80016d4 <__aeabi_dadd+0x554>
 800161c:	000d      	movs	r5, r1
 800161e:	4305      	orrs	r5, r0
 8001620:	d100      	bne.n	8001624 <__aeabi_dadd+0x4a4>
 8001622:	e6e2      	b.n	80013ea <__aeabi_dadd+0x26a>
 8001624:	1c5d      	adds	r5, r3, #1
 8001626:	d100      	bne.n	800162a <__aeabi_dadd+0x4aa>
 8001628:	e0b0      	b.n	800178c <__aeabi_dadd+0x60c>
 800162a:	4d61      	ldr	r5, [pc, #388]	; (80017b0 <__aeabi_dadd+0x630>)
 800162c:	42ae      	cmp	r6, r5
 800162e:	d01f      	beq.n	8001670 <__aeabi_dadd+0x4f0>
 8001630:	43db      	mvns	r3, r3
 8001632:	2b38      	cmp	r3, #56	; 0x38
 8001634:	dc71      	bgt.n	800171a <__aeabi_dadd+0x59a>
 8001636:	2b1f      	cmp	r3, #31
 8001638:	dd00      	ble.n	800163c <__aeabi_dadd+0x4bc>
 800163a:	e096      	b.n	800176a <__aeabi_dadd+0x5ea>
 800163c:	2520      	movs	r5, #32
 800163e:	000f      	movs	r7, r1
 8001640:	1aed      	subs	r5, r5, r3
 8001642:	40af      	lsls	r7, r5
 8001644:	46b9      	mov	r9, r7
 8001646:	0007      	movs	r7, r0
 8001648:	46aa      	mov	sl, r5
 800164a:	40df      	lsrs	r7, r3
 800164c:	464d      	mov	r5, r9
 800164e:	433d      	orrs	r5, r7
 8001650:	002f      	movs	r7, r5
 8001652:	4655      	mov	r5, sl
 8001654:	40a8      	lsls	r0, r5
 8001656:	40d9      	lsrs	r1, r3
 8001658:	1e45      	subs	r5, r0, #1
 800165a:	41a8      	sbcs	r0, r5
 800165c:	4488      	add	r8, r1
 800165e:	4307      	orrs	r7, r0
 8001660:	18bf      	adds	r7, r7, r2
 8001662:	4297      	cmp	r7, r2
 8001664:	4192      	sbcs	r2, r2
 8001666:	4251      	negs	r1, r2
 8001668:	4441      	add	r1, r8
 800166a:	0035      	movs	r5, r6
 800166c:	e63a      	b.n	80012e4 <__aeabi_dadd+0x164>
 800166e:	4664      	mov	r4, ip
 8001670:	0035      	movs	r5, r6
 8001672:	4641      	mov	r1, r8
 8001674:	0010      	movs	r0, r2
 8001676:	e685      	b.n	8001384 <__aeabi_dadd+0x204>
 8001678:	000b      	movs	r3, r1
 800167a:	4303      	orrs	r3, r0
 800167c:	2d00      	cmp	r5, #0
 800167e:	d000      	beq.n	8001682 <__aeabi_dadd+0x502>
 8001680:	e663      	b.n	800134a <__aeabi_dadd+0x1ca>
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f5      	beq.n	8001672 <__aeabi_dadd+0x4f2>
 8001686:	4643      	mov	r3, r8
 8001688:	4313      	orrs	r3, r2
 800168a:	d100      	bne.n	800168e <__aeabi_dadd+0x50e>
 800168c:	e67a      	b.n	8001384 <__aeabi_dadd+0x204>
 800168e:	1887      	adds	r7, r0, r2
 8001690:	4287      	cmp	r7, r0
 8001692:	4180      	sbcs	r0, r0
 8001694:	2207      	movs	r2, #7
 8001696:	4441      	add	r1, r8
 8001698:	4240      	negs	r0, r0
 800169a:	1809      	adds	r1, r1, r0
 800169c:	403a      	ands	r2, r7
 800169e:	020b      	lsls	r3, r1, #8
 80016a0:	d400      	bmi.n	80016a4 <__aeabi_dadd+0x524>
 80016a2:	e6d5      	b.n	8001450 <__aeabi_dadd+0x2d0>
 80016a4:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <__aeabi_dadd+0x634>)
 80016a6:	3501      	adds	r5, #1
 80016a8:	4019      	ands	r1, r3
 80016aa:	e5c9      	b.n	8001240 <__aeabi_dadd+0xc0>
 80016ac:	0038      	movs	r0, r7
 80016ae:	e669      	b.n	8001384 <__aeabi_dadd+0x204>
 80016b0:	001e      	movs	r6, r3
 80016b2:	4647      	mov	r7, r8
 80016b4:	3e20      	subs	r6, #32
 80016b6:	40f7      	lsrs	r7, r6
 80016b8:	46bc      	mov	ip, r7
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d004      	beq.n	80016c8 <__aeabi_dadd+0x548>
 80016be:	2640      	movs	r6, #64	; 0x40
 80016c0:	1af3      	subs	r3, r6, r3
 80016c2:	4646      	mov	r6, r8
 80016c4:	409e      	lsls	r6, r3
 80016c6:	4332      	orrs	r2, r6
 80016c8:	0017      	movs	r7, r2
 80016ca:	4663      	mov	r3, ip
 80016cc:	1e7a      	subs	r2, r7, #1
 80016ce:	4197      	sbcs	r7, r2
 80016d0:	431f      	orrs	r7, r3
 80016d2:	e602      	b.n	80012da <__aeabi_dadd+0x15a>
 80016d4:	4d36      	ldr	r5, [pc, #216]	; (80017b0 <__aeabi_dadd+0x630>)
 80016d6:	42ae      	cmp	r6, r5
 80016d8:	d0ca      	beq.n	8001670 <__aeabi_dadd+0x4f0>
 80016da:	2580      	movs	r5, #128	; 0x80
 80016dc:	042d      	lsls	r5, r5, #16
 80016de:	425b      	negs	r3, r3
 80016e0:	4329      	orrs	r1, r5
 80016e2:	e7a6      	b.n	8001632 <__aeabi_dadd+0x4b2>
 80016e4:	4308      	orrs	r0, r1
 80016e6:	1e41      	subs	r1, r0, #1
 80016e8:	4188      	sbcs	r0, r1
 80016ea:	e6a6      	b.n	800143a <__aeabi_dadd+0x2ba>
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dadd+0x572>
 80016f0:	e648      	b.n	8001384 <__aeabi_dadd+0x204>
 80016f2:	1a87      	subs	r7, r0, r2
 80016f4:	4643      	mov	r3, r8
 80016f6:	42b8      	cmp	r0, r7
 80016f8:	41b6      	sbcs	r6, r6
 80016fa:	1acb      	subs	r3, r1, r3
 80016fc:	4276      	negs	r6, r6
 80016fe:	1b9e      	subs	r6, r3, r6
 8001700:	0233      	lsls	r3, r6, #8
 8001702:	d54b      	bpl.n	800179c <__aeabi_dadd+0x61c>
 8001704:	1a17      	subs	r7, r2, r0
 8001706:	4643      	mov	r3, r8
 8001708:	42ba      	cmp	r2, r7
 800170a:	4192      	sbcs	r2, r2
 800170c:	1a59      	subs	r1, r3, r1
 800170e:	4252      	negs	r2, r2
 8001710:	1a89      	subs	r1, r1, r2
 8001712:	2207      	movs	r2, #7
 8001714:	4664      	mov	r4, ip
 8001716:	403a      	ands	r2, r7
 8001718:	e592      	b.n	8001240 <__aeabi_dadd+0xc0>
 800171a:	4301      	orrs	r1, r0
 800171c:	000f      	movs	r7, r1
 800171e:	1e79      	subs	r1, r7, #1
 8001720:	418f      	sbcs	r7, r1
 8001722:	e79d      	b.n	8001660 <__aeabi_dadd+0x4e0>
 8001724:	001c      	movs	r4, r3
 8001726:	000f      	movs	r7, r1
 8001728:	3c20      	subs	r4, #32
 800172a:	40e7      	lsrs	r7, r4
 800172c:	2b20      	cmp	r3, #32
 800172e:	d003      	beq.n	8001738 <__aeabi_dadd+0x5b8>
 8001730:	2440      	movs	r4, #64	; 0x40
 8001732:	1ae3      	subs	r3, r4, r3
 8001734:	4099      	lsls	r1, r3
 8001736:	4308      	orrs	r0, r1
 8001738:	1e41      	subs	r1, r0, #1
 800173a:	4188      	sbcs	r0, r1
 800173c:	4338      	orrs	r0, r7
 800173e:	e67c      	b.n	800143a <__aeabi_dadd+0x2ba>
 8001740:	2200      	movs	r2, #0
 8001742:	2400      	movs	r4, #0
 8001744:	e625      	b.n	8001392 <__aeabi_dadd+0x212>
 8001746:	1a17      	subs	r7, r2, r0
 8001748:	4643      	mov	r3, r8
 800174a:	42ba      	cmp	r2, r7
 800174c:	4192      	sbcs	r2, r2
 800174e:	1a59      	subs	r1, r3, r1
 8001750:	4252      	negs	r2, r2
 8001752:	1a89      	subs	r1, r1, r2
 8001754:	4664      	mov	r4, ip
 8001756:	0035      	movs	r5, r6
 8001758:	e543      	b.n	80011e2 <__aeabi_dadd+0x62>
 800175a:	4641      	mov	r1, r8
 800175c:	0010      	movs	r0, r2
 800175e:	4d14      	ldr	r5, [pc, #80]	; (80017b0 <__aeabi_dadd+0x630>)
 8001760:	e610      	b.n	8001384 <__aeabi_dadd+0x204>
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	2400      	movs	r4, #0
 8001766:	0312      	lsls	r2, r2, #12
 8001768:	e680      	b.n	800146c <__aeabi_dadd+0x2ec>
 800176a:	001d      	movs	r5, r3
 800176c:	000f      	movs	r7, r1
 800176e:	3d20      	subs	r5, #32
 8001770:	40ef      	lsrs	r7, r5
 8001772:	46bc      	mov	ip, r7
 8001774:	2b20      	cmp	r3, #32
 8001776:	d003      	beq.n	8001780 <__aeabi_dadd+0x600>
 8001778:	2540      	movs	r5, #64	; 0x40
 800177a:	1aeb      	subs	r3, r5, r3
 800177c:	4099      	lsls	r1, r3
 800177e:	4308      	orrs	r0, r1
 8001780:	0007      	movs	r7, r0
 8001782:	4663      	mov	r3, ip
 8001784:	1e78      	subs	r0, r7, #1
 8001786:	4187      	sbcs	r7, r0
 8001788:	431f      	orrs	r7, r3
 800178a:	e769      	b.n	8001660 <__aeabi_dadd+0x4e0>
 800178c:	1887      	adds	r7, r0, r2
 800178e:	4297      	cmp	r7, r2
 8001790:	419b      	sbcs	r3, r3
 8001792:	4441      	add	r1, r8
 8001794:	425b      	negs	r3, r3
 8001796:	18c9      	adds	r1, r1, r3
 8001798:	0035      	movs	r5, r6
 800179a:	e5a3      	b.n	80012e4 <__aeabi_dadd+0x164>
 800179c:	003b      	movs	r3, r7
 800179e:	4333      	orrs	r3, r6
 80017a0:	d0ce      	beq.n	8001740 <__aeabi_dadd+0x5c0>
 80017a2:	2207      	movs	r2, #7
 80017a4:	0031      	movs	r1, r6
 80017a6:	403a      	ands	r2, r7
 80017a8:	e652      	b.n	8001450 <__aeabi_dadd+0x2d0>
 80017aa:	2300      	movs	r3, #0
 80017ac:	001a      	movs	r2, r3
 80017ae:	e5f4      	b.n	800139a <__aeabi_dadd+0x21a>
 80017b0:	000007ff 	.word	0x000007ff
 80017b4:	ff7fffff 	.word	0xff7fffff

080017b8 <__aeabi_ddiv>:
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	4657      	mov	r7, sl
 80017bc:	46de      	mov	lr, fp
 80017be:	464e      	mov	r6, r9
 80017c0:	4645      	mov	r5, r8
 80017c2:	b5e0      	push	{r5, r6, r7, lr}
 80017c4:	4683      	mov	fp, r0
 80017c6:	0007      	movs	r7, r0
 80017c8:	030e      	lsls	r6, r1, #12
 80017ca:	0048      	lsls	r0, r1, #1
 80017cc:	b085      	sub	sp, #20
 80017ce:	4692      	mov	sl, r2
 80017d0:	001c      	movs	r4, r3
 80017d2:	0b36      	lsrs	r6, r6, #12
 80017d4:	0d40      	lsrs	r0, r0, #21
 80017d6:	0fcd      	lsrs	r5, r1, #31
 80017d8:	2800      	cmp	r0, #0
 80017da:	d100      	bne.n	80017de <__aeabi_ddiv+0x26>
 80017dc:	e09d      	b.n	800191a <__aeabi_ddiv+0x162>
 80017de:	4b95      	ldr	r3, [pc, #596]	; (8001a34 <__aeabi_ddiv+0x27c>)
 80017e0:	4298      	cmp	r0, r3
 80017e2:	d039      	beq.n	8001858 <__aeabi_ddiv+0xa0>
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	00f6      	lsls	r6, r6, #3
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	431e      	orrs	r6, r3
 80017ec:	4a92      	ldr	r2, [pc, #584]	; (8001a38 <__aeabi_ddiv+0x280>)
 80017ee:	0f7b      	lsrs	r3, r7, #29
 80017f0:	4333      	orrs	r3, r6
 80017f2:	4699      	mov	r9, r3
 80017f4:	4694      	mov	ip, r2
 80017f6:	0003      	movs	r3, r0
 80017f8:	4463      	add	r3, ip
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	2600      	movs	r6, #0
 8001800:	00ff      	lsls	r7, r7, #3
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	0323      	lsls	r3, r4, #12
 8001806:	0b1b      	lsrs	r3, r3, #12
 8001808:	4698      	mov	r8, r3
 800180a:	0063      	lsls	r3, r4, #1
 800180c:	0fe4      	lsrs	r4, r4, #31
 800180e:	4652      	mov	r2, sl
 8001810:	0d5b      	lsrs	r3, r3, #21
 8001812:	9401      	str	r4, [sp, #4]
 8001814:	d100      	bne.n	8001818 <__aeabi_ddiv+0x60>
 8001816:	e0b3      	b.n	8001980 <__aeabi_ddiv+0x1c8>
 8001818:	4986      	ldr	r1, [pc, #536]	; (8001a34 <__aeabi_ddiv+0x27c>)
 800181a:	428b      	cmp	r3, r1
 800181c:	d100      	bne.n	8001820 <__aeabi_ddiv+0x68>
 800181e:	e09e      	b.n	800195e <__aeabi_ddiv+0x1a6>
 8001820:	4642      	mov	r2, r8
 8001822:	00d1      	lsls	r1, r2, #3
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	0412      	lsls	r2, r2, #16
 8001828:	430a      	orrs	r2, r1
 800182a:	4651      	mov	r1, sl
 800182c:	0f49      	lsrs	r1, r1, #29
 800182e:	4311      	orrs	r1, r2
 8001830:	468b      	mov	fp, r1
 8001832:	4981      	ldr	r1, [pc, #516]	; (8001a38 <__aeabi_ddiv+0x280>)
 8001834:	4652      	mov	r2, sl
 8001836:	468c      	mov	ip, r1
 8001838:	9900      	ldr	r1, [sp, #0]
 800183a:	4463      	add	r3, ip
 800183c:	1acb      	subs	r3, r1, r3
 800183e:	2100      	movs	r1, #0
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	002b      	movs	r3, r5
 8001846:	4063      	eors	r3, r4
 8001848:	469a      	mov	sl, r3
 800184a:	2e0f      	cmp	r6, #15
 800184c:	d900      	bls.n	8001850 <__aeabi_ddiv+0x98>
 800184e:	e105      	b.n	8001a5c <__aeabi_ddiv+0x2a4>
 8001850:	4b7a      	ldr	r3, [pc, #488]	; (8001a3c <__aeabi_ddiv+0x284>)
 8001852:	00b6      	lsls	r6, r6, #2
 8001854:	599b      	ldr	r3, [r3, r6]
 8001856:	469f      	mov	pc, r3
 8001858:	465b      	mov	r3, fp
 800185a:	4333      	orrs	r3, r6
 800185c:	4699      	mov	r9, r3
 800185e:	d000      	beq.n	8001862 <__aeabi_ddiv+0xaa>
 8001860:	e0b8      	b.n	80019d4 <__aeabi_ddiv+0x21c>
 8001862:	2302      	movs	r3, #2
 8001864:	2608      	movs	r6, #8
 8001866:	2700      	movs	r7, #0
 8001868:	9000      	str	r0, [sp, #0]
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	e7ca      	b.n	8001804 <__aeabi_ddiv+0x4c>
 800186e:	46cb      	mov	fp, r9
 8001870:	003a      	movs	r2, r7
 8001872:	9902      	ldr	r1, [sp, #8]
 8001874:	9501      	str	r5, [sp, #4]
 8001876:	9b01      	ldr	r3, [sp, #4]
 8001878:	469a      	mov	sl, r3
 800187a:	2902      	cmp	r1, #2
 800187c:	d027      	beq.n	80018ce <__aeabi_ddiv+0x116>
 800187e:	2903      	cmp	r1, #3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0xcc>
 8001882:	e280      	b.n	8001d86 <__aeabi_ddiv+0x5ce>
 8001884:	2901      	cmp	r1, #1
 8001886:	d044      	beq.n	8001912 <__aeabi_ddiv+0x15a>
 8001888:	496d      	ldr	r1, [pc, #436]	; (8001a40 <__aeabi_ddiv+0x288>)
 800188a:	9b00      	ldr	r3, [sp, #0]
 800188c:	468c      	mov	ip, r1
 800188e:	4463      	add	r3, ip
 8001890:	001c      	movs	r4, r3
 8001892:	2c00      	cmp	r4, #0
 8001894:	dd38      	ble.n	8001908 <__aeabi_ddiv+0x150>
 8001896:	0753      	lsls	r3, r2, #29
 8001898:	d000      	beq.n	800189c <__aeabi_ddiv+0xe4>
 800189a:	e213      	b.n	8001cc4 <__aeabi_ddiv+0x50c>
 800189c:	08d2      	lsrs	r2, r2, #3
 800189e:	465b      	mov	r3, fp
 80018a0:	01db      	lsls	r3, r3, #7
 80018a2:	d509      	bpl.n	80018b8 <__aeabi_ddiv+0x100>
 80018a4:	4659      	mov	r1, fp
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <__aeabi_ddiv+0x28c>)
 80018a8:	4019      	ands	r1, r3
 80018aa:	468b      	mov	fp, r1
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	00c9      	lsls	r1, r1, #3
 80018b0:	468c      	mov	ip, r1
 80018b2:	9b00      	ldr	r3, [sp, #0]
 80018b4:	4463      	add	r3, ip
 80018b6:	001c      	movs	r4, r3
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <__aeabi_ddiv+0x290>)
 80018ba:	429c      	cmp	r4, r3
 80018bc:	dc07      	bgt.n	80018ce <__aeabi_ddiv+0x116>
 80018be:	465b      	mov	r3, fp
 80018c0:	0564      	lsls	r4, r4, #21
 80018c2:	075f      	lsls	r7, r3, #29
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	4317      	orrs	r7, r2
 80018c8:	0b1b      	lsrs	r3, r3, #12
 80018ca:	0d62      	lsrs	r2, r4, #21
 80018cc:	e002      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 80018ce:	2300      	movs	r3, #0
 80018d0:	2700      	movs	r7, #0
 80018d2:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <__aeabi_ddiv+0x27c>)
 80018d4:	2100      	movs	r1, #0
 80018d6:	031b      	lsls	r3, r3, #12
 80018d8:	0b1c      	lsrs	r4, r3, #12
 80018da:	0d0b      	lsrs	r3, r1, #20
 80018dc:	051b      	lsls	r3, r3, #20
 80018de:	4323      	orrs	r3, r4
 80018e0:	0514      	lsls	r4, r2, #20
 80018e2:	4a5a      	ldr	r2, [pc, #360]	; (8001a4c <__aeabi_ddiv+0x294>)
 80018e4:	0038      	movs	r0, r7
 80018e6:	4013      	ands	r3, r2
 80018e8:	431c      	orrs	r4, r3
 80018ea:	4653      	mov	r3, sl
 80018ec:	0064      	lsls	r4, r4, #1
 80018ee:	07db      	lsls	r3, r3, #31
 80018f0:	0864      	lsrs	r4, r4, #1
 80018f2:	431c      	orrs	r4, r3
 80018f4:	0021      	movs	r1, r4
 80018f6:	b005      	add	sp, #20
 80018f8:	bc3c      	pop	{r2, r3, r4, r5}
 80018fa:	4690      	mov	r8, r2
 80018fc:	4699      	mov	r9, r3
 80018fe:	46a2      	mov	sl, r4
 8001900:	46ab      	mov	fp, r5
 8001902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001904:	2201      	movs	r2, #1
 8001906:	4252      	negs	r2, r2
 8001908:	2301      	movs	r3, #1
 800190a:	1b1b      	subs	r3, r3, r4
 800190c:	2b38      	cmp	r3, #56	; 0x38
 800190e:	dc00      	bgt.n	8001912 <__aeabi_ddiv+0x15a>
 8001910:	e1ad      	b.n	8001c6e <__aeabi_ddiv+0x4b6>
 8001912:	2200      	movs	r2, #0
 8001914:	2300      	movs	r3, #0
 8001916:	2700      	movs	r7, #0
 8001918:	e7dc      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 800191a:	465b      	mov	r3, fp
 800191c:	4333      	orrs	r3, r6
 800191e:	4699      	mov	r9, r3
 8001920:	d05e      	beq.n	80019e0 <__aeabi_ddiv+0x228>
 8001922:	2e00      	cmp	r6, #0
 8001924:	d100      	bne.n	8001928 <__aeabi_ddiv+0x170>
 8001926:	e18a      	b.n	8001c3e <__aeabi_ddiv+0x486>
 8001928:	0030      	movs	r0, r6
 800192a:	f001 fa15 	bl	8002d58 <__clzsi2>
 800192e:	0003      	movs	r3, r0
 8001930:	3b0b      	subs	r3, #11
 8001932:	2b1c      	cmp	r3, #28
 8001934:	dd00      	ble.n	8001938 <__aeabi_ddiv+0x180>
 8001936:	e17b      	b.n	8001c30 <__aeabi_ddiv+0x478>
 8001938:	221d      	movs	r2, #29
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	465a      	mov	r2, fp
 800193e:	0001      	movs	r1, r0
 8001940:	40da      	lsrs	r2, r3
 8001942:	3908      	subs	r1, #8
 8001944:	408e      	lsls	r6, r1
 8001946:	0013      	movs	r3, r2
 8001948:	465f      	mov	r7, fp
 800194a:	4333      	orrs	r3, r6
 800194c:	4699      	mov	r9, r3
 800194e:	408f      	lsls	r7, r1
 8001950:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <__aeabi_ddiv+0x298>)
 8001952:	2600      	movs	r6, #0
 8001954:	1a1b      	subs	r3, r3, r0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	e752      	b.n	8001804 <__aeabi_ddiv+0x4c>
 800195e:	4641      	mov	r1, r8
 8001960:	4653      	mov	r3, sl
 8001962:	430b      	orrs	r3, r1
 8001964:	493b      	ldr	r1, [pc, #236]	; (8001a54 <__aeabi_ddiv+0x29c>)
 8001966:	469b      	mov	fp, r3
 8001968:	468c      	mov	ip, r1
 800196a:	9b00      	ldr	r3, [sp, #0]
 800196c:	4463      	add	r3, ip
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	465b      	mov	r3, fp
 8001972:	2b00      	cmp	r3, #0
 8001974:	d13b      	bne.n	80019ee <__aeabi_ddiv+0x236>
 8001976:	2302      	movs	r3, #2
 8001978:	2200      	movs	r2, #0
 800197a:	431e      	orrs	r6, r3
 800197c:	2102      	movs	r1, #2
 800197e:	e761      	b.n	8001844 <__aeabi_ddiv+0x8c>
 8001980:	4643      	mov	r3, r8
 8001982:	4313      	orrs	r3, r2
 8001984:	469b      	mov	fp, r3
 8001986:	d037      	beq.n	80019f8 <__aeabi_ddiv+0x240>
 8001988:	4643      	mov	r3, r8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_ddiv+0x1d8>
 800198e:	e162      	b.n	8001c56 <__aeabi_ddiv+0x49e>
 8001990:	4640      	mov	r0, r8
 8001992:	f001 f9e1 	bl	8002d58 <__clzsi2>
 8001996:	0003      	movs	r3, r0
 8001998:	3b0b      	subs	r3, #11
 800199a:	2b1c      	cmp	r3, #28
 800199c:	dd00      	ble.n	80019a0 <__aeabi_ddiv+0x1e8>
 800199e:	e153      	b.n	8001c48 <__aeabi_ddiv+0x490>
 80019a0:	0002      	movs	r2, r0
 80019a2:	4641      	mov	r1, r8
 80019a4:	3a08      	subs	r2, #8
 80019a6:	4091      	lsls	r1, r2
 80019a8:	4688      	mov	r8, r1
 80019aa:	211d      	movs	r1, #29
 80019ac:	1acb      	subs	r3, r1, r3
 80019ae:	4651      	mov	r1, sl
 80019b0:	40d9      	lsrs	r1, r3
 80019b2:	000b      	movs	r3, r1
 80019b4:	4641      	mov	r1, r8
 80019b6:	430b      	orrs	r3, r1
 80019b8:	469b      	mov	fp, r3
 80019ba:	4653      	mov	r3, sl
 80019bc:	4093      	lsls	r3, r2
 80019be:	001a      	movs	r2, r3
 80019c0:	9b00      	ldr	r3, [sp, #0]
 80019c2:	4925      	ldr	r1, [pc, #148]	; (8001a58 <__aeabi_ddiv+0x2a0>)
 80019c4:	469c      	mov	ip, r3
 80019c6:	4460      	add	r0, ip
 80019c8:	0003      	movs	r3, r0
 80019ca:	468c      	mov	ip, r1
 80019cc:	4463      	add	r3, ip
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	e737      	b.n	8001844 <__aeabi_ddiv+0x8c>
 80019d4:	2303      	movs	r3, #3
 80019d6:	46b1      	mov	r9, r6
 80019d8:	9000      	str	r0, [sp, #0]
 80019da:	260c      	movs	r6, #12
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	e711      	b.n	8001804 <__aeabi_ddiv+0x4c>
 80019e0:	2300      	movs	r3, #0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	2604      	movs	r6, #4
 80019e8:	2700      	movs	r7, #0
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	e70a      	b.n	8001804 <__aeabi_ddiv+0x4c>
 80019ee:	2303      	movs	r3, #3
 80019f0:	46c3      	mov	fp, r8
 80019f2:	431e      	orrs	r6, r3
 80019f4:	2103      	movs	r1, #3
 80019f6:	e725      	b.n	8001844 <__aeabi_ddiv+0x8c>
 80019f8:	3301      	adds	r3, #1
 80019fa:	431e      	orrs	r6, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	2101      	movs	r1, #1
 8001a00:	e720      	b.n	8001844 <__aeabi_ddiv+0x8c>
 8001a02:	2300      	movs	r3, #0
 8001a04:	469a      	mov	sl, r3
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	2700      	movs	r7, #0
 8001a0a:	031b      	lsls	r3, r3, #12
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <__aeabi_ddiv+0x27c>)
 8001a0e:	e761      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	4649      	mov	r1, r9
 8001a14:	031b      	lsls	r3, r3, #12
 8001a16:	4219      	tst	r1, r3
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x264>
 8001a1a:	e0e2      	b.n	8001be2 <__aeabi_ddiv+0x42a>
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	4219      	tst	r1, r3
 8001a20:	d000      	beq.n	8001a24 <__aeabi_ddiv+0x26c>
 8001a22:	e0de      	b.n	8001be2 <__aeabi_ddiv+0x42a>
 8001a24:	430b      	orrs	r3, r1
 8001a26:	031b      	lsls	r3, r3, #12
 8001a28:	0017      	movs	r7, r2
 8001a2a:	0b1b      	lsrs	r3, r3, #12
 8001a2c:	46a2      	mov	sl, r4
 8001a2e:	4a01      	ldr	r2, [pc, #4]	; (8001a34 <__aeabi_ddiv+0x27c>)
 8001a30:	e750      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	000007ff 	.word	0x000007ff
 8001a38:	fffffc01 	.word	0xfffffc01
 8001a3c:	08006d68 	.word	0x08006d68
 8001a40:	000003ff 	.word	0x000003ff
 8001a44:	feffffff 	.word	0xfeffffff
 8001a48:	000007fe 	.word	0x000007fe
 8001a4c:	800fffff 	.word	0x800fffff
 8001a50:	fffffc0d 	.word	0xfffffc0d
 8001a54:	fffff801 	.word	0xfffff801
 8001a58:	000003f3 	.word	0x000003f3
 8001a5c:	45d9      	cmp	r9, fp
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x2aa>
 8001a60:	e0cb      	b.n	8001bfa <__aeabi_ddiv+0x442>
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x2ae>
 8001a64:	e0c6      	b.n	8001bf4 <__aeabi_ddiv+0x43c>
 8001a66:	003c      	movs	r4, r7
 8001a68:	4648      	mov	r0, r9
 8001a6a:	2700      	movs	r7, #0
 8001a6c:	9b00      	ldr	r3, [sp, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	465b      	mov	r3, fp
 8001a74:	0e16      	lsrs	r6, r2, #24
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	431e      	orrs	r6, r3
 8001a7a:	0213      	lsls	r3, r2, #8
 8001a7c:	4698      	mov	r8, r3
 8001a7e:	0433      	lsls	r3, r6, #16
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	4699      	mov	r9, r3
 8001a84:	0c31      	lsrs	r1, r6, #16
 8001a86:	9101      	str	r1, [sp, #4]
 8001a88:	f7fe fbd8 	bl	800023c <__aeabi_uidivmod>
 8001a8c:	464a      	mov	r2, r9
 8001a8e:	4342      	muls	r2, r0
 8001a90:	040b      	lsls	r3, r1, #16
 8001a92:	0c21      	lsrs	r1, r4, #16
 8001a94:	0005      	movs	r5, r0
 8001a96:	4319      	orrs	r1, r3
 8001a98:	428a      	cmp	r2, r1
 8001a9a:	d907      	bls.n	8001aac <__aeabi_ddiv+0x2f4>
 8001a9c:	1989      	adds	r1, r1, r6
 8001a9e:	3d01      	subs	r5, #1
 8001aa0:	428e      	cmp	r6, r1
 8001aa2:	d803      	bhi.n	8001aac <__aeabi_ddiv+0x2f4>
 8001aa4:	428a      	cmp	r2, r1
 8001aa6:	d901      	bls.n	8001aac <__aeabi_ddiv+0x2f4>
 8001aa8:	1e85      	subs	r5, r0, #2
 8001aaa:	1989      	adds	r1, r1, r6
 8001aac:	1a88      	subs	r0, r1, r2
 8001aae:	9901      	ldr	r1, [sp, #4]
 8001ab0:	f7fe fbc4 	bl	800023c <__aeabi_uidivmod>
 8001ab4:	0409      	lsls	r1, r1, #16
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	464a      	mov	r2, r9
 8001aba:	0421      	lsls	r1, r4, #16
 8001abc:	4664      	mov	r4, ip
 8001abe:	4342      	muls	r2, r0
 8001ac0:	0c09      	lsrs	r1, r1, #16
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	4321      	orrs	r1, r4
 8001ac6:	428a      	cmp	r2, r1
 8001ac8:	d904      	bls.n	8001ad4 <__aeabi_ddiv+0x31c>
 8001aca:	1989      	adds	r1, r1, r6
 8001acc:	3b01      	subs	r3, #1
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d800      	bhi.n	8001ad4 <__aeabi_ddiv+0x31c>
 8001ad2:	e0f1      	b.n	8001cb8 <__aeabi_ddiv+0x500>
 8001ad4:	042d      	lsls	r5, r5, #16
 8001ad6:	431d      	orrs	r5, r3
 8001ad8:	46ab      	mov	fp, r5
 8001ada:	4643      	mov	r3, r8
 8001adc:	1a89      	subs	r1, r1, r2
 8001ade:	4642      	mov	r2, r8
 8001ae0:	0c28      	lsrs	r0, r5, #16
 8001ae2:	0412      	lsls	r2, r2, #16
 8001ae4:	0c1d      	lsrs	r5, r3, #16
 8001ae6:	465b      	mov	r3, fp
 8001ae8:	0c14      	lsrs	r4, r2, #16
 8001aea:	0022      	movs	r2, r4
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	435a      	muls	r2, r3
 8001af2:	9403      	str	r4, [sp, #12]
 8001af4:	436b      	muls	r3, r5
 8001af6:	4344      	muls	r4, r0
 8001af8:	9502      	str	r5, [sp, #8]
 8001afa:	4368      	muls	r0, r5
 8001afc:	191b      	adds	r3, r3, r4
 8001afe:	0c15      	lsrs	r5, r2, #16
 8001b00:	18eb      	adds	r3, r5, r3
 8001b02:	429c      	cmp	r4, r3
 8001b04:	d903      	bls.n	8001b0e <__aeabi_ddiv+0x356>
 8001b06:	2480      	movs	r4, #128	; 0x80
 8001b08:	0264      	lsls	r4, r4, #9
 8001b0a:	46a4      	mov	ip, r4
 8001b0c:	4460      	add	r0, ip
 8001b0e:	0c1c      	lsrs	r4, r3, #16
 8001b10:	0415      	lsls	r5, r2, #16
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	0c2d      	lsrs	r5, r5, #16
 8001b16:	1820      	adds	r0, r4, r0
 8001b18:	195d      	adds	r5, r3, r5
 8001b1a:	4281      	cmp	r1, r0
 8001b1c:	d377      	bcc.n	8001c0e <__aeabi_ddiv+0x456>
 8001b1e:	d073      	beq.n	8001c08 <__aeabi_ddiv+0x450>
 8001b20:	1a0c      	subs	r4, r1, r0
 8001b22:	4aa2      	ldr	r2, [pc, #648]	; (8001dac <__aeabi_ddiv+0x5f4>)
 8001b24:	1b7d      	subs	r5, r7, r5
 8001b26:	42af      	cmp	r7, r5
 8001b28:	41bf      	sbcs	r7, r7
 8001b2a:	4694      	mov	ip, r2
 8001b2c:	9b00      	ldr	r3, [sp, #0]
 8001b2e:	427f      	negs	r7, r7
 8001b30:	4463      	add	r3, ip
 8001b32:	1be0      	subs	r0, r4, r7
 8001b34:	001c      	movs	r4, r3
 8001b36:	4286      	cmp	r6, r0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x384>
 8001b3a:	e0db      	b.n	8001cf4 <__aeabi_ddiv+0x53c>
 8001b3c:	9901      	ldr	r1, [sp, #4]
 8001b3e:	f7fe fb7d 	bl	800023c <__aeabi_uidivmod>
 8001b42:	464a      	mov	r2, r9
 8001b44:	4342      	muls	r2, r0
 8001b46:	040b      	lsls	r3, r1, #16
 8001b48:	0c29      	lsrs	r1, r5, #16
 8001b4a:	0007      	movs	r7, r0
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	428a      	cmp	r2, r1
 8001b50:	d907      	bls.n	8001b62 <__aeabi_ddiv+0x3aa>
 8001b52:	1989      	adds	r1, r1, r6
 8001b54:	3f01      	subs	r7, #1
 8001b56:	428e      	cmp	r6, r1
 8001b58:	d803      	bhi.n	8001b62 <__aeabi_ddiv+0x3aa>
 8001b5a:	428a      	cmp	r2, r1
 8001b5c:	d901      	bls.n	8001b62 <__aeabi_ddiv+0x3aa>
 8001b5e:	1e87      	subs	r7, r0, #2
 8001b60:	1989      	adds	r1, r1, r6
 8001b62:	1a88      	subs	r0, r1, r2
 8001b64:	9901      	ldr	r1, [sp, #4]
 8001b66:	f7fe fb69 	bl	800023c <__aeabi_uidivmod>
 8001b6a:	0409      	lsls	r1, r1, #16
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	4689      	mov	r9, r1
 8001b70:	0429      	lsls	r1, r5, #16
 8001b72:	464d      	mov	r5, r9
 8001b74:	4342      	muls	r2, r0
 8001b76:	0c09      	lsrs	r1, r1, #16
 8001b78:	0003      	movs	r3, r0
 8001b7a:	4329      	orrs	r1, r5
 8001b7c:	428a      	cmp	r2, r1
 8001b7e:	d907      	bls.n	8001b90 <__aeabi_ddiv+0x3d8>
 8001b80:	1989      	adds	r1, r1, r6
 8001b82:	3b01      	subs	r3, #1
 8001b84:	428e      	cmp	r6, r1
 8001b86:	d803      	bhi.n	8001b90 <__aeabi_ddiv+0x3d8>
 8001b88:	428a      	cmp	r2, r1
 8001b8a:	d901      	bls.n	8001b90 <__aeabi_ddiv+0x3d8>
 8001b8c:	1e83      	subs	r3, r0, #2
 8001b8e:	1989      	adds	r1, r1, r6
 8001b90:	043f      	lsls	r7, r7, #16
 8001b92:	1a89      	subs	r1, r1, r2
 8001b94:	003a      	movs	r2, r7
 8001b96:	9f03      	ldr	r7, [sp, #12]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	0038      	movs	r0, r7
 8001b9c:	0413      	lsls	r3, r2, #16
 8001b9e:	0c1b      	lsrs	r3, r3, #16
 8001ba0:	4358      	muls	r0, r3
 8001ba2:	4681      	mov	r9, r0
 8001ba4:	9802      	ldr	r0, [sp, #8]
 8001ba6:	0c15      	lsrs	r5, r2, #16
 8001ba8:	436f      	muls	r7, r5
 8001baa:	4343      	muls	r3, r0
 8001bac:	4345      	muls	r5, r0
 8001bae:	4648      	mov	r0, r9
 8001bb0:	0c00      	lsrs	r0, r0, #16
 8001bb2:	4684      	mov	ip, r0
 8001bb4:	19db      	adds	r3, r3, r7
 8001bb6:	4463      	add	r3, ip
 8001bb8:	429f      	cmp	r7, r3
 8001bba:	d903      	bls.n	8001bc4 <__aeabi_ddiv+0x40c>
 8001bbc:	2080      	movs	r0, #128	; 0x80
 8001bbe:	0240      	lsls	r0, r0, #9
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	4465      	add	r5, ip
 8001bc4:	4648      	mov	r0, r9
 8001bc6:	0c1f      	lsrs	r7, r3, #16
 8001bc8:	0400      	lsls	r0, r0, #16
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	0c00      	lsrs	r0, r0, #16
 8001bce:	197d      	adds	r5, r7, r5
 8001bd0:	1818      	adds	r0, r3, r0
 8001bd2:	42a9      	cmp	r1, r5
 8001bd4:	d200      	bcs.n	8001bd8 <__aeabi_ddiv+0x420>
 8001bd6:	e084      	b.n	8001ce2 <__aeabi_ddiv+0x52a>
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_ddiv+0x424>
 8001bda:	e07f      	b.n	8001cdc <__aeabi_ddiv+0x524>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	e657      	b.n	8001892 <__aeabi_ddiv+0xda>
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	464a      	mov	r2, r9
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	4313      	orrs	r3, r2
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	0b1b      	lsrs	r3, r3, #12
 8001bee:	46aa      	mov	sl, r5
 8001bf0:	4a6f      	ldr	r2, [pc, #444]	; (8001db0 <__aeabi_ddiv+0x5f8>)
 8001bf2:	e66f      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001bf4:	42ba      	cmp	r2, r7
 8001bf6:	d900      	bls.n	8001bfa <__aeabi_ddiv+0x442>
 8001bf8:	e735      	b.n	8001a66 <__aeabi_ddiv+0x2ae>
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	07dc      	lsls	r4, r3, #31
 8001bfe:	0858      	lsrs	r0, r3, #1
 8001c00:	087b      	lsrs	r3, r7, #1
 8001c02:	431c      	orrs	r4, r3
 8001c04:	07ff      	lsls	r7, r7, #31
 8001c06:	e734      	b.n	8001a72 <__aeabi_ddiv+0x2ba>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	42af      	cmp	r7, r5
 8001c0c:	d289      	bcs.n	8001b22 <__aeabi_ddiv+0x36a>
 8001c0e:	4447      	add	r7, r8
 8001c10:	4547      	cmp	r7, r8
 8001c12:	41a4      	sbcs	r4, r4
 8001c14:	465b      	mov	r3, fp
 8001c16:	4264      	negs	r4, r4
 8001c18:	19a4      	adds	r4, r4, r6
 8001c1a:	1864      	adds	r4, r4, r1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	42a6      	cmp	r6, r4
 8001c20:	d21e      	bcs.n	8001c60 <__aeabi_ddiv+0x4a8>
 8001c22:	42a0      	cmp	r0, r4
 8001c24:	d86d      	bhi.n	8001d02 <__aeabi_ddiv+0x54a>
 8001c26:	d100      	bne.n	8001c2a <__aeabi_ddiv+0x472>
 8001c28:	e0b6      	b.n	8001d98 <__aeabi_ddiv+0x5e0>
 8001c2a:	1a24      	subs	r4, r4, r0
 8001c2c:	469b      	mov	fp, r3
 8001c2e:	e778      	b.n	8001b22 <__aeabi_ddiv+0x36a>
 8001c30:	0003      	movs	r3, r0
 8001c32:	465a      	mov	r2, fp
 8001c34:	3b28      	subs	r3, #40	; 0x28
 8001c36:	409a      	lsls	r2, r3
 8001c38:	2700      	movs	r7, #0
 8001c3a:	4691      	mov	r9, r2
 8001c3c:	e688      	b.n	8001950 <__aeabi_ddiv+0x198>
 8001c3e:	4658      	mov	r0, fp
 8001c40:	f001 f88a 	bl	8002d58 <__clzsi2>
 8001c44:	3020      	adds	r0, #32
 8001c46:	e672      	b.n	800192e <__aeabi_ddiv+0x176>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	4652      	mov	r2, sl
 8001c4c:	3b28      	subs	r3, #40	; 0x28
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	4693      	mov	fp, r2
 8001c52:	2200      	movs	r2, #0
 8001c54:	e6b4      	b.n	80019c0 <__aeabi_ddiv+0x208>
 8001c56:	4650      	mov	r0, sl
 8001c58:	f001 f87e 	bl	8002d58 <__clzsi2>
 8001c5c:	3020      	adds	r0, #32
 8001c5e:	e69a      	b.n	8001996 <__aeabi_ddiv+0x1de>
 8001c60:	42a6      	cmp	r6, r4
 8001c62:	d1e2      	bne.n	8001c2a <__aeabi_ddiv+0x472>
 8001c64:	45b8      	cmp	r8, r7
 8001c66:	d9dc      	bls.n	8001c22 <__aeabi_ddiv+0x46a>
 8001c68:	1a34      	subs	r4, r6, r0
 8001c6a:	469b      	mov	fp, r3
 8001c6c:	e759      	b.n	8001b22 <__aeabi_ddiv+0x36a>
 8001c6e:	2b1f      	cmp	r3, #31
 8001c70:	dc65      	bgt.n	8001d3e <__aeabi_ddiv+0x586>
 8001c72:	4c50      	ldr	r4, [pc, #320]	; (8001db4 <__aeabi_ddiv+0x5fc>)
 8001c74:	9900      	ldr	r1, [sp, #0]
 8001c76:	46a4      	mov	ip, r4
 8001c78:	465c      	mov	r4, fp
 8001c7a:	4461      	add	r1, ip
 8001c7c:	0008      	movs	r0, r1
 8001c7e:	408c      	lsls	r4, r1
 8001c80:	0011      	movs	r1, r2
 8001c82:	4082      	lsls	r2, r0
 8001c84:	40d9      	lsrs	r1, r3
 8001c86:	1e50      	subs	r0, r2, #1
 8001c88:	4182      	sbcs	r2, r0
 8001c8a:	430c      	orrs	r4, r1
 8001c8c:	4314      	orrs	r4, r2
 8001c8e:	465a      	mov	r2, fp
 8001c90:	40da      	lsrs	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	0762      	lsls	r2, r4, #29
 8001c96:	d009      	beq.n	8001cac <__aeabi_ddiv+0x4f4>
 8001c98:	220f      	movs	r2, #15
 8001c9a:	4022      	ands	r2, r4
 8001c9c:	2a04      	cmp	r2, #4
 8001c9e:	d005      	beq.n	8001cac <__aeabi_ddiv+0x4f4>
 8001ca0:	0022      	movs	r2, r4
 8001ca2:	1d14      	adds	r4, r2, #4
 8001ca4:	4294      	cmp	r4, r2
 8001ca6:	4189      	sbcs	r1, r1
 8001ca8:	4249      	negs	r1, r1
 8001caa:	185b      	adds	r3, r3, r1
 8001cac:	021a      	lsls	r2, r3, #8
 8001cae:	d562      	bpl.n	8001d76 <__aeabi_ddiv+0x5be>
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2700      	movs	r7, #0
 8001cb6:	e60d      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001cb8:	428a      	cmp	r2, r1
 8001cba:	d800      	bhi.n	8001cbe <__aeabi_ddiv+0x506>
 8001cbc:	e70a      	b.n	8001ad4 <__aeabi_ddiv+0x31c>
 8001cbe:	1e83      	subs	r3, r0, #2
 8001cc0:	1989      	adds	r1, r1, r6
 8001cc2:	e707      	b.n	8001ad4 <__aeabi_ddiv+0x31c>
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d100      	bne.n	8001cce <__aeabi_ddiv+0x516>
 8001ccc:	e5e6      	b.n	800189c <__aeabi_ddiv+0xe4>
 8001cce:	1d17      	adds	r7, r2, #4
 8001cd0:	4297      	cmp	r7, r2
 8001cd2:	4192      	sbcs	r2, r2
 8001cd4:	4253      	negs	r3, r2
 8001cd6:	449b      	add	fp, r3
 8001cd8:	08fa      	lsrs	r2, r7, #3
 8001cda:	e5e0      	b.n	800189e <__aeabi_ddiv+0xe6>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0x52a>
 8001ce0:	e5d7      	b.n	8001892 <__aeabi_ddiv+0xda>
 8001ce2:	1871      	adds	r1, r6, r1
 8001ce4:	1e53      	subs	r3, r2, #1
 8001ce6:	42b1      	cmp	r1, r6
 8001ce8:	d327      	bcc.n	8001d3a <__aeabi_ddiv+0x582>
 8001cea:	42a9      	cmp	r1, r5
 8001cec:	d315      	bcc.n	8001d1a <__aeabi_ddiv+0x562>
 8001cee:	d058      	beq.n	8001da2 <__aeabi_ddiv+0x5ea>
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	e773      	b.n	8001bdc <__aeabi_ddiv+0x424>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	dc00      	bgt.n	8001cfa <__aeabi_ddiv+0x542>
 8001cf8:	e604      	b.n	8001904 <__aeabi_ddiv+0x14c>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	449b      	add	fp, r3
 8001d00:	e5cd      	b.n	800189e <__aeabi_ddiv+0xe6>
 8001d02:	2302      	movs	r3, #2
 8001d04:	4447      	add	r7, r8
 8001d06:	4547      	cmp	r7, r8
 8001d08:	4189      	sbcs	r1, r1
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	4249      	negs	r1, r1
 8001d10:	1989      	adds	r1, r1, r6
 8001d12:	190c      	adds	r4, r1, r4
 8001d14:	44e3      	add	fp, ip
 8001d16:	1a24      	subs	r4, r4, r0
 8001d18:	e703      	b.n	8001b22 <__aeabi_ddiv+0x36a>
 8001d1a:	4643      	mov	r3, r8
 8001d1c:	005f      	lsls	r7, r3, #1
 8001d1e:	4547      	cmp	r7, r8
 8001d20:	419b      	sbcs	r3, r3
 8001d22:	46b8      	mov	r8, r7
 8001d24:	425b      	negs	r3, r3
 8001d26:	199e      	adds	r6, r3, r6
 8001d28:	3a02      	subs	r2, #2
 8001d2a:	1989      	adds	r1, r1, r6
 8001d2c:	42a9      	cmp	r1, r5
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_ddiv+0x57a>
 8001d30:	e754      	b.n	8001bdc <__aeabi_ddiv+0x424>
 8001d32:	4540      	cmp	r0, r8
 8001d34:	d000      	beq.n	8001d38 <__aeabi_ddiv+0x580>
 8001d36:	e751      	b.n	8001bdc <__aeabi_ddiv+0x424>
 8001d38:	e5ab      	b.n	8001892 <__aeabi_ddiv+0xda>
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	e7f6      	b.n	8001d2c <__aeabi_ddiv+0x574>
 8001d3e:	211f      	movs	r1, #31
 8001d40:	465f      	mov	r7, fp
 8001d42:	4249      	negs	r1, r1
 8001d44:	1b0c      	subs	r4, r1, r4
 8001d46:	40e7      	lsrs	r7, r4
 8001d48:	2b20      	cmp	r3, #32
 8001d4a:	d007      	beq.n	8001d5c <__aeabi_ddiv+0x5a4>
 8001d4c:	491a      	ldr	r1, [pc, #104]	; (8001db8 <__aeabi_ddiv+0x600>)
 8001d4e:	9b00      	ldr	r3, [sp, #0]
 8001d50:	468c      	mov	ip, r1
 8001d52:	4463      	add	r3, ip
 8001d54:	0018      	movs	r0, r3
 8001d56:	465b      	mov	r3, fp
 8001d58:	4083      	lsls	r3, r0
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	1e50      	subs	r0, r2, #1
 8001d5e:	4182      	sbcs	r2, r0
 8001d60:	433a      	orrs	r2, r7
 8001d62:	2707      	movs	r7, #7
 8001d64:	2300      	movs	r3, #0
 8001d66:	4017      	ands	r7, r2
 8001d68:	d009      	beq.n	8001d7e <__aeabi_ddiv+0x5c6>
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	4011      	ands	r1, r2
 8001d70:	0014      	movs	r4, r2
 8001d72:	2904      	cmp	r1, #4
 8001d74:	d195      	bne.n	8001ca2 <__aeabi_ddiv+0x4ea>
 8001d76:	0022      	movs	r2, r4
 8001d78:	075f      	lsls	r7, r3, #29
 8001d7a:	025b      	lsls	r3, r3, #9
 8001d7c:	0b1b      	lsrs	r3, r3, #12
 8001d7e:	08d2      	lsrs	r2, r2, #3
 8001d80:	4317      	orrs	r7, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	e5a6      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	4659      	mov	r1, fp
 8001d8a:	031b      	lsls	r3, r3, #12
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	031b      	lsls	r3, r3, #12
 8001d90:	0017      	movs	r7, r2
 8001d92:	0b1b      	lsrs	r3, r3, #12
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <__aeabi_ddiv+0x5f8>)
 8001d96:	e59d      	b.n	80018d4 <__aeabi_ddiv+0x11c>
 8001d98:	42bd      	cmp	r5, r7
 8001d9a:	d8b2      	bhi.n	8001d02 <__aeabi_ddiv+0x54a>
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	2400      	movs	r4, #0
 8001da0:	e6bf      	b.n	8001b22 <__aeabi_ddiv+0x36a>
 8001da2:	4580      	cmp	r8, r0
 8001da4:	d3b9      	bcc.n	8001d1a <__aeabi_ddiv+0x562>
 8001da6:	001a      	movs	r2, r3
 8001da8:	e7c3      	b.n	8001d32 <__aeabi_ddiv+0x57a>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	000003ff 	.word	0x000003ff
 8001db0:	000007ff 	.word	0x000007ff
 8001db4:	0000041e 	.word	0x0000041e
 8001db8:	0000043e 	.word	0x0000043e

08001dbc <__eqdf2>:
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	464f      	mov	r7, r9
 8001dc0:	4646      	mov	r6, r8
 8001dc2:	46d6      	mov	lr, sl
 8001dc4:	4684      	mov	ip, r0
 8001dc6:	b5c0      	push	{r6, r7, lr}
 8001dc8:	4680      	mov	r8, r0
 8001dca:	4e19      	ldr	r6, [pc, #100]	; (8001e30 <__eqdf2+0x74>)
 8001dcc:	0318      	lsls	r0, r3, #12
 8001dce:	030f      	lsls	r7, r1, #12
 8001dd0:	004d      	lsls	r5, r1, #1
 8001dd2:	0b00      	lsrs	r0, r0, #12
 8001dd4:	005c      	lsls	r4, r3, #1
 8001dd6:	4682      	mov	sl, r0
 8001dd8:	0b3f      	lsrs	r7, r7, #12
 8001dda:	0d6d      	lsrs	r5, r5, #21
 8001ddc:	0fc9      	lsrs	r1, r1, #31
 8001dde:	4691      	mov	r9, r2
 8001de0:	0d64      	lsrs	r4, r4, #21
 8001de2:	0fdb      	lsrs	r3, r3, #31
 8001de4:	2001      	movs	r0, #1
 8001de6:	42b5      	cmp	r5, r6
 8001de8:	d00a      	beq.n	8001e00 <__eqdf2+0x44>
 8001dea:	42b4      	cmp	r4, r6
 8001dec:	d003      	beq.n	8001df6 <__eqdf2+0x3a>
 8001dee:	42a5      	cmp	r5, r4
 8001df0:	d101      	bne.n	8001df6 <__eqdf2+0x3a>
 8001df2:	4557      	cmp	r7, sl
 8001df4:	d00c      	beq.n	8001e10 <__eqdf2+0x54>
 8001df6:	bc1c      	pop	{r2, r3, r4}
 8001df8:	4690      	mov	r8, r2
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	46a2      	mov	sl, r4
 8001dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e00:	4666      	mov	r6, ip
 8001e02:	433e      	orrs	r6, r7
 8001e04:	d1f7      	bne.n	8001df6 <__eqdf2+0x3a>
 8001e06:	42ac      	cmp	r4, r5
 8001e08:	d1f5      	bne.n	8001df6 <__eqdf2+0x3a>
 8001e0a:	4654      	mov	r4, sl
 8001e0c:	4314      	orrs	r4, r2
 8001e0e:	d1f2      	bne.n	8001df6 <__eqdf2+0x3a>
 8001e10:	2001      	movs	r0, #1
 8001e12:	45c8      	cmp	r8, r9
 8001e14:	d1ef      	bne.n	8001df6 <__eqdf2+0x3a>
 8001e16:	4299      	cmp	r1, r3
 8001e18:	d007      	beq.n	8001e2a <__eqdf2+0x6e>
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d1eb      	bne.n	8001df6 <__eqdf2+0x3a>
 8001e1e:	4663      	mov	r3, ip
 8001e20:	431f      	orrs	r7, r3
 8001e22:	0038      	movs	r0, r7
 8001e24:	1e47      	subs	r7, r0, #1
 8001e26:	41b8      	sbcs	r0, r7
 8001e28:	e7e5      	b.n	8001df6 <__eqdf2+0x3a>
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	e7e3      	b.n	8001df6 <__eqdf2+0x3a>
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__gedf2>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	464f      	mov	r7, r9
 8001e38:	4646      	mov	r6, r8
 8001e3a:	46d6      	mov	lr, sl
 8001e3c:	004d      	lsls	r5, r1, #1
 8001e3e:	b5c0      	push	{r6, r7, lr}
 8001e40:	030e      	lsls	r6, r1, #12
 8001e42:	0fc9      	lsrs	r1, r1, #31
 8001e44:	468a      	mov	sl, r1
 8001e46:	492c      	ldr	r1, [pc, #176]	; (8001ef8 <__gedf2+0xc4>)
 8001e48:	031f      	lsls	r7, r3, #12
 8001e4a:	005c      	lsls	r4, r3, #1
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	0b36      	lsrs	r6, r6, #12
 8001e50:	0d6d      	lsrs	r5, r5, #21
 8001e52:	4691      	mov	r9, r2
 8001e54:	0b3f      	lsrs	r7, r7, #12
 8001e56:	0d64      	lsrs	r4, r4, #21
 8001e58:	0fdb      	lsrs	r3, r3, #31
 8001e5a:	428d      	cmp	r5, r1
 8001e5c:	d01e      	beq.n	8001e9c <__gedf2+0x68>
 8001e5e:	428c      	cmp	r4, r1
 8001e60:	d016      	beq.n	8001e90 <__gedf2+0x5c>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d11e      	bne.n	8001ea4 <__gedf2+0x70>
 8001e66:	4330      	orrs	r0, r6
 8001e68:	4684      	mov	ip, r0
 8001e6a:	2c00      	cmp	r4, #0
 8001e6c:	d101      	bne.n	8001e72 <__gedf2+0x3e>
 8001e6e:	433a      	orrs	r2, r7
 8001e70:	d023      	beq.n	8001eba <__gedf2+0x86>
 8001e72:	4662      	mov	r2, ip
 8001e74:	2a00      	cmp	r2, #0
 8001e76:	d01a      	beq.n	8001eae <__gedf2+0x7a>
 8001e78:	459a      	cmp	sl, r3
 8001e7a:	d029      	beq.n	8001ed0 <__gedf2+0x9c>
 8001e7c:	4651      	mov	r1, sl
 8001e7e:	2002      	movs	r0, #2
 8001e80:	3901      	subs	r1, #1
 8001e82:	4008      	ands	r0, r1
 8001e84:	3801      	subs	r0, #1
 8001e86:	bc1c      	pop	{r2, r3, r4}
 8001e88:	4690      	mov	r8, r2
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	46a2      	mov	sl, r4
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e90:	0039      	movs	r1, r7
 8001e92:	4311      	orrs	r1, r2
 8001e94:	d0e5      	beq.n	8001e62 <__gedf2+0x2e>
 8001e96:	2002      	movs	r0, #2
 8001e98:	4240      	negs	r0, r0
 8001e9a:	e7f4      	b.n	8001e86 <__gedf2+0x52>
 8001e9c:	4330      	orrs	r0, r6
 8001e9e:	d1fa      	bne.n	8001e96 <__gedf2+0x62>
 8001ea0:	42ac      	cmp	r4, r5
 8001ea2:	d00f      	beq.n	8001ec4 <__gedf2+0x90>
 8001ea4:	2c00      	cmp	r4, #0
 8001ea6:	d10f      	bne.n	8001ec8 <__gedf2+0x94>
 8001ea8:	433a      	orrs	r2, r7
 8001eaa:	d0e7      	beq.n	8001e7c <__gedf2+0x48>
 8001eac:	e00c      	b.n	8001ec8 <__gedf2+0x94>
 8001eae:	2201      	movs	r2, #1
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3001      	adds	r0, #1
 8001eb8:	e7e5      	b.n	8001e86 <__gedf2+0x52>
 8001eba:	4663      	mov	r3, ip
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0e1      	beq.n	8001e86 <__gedf2+0x52>
 8001ec2:	e7db      	b.n	8001e7c <__gedf2+0x48>
 8001ec4:	433a      	orrs	r2, r7
 8001ec6:	d1e6      	bne.n	8001e96 <__gedf2+0x62>
 8001ec8:	459a      	cmp	sl, r3
 8001eca:	d1d7      	bne.n	8001e7c <__gedf2+0x48>
 8001ecc:	42a5      	cmp	r5, r4
 8001ece:	dcd5      	bgt.n	8001e7c <__gedf2+0x48>
 8001ed0:	42a5      	cmp	r5, r4
 8001ed2:	db05      	blt.n	8001ee0 <__gedf2+0xac>
 8001ed4:	42be      	cmp	r6, r7
 8001ed6:	d8d1      	bhi.n	8001e7c <__gedf2+0x48>
 8001ed8:	d008      	beq.n	8001eec <__gedf2+0xb8>
 8001eda:	2000      	movs	r0, #0
 8001edc:	42be      	cmp	r6, r7
 8001ede:	d2d2      	bcs.n	8001e86 <__gedf2+0x52>
 8001ee0:	4650      	mov	r0, sl
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	3801      	subs	r0, #1
 8001ee6:	4398      	bics	r0, r3
 8001ee8:	3001      	adds	r0, #1
 8001eea:	e7cc      	b.n	8001e86 <__gedf2+0x52>
 8001eec:	45c8      	cmp	r8, r9
 8001eee:	d8c5      	bhi.n	8001e7c <__gedf2+0x48>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	45c8      	cmp	r8, r9
 8001ef4:	d3f4      	bcc.n	8001ee0 <__gedf2+0xac>
 8001ef6:	e7c6      	b.n	8001e86 <__gedf2+0x52>
 8001ef8:	000007ff 	.word	0x000007ff

08001efc <__ledf2>:
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efe:	464f      	mov	r7, r9
 8001f00:	4646      	mov	r6, r8
 8001f02:	46d6      	mov	lr, sl
 8001f04:	004d      	lsls	r5, r1, #1
 8001f06:	b5c0      	push	{r6, r7, lr}
 8001f08:	030e      	lsls	r6, r1, #12
 8001f0a:	0fc9      	lsrs	r1, r1, #31
 8001f0c:	468a      	mov	sl, r1
 8001f0e:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <__ledf2+0xcc>)
 8001f10:	031f      	lsls	r7, r3, #12
 8001f12:	005c      	lsls	r4, r3, #1
 8001f14:	4680      	mov	r8, r0
 8001f16:	0b36      	lsrs	r6, r6, #12
 8001f18:	0d6d      	lsrs	r5, r5, #21
 8001f1a:	4691      	mov	r9, r2
 8001f1c:	0b3f      	lsrs	r7, r7, #12
 8001f1e:	0d64      	lsrs	r4, r4, #21
 8001f20:	0fdb      	lsrs	r3, r3, #31
 8001f22:	428d      	cmp	r5, r1
 8001f24:	d018      	beq.n	8001f58 <__ledf2+0x5c>
 8001f26:	428c      	cmp	r4, r1
 8001f28:	d011      	beq.n	8001f4e <__ledf2+0x52>
 8001f2a:	2d00      	cmp	r5, #0
 8001f2c:	d118      	bne.n	8001f60 <__ledf2+0x64>
 8001f2e:	4330      	orrs	r0, r6
 8001f30:	4684      	mov	ip, r0
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d11e      	bne.n	8001f74 <__ledf2+0x78>
 8001f36:	433a      	orrs	r2, r7
 8001f38:	d11c      	bne.n	8001f74 <__ledf2+0x78>
 8001f3a:	4663      	mov	r3, ip
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d030      	beq.n	8001fa4 <__ledf2+0xa8>
 8001f42:	4651      	mov	r1, sl
 8001f44:	2002      	movs	r0, #2
 8001f46:	3901      	subs	r1, #1
 8001f48:	4008      	ands	r0, r1
 8001f4a:	3801      	subs	r0, #1
 8001f4c:	e02a      	b.n	8001fa4 <__ledf2+0xa8>
 8001f4e:	0039      	movs	r1, r7
 8001f50:	4311      	orrs	r1, r2
 8001f52:	d0ea      	beq.n	8001f2a <__ledf2+0x2e>
 8001f54:	2002      	movs	r0, #2
 8001f56:	e025      	b.n	8001fa4 <__ledf2+0xa8>
 8001f58:	4330      	orrs	r0, r6
 8001f5a:	d1fb      	bne.n	8001f54 <__ledf2+0x58>
 8001f5c:	42ac      	cmp	r4, r5
 8001f5e:	d026      	beq.n	8001fae <__ledf2+0xb2>
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d126      	bne.n	8001fb2 <__ledf2+0xb6>
 8001f64:	433a      	orrs	r2, r7
 8001f66:	d124      	bne.n	8001fb2 <__ledf2+0xb6>
 8001f68:	4651      	mov	r1, sl
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	3901      	subs	r1, #1
 8001f6e:	4008      	ands	r0, r1
 8001f70:	3801      	subs	r0, #1
 8001f72:	e017      	b.n	8001fa4 <__ledf2+0xa8>
 8001f74:	4662      	mov	r2, ip
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d00f      	beq.n	8001f9a <__ledf2+0x9e>
 8001f7a:	459a      	cmp	sl, r3
 8001f7c:	d1e1      	bne.n	8001f42 <__ledf2+0x46>
 8001f7e:	42a5      	cmp	r5, r4
 8001f80:	db05      	blt.n	8001f8e <__ledf2+0x92>
 8001f82:	42be      	cmp	r6, r7
 8001f84:	d8dd      	bhi.n	8001f42 <__ledf2+0x46>
 8001f86:	d019      	beq.n	8001fbc <__ledf2+0xc0>
 8001f88:	2000      	movs	r0, #0
 8001f8a:	42be      	cmp	r6, r7
 8001f8c:	d20a      	bcs.n	8001fa4 <__ledf2+0xa8>
 8001f8e:	4650      	mov	r0, sl
 8001f90:	2301      	movs	r3, #1
 8001f92:	3801      	subs	r0, #1
 8001f94:	4398      	bics	r0, r3
 8001f96:	3001      	adds	r0, #1
 8001f98:	e004      	b.n	8001fa4 <__ledf2+0xa8>
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	3001      	adds	r0, #1
 8001fa4:	bc1c      	pop	{r2, r3, r4}
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	4699      	mov	r9, r3
 8001faa:	46a2      	mov	sl, r4
 8001fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fae:	433a      	orrs	r2, r7
 8001fb0:	d1d0      	bne.n	8001f54 <__ledf2+0x58>
 8001fb2:	459a      	cmp	sl, r3
 8001fb4:	d1c5      	bne.n	8001f42 <__ledf2+0x46>
 8001fb6:	42a5      	cmp	r5, r4
 8001fb8:	dcc3      	bgt.n	8001f42 <__ledf2+0x46>
 8001fba:	e7e0      	b.n	8001f7e <__ledf2+0x82>
 8001fbc:	45c8      	cmp	r8, r9
 8001fbe:	d8c0      	bhi.n	8001f42 <__ledf2+0x46>
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	45c8      	cmp	r8, r9
 8001fc4:	d3e3      	bcc.n	8001f8e <__ledf2+0x92>
 8001fc6:	e7ed      	b.n	8001fa4 <__ledf2+0xa8>
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__aeabi_dmul>:
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	4657      	mov	r7, sl
 8001fd0:	46de      	mov	lr, fp
 8001fd2:	464e      	mov	r6, r9
 8001fd4:	4645      	mov	r5, r8
 8001fd6:	b5e0      	push	{r5, r6, r7, lr}
 8001fd8:	4683      	mov	fp, r0
 8001fda:	0006      	movs	r6, r0
 8001fdc:	030f      	lsls	r7, r1, #12
 8001fde:	0048      	lsls	r0, r1, #1
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	4692      	mov	sl, r2
 8001fe4:	001d      	movs	r5, r3
 8001fe6:	0b3f      	lsrs	r7, r7, #12
 8001fe8:	0d40      	lsrs	r0, r0, #21
 8001fea:	0fcc      	lsrs	r4, r1, #31
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dmul+0x26>
 8001ff0:	e06f      	b.n	80020d2 <__aeabi_dmul+0x106>
 8001ff2:	4bde      	ldr	r3, [pc, #888]	; (800236c <__aeabi_dmul+0x3a0>)
 8001ff4:	4298      	cmp	r0, r3
 8001ff6:	d038      	beq.n	800206a <__aeabi_dmul+0x9e>
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	00ff      	lsls	r7, r7, #3
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431f      	orrs	r7, r3
 8002000:	0f73      	lsrs	r3, r6, #29
 8002002:	433b      	orrs	r3, r7
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	4bda      	ldr	r3, [pc, #872]	; (8002370 <__aeabi_dmul+0x3a4>)
 8002008:	2700      	movs	r7, #0
 800200a:	4699      	mov	r9, r3
 800200c:	2300      	movs	r3, #0
 800200e:	469b      	mov	fp, r3
 8002010:	00f6      	lsls	r6, r6, #3
 8002012:	4481      	add	r9, r0
 8002014:	032b      	lsls	r3, r5, #12
 8002016:	0069      	lsls	r1, r5, #1
 8002018:	0b1b      	lsrs	r3, r3, #12
 800201a:	4652      	mov	r2, sl
 800201c:	4698      	mov	r8, r3
 800201e:	0d49      	lsrs	r1, r1, #21
 8002020:	0fed      	lsrs	r5, r5, #31
 8002022:	2900      	cmp	r1, #0
 8002024:	d100      	bne.n	8002028 <__aeabi_dmul+0x5c>
 8002026:	e085      	b.n	8002134 <__aeabi_dmul+0x168>
 8002028:	4bd0      	ldr	r3, [pc, #832]	; (800236c <__aeabi_dmul+0x3a0>)
 800202a:	4299      	cmp	r1, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dmul+0x64>
 800202e:	e073      	b.n	8002118 <__aeabi_dmul+0x14c>
 8002030:	4643      	mov	r3, r8
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	4313      	orrs	r3, r2
 800203a:	4652      	mov	r2, sl
 800203c:	48cc      	ldr	r0, [pc, #816]	; (8002370 <__aeabi_dmul+0x3a4>)
 800203e:	0f52      	lsrs	r2, r2, #29
 8002040:	4684      	mov	ip, r0
 8002042:	4313      	orrs	r3, r2
 8002044:	4652      	mov	r2, sl
 8002046:	2000      	movs	r0, #0
 8002048:	4461      	add	r1, ip
 800204a:	00d2      	lsls	r2, r2, #3
 800204c:	4489      	add	r9, r1
 800204e:	0021      	movs	r1, r4
 8002050:	4069      	eors	r1, r5
 8002052:	9100      	str	r1, [sp, #0]
 8002054:	468c      	mov	ip, r1
 8002056:	2101      	movs	r1, #1
 8002058:	4449      	add	r1, r9
 800205a:	468a      	mov	sl, r1
 800205c:	2f0f      	cmp	r7, #15
 800205e:	d900      	bls.n	8002062 <__aeabi_dmul+0x96>
 8002060:	e090      	b.n	8002184 <__aeabi_dmul+0x1b8>
 8002062:	49c4      	ldr	r1, [pc, #784]	; (8002374 <__aeabi_dmul+0x3a8>)
 8002064:	00bf      	lsls	r7, r7, #2
 8002066:	59cf      	ldr	r7, [r1, r7]
 8002068:	46bf      	mov	pc, r7
 800206a:	465b      	mov	r3, fp
 800206c:	433b      	orrs	r3, r7
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	d000      	beq.n	8002074 <__aeabi_dmul+0xa8>
 8002072:	e16a      	b.n	800234a <__aeabi_dmul+0x37e>
 8002074:	2302      	movs	r3, #2
 8002076:	2708      	movs	r7, #8
 8002078:	2600      	movs	r6, #0
 800207a:	4681      	mov	r9, r0
 800207c:	469b      	mov	fp, r3
 800207e:	e7c9      	b.n	8002014 <__aeabi_dmul+0x48>
 8002080:	0032      	movs	r2, r6
 8002082:	4658      	mov	r0, fp
 8002084:	9b01      	ldr	r3, [sp, #4]
 8002086:	4661      	mov	r1, ip
 8002088:	9100      	str	r1, [sp, #0]
 800208a:	2802      	cmp	r0, #2
 800208c:	d100      	bne.n	8002090 <__aeabi_dmul+0xc4>
 800208e:	e075      	b.n	800217c <__aeabi_dmul+0x1b0>
 8002090:	2803      	cmp	r0, #3
 8002092:	d100      	bne.n	8002096 <__aeabi_dmul+0xca>
 8002094:	e1fe      	b.n	8002494 <__aeabi_dmul+0x4c8>
 8002096:	2801      	cmp	r0, #1
 8002098:	d000      	beq.n	800209c <__aeabi_dmul+0xd0>
 800209a:	e12c      	b.n	80022f6 <__aeabi_dmul+0x32a>
 800209c:	2300      	movs	r3, #0
 800209e:	2700      	movs	r7, #0
 80020a0:	2600      	movs	r6, #0
 80020a2:	2500      	movs	r5, #0
 80020a4:	033f      	lsls	r7, r7, #12
 80020a6:	0d2a      	lsrs	r2, r5, #20
 80020a8:	0b3f      	lsrs	r7, r7, #12
 80020aa:	48b3      	ldr	r0, [pc, #716]	; (8002378 <__aeabi_dmul+0x3ac>)
 80020ac:	0512      	lsls	r2, r2, #20
 80020ae:	433a      	orrs	r2, r7
 80020b0:	4002      	ands	r2, r0
 80020b2:	051b      	lsls	r3, r3, #20
 80020b4:	4313      	orrs	r3, r2
 80020b6:	9a00      	ldr	r2, [sp, #0]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	07d1      	lsls	r1, r2, #31
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	430b      	orrs	r3, r1
 80020c0:	0030      	movs	r0, r6
 80020c2:	0019      	movs	r1, r3
 80020c4:	b007      	add	sp, #28
 80020c6:	bc3c      	pop	{r2, r3, r4, r5}
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	46a2      	mov	sl, r4
 80020ce:	46ab      	mov	fp, r5
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	465b      	mov	r3, fp
 80020d4:	433b      	orrs	r3, r7
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	d100      	bne.n	80020dc <__aeabi_dmul+0x110>
 80020da:	e12f      	b.n	800233c <__aeabi_dmul+0x370>
 80020dc:	2f00      	cmp	r7, #0
 80020de:	d100      	bne.n	80020e2 <__aeabi_dmul+0x116>
 80020e0:	e1a5      	b.n	800242e <__aeabi_dmul+0x462>
 80020e2:	0038      	movs	r0, r7
 80020e4:	f000 fe38 	bl	8002d58 <__clzsi2>
 80020e8:	0003      	movs	r3, r0
 80020ea:	3b0b      	subs	r3, #11
 80020ec:	2b1c      	cmp	r3, #28
 80020ee:	dd00      	ble.n	80020f2 <__aeabi_dmul+0x126>
 80020f0:	e196      	b.n	8002420 <__aeabi_dmul+0x454>
 80020f2:	221d      	movs	r2, #29
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	465a      	mov	r2, fp
 80020f8:	0001      	movs	r1, r0
 80020fa:	40da      	lsrs	r2, r3
 80020fc:	465e      	mov	r6, fp
 80020fe:	3908      	subs	r1, #8
 8002100:	408f      	lsls	r7, r1
 8002102:	0013      	movs	r3, r2
 8002104:	408e      	lsls	r6, r1
 8002106:	433b      	orrs	r3, r7
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	4b9c      	ldr	r3, [pc, #624]	; (800237c <__aeabi_dmul+0x3b0>)
 800210c:	2700      	movs	r7, #0
 800210e:	1a1b      	subs	r3, r3, r0
 8002110:	4699      	mov	r9, r3
 8002112:	2300      	movs	r3, #0
 8002114:	469b      	mov	fp, r3
 8002116:	e77d      	b.n	8002014 <__aeabi_dmul+0x48>
 8002118:	4641      	mov	r1, r8
 800211a:	4653      	mov	r3, sl
 800211c:	430b      	orrs	r3, r1
 800211e:	4993      	ldr	r1, [pc, #588]	; (800236c <__aeabi_dmul+0x3a0>)
 8002120:	468c      	mov	ip, r1
 8002122:	44e1      	add	r9, ip
 8002124:	2b00      	cmp	r3, #0
 8002126:	d000      	beq.n	800212a <__aeabi_dmul+0x15e>
 8002128:	e11a      	b.n	8002360 <__aeabi_dmul+0x394>
 800212a:	2202      	movs	r2, #2
 800212c:	2002      	movs	r0, #2
 800212e:	4317      	orrs	r7, r2
 8002130:	2200      	movs	r2, #0
 8002132:	e78c      	b.n	800204e <__aeabi_dmul+0x82>
 8002134:	4313      	orrs	r3, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dmul+0x16e>
 8002138:	e10d      	b.n	8002356 <__aeabi_dmul+0x38a>
 800213a:	4643      	mov	r3, r8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d100      	bne.n	8002142 <__aeabi_dmul+0x176>
 8002140:	e181      	b.n	8002446 <__aeabi_dmul+0x47a>
 8002142:	4640      	mov	r0, r8
 8002144:	f000 fe08 	bl	8002d58 <__clzsi2>
 8002148:	0002      	movs	r2, r0
 800214a:	3a0b      	subs	r2, #11
 800214c:	2a1c      	cmp	r2, #28
 800214e:	dd00      	ble.n	8002152 <__aeabi_dmul+0x186>
 8002150:	e172      	b.n	8002438 <__aeabi_dmul+0x46c>
 8002152:	0001      	movs	r1, r0
 8002154:	4643      	mov	r3, r8
 8002156:	3908      	subs	r1, #8
 8002158:	408b      	lsls	r3, r1
 800215a:	4698      	mov	r8, r3
 800215c:	231d      	movs	r3, #29
 800215e:	1a9a      	subs	r2, r3, r2
 8002160:	4653      	mov	r3, sl
 8002162:	40d3      	lsrs	r3, r2
 8002164:	001a      	movs	r2, r3
 8002166:	4643      	mov	r3, r8
 8002168:	4313      	orrs	r3, r2
 800216a:	4652      	mov	r2, sl
 800216c:	408a      	lsls	r2, r1
 800216e:	4649      	mov	r1, r9
 8002170:	1a08      	subs	r0, r1, r0
 8002172:	4982      	ldr	r1, [pc, #520]	; (800237c <__aeabi_dmul+0x3b0>)
 8002174:	4689      	mov	r9, r1
 8002176:	4481      	add	r9, r0
 8002178:	2000      	movs	r0, #0
 800217a:	e768      	b.n	800204e <__aeabi_dmul+0x82>
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <__aeabi_dmul+0x3a0>)
 800217e:	2700      	movs	r7, #0
 8002180:	2600      	movs	r6, #0
 8002182:	e78e      	b.n	80020a2 <__aeabi_dmul+0xd6>
 8002184:	0c14      	lsrs	r4, r2, #16
 8002186:	0412      	lsls	r2, r2, #16
 8002188:	0c12      	lsrs	r2, r2, #16
 800218a:	0011      	movs	r1, r2
 800218c:	0c37      	lsrs	r7, r6, #16
 800218e:	0436      	lsls	r6, r6, #16
 8002190:	0c35      	lsrs	r5, r6, #16
 8002192:	4379      	muls	r1, r7
 8002194:	0028      	movs	r0, r5
 8002196:	468c      	mov	ip, r1
 8002198:	002e      	movs	r6, r5
 800219a:	4360      	muls	r0, r4
 800219c:	4460      	add	r0, ip
 800219e:	4683      	mov	fp, r0
 80021a0:	4356      	muls	r6, r2
 80021a2:	0021      	movs	r1, r4
 80021a4:	0c30      	lsrs	r0, r6, #16
 80021a6:	4680      	mov	r8, r0
 80021a8:	4658      	mov	r0, fp
 80021aa:	4379      	muls	r1, r7
 80021ac:	4440      	add	r0, r8
 80021ae:	9102      	str	r1, [sp, #8]
 80021b0:	4584      	cmp	ip, r0
 80021b2:	d906      	bls.n	80021c2 <__aeabi_dmul+0x1f6>
 80021b4:	4688      	mov	r8, r1
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0249      	lsls	r1, r1, #9
 80021ba:	468c      	mov	ip, r1
 80021bc:	44e0      	add	r8, ip
 80021be:	4641      	mov	r1, r8
 80021c0:	9102      	str	r1, [sp, #8]
 80021c2:	0436      	lsls	r6, r6, #16
 80021c4:	0c01      	lsrs	r1, r0, #16
 80021c6:	0c36      	lsrs	r6, r6, #16
 80021c8:	0400      	lsls	r0, r0, #16
 80021ca:	468b      	mov	fp, r1
 80021cc:	1981      	adds	r1, r0, r6
 80021ce:	0c1e      	lsrs	r6, r3, #16
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	9103      	str	r1, [sp, #12]
 80021d6:	0019      	movs	r1, r3
 80021d8:	4379      	muls	r1, r7
 80021da:	468c      	mov	ip, r1
 80021dc:	0028      	movs	r0, r5
 80021de:	4375      	muls	r5, r6
 80021e0:	4465      	add	r5, ip
 80021e2:	46a8      	mov	r8, r5
 80021e4:	4358      	muls	r0, r3
 80021e6:	0c05      	lsrs	r5, r0, #16
 80021e8:	4445      	add	r5, r8
 80021ea:	4377      	muls	r7, r6
 80021ec:	42a9      	cmp	r1, r5
 80021ee:	d903      	bls.n	80021f8 <__aeabi_dmul+0x22c>
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	0249      	lsls	r1, r1, #9
 80021f4:	468c      	mov	ip, r1
 80021f6:	4467      	add	r7, ip
 80021f8:	0c29      	lsrs	r1, r5, #16
 80021fa:	468c      	mov	ip, r1
 80021fc:	0039      	movs	r1, r7
 80021fe:	0400      	lsls	r0, r0, #16
 8002200:	0c00      	lsrs	r0, r0, #16
 8002202:	042d      	lsls	r5, r5, #16
 8002204:	182d      	adds	r5, r5, r0
 8002206:	4461      	add	r1, ip
 8002208:	44ab      	add	fp, r5
 800220a:	9105      	str	r1, [sp, #20]
 800220c:	4659      	mov	r1, fp
 800220e:	9104      	str	r1, [sp, #16]
 8002210:	9901      	ldr	r1, [sp, #4]
 8002212:	040f      	lsls	r7, r1, #16
 8002214:	0c3f      	lsrs	r7, r7, #16
 8002216:	0c08      	lsrs	r0, r1, #16
 8002218:	0039      	movs	r1, r7
 800221a:	4351      	muls	r1, r2
 800221c:	4342      	muls	r2, r0
 800221e:	4690      	mov	r8, r2
 8002220:	0002      	movs	r2, r0
 8002222:	468c      	mov	ip, r1
 8002224:	0c09      	lsrs	r1, r1, #16
 8002226:	468b      	mov	fp, r1
 8002228:	4362      	muls	r2, r4
 800222a:	437c      	muls	r4, r7
 800222c:	4444      	add	r4, r8
 800222e:	445c      	add	r4, fp
 8002230:	45a0      	cmp	r8, r4
 8002232:	d903      	bls.n	800223c <__aeabi_dmul+0x270>
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0249      	lsls	r1, r1, #9
 8002238:	4688      	mov	r8, r1
 800223a:	4442      	add	r2, r8
 800223c:	0c21      	lsrs	r1, r4, #16
 800223e:	4688      	mov	r8, r1
 8002240:	4661      	mov	r1, ip
 8002242:	0409      	lsls	r1, r1, #16
 8002244:	0c09      	lsrs	r1, r1, #16
 8002246:	468c      	mov	ip, r1
 8002248:	0039      	movs	r1, r7
 800224a:	4359      	muls	r1, r3
 800224c:	4343      	muls	r3, r0
 800224e:	4370      	muls	r0, r6
 8002250:	437e      	muls	r6, r7
 8002252:	0c0f      	lsrs	r7, r1, #16
 8002254:	18f6      	adds	r6, r6, r3
 8002256:	0424      	lsls	r4, r4, #16
 8002258:	19be      	adds	r6, r7, r6
 800225a:	4464      	add	r4, ip
 800225c:	4442      	add	r2, r8
 800225e:	468c      	mov	ip, r1
 8002260:	42b3      	cmp	r3, r6
 8002262:	d903      	bls.n	800226c <__aeabi_dmul+0x2a0>
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4698      	mov	r8, r3
 800226a:	4440      	add	r0, r8
 800226c:	9b02      	ldr	r3, [sp, #8]
 800226e:	4661      	mov	r1, ip
 8002270:	4698      	mov	r8, r3
 8002272:	9b04      	ldr	r3, [sp, #16]
 8002274:	0437      	lsls	r7, r6, #16
 8002276:	4443      	add	r3, r8
 8002278:	469b      	mov	fp, r3
 800227a:	45ab      	cmp	fp, r5
 800227c:	41ad      	sbcs	r5, r5
 800227e:	426b      	negs	r3, r5
 8002280:	040d      	lsls	r5, r1, #16
 8002282:	9905      	ldr	r1, [sp, #20]
 8002284:	0c2d      	lsrs	r5, r5, #16
 8002286:	468c      	mov	ip, r1
 8002288:	197f      	adds	r7, r7, r5
 800228a:	4467      	add	r7, ip
 800228c:	18fd      	adds	r5, r7, r3
 800228e:	46a8      	mov	r8, r5
 8002290:	465d      	mov	r5, fp
 8002292:	192d      	adds	r5, r5, r4
 8002294:	42a5      	cmp	r5, r4
 8002296:	41a4      	sbcs	r4, r4
 8002298:	4693      	mov	fp, r2
 800229a:	4264      	negs	r4, r4
 800229c:	46a4      	mov	ip, r4
 800229e:	44c3      	add	fp, r8
 80022a0:	44dc      	add	ip, fp
 80022a2:	428f      	cmp	r7, r1
 80022a4:	41bf      	sbcs	r7, r7
 80022a6:	4598      	cmp	r8, r3
 80022a8:	419b      	sbcs	r3, r3
 80022aa:	4593      	cmp	fp, r2
 80022ac:	4192      	sbcs	r2, r2
 80022ae:	45a4      	cmp	ip, r4
 80022b0:	41a4      	sbcs	r4, r4
 80022b2:	425b      	negs	r3, r3
 80022b4:	427f      	negs	r7, r7
 80022b6:	431f      	orrs	r7, r3
 80022b8:	0c36      	lsrs	r6, r6, #16
 80022ba:	4252      	negs	r2, r2
 80022bc:	4264      	negs	r4, r4
 80022be:	19bf      	adds	r7, r7, r6
 80022c0:	4322      	orrs	r2, r4
 80022c2:	18bf      	adds	r7, r7, r2
 80022c4:	4662      	mov	r2, ip
 80022c6:	1838      	adds	r0, r7, r0
 80022c8:	0243      	lsls	r3, r0, #9
 80022ca:	0dd2      	lsrs	r2, r2, #23
 80022cc:	9903      	ldr	r1, [sp, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	026a      	lsls	r2, r5, #9
 80022d2:	430a      	orrs	r2, r1
 80022d4:	1e50      	subs	r0, r2, #1
 80022d6:	4182      	sbcs	r2, r0
 80022d8:	4661      	mov	r1, ip
 80022da:	0ded      	lsrs	r5, r5, #23
 80022dc:	432a      	orrs	r2, r5
 80022de:	024e      	lsls	r6, r1, #9
 80022e0:	4332      	orrs	r2, r6
 80022e2:	01d9      	lsls	r1, r3, #7
 80022e4:	d400      	bmi.n	80022e8 <__aeabi_dmul+0x31c>
 80022e6:	e0b3      	b.n	8002450 <__aeabi_dmul+0x484>
 80022e8:	2601      	movs	r6, #1
 80022ea:	0850      	lsrs	r0, r2, #1
 80022ec:	4032      	ands	r2, r6
 80022ee:	4302      	orrs	r2, r0
 80022f0:	07de      	lsls	r6, r3, #31
 80022f2:	4332      	orrs	r2, r6
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	4c22      	ldr	r4, [pc, #136]	; (8002380 <__aeabi_dmul+0x3b4>)
 80022f8:	4454      	add	r4, sl
 80022fa:	2c00      	cmp	r4, #0
 80022fc:	dd62      	ble.n	80023c4 <__aeabi_dmul+0x3f8>
 80022fe:	0751      	lsls	r1, r2, #29
 8002300:	d009      	beq.n	8002316 <__aeabi_dmul+0x34a>
 8002302:	200f      	movs	r0, #15
 8002304:	4010      	ands	r0, r2
 8002306:	2804      	cmp	r0, #4
 8002308:	d005      	beq.n	8002316 <__aeabi_dmul+0x34a>
 800230a:	1d10      	adds	r0, r2, #4
 800230c:	4290      	cmp	r0, r2
 800230e:	4192      	sbcs	r2, r2
 8002310:	4252      	negs	r2, r2
 8002312:	189b      	adds	r3, r3, r2
 8002314:	0002      	movs	r2, r0
 8002316:	01d9      	lsls	r1, r3, #7
 8002318:	d504      	bpl.n	8002324 <__aeabi_dmul+0x358>
 800231a:	2480      	movs	r4, #128	; 0x80
 800231c:	4819      	ldr	r0, [pc, #100]	; (8002384 <__aeabi_dmul+0x3b8>)
 800231e:	00e4      	lsls	r4, r4, #3
 8002320:	4003      	ands	r3, r0
 8002322:	4454      	add	r4, sl
 8002324:	4818      	ldr	r0, [pc, #96]	; (8002388 <__aeabi_dmul+0x3bc>)
 8002326:	4284      	cmp	r4, r0
 8002328:	dd00      	ble.n	800232c <__aeabi_dmul+0x360>
 800232a:	e727      	b.n	800217c <__aeabi_dmul+0x1b0>
 800232c:	075e      	lsls	r6, r3, #29
 800232e:	025b      	lsls	r3, r3, #9
 8002330:	08d2      	lsrs	r2, r2, #3
 8002332:	0b1f      	lsrs	r7, r3, #12
 8002334:	0563      	lsls	r3, r4, #21
 8002336:	4316      	orrs	r6, r2
 8002338:	0d5b      	lsrs	r3, r3, #21
 800233a:	e6b2      	b.n	80020a2 <__aeabi_dmul+0xd6>
 800233c:	2300      	movs	r3, #0
 800233e:	4699      	mov	r9, r3
 8002340:	3301      	adds	r3, #1
 8002342:	2704      	movs	r7, #4
 8002344:	2600      	movs	r6, #0
 8002346:	469b      	mov	fp, r3
 8002348:	e664      	b.n	8002014 <__aeabi_dmul+0x48>
 800234a:	2303      	movs	r3, #3
 800234c:	9701      	str	r7, [sp, #4]
 800234e:	4681      	mov	r9, r0
 8002350:	270c      	movs	r7, #12
 8002352:	469b      	mov	fp, r3
 8002354:	e65e      	b.n	8002014 <__aeabi_dmul+0x48>
 8002356:	2201      	movs	r2, #1
 8002358:	2001      	movs	r0, #1
 800235a:	4317      	orrs	r7, r2
 800235c:	2200      	movs	r2, #0
 800235e:	e676      	b.n	800204e <__aeabi_dmul+0x82>
 8002360:	2303      	movs	r3, #3
 8002362:	2003      	movs	r0, #3
 8002364:	431f      	orrs	r7, r3
 8002366:	4643      	mov	r3, r8
 8002368:	e671      	b.n	800204e <__aeabi_dmul+0x82>
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	000007ff 	.word	0x000007ff
 8002370:	fffffc01 	.word	0xfffffc01
 8002374:	08006da8 	.word	0x08006da8
 8002378:	800fffff 	.word	0x800fffff
 800237c:	fffffc0d 	.word	0xfffffc0d
 8002380:	000003ff 	.word	0x000003ff
 8002384:	feffffff 	.word	0xfeffffff
 8002388:	000007fe 	.word	0x000007fe
 800238c:	2300      	movs	r3, #0
 800238e:	2780      	movs	r7, #128	; 0x80
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	033f      	lsls	r7, r7, #12
 8002394:	2600      	movs	r6, #0
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <__aeabi_dmul+0x4d8>)
 8002398:	e683      	b.n	80020a2 <__aeabi_dmul+0xd6>
 800239a:	9b01      	ldr	r3, [sp, #4]
 800239c:	0032      	movs	r2, r6
 800239e:	46a4      	mov	ip, r4
 80023a0:	4658      	mov	r0, fp
 80023a2:	e670      	b.n	8002086 <__aeabi_dmul+0xba>
 80023a4:	46ac      	mov	ip, r5
 80023a6:	e66e      	b.n	8002086 <__aeabi_dmul+0xba>
 80023a8:	2780      	movs	r7, #128	; 0x80
 80023aa:	9901      	ldr	r1, [sp, #4]
 80023ac:	033f      	lsls	r7, r7, #12
 80023ae:	4239      	tst	r1, r7
 80023b0:	d02d      	beq.n	800240e <__aeabi_dmul+0x442>
 80023b2:	423b      	tst	r3, r7
 80023b4:	d12b      	bne.n	800240e <__aeabi_dmul+0x442>
 80023b6:	431f      	orrs	r7, r3
 80023b8:	033f      	lsls	r7, r7, #12
 80023ba:	0b3f      	lsrs	r7, r7, #12
 80023bc:	9500      	str	r5, [sp, #0]
 80023be:	0016      	movs	r6, r2
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <__aeabi_dmul+0x4d8>)
 80023c2:	e66e      	b.n	80020a2 <__aeabi_dmul+0xd6>
 80023c4:	2501      	movs	r5, #1
 80023c6:	1b2d      	subs	r5, r5, r4
 80023c8:	2d38      	cmp	r5, #56	; 0x38
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dmul+0x402>
 80023cc:	e666      	b.n	800209c <__aeabi_dmul+0xd0>
 80023ce:	2d1f      	cmp	r5, #31
 80023d0:	dc40      	bgt.n	8002454 <__aeabi_dmul+0x488>
 80023d2:	4835      	ldr	r0, [pc, #212]	; (80024a8 <__aeabi_dmul+0x4dc>)
 80023d4:	001c      	movs	r4, r3
 80023d6:	4450      	add	r0, sl
 80023d8:	0016      	movs	r6, r2
 80023da:	4082      	lsls	r2, r0
 80023dc:	4084      	lsls	r4, r0
 80023de:	40ee      	lsrs	r6, r5
 80023e0:	1e50      	subs	r0, r2, #1
 80023e2:	4182      	sbcs	r2, r0
 80023e4:	4334      	orrs	r4, r6
 80023e6:	4314      	orrs	r4, r2
 80023e8:	40eb      	lsrs	r3, r5
 80023ea:	0762      	lsls	r2, r4, #29
 80023ec:	d009      	beq.n	8002402 <__aeabi_dmul+0x436>
 80023ee:	220f      	movs	r2, #15
 80023f0:	4022      	ands	r2, r4
 80023f2:	2a04      	cmp	r2, #4
 80023f4:	d005      	beq.n	8002402 <__aeabi_dmul+0x436>
 80023f6:	0022      	movs	r2, r4
 80023f8:	1d14      	adds	r4, r2, #4
 80023fa:	4294      	cmp	r4, r2
 80023fc:	4180      	sbcs	r0, r0
 80023fe:	4240      	negs	r0, r0
 8002400:	181b      	adds	r3, r3, r0
 8002402:	021a      	lsls	r2, r3, #8
 8002404:	d53e      	bpl.n	8002484 <__aeabi_dmul+0x4b8>
 8002406:	2301      	movs	r3, #1
 8002408:	2700      	movs	r7, #0
 800240a:	2600      	movs	r6, #0
 800240c:	e649      	b.n	80020a2 <__aeabi_dmul+0xd6>
 800240e:	2780      	movs	r7, #128	; 0x80
 8002410:	9b01      	ldr	r3, [sp, #4]
 8002412:	033f      	lsls	r7, r7, #12
 8002414:	431f      	orrs	r7, r3
 8002416:	033f      	lsls	r7, r7, #12
 8002418:	0b3f      	lsrs	r7, r7, #12
 800241a:	9400      	str	r4, [sp, #0]
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <__aeabi_dmul+0x4d8>)
 800241e:	e640      	b.n	80020a2 <__aeabi_dmul+0xd6>
 8002420:	0003      	movs	r3, r0
 8002422:	465a      	mov	r2, fp
 8002424:	3b28      	subs	r3, #40	; 0x28
 8002426:	409a      	lsls	r2, r3
 8002428:	2600      	movs	r6, #0
 800242a:	9201      	str	r2, [sp, #4]
 800242c:	e66d      	b.n	800210a <__aeabi_dmul+0x13e>
 800242e:	4658      	mov	r0, fp
 8002430:	f000 fc92 	bl	8002d58 <__clzsi2>
 8002434:	3020      	adds	r0, #32
 8002436:	e657      	b.n	80020e8 <__aeabi_dmul+0x11c>
 8002438:	0003      	movs	r3, r0
 800243a:	4652      	mov	r2, sl
 800243c:	3b28      	subs	r3, #40	; 0x28
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	2200      	movs	r2, #0
 8002444:	e693      	b.n	800216e <__aeabi_dmul+0x1a2>
 8002446:	4650      	mov	r0, sl
 8002448:	f000 fc86 	bl	8002d58 <__clzsi2>
 800244c:	3020      	adds	r0, #32
 800244e:	e67b      	b.n	8002148 <__aeabi_dmul+0x17c>
 8002450:	46ca      	mov	sl, r9
 8002452:	e750      	b.n	80022f6 <__aeabi_dmul+0x32a>
 8002454:	201f      	movs	r0, #31
 8002456:	001e      	movs	r6, r3
 8002458:	4240      	negs	r0, r0
 800245a:	1b04      	subs	r4, r0, r4
 800245c:	40e6      	lsrs	r6, r4
 800245e:	2d20      	cmp	r5, #32
 8002460:	d003      	beq.n	800246a <__aeabi_dmul+0x49e>
 8002462:	4c12      	ldr	r4, [pc, #72]	; (80024ac <__aeabi_dmul+0x4e0>)
 8002464:	4454      	add	r4, sl
 8002466:	40a3      	lsls	r3, r4
 8002468:	431a      	orrs	r2, r3
 800246a:	1e50      	subs	r0, r2, #1
 800246c:	4182      	sbcs	r2, r0
 800246e:	4332      	orrs	r2, r6
 8002470:	2607      	movs	r6, #7
 8002472:	2700      	movs	r7, #0
 8002474:	4016      	ands	r6, r2
 8002476:	d009      	beq.n	800248c <__aeabi_dmul+0x4c0>
 8002478:	200f      	movs	r0, #15
 800247a:	2300      	movs	r3, #0
 800247c:	4010      	ands	r0, r2
 800247e:	0014      	movs	r4, r2
 8002480:	2804      	cmp	r0, #4
 8002482:	d1b9      	bne.n	80023f8 <__aeabi_dmul+0x42c>
 8002484:	0022      	movs	r2, r4
 8002486:	075e      	lsls	r6, r3, #29
 8002488:	025b      	lsls	r3, r3, #9
 800248a:	0b1f      	lsrs	r7, r3, #12
 800248c:	08d2      	lsrs	r2, r2, #3
 800248e:	4316      	orrs	r6, r2
 8002490:	2300      	movs	r3, #0
 8002492:	e606      	b.n	80020a2 <__aeabi_dmul+0xd6>
 8002494:	2780      	movs	r7, #128	; 0x80
 8002496:	033f      	lsls	r7, r7, #12
 8002498:	431f      	orrs	r7, r3
 800249a:	033f      	lsls	r7, r7, #12
 800249c:	0b3f      	lsrs	r7, r7, #12
 800249e:	0016      	movs	r6, r2
 80024a0:	4b00      	ldr	r3, [pc, #0]	; (80024a4 <__aeabi_dmul+0x4d8>)
 80024a2:	e5fe      	b.n	80020a2 <__aeabi_dmul+0xd6>
 80024a4:	000007ff 	.word	0x000007ff
 80024a8:	0000041e 	.word	0x0000041e
 80024ac:	0000043e 	.word	0x0000043e

080024b0 <__aeabi_dsub>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	4657      	mov	r7, sl
 80024b4:	464e      	mov	r6, r9
 80024b6:	4645      	mov	r5, r8
 80024b8:	46de      	mov	lr, fp
 80024ba:	000c      	movs	r4, r1
 80024bc:	0309      	lsls	r1, r1, #12
 80024be:	b5e0      	push	{r5, r6, r7, lr}
 80024c0:	0a49      	lsrs	r1, r1, #9
 80024c2:	0f46      	lsrs	r6, r0, #29
 80024c4:	005f      	lsls	r7, r3, #1
 80024c6:	4331      	orrs	r1, r6
 80024c8:	031e      	lsls	r6, r3, #12
 80024ca:	0fdb      	lsrs	r3, r3, #31
 80024cc:	0a76      	lsrs	r6, r6, #9
 80024ce:	469b      	mov	fp, r3
 80024d0:	0f53      	lsrs	r3, r2, #29
 80024d2:	4333      	orrs	r3, r6
 80024d4:	4ec8      	ldr	r6, [pc, #800]	; (80027f8 <__aeabi_dsub+0x348>)
 80024d6:	0065      	lsls	r5, r4, #1
 80024d8:	00c0      	lsls	r0, r0, #3
 80024da:	0fe4      	lsrs	r4, r4, #31
 80024dc:	00d2      	lsls	r2, r2, #3
 80024de:	0d6d      	lsrs	r5, r5, #21
 80024e0:	46a2      	mov	sl, r4
 80024e2:	4681      	mov	r9, r0
 80024e4:	0d7f      	lsrs	r7, r7, #21
 80024e6:	469c      	mov	ip, r3
 80024e8:	4690      	mov	r8, r2
 80024ea:	42b7      	cmp	r7, r6
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x40>
 80024ee:	e0b9      	b.n	8002664 <__aeabi_dsub+0x1b4>
 80024f0:	465b      	mov	r3, fp
 80024f2:	2601      	movs	r6, #1
 80024f4:	4073      	eors	r3, r6
 80024f6:	469b      	mov	fp, r3
 80024f8:	1bee      	subs	r6, r5, r7
 80024fa:	45a3      	cmp	fp, r4
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x50>
 80024fe:	e083      	b.n	8002608 <__aeabi_dsub+0x158>
 8002500:	2e00      	cmp	r6, #0
 8002502:	dd63      	ble.n	80025cc <__aeabi_dsub+0x11c>
 8002504:	2f00      	cmp	r7, #0
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x5a>
 8002508:	e0b1      	b.n	800266e <__aeabi_dsub+0x1be>
 800250a:	4663      	mov	r3, ip
 800250c:	4313      	orrs	r3, r2
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x62>
 8002510:	e123      	b.n	800275a <__aeabi_dsub+0x2aa>
 8002512:	1e73      	subs	r3, r6, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d000      	beq.n	800251a <__aeabi_dsub+0x6a>
 8002518:	e1ba      	b.n	8002890 <__aeabi_dsub+0x3e0>
 800251a:	1a86      	subs	r6, r0, r2
 800251c:	4663      	mov	r3, ip
 800251e:	42b0      	cmp	r0, r6
 8002520:	4180      	sbcs	r0, r0
 8002522:	2501      	movs	r5, #1
 8002524:	1ac9      	subs	r1, r1, r3
 8002526:	4240      	negs	r0, r0
 8002528:	1a09      	subs	r1, r1, r0
 800252a:	020b      	lsls	r3, r1, #8
 800252c:	d400      	bmi.n	8002530 <__aeabi_dsub+0x80>
 800252e:	e147      	b.n	80027c0 <__aeabi_dsub+0x310>
 8002530:	0249      	lsls	r1, r1, #9
 8002532:	0a4b      	lsrs	r3, r1, #9
 8002534:	4698      	mov	r8, r3
 8002536:	4643      	mov	r3, r8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d100      	bne.n	800253e <__aeabi_dsub+0x8e>
 800253c:	e189      	b.n	8002852 <__aeabi_dsub+0x3a2>
 800253e:	4640      	mov	r0, r8
 8002540:	f000 fc0a 	bl	8002d58 <__clzsi2>
 8002544:	0003      	movs	r3, r0
 8002546:	3b08      	subs	r3, #8
 8002548:	2b1f      	cmp	r3, #31
 800254a:	dd00      	ble.n	800254e <__aeabi_dsub+0x9e>
 800254c:	e17c      	b.n	8002848 <__aeabi_dsub+0x398>
 800254e:	2220      	movs	r2, #32
 8002550:	0030      	movs	r0, r6
 8002552:	1ad2      	subs	r2, r2, r3
 8002554:	4641      	mov	r1, r8
 8002556:	40d0      	lsrs	r0, r2
 8002558:	4099      	lsls	r1, r3
 800255a:	0002      	movs	r2, r0
 800255c:	409e      	lsls	r6, r3
 800255e:	430a      	orrs	r2, r1
 8002560:	429d      	cmp	r5, r3
 8002562:	dd00      	ble.n	8002566 <__aeabi_dsub+0xb6>
 8002564:	e16a      	b.n	800283c <__aeabi_dsub+0x38c>
 8002566:	1b5d      	subs	r5, r3, r5
 8002568:	1c6b      	adds	r3, r5, #1
 800256a:	2b1f      	cmp	r3, #31
 800256c:	dd00      	ble.n	8002570 <__aeabi_dsub+0xc0>
 800256e:	e194      	b.n	800289a <__aeabi_dsub+0x3ea>
 8002570:	2120      	movs	r1, #32
 8002572:	0010      	movs	r0, r2
 8002574:	0035      	movs	r5, r6
 8002576:	1ac9      	subs	r1, r1, r3
 8002578:	408e      	lsls	r6, r1
 800257a:	40da      	lsrs	r2, r3
 800257c:	4088      	lsls	r0, r1
 800257e:	40dd      	lsrs	r5, r3
 8002580:	1e71      	subs	r1, r6, #1
 8002582:	418e      	sbcs	r6, r1
 8002584:	0011      	movs	r1, r2
 8002586:	2207      	movs	r2, #7
 8002588:	4328      	orrs	r0, r5
 800258a:	2500      	movs	r5, #0
 800258c:	4306      	orrs	r6, r0
 800258e:	4032      	ands	r2, r6
 8002590:	2a00      	cmp	r2, #0
 8002592:	d009      	beq.n	80025a8 <__aeabi_dsub+0xf8>
 8002594:	230f      	movs	r3, #15
 8002596:	4033      	ands	r3, r6
 8002598:	2b04      	cmp	r3, #4
 800259a:	d005      	beq.n	80025a8 <__aeabi_dsub+0xf8>
 800259c:	1d33      	adds	r3, r6, #4
 800259e:	42b3      	cmp	r3, r6
 80025a0:	41b6      	sbcs	r6, r6
 80025a2:	4276      	negs	r6, r6
 80025a4:	1989      	adds	r1, r1, r6
 80025a6:	001e      	movs	r6, r3
 80025a8:	020b      	lsls	r3, r1, #8
 80025aa:	d400      	bmi.n	80025ae <__aeabi_dsub+0xfe>
 80025ac:	e23d      	b.n	8002a2a <__aeabi_dsub+0x57a>
 80025ae:	1c6a      	adds	r2, r5, #1
 80025b0:	4b91      	ldr	r3, [pc, #580]	; (80027f8 <__aeabi_dsub+0x348>)
 80025b2:	0555      	lsls	r5, r2, #21
 80025b4:	0d6d      	lsrs	r5, r5, #21
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x10c>
 80025ba:	e119      	b.n	80027f0 <__aeabi_dsub+0x340>
 80025bc:	4a8f      	ldr	r2, [pc, #572]	; (80027fc <__aeabi_dsub+0x34c>)
 80025be:	08f6      	lsrs	r6, r6, #3
 80025c0:	400a      	ands	r2, r1
 80025c2:	0757      	lsls	r7, r2, #29
 80025c4:	0252      	lsls	r2, r2, #9
 80025c6:	4337      	orrs	r7, r6
 80025c8:	0b12      	lsrs	r2, r2, #12
 80025ca:	e09b      	b.n	8002704 <__aeabi_dsub+0x254>
 80025cc:	2e00      	cmp	r6, #0
 80025ce:	d000      	beq.n	80025d2 <__aeabi_dsub+0x122>
 80025d0:	e0c5      	b.n	800275e <__aeabi_dsub+0x2ae>
 80025d2:	1c6e      	adds	r6, r5, #1
 80025d4:	0576      	lsls	r6, r6, #21
 80025d6:	0d76      	lsrs	r6, r6, #21
 80025d8:	2e01      	cmp	r6, #1
 80025da:	dc00      	bgt.n	80025de <__aeabi_dsub+0x12e>
 80025dc:	e148      	b.n	8002870 <__aeabi_dsub+0x3c0>
 80025de:	4667      	mov	r7, ip
 80025e0:	1a86      	subs	r6, r0, r2
 80025e2:	1bcb      	subs	r3, r1, r7
 80025e4:	42b0      	cmp	r0, r6
 80025e6:	41bf      	sbcs	r7, r7
 80025e8:	427f      	negs	r7, r7
 80025ea:	46b8      	mov	r8, r7
 80025ec:	001f      	movs	r7, r3
 80025ee:	4643      	mov	r3, r8
 80025f0:	1aff      	subs	r7, r7, r3
 80025f2:	003b      	movs	r3, r7
 80025f4:	46b8      	mov	r8, r7
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	d500      	bpl.n	80025fc <__aeabi_dsub+0x14c>
 80025fa:	e15f      	b.n	80028bc <__aeabi_dsub+0x40c>
 80025fc:	4337      	orrs	r7, r6
 80025fe:	d19a      	bne.n	8002536 <__aeabi_dsub+0x86>
 8002600:	2200      	movs	r2, #0
 8002602:	2400      	movs	r4, #0
 8002604:	2500      	movs	r5, #0
 8002606:	e079      	b.n	80026fc <__aeabi_dsub+0x24c>
 8002608:	2e00      	cmp	r6, #0
 800260a:	dc00      	bgt.n	800260e <__aeabi_dsub+0x15e>
 800260c:	e0fa      	b.n	8002804 <__aeabi_dsub+0x354>
 800260e:	2f00      	cmp	r7, #0
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x164>
 8002612:	e08d      	b.n	8002730 <__aeabi_dsub+0x280>
 8002614:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <__aeabi_dsub+0x348>)
 8002616:	429d      	cmp	r5, r3
 8002618:	d067      	beq.n	80026ea <__aeabi_dsub+0x23a>
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	4667      	mov	r7, ip
 800261e:	041b      	lsls	r3, r3, #16
 8002620:	431f      	orrs	r7, r3
 8002622:	46bc      	mov	ip, r7
 8002624:	2e38      	cmp	r6, #56	; 0x38
 8002626:	dc00      	bgt.n	800262a <__aeabi_dsub+0x17a>
 8002628:	e152      	b.n	80028d0 <__aeabi_dsub+0x420>
 800262a:	4663      	mov	r3, ip
 800262c:	4313      	orrs	r3, r2
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	4193      	sbcs	r3, r2
 8002632:	181e      	adds	r6, r3, r0
 8002634:	4286      	cmp	r6, r0
 8002636:	4180      	sbcs	r0, r0
 8002638:	4240      	negs	r0, r0
 800263a:	1809      	adds	r1, r1, r0
 800263c:	020b      	lsls	r3, r1, #8
 800263e:	d400      	bmi.n	8002642 <__aeabi_dsub+0x192>
 8002640:	e0be      	b.n	80027c0 <__aeabi_dsub+0x310>
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <__aeabi_dsub+0x348>)
 8002644:	3501      	adds	r5, #1
 8002646:	429d      	cmp	r5, r3
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x19c>
 800264a:	e0d2      	b.n	80027f2 <__aeabi_dsub+0x342>
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <__aeabi_dsub+0x34c>)
 800264e:	0873      	lsrs	r3, r6, #1
 8002650:	400a      	ands	r2, r1
 8002652:	2101      	movs	r1, #1
 8002654:	400e      	ands	r6, r1
 8002656:	431e      	orrs	r6, r3
 8002658:	0851      	lsrs	r1, r2, #1
 800265a:	07d3      	lsls	r3, r2, #31
 800265c:	2207      	movs	r2, #7
 800265e:	431e      	orrs	r6, r3
 8002660:	4032      	ands	r2, r6
 8002662:	e795      	b.n	8002590 <__aeabi_dsub+0xe0>
 8002664:	001e      	movs	r6, r3
 8002666:	4316      	orrs	r6, r2
 8002668:	d000      	beq.n	800266c <__aeabi_dsub+0x1bc>
 800266a:	e745      	b.n	80024f8 <__aeabi_dsub+0x48>
 800266c:	e740      	b.n	80024f0 <__aeabi_dsub+0x40>
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <__aeabi_dsub+0x348>)
 8002670:	429d      	cmp	r5, r3
 8002672:	d03a      	beq.n	80026ea <__aeabi_dsub+0x23a>
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	4667      	mov	r7, ip
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431f      	orrs	r7, r3
 800267c:	46bc      	mov	ip, r7
 800267e:	2e38      	cmp	r6, #56	; 0x38
 8002680:	dd00      	ble.n	8002684 <__aeabi_dsub+0x1d4>
 8002682:	e0eb      	b.n	800285c <__aeabi_dsub+0x3ac>
 8002684:	2e1f      	cmp	r6, #31
 8002686:	dc00      	bgt.n	800268a <__aeabi_dsub+0x1da>
 8002688:	e13a      	b.n	8002900 <__aeabi_dsub+0x450>
 800268a:	0033      	movs	r3, r6
 800268c:	4667      	mov	r7, ip
 800268e:	3b20      	subs	r3, #32
 8002690:	40df      	lsrs	r7, r3
 8002692:	003b      	movs	r3, r7
 8002694:	2e20      	cmp	r6, #32
 8002696:	d005      	beq.n	80026a4 <__aeabi_dsub+0x1f4>
 8002698:	2740      	movs	r7, #64	; 0x40
 800269a:	1bbf      	subs	r7, r7, r6
 800269c:	4666      	mov	r6, ip
 800269e:	40be      	lsls	r6, r7
 80026a0:	4332      	orrs	r2, r6
 80026a2:	4690      	mov	r8, r2
 80026a4:	4646      	mov	r6, r8
 80026a6:	1e72      	subs	r2, r6, #1
 80026a8:	4196      	sbcs	r6, r2
 80026aa:	4333      	orrs	r3, r6
 80026ac:	e0da      	b.n	8002864 <__aeabi_dsub+0x3b4>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <__aeabi_dsub+0x204>
 80026b2:	e214      	b.n	8002ade <__aeabi_dsub+0x62e>
 80026b4:	4663      	mov	r3, ip
 80026b6:	4313      	orrs	r3, r2
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x20c>
 80026ba:	e168      	b.n	800298e <__aeabi_dsub+0x4de>
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	074e      	lsls	r6, r1, #29
 80026c0:	08c0      	lsrs	r0, r0, #3
 80026c2:	08c9      	lsrs	r1, r1, #3
 80026c4:	031b      	lsls	r3, r3, #12
 80026c6:	4306      	orrs	r6, r0
 80026c8:	4219      	tst	r1, r3
 80026ca:	d008      	beq.n	80026de <__aeabi_dsub+0x22e>
 80026cc:	4660      	mov	r0, ip
 80026ce:	08c0      	lsrs	r0, r0, #3
 80026d0:	4218      	tst	r0, r3
 80026d2:	d104      	bne.n	80026de <__aeabi_dsub+0x22e>
 80026d4:	4663      	mov	r3, ip
 80026d6:	0001      	movs	r1, r0
 80026d8:	08d2      	lsrs	r2, r2, #3
 80026da:	075e      	lsls	r6, r3, #29
 80026dc:	4316      	orrs	r6, r2
 80026de:	00f3      	lsls	r3, r6, #3
 80026e0:	4699      	mov	r9, r3
 80026e2:	00c9      	lsls	r1, r1, #3
 80026e4:	0f72      	lsrs	r2, r6, #29
 80026e6:	4d44      	ldr	r5, [pc, #272]	; (80027f8 <__aeabi_dsub+0x348>)
 80026e8:	4311      	orrs	r1, r2
 80026ea:	464b      	mov	r3, r9
 80026ec:	08de      	lsrs	r6, r3, #3
 80026ee:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <__aeabi_dsub+0x348>)
 80026f0:	074f      	lsls	r7, r1, #29
 80026f2:	4337      	orrs	r7, r6
 80026f4:	08ca      	lsrs	r2, r1, #3
 80026f6:	429d      	cmp	r5, r3
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x24c>
 80026fa:	e06e      	b.n	80027da <__aeabi_dsub+0x32a>
 80026fc:	0312      	lsls	r2, r2, #12
 80026fe:	056d      	lsls	r5, r5, #21
 8002700:	0b12      	lsrs	r2, r2, #12
 8002702:	0d6d      	lsrs	r5, r5, #21
 8002704:	2100      	movs	r1, #0
 8002706:	0312      	lsls	r2, r2, #12
 8002708:	0b13      	lsrs	r3, r2, #12
 800270a:	0d0a      	lsrs	r2, r1, #20
 800270c:	0512      	lsls	r2, r2, #20
 800270e:	431a      	orrs	r2, r3
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <__aeabi_dsub+0x350>)
 8002712:	052d      	lsls	r5, r5, #20
 8002714:	4013      	ands	r3, r2
 8002716:	432b      	orrs	r3, r5
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	07e4      	lsls	r4, r4, #31
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	4323      	orrs	r3, r4
 8002720:	0038      	movs	r0, r7
 8002722:	0019      	movs	r1, r3
 8002724:	bc3c      	pop	{r2, r3, r4, r5}
 8002726:	4690      	mov	r8, r2
 8002728:	4699      	mov	r9, r3
 800272a:	46a2      	mov	sl, r4
 800272c:	46ab      	mov	fp, r5
 800272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002730:	4663      	mov	r3, ip
 8002732:	4313      	orrs	r3, r2
 8002734:	d011      	beq.n	800275a <__aeabi_dsub+0x2aa>
 8002736:	1e73      	subs	r3, r6, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d000      	beq.n	800273e <__aeabi_dsub+0x28e>
 800273c:	e107      	b.n	800294e <__aeabi_dsub+0x49e>
 800273e:	1886      	adds	r6, r0, r2
 8002740:	4286      	cmp	r6, r0
 8002742:	4180      	sbcs	r0, r0
 8002744:	4461      	add	r1, ip
 8002746:	4240      	negs	r0, r0
 8002748:	1809      	adds	r1, r1, r0
 800274a:	2501      	movs	r5, #1
 800274c:	020b      	lsls	r3, r1, #8
 800274e:	d537      	bpl.n	80027c0 <__aeabi_dsub+0x310>
 8002750:	2502      	movs	r5, #2
 8002752:	e77b      	b.n	800264c <__aeabi_dsub+0x19c>
 8002754:	003e      	movs	r6, r7
 8002756:	4661      	mov	r1, ip
 8002758:	4691      	mov	r9, r2
 800275a:	0035      	movs	r5, r6
 800275c:	e7c5      	b.n	80026ea <__aeabi_dsub+0x23a>
 800275e:	465c      	mov	r4, fp
 8002760:	2d00      	cmp	r5, #0
 8002762:	d000      	beq.n	8002766 <__aeabi_dsub+0x2b6>
 8002764:	e0e1      	b.n	800292a <__aeabi_dsub+0x47a>
 8002766:	000b      	movs	r3, r1
 8002768:	4303      	orrs	r3, r0
 800276a:	d0f3      	beq.n	8002754 <__aeabi_dsub+0x2a4>
 800276c:	1c73      	adds	r3, r6, #1
 800276e:	d100      	bne.n	8002772 <__aeabi_dsub+0x2c2>
 8002770:	e1ac      	b.n	8002acc <__aeabi_dsub+0x61c>
 8002772:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <__aeabi_dsub+0x348>)
 8002774:	429f      	cmp	r7, r3
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0x2ca>
 8002778:	e13a      	b.n	80029f0 <__aeabi_dsub+0x540>
 800277a:	43f3      	mvns	r3, r6
 800277c:	2b38      	cmp	r3, #56	; 0x38
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0x2d2>
 8002780:	e16f      	b.n	8002a62 <__aeabi_dsub+0x5b2>
 8002782:	2b1f      	cmp	r3, #31
 8002784:	dd00      	ble.n	8002788 <__aeabi_dsub+0x2d8>
 8002786:	e18c      	b.n	8002aa2 <__aeabi_dsub+0x5f2>
 8002788:	2520      	movs	r5, #32
 800278a:	000e      	movs	r6, r1
 800278c:	1aed      	subs	r5, r5, r3
 800278e:	40ae      	lsls	r6, r5
 8002790:	46b0      	mov	r8, r6
 8002792:	0006      	movs	r6, r0
 8002794:	46aa      	mov	sl, r5
 8002796:	40de      	lsrs	r6, r3
 8002798:	4645      	mov	r5, r8
 800279a:	4335      	orrs	r5, r6
 800279c:	002e      	movs	r6, r5
 800279e:	4655      	mov	r5, sl
 80027a0:	40d9      	lsrs	r1, r3
 80027a2:	40a8      	lsls	r0, r5
 80027a4:	4663      	mov	r3, ip
 80027a6:	1e45      	subs	r5, r0, #1
 80027a8:	41a8      	sbcs	r0, r5
 80027aa:	1a5b      	subs	r3, r3, r1
 80027ac:	469c      	mov	ip, r3
 80027ae:	4330      	orrs	r0, r6
 80027b0:	1a16      	subs	r6, r2, r0
 80027b2:	42b2      	cmp	r2, r6
 80027b4:	4192      	sbcs	r2, r2
 80027b6:	4663      	mov	r3, ip
 80027b8:	4252      	negs	r2, r2
 80027ba:	1a99      	subs	r1, r3, r2
 80027bc:	003d      	movs	r5, r7
 80027be:	e6b4      	b.n	800252a <__aeabi_dsub+0x7a>
 80027c0:	2207      	movs	r2, #7
 80027c2:	4032      	ands	r2, r6
 80027c4:	2a00      	cmp	r2, #0
 80027c6:	d000      	beq.n	80027ca <__aeabi_dsub+0x31a>
 80027c8:	e6e4      	b.n	8002594 <__aeabi_dsub+0xe4>
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <__aeabi_dsub+0x348>)
 80027cc:	08f6      	lsrs	r6, r6, #3
 80027ce:	074f      	lsls	r7, r1, #29
 80027d0:	4337      	orrs	r7, r6
 80027d2:	08ca      	lsrs	r2, r1, #3
 80027d4:	429d      	cmp	r5, r3
 80027d6:	d000      	beq.n	80027da <__aeabi_dsub+0x32a>
 80027d8:	e790      	b.n	80026fc <__aeabi_dsub+0x24c>
 80027da:	003b      	movs	r3, r7
 80027dc:	4313      	orrs	r3, r2
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x332>
 80027e0:	e1a6      	b.n	8002b30 <__aeabi_dsub+0x680>
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	431a      	orrs	r2, r3
 80027e8:	0312      	lsls	r2, r2, #12
 80027ea:	0b12      	lsrs	r2, r2, #12
 80027ec:	4d02      	ldr	r5, [pc, #8]	; (80027f8 <__aeabi_dsub+0x348>)
 80027ee:	e789      	b.n	8002704 <__aeabi_dsub+0x254>
 80027f0:	0015      	movs	r5, r2
 80027f2:	2200      	movs	r2, #0
 80027f4:	2700      	movs	r7, #0
 80027f6:	e785      	b.n	8002704 <__aeabi_dsub+0x254>
 80027f8:	000007ff 	.word	0x000007ff
 80027fc:	ff7fffff 	.word	0xff7fffff
 8002800:	800fffff 	.word	0x800fffff
 8002804:	2e00      	cmp	r6, #0
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x35a>
 8002808:	e0c7      	b.n	800299a <__aeabi_dsub+0x4ea>
 800280a:	1c6b      	adds	r3, r5, #1
 800280c:	055e      	lsls	r6, r3, #21
 800280e:	0d76      	lsrs	r6, r6, #21
 8002810:	2e01      	cmp	r6, #1
 8002812:	dc00      	bgt.n	8002816 <__aeabi_dsub+0x366>
 8002814:	e0f0      	b.n	80029f8 <__aeabi_dsub+0x548>
 8002816:	4dc8      	ldr	r5, [pc, #800]	; (8002b38 <__aeabi_dsub+0x688>)
 8002818:	42ab      	cmp	r3, r5
 800281a:	d100      	bne.n	800281e <__aeabi_dsub+0x36e>
 800281c:	e0b9      	b.n	8002992 <__aeabi_dsub+0x4e2>
 800281e:	1885      	adds	r5, r0, r2
 8002820:	000a      	movs	r2, r1
 8002822:	4285      	cmp	r5, r0
 8002824:	4189      	sbcs	r1, r1
 8002826:	4462      	add	r2, ip
 8002828:	4249      	negs	r1, r1
 800282a:	1851      	adds	r1, r2, r1
 800282c:	2207      	movs	r2, #7
 800282e:	07ce      	lsls	r6, r1, #31
 8002830:	086d      	lsrs	r5, r5, #1
 8002832:	432e      	orrs	r6, r5
 8002834:	0849      	lsrs	r1, r1, #1
 8002836:	4032      	ands	r2, r6
 8002838:	001d      	movs	r5, r3
 800283a:	e6a9      	b.n	8002590 <__aeabi_dsub+0xe0>
 800283c:	49bf      	ldr	r1, [pc, #764]	; (8002b3c <__aeabi_dsub+0x68c>)
 800283e:	1aed      	subs	r5, r5, r3
 8002840:	4011      	ands	r1, r2
 8002842:	2207      	movs	r2, #7
 8002844:	4032      	ands	r2, r6
 8002846:	e6a3      	b.n	8002590 <__aeabi_dsub+0xe0>
 8002848:	0032      	movs	r2, r6
 800284a:	3828      	subs	r0, #40	; 0x28
 800284c:	4082      	lsls	r2, r0
 800284e:	2600      	movs	r6, #0
 8002850:	e686      	b.n	8002560 <__aeabi_dsub+0xb0>
 8002852:	0030      	movs	r0, r6
 8002854:	f000 fa80 	bl	8002d58 <__clzsi2>
 8002858:	3020      	adds	r0, #32
 800285a:	e673      	b.n	8002544 <__aeabi_dsub+0x94>
 800285c:	4663      	mov	r3, ip
 800285e:	4313      	orrs	r3, r2
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	4193      	sbcs	r3, r2
 8002864:	1ac6      	subs	r6, r0, r3
 8002866:	42b0      	cmp	r0, r6
 8002868:	4180      	sbcs	r0, r0
 800286a:	4240      	negs	r0, r0
 800286c:	1a09      	subs	r1, r1, r0
 800286e:	e65c      	b.n	800252a <__aeabi_dsub+0x7a>
 8002870:	000e      	movs	r6, r1
 8002872:	4667      	mov	r7, ip
 8002874:	4306      	orrs	r6, r0
 8002876:	4317      	orrs	r7, r2
 8002878:	2d00      	cmp	r5, #0
 800287a:	d15e      	bne.n	800293a <__aeabi_dsub+0x48a>
 800287c:	2e00      	cmp	r6, #0
 800287e:	d000      	beq.n	8002882 <__aeabi_dsub+0x3d2>
 8002880:	e0f3      	b.n	8002a6a <__aeabi_dsub+0x5ba>
 8002882:	2f00      	cmp	r7, #0
 8002884:	d100      	bne.n	8002888 <__aeabi_dsub+0x3d8>
 8002886:	e11e      	b.n	8002ac6 <__aeabi_dsub+0x616>
 8002888:	465c      	mov	r4, fp
 800288a:	4661      	mov	r1, ip
 800288c:	4691      	mov	r9, r2
 800288e:	e72c      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002890:	4fa9      	ldr	r7, [pc, #676]	; (8002b38 <__aeabi_dsub+0x688>)
 8002892:	42be      	cmp	r6, r7
 8002894:	d07b      	beq.n	800298e <__aeabi_dsub+0x4de>
 8002896:	001e      	movs	r6, r3
 8002898:	e6f1      	b.n	800267e <__aeabi_dsub+0x1ce>
 800289a:	0010      	movs	r0, r2
 800289c:	3d1f      	subs	r5, #31
 800289e:	40e8      	lsrs	r0, r5
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d003      	beq.n	80028ac <__aeabi_dsub+0x3fc>
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	1acb      	subs	r3, r1, r3
 80028a8:	409a      	lsls	r2, r3
 80028aa:	4316      	orrs	r6, r2
 80028ac:	1e73      	subs	r3, r6, #1
 80028ae:	419e      	sbcs	r6, r3
 80028b0:	2207      	movs	r2, #7
 80028b2:	4306      	orrs	r6, r0
 80028b4:	4032      	ands	r2, r6
 80028b6:	2100      	movs	r1, #0
 80028b8:	2500      	movs	r5, #0
 80028ba:	e783      	b.n	80027c4 <__aeabi_dsub+0x314>
 80028bc:	1a16      	subs	r6, r2, r0
 80028be:	4663      	mov	r3, ip
 80028c0:	42b2      	cmp	r2, r6
 80028c2:	4180      	sbcs	r0, r0
 80028c4:	1a59      	subs	r1, r3, r1
 80028c6:	4240      	negs	r0, r0
 80028c8:	1a0b      	subs	r3, r1, r0
 80028ca:	4698      	mov	r8, r3
 80028cc:	465c      	mov	r4, fp
 80028ce:	e632      	b.n	8002536 <__aeabi_dsub+0x86>
 80028d0:	2e1f      	cmp	r6, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x426>
 80028d4:	e0ab      	b.n	8002a2e <__aeabi_dsub+0x57e>
 80028d6:	2720      	movs	r7, #32
 80028d8:	1bbb      	subs	r3, r7, r6
 80028da:	469a      	mov	sl, r3
 80028dc:	4663      	mov	r3, ip
 80028de:	4657      	mov	r7, sl
 80028e0:	40bb      	lsls	r3, r7
 80028e2:	4699      	mov	r9, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	464f      	mov	r7, r9
 80028e8:	40f3      	lsrs	r3, r6
 80028ea:	431f      	orrs	r7, r3
 80028ec:	003b      	movs	r3, r7
 80028ee:	4657      	mov	r7, sl
 80028f0:	40ba      	lsls	r2, r7
 80028f2:	1e57      	subs	r7, r2, #1
 80028f4:	41ba      	sbcs	r2, r7
 80028f6:	4313      	orrs	r3, r2
 80028f8:	4662      	mov	r2, ip
 80028fa:	40f2      	lsrs	r2, r6
 80028fc:	1889      	adds	r1, r1, r2
 80028fe:	e698      	b.n	8002632 <__aeabi_dsub+0x182>
 8002900:	2720      	movs	r7, #32
 8002902:	1bbb      	subs	r3, r7, r6
 8002904:	469a      	mov	sl, r3
 8002906:	4663      	mov	r3, ip
 8002908:	4657      	mov	r7, sl
 800290a:	40bb      	lsls	r3, r7
 800290c:	4699      	mov	r9, r3
 800290e:	0013      	movs	r3, r2
 8002910:	464f      	mov	r7, r9
 8002912:	40f3      	lsrs	r3, r6
 8002914:	431f      	orrs	r7, r3
 8002916:	003b      	movs	r3, r7
 8002918:	4657      	mov	r7, sl
 800291a:	40ba      	lsls	r2, r7
 800291c:	1e57      	subs	r7, r2, #1
 800291e:	41ba      	sbcs	r2, r7
 8002920:	4313      	orrs	r3, r2
 8002922:	4662      	mov	r2, ip
 8002924:	40f2      	lsrs	r2, r6
 8002926:	1a89      	subs	r1, r1, r2
 8002928:	e79c      	b.n	8002864 <__aeabi_dsub+0x3b4>
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <__aeabi_dsub+0x688>)
 800292c:	429f      	cmp	r7, r3
 800292e:	d05f      	beq.n	80029f0 <__aeabi_dsub+0x540>
 8002930:	2580      	movs	r5, #128	; 0x80
 8002932:	042d      	lsls	r5, r5, #16
 8002934:	4273      	negs	r3, r6
 8002936:	4329      	orrs	r1, r5
 8002938:	e720      	b.n	800277c <__aeabi_dsub+0x2cc>
 800293a:	2e00      	cmp	r6, #0
 800293c:	d10c      	bne.n	8002958 <__aeabi_dsub+0x4a8>
 800293e:	2f00      	cmp	r7, #0
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x494>
 8002942:	e0d0      	b.n	8002ae6 <__aeabi_dsub+0x636>
 8002944:	465c      	mov	r4, fp
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d7b      	ldr	r5, [pc, #492]	; (8002b38 <__aeabi_dsub+0x688>)
 800294c:	e6cd      	b.n	80026ea <__aeabi_dsub+0x23a>
 800294e:	4f7a      	ldr	r7, [pc, #488]	; (8002b38 <__aeabi_dsub+0x688>)
 8002950:	42be      	cmp	r6, r7
 8002952:	d01c      	beq.n	800298e <__aeabi_dsub+0x4de>
 8002954:	001e      	movs	r6, r3
 8002956:	e665      	b.n	8002624 <__aeabi_dsub+0x174>
 8002958:	2f00      	cmp	r7, #0
 800295a:	d018      	beq.n	800298e <__aeabi_dsub+0x4de>
 800295c:	08c0      	lsrs	r0, r0, #3
 800295e:	074e      	lsls	r6, r1, #29
 8002960:	4306      	orrs	r6, r0
 8002962:	2080      	movs	r0, #128	; 0x80
 8002964:	08c9      	lsrs	r1, r1, #3
 8002966:	0300      	lsls	r0, r0, #12
 8002968:	4201      	tst	r1, r0
 800296a:	d008      	beq.n	800297e <__aeabi_dsub+0x4ce>
 800296c:	4663      	mov	r3, ip
 800296e:	08dc      	lsrs	r4, r3, #3
 8002970:	4204      	tst	r4, r0
 8002972:	d104      	bne.n	800297e <__aeabi_dsub+0x4ce>
 8002974:	0021      	movs	r1, r4
 8002976:	46da      	mov	sl, fp
 8002978:	08d2      	lsrs	r2, r2, #3
 800297a:	075e      	lsls	r6, r3, #29
 800297c:	4316      	orrs	r6, r2
 800297e:	00f3      	lsls	r3, r6, #3
 8002980:	4699      	mov	r9, r3
 8002982:	2401      	movs	r4, #1
 8002984:	4653      	mov	r3, sl
 8002986:	00c9      	lsls	r1, r1, #3
 8002988:	0f72      	lsrs	r2, r6, #29
 800298a:	4311      	orrs	r1, r2
 800298c:	401c      	ands	r4, r3
 800298e:	4d6a      	ldr	r5, [pc, #424]	; (8002b38 <__aeabi_dsub+0x688>)
 8002990:	e6ab      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002992:	001d      	movs	r5, r3
 8002994:	2200      	movs	r2, #0
 8002996:	2700      	movs	r7, #0
 8002998:	e6b4      	b.n	8002704 <__aeabi_dsub+0x254>
 800299a:	2d00      	cmp	r5, #0
 800299c:	d159      	bne.n	8002a52 <__aeabi_dsub+0x5a2>
 800299e:	000b      	movs	r3, r1
 80029a0:	4303      	orrs	r3, r0
 80029a2:	d100      	bne.n	80029a6 <__aeabi_dsub+0x4f6>
 80029a4:	e6d6      	b.n	8002754 <__aeabi_dsub+0x2a4>
 80029a6:	1c73      	adds	r3, r6, #1
 80029a8:	d100      	bne.n	80029ac <__aeabi_dsub+0x4fc>
 80029aa:	e0b2      	b.n	8002b12 <__aeabi_dsub+0x662>
 80029ac:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <__aeabi_dsub+0x688>)
 80029ae:	429f      	cmp	r7, r3
 80029b0:	d01e      	beq.n	80029f0 <__aeabi_dsub+0x540>
 80029b2:	43f3      	mvns	r3, r6
 80029b4:	2b38      	cmp	r3, #56	; 0x38
 80029b6:	dc6f      	bgt.n	8002a98 <__aeabi_dsub+0x5e8>
 80029b8:	2b1f      	cmp	r3, #31
 80029ba:	dd00      	ble.n	80029be <__aeabi_dsub+0x50e>
 80029bc:	e097      	b.n	8002aee <__aeabi_dsub+0x63e>
 80029be:	2520      	movs	r5, #32
 80029c0:	000e      	movs	r6, r1
 80029c2:	1aed      	subs	r5, r5, r3
 80029c4:	40ae      	lsls	r6, r5
 80029c6:	46b0      	mov	r8, r6
 80029c8:	0006      	movs	r6, r0
 80029ca:	46aa      	mov	sl, r5
 80029cc:	40de      	lsrs	r6, r3
 80029ce:	4645      	mov	r5, r8
 80029d0:	4335      	orrs	r5, r6
 80029d2:	002e      	movs	r6, r5
 80029d4:	4655      	mov	r5, sl
 80029d6:	40a8      	lsls	r0, r5
 80029d8:	40d9      	lsrs	r1, r3
 80029da:	1e45      	subs	r5, r0, #1
 80029dc:	41a8      	sbcs	r0, r5
 80029de:	448c      	add	ip, r1
 80029e0:	4306      	orrs	r6, r0
 80029e2:	18b6      	adds	r6, r6, r2
 80029e4:	4296      	cmp	r6, r2
 80029e6:	4192      	sbcs	r2, r2
 80029e8:	4251      	negs	r1, r2
 80029ea:	4461      	add	r1, ip
 80029ec:	003d      	movs	r5, r7
 80029ee:	e625      	b.n	800263c <__aeabi_dsub+0x18c>
 80029f0:	003d      	movs	r5, r7
 80029f2:	4661      	mov	r1, ip
 80029f4:	4691      	mov	r9, r2
 80029f6:	e678      	b.n	80026ea <__aeabi_dsub+0x23a>
 80029f8:	000b      	movs	r3, r1
 80029fa:	4303      	orrs	r3, r0
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	d000      	beq.n	8002a02 <__aeabi_dsub+0x552>
 8002a00:	e655      	b.n	80026ae <__aeabi_dsub+0x1fe>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f5      	beq.n	80029f2 <__aeabi_dsub+0x542>
 8002a06:	4663      	mov	r3, ip
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <__aeabi_dsub+0x55e>
 8002a0c:	e66d      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002a0e:	1886      	adds	r6, r0, r2
 8002a10:	4286      	cmp	r6, r0
 8002a12:	4180      	sbcs	r0, r0
 8002a14:	4461      	add	r1, ip
 8002a16:	4240      	negs	r0, r0
 8002a18:	1809      	adds	r1, r1, r0
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	020b      	lsls	r3, r1, #8
 8002a1e:	d400      	bmi.n	8002a22 <__aeabi_dsub+0x572>
 8002a20:	e6d0      	b.n	80027c4 <__aeabi_dsub+0x314>
 8002a22:	4b46      	ldr	r3, [pc, #280]	; (8002b3c <__aeabi_dsub+0x68c>)
 8002a24:	3501      	adds	r5, #1
 8002a26:	4019      	ands	r1, r3
 8002a28:	e5b2      	b.n	8002590 <__aeabi_dsub+0xe0>
 8002a2a:	46b1      	mov	r9, r6
 8002a2c:	e65d      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002a2e:	0033      	movs	r3, r6
 8002a30:	4667      	mov	r7, ip
 8002a32:	3b20      	subs	r3, #32
 8002a34:	40df      	lsrs	r7, r3
 8002a36:	003b      	movs	r3, r7
 8002a38:	2e20      	cmp	r6, #32
 8002a3a:	d005      	beq.n	8002a48 <__aeabi_dsub+0x598>
 8002a3c:	2740      	movs	r7, #64	; 0x40
 8002a3e:	1bbf      	subs	r7, r7, r6
 8002a40:	4666      	mov	r6, ip
 8002a42:	40be      	lsls	r6, r7
 8002a44:	4332      	orrs	r2, r6
 8002a46:	4690      	mov	r8, r2
 8002a48:	4646      	mov	r6, r8
 8002a4a:	1e72      	subs	r2, r6, #1
 8002a4c:	4196      	sbcs	r6, r2
 8002a4e:	4333      	orrs	r3, r6
 8002a50:	e5ef      	b.n	8002632 <__aeabi_dsub+0x182>
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <__aeabi_dsub+0x688>)
 8002a54:	429f      	cmp	r7, r3
 8002a56:	d0cb      	beq.n	80029f0 <__aeabi_dsub+0x540>
 8002a58:	2580      	movs	r5, #128	; 0x80
 8002a5a:	042d      	lsls	r5, r5, #16
 8002a5c:	4273      	negs	r3, r6
 8002a5e:	4329      	orrs	r1, r5
 8002a60:	e7a8      	b.n	80029b4 <__aeabi_dsub+0x504>
 8002a62:	4308      	orrs	r0, r1
 8002a64:	1e41      	subs	r1, r0, #1
 8002a66:	4188      	sbcs	r0, r1
 8002a68:	e6a2      	b.n	80027b0 <__aeabi_dsub+0x300>
 8002a6a:	2f00      	cmp	r7, #0
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x5c0>
 8002a6e:	e63c      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002a70:	4663      	mov	r3, ip
 8002a72:	1a86      	subs	r6, r0, r2
 8002a74:	1acf      	subs	r7, r1, r3
 8002a76:	42b0      	cmp	r0, r6
 8002a78:	419b      	sbcs	r3, r3
 8002a7a:	425b      	negs	r3, r3
 8002a7c:	1afb      	subs	r3, r7, r3
 8002a7e:	4698      	mov	r8, r3
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	d54e      	bpl.n	8002b22 <__aeabi_dsub+0x672>
 8002a84:	1a16      	subs	r6, r2, r0
 8002a86:	4663      	mov	r3, ip
 8002a88:	42b2      	cmp	r2, r6
 8002a8a:	4192      	sbcs	r2, r2
 8002a8c:	1a59      	subs	r1, r3, r1
 8002a8e:	4252      	negs	r2, r2
 8002a90:	1a89      	subs	r1, r1, r2
 8002a92:	465c      	mov	r4, fp
 8002a94:	2200      	movs	r2, #0
 8002a96:	e57b      	b.n	8002590 <__aeabi_dsub+0xe0>
 8002a98:	4301      	orrs	r1, r0
 8002a9a:	000e      	movs	r6, r1
 8002a9c:	1e71      	subs	r1, r6, #1
 8002a9e:	418e      	sbcs	r6, r1
 8002aa0:	e79f      	b.n	80029e2 <__aeabi_dsub+0x532>
 8002aa2:	001d      	movs	r5, r3
 8002aa4:	000e      	movs	r6, r1
 8002aa6:	3d20      	subs	r5, #32
 8002aa8:	40ee      	lsrs	r6, r5
 8002aaa:	46b0      	mov	r8, r6
 8002aac:	2b20      	cmp	r3, #32
 8002aae:	d004      	beq.n	8002aba <__aeabi_dsub+0x60a>
 8002ab0:	2540      	movs	r5, #64	; 0x40
 8002ab2:	1aeb      	subs	r3, r5, r3
 8002ab4:	4099      	lsls	r1, r3
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	4681      	mov	r9, r0
 8002aba:	4648      	mov	r0, r9
 8002abc:	4643      	mov	r3, r8
 8002abe:	1e41      	subs	r1, r0, #1
 8002ac0:	4188      	sbcs	r0, r1
 8002ac2:	4318      	orrs	r0, r3
 8002ac4:	e674      	b.n	80027b0 <__aeabi_dsub+0x300>
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2400      	movs	r4, #0
 8002aca:	e617      	b.n	80026fc <__aeabi_dsub+0x24c>
 8002acc:	1a16      	subs	r6, r2, r0
 8002ace:	4663      	mov	r3, ip
 8002ad0:	42b2      	cmp	r2, r6
 8002ad2:	4192      	sbcs	r2, r2
 8002ad4:	1a59      	subs	r1, r3, r1
 8002ad6:	4252      	negs	r2, r2
 8002ad8:	1a89      	subs	r1, r1, r2
 8002ada:	003d      	movs	r5, r7
 8002adc:	e525      	b.n	800252a <__aeabi_dsub+0x7a>
 8002ade:	4661      	mov	r1, ip
 8002ae0:	4691      	mov	r9, r2
 8002ae2:	4d15      	ldr	r5, [pc, #84]	; (8002b38 <__aeabi_dsub+0x688>)
 8002ae4:	e601      	b.n	80026ea <__aeabi_dsub+0x23a>
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	2400      	movs	r4, #0
 8002aea:	0312      	lsls	r2, r2, #12
 8002aec:	e679      	b.n	80027e2 <__aeabi_dsub+0x332>
 8002aee:	001d      	movs	r5, r3
 8002af0:	000e      	movs	r6, r1
 8002af2:	3d20      	subs	r5, #32
 8002af4:	40ee      	lsrs	r6, r5
 8002af6:	46b0      	mov	r8, r6
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d004      	beq.n	8002b06 <__aeabi_dsub+0x656>
 8002afc:	2540      	movs	r5, #64	; 0x40
 8002afe:	1aeb      	subs	r3, r5, r3
 8002b00:	4099      	lsls	r1, r3
 8002b02:	4308      	orrs	r0, r1
 8002b04:	4681      	mov	r9, r0
 8002b06:	464e      	mov	r6, r9
 8002b08:	4643      	mov	r3, r8
 8002b0a:	1e71      	subs	r1, r6, #1
 8002b0c:	418e      	sbcs	r6, r1
 8002b0e:	431e      	orrs	r6, r3
 8002b10:	e767      	b.n	80029e2 <__aeabi_dsub+0x532>
 8002b12:	1886      	adds	r6, r0, r2
 8002b14:	4296      	cmp	r6, r2
 8002b16:	419b      	sbcs	r3, r3
 8002b18:	4461      	add	r1, ip
 8002b1a:	425b      	negs	r3, r3
 8002b1c:	18c9      	adds	r1, r1, r3
 8002b1e:	003d      	movs	r5, r7
 8002b20:	e58c      	b.n	800263c <__aeabi_dsub+0x18c>
 8002b22:	4647      	mov	r7, r8
 8002b24:	4337      	orrs	r7, r6
 8002b26:	d0ce      	beq.n	8002ac6 <__aeabi_dsub+0x616>
 8002b28:	2207      	movs	r2, #7
 8002b2a:	4641      	mov	r1, r8
 8002b2c:	4032      	ands	r2, r6
 8002b2e:	e649      	b.n	80027c4 <__aeabi_dsub+0x314>
 8002b30:	2700      	movs	r7, #0
 8002b32:	003a      	movs	r2, r7
 8002b34:	e5e6      	b.n	8002704 <__aeabi_dsub+0x254>
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	000007ff 	.word	0x000007ff
 8002b3c:	ff7fffff 	.word	0xff7fffff

08002b40 <__aeabi_dcmpun>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	4e0c      	ldr	r6, [pc, #48]	; (8002b74 <__aeabi_dcmpun+0x34>)
 8002b44:	030d      	lsls	r5, r1, #12
 8002b46:	031c      	lsls	r4, r3, #12
 8002b48:	0049      	lsls	r1, r1, #1
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	0b2d      	lsrs	r5, r5, #12
 8002b4e:	0d49      	lsrs	r1, r1, #21
 8002b50:	0b24      	lsrs	r4, r4, #12
 8002b52:	0d5b      	lsrs	r3, r3, #21
 8002b54:	42b1      	cmp	r1, r6
 8002b56:	d008      	beq.n	8002b6a <__aeabi_dcmpun+0x2a>
 8002b58:	4906      	ldr	r1, [pc, #24]	; (8002b74 <__aeabi_dcmpun+0x34>)
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	428b      	cmp	r3, r1
 8002b5e:	d103      	bne.n	8002b68 <__aeabi_dcmpun+0x28>
 8002b60:	4314      	orrs	r4, r2
 8002b62:	0020      	movs	r0, r4
 8002b64:	1e44      	subs	r4, r0, #1
 8002b66:	41a0      	sbcs	r0, r4
 8002b68:	bd70      	pop	{r4, r5, r6, pc}
 8002b6a:	4305      	orrs	r5, r0
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	2d00      	cmp	r5, #0
 8002b70:	d1fa      	bne.n	8002b68 <__aeabi_dcmpun+0x28>
 8002b72:	e7f1      	b.n	8002b58 <__aeabi_dcmpun+0x18>
 8002b74:	000007ff 	.word	0x000007ff

08002b78 <__aeabi_i2d>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d02d      	beq.n	8002bda <__aeabi_i2d+0x62>
 8002b7e:	17c3      	asrs	r3, r0, #31
 8002b80:	18c5      	adds	r5, r0, r3
 8002b82:	405d      	eors	r5, r3
 8002b84:	0fc4      	lsrs	r4, r0, #31
 8002b86:	0028      	movs	r0, r5
 8002b88:	f000 f8e6 	bl	8002d58 <__clzsi2>
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <__aeabi_i2d+0x6c>)
 8002b8e:	1a1b      	subs	r3, r3, r0
 8002b90:	055b      	lsls	r3, r3, #21
 8002b92:	0d5b      	lsrs	r3, r3, #21
 8002b94:	280a      	cmp	r0, #10
 8002b96:	dd15      	ble.n	8002bc4 <__aeabi_i2d+0x4c>
 8002b98:	380b      	subs	r0, #11
 8002b9a:	4085      	lsls	r5, r0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	032d      	lsls	r5, r5, #12
 8002ba0:	0b2d      	lsrs	r5, r5, #12
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	032d      	lsls	r5, r5, #12
 8002ba8:	0d0a      	lsrs	r2, r1, #20
 8002baa:	0b2d      	lsrs	r5, r5, #12
 8002bac:	0512      	lsls	r2, r2, #20
 8002bae:	432a      	orrs	r2, r5
 8002bb0:	4d0d      	ldr	r5, [pc, #52]	; (8002be8 <__aeabi_i2d+0x70>)
 8002bb2:	051b      	lsls	r3, r3, #20
 8002bb4:	402a      	ands	r2, r5
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	07e4      	lsls	r4, r4, #31
 8002bbc:	085b      	lsrs	r3, r3, #1
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	0029      	movs	r1, r5
 8002bc8:	3215      	adds	r2, #21
 8002bca:	4091      	lsls	r1, r2
 8002bcc:	000a      	movs	r2, r1
 8002bce:	210b      	movs	r1, #11
 8002bd0:	1a08      	subs	r0, r1, r0
 8002bd2:	40c5      	lsrs	r5, r0
 8002bd4:	032d      	lsls	r5, r5, #12
 8002bd6:	0b2d      	lsrs	r5, r5, #12
 8002bd8:	e7e3      	b.n	8002ba2 <__aeabi_i2d+0x2a>
 8002bda:	2400      	movs	r4, #0
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2500      	movs	r5, #0
 8002be0:	2200      	movs	r2, #0
 8002be2:	e7de      	b.n	8002ba2 <__aeabi_i2d+0x2a>
 8002be4:	0000041e 	.word	0x0000041e
 8002be8:	800fffff 	.word	0x800fffff

08002bec <__aeabi_ui2d>:
 8002bec:	b510      	push	{r4, lr}
 8002bee:	1e04      	subs	r4, r0, #0
 8002bf0:	d025      	beq.n	8002c3e <__aeabi_ui2d+0x52>
 8002bf2:	f000 f8b1 	bl	8002d58 <__clzsi2>
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <__aeabi_ui2d+0x5c>)
 8002bf8:	1a1b      	subs	r3, r3, r0
 8002bfa:	055b      	lsls	r3, r3, #21
 8002bfc:	0d5b      	lsrs	r3, r3, #21
 8002bfe:	280a      	cmp	r0, #10
 8002c00:	dd12      	ble.n	8002c28 <__aeabi_ui2d+0x3c>
 8002c02:	380b      	subs	r0, #11
 8002c04:	4084      	lsls	r4, r0
 8002c06:	2200      	movs	r2, #0
 8002c08:	0324      	lsls	r4, r4, #12
 8002c0a:	0b24      	lsrs	r4, r4, #12
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	0010      	movs	r0, r2
 8002c10:	0324      	lsls	r4, r4, #12
 8002c12:	0d0a      	lsrs	r2, r1, #20
 8002c14:	0b24      	lsrs	r4, r4, #12
 8002c16:	0512      	lsls	r2, r2, #20
 8002c18:	4322      	orrs	r2, r4
 8002c1a:	4c0c      	ldr	r4, [pc, #48]	; (8002c4c <__aeabi_ui2d+0x60>)
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	4022      	ands	r2, r4
 8002c20:	4313      	orrs	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	0859      	lsrs	r1, r3, #1
 8002c26:	bd10      	pop	{r4, pc}
 8002c28:	0002      	movs	r2, r0
 8002c2a:	0021      	movs	r1, r4
 8002c2c:	3215      	adds	r2, #21
 8002c2e:	4091      	lsls	r1, r2
 8002c30:	000a      	movs	r2, r1
 8002c32:	210b      	movs	r1, #11
 8002c34:	1a08      	subs	r0, r1, r0
 8002c36:	40c4      	lsrs	r4, r0
 8002c38:	0324      	lsls	r4, r4, #12
 8002c3a:	0b24      	lsrs	r4, r4, #12
 8002c3c:	e7e6      	b.n	8002c0c <__aeabi_ui2d+0x20>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2400      	movs	r4, #0
 8002c42:	2200      	movs	r2, #0
 8002c44:	e7e2      	b.n	8002c0c <__aeabi_ui2d+0x20>
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	0000041e 	.word	0x0000041e
 8002c4c:	800fffff 	.word	0x800fffff

08002c50 <__aeabi_d2f>:
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c52:	004c      	lsls	r4, r1, #1
 8002c54:	0d64      	lsrs	r4, r4, #21
 8002c56:	030b      	lsls	r3, r1, #12
 8002c58:	1c62      	adds	r2, r4, #1
 8002c5a:	0a5b      	lsrs	r3, r3, #9
 8002c5c:	0f46      	lsrs	r6, r0, #29
 8002c5e:	0552      	lsls	r2, r2, #21
 8002c60:	0fc9      	lsrs	r1, r1, #31
 8002c62:	431e      	orrs	r6, r3
 8002c64:	00c5      	lsls	r5, r0, #3
 8002c66:	0d52      	lsrs	r2, r2, #21
 8002c68:	2a01      	cmp	r2, #1
 8002c6a:	dd29      	ble.n	8002cc0 <__aeabi_d2f+0x70>
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <__aeabi_d2f+0xfc>)
 8002c6e:	18e7      	adds	r7, r4, r3
 8002c70:	2ffe      	cmp	r7, #254	; 0xfe
 8002c72:	dc1c      	bgt.n	8002cae <__aeabi_d2f+0x5e>
 8002c74:	2f00      	cmp	r7, #0
 8002c76:	dd3b      	ble.n	8002cf0 <__aeabi_d2f+0xa0>
 8002c78:	0180      	lsls	r0, r0, #6
 8002c7a:	1e43      	subs	r3, r0, #1
 8002c7c:	4198      	sbcs	r0, r3
 8002c7e:	2207      	movs	r2, #7
 8002c80:	00f3      	lsls	r3, r6, #3
 8002c82:	0f6d      	lsrs	r5, r5, #29
 8002c84:	4303      	orrs	r3, r0
 8002c86:	432b      	orrs	r3, r5
 8002c88:	401a      	ands	r2, r3
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	d004      	beq.n	8002c98 <__aeabi_d2f+0x48>
 8002c8e:	220f      	movs	r2, #15
 8002c90:	401a      	ands	r2, r3
 8002c92:	2a04      	cmp	r2, #4
 8002c94:	d000      	beq.n	8002c98 <__aeabi_d2f+0x48>
 8002c96:	3304      	adds	r3, #4
 8002c98:	2280      	movs	r2, #128	; 0x80
 8002c9a:	04d2      	lsls	r2, r2, #19
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	d024      	beq.n	8002cea <__aeabi_d2f+0x9a>
 8002ca0:	3701      	adds	r7, #1
 8002ca2:	b2fa      	uxtb	r2, r7
 8002ca4:	2fff      	cmp	r7, #255	; 0xff
 8002ca6:	d002      	beq.n	8002cae <__aeabi_d2f+0x5e>
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	0a58      	lsrs	r0, r3, #9
 8002cac:	e001      	b.n	8002cb2 <__aeabi_d2f+0x62>
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	0240      	lsls	r0, r0, #9
 8002cb4:	05d2      	lsls	r2, r2, #23
 8002cb6:	0a40      	lsrs	r0, r0, #9
 8002cb8:	07c9      	lsls	r1, r1, #31
 8002cba:	4310      	orrs	r0, r2
 8002cbc:	4308      	orrs	r0, r1
 8002cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc0:	4335      	orrs	r5, r6
 8002cc2:	2c00      	cmp	r4, #0
 8002cc4:	d104      	bne.n	8002cd0 <__aeabi_d2f+0x80>
 8002cc6:	2d00      	cmp	r5, #0
 8002cc8:	d10a      	bne.n	8002ce0 <__aeabi_d2f+0x90>
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2000      	movs	r0, #0
 8002cce:	e7f0      	b.n	8002cb2 <__aeabi_d2f+0x62>
 8002cd0:	2d00      	cmp	r5, #0
 8002cd2:	d0ec      	beq.n	8002cae <__aeabi_d2f+0x5e>
 8002cd4:	2080      	movs	r0, #128	; 0x80
 8002cd6:	03c0      	lsls	r0, r0, #15
 8002cd8:	4330      	orrs	r0, r6
 8002cda:	22ff      	movs	r2, #255	; 0xff
 8002cdc:	e7e9      	b.n	8002cb2 <__aeabi_d2f+0x62>
 8002cde:	2400      	movs	r4, #0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	025b      	lsls	r3, r3, #9
 8002ce4:	0a58      	lsrs	r0, r3, #9
 8002ce6:	b2e2      	uxtb	r2, r4
 8002ce8:	e7e3      	b.n	8002cb2 <__aeabi_d2f+0x62>
 8002cea:	08db      	lsrs	r3, r3, #3
 8002cec:	003c      	movs	r4, r7
 8002cee:	e7f8      	b.n	8002ce2 <__aeabi_d2f+0x92>
 8002cf0:	003b      	movs	r3, r7
 8002cf2:	3317      	adds	r3, #23
 8002cf4:	dbf3      	blt.n	8002cde <__aeabi_d2f+0x8e>
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	4333      	orrs	r3, r6
 8002cfc:	261e      	movs	r6, #30
 8002cfe:	1bf6      	subs	r6, r6, r7
 8002d00:	2e1f      	cmp	r6, #31
 8002d02:	dd14      	ble.n	8002d2e <__aeabi_d2f+0xde>
 8002d04:	2202      	movs	r2, #2
 8002d06:	4252      	negs	r2, r2
 8002d08:	1bd7      	subs	r7, r2, r7
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	40fa      	lsrs	r2, r7
 8002d0e:	0017      	movs	r7, r2
 8002d10:	2e20      	cmp	r6, #32
 8002d12:	d004      	beq.n	8002d1e <__aeabi_d2f+0xce>
 8002d14:	4a0e      	ldr	r2, [pc, #56]	; (8002d50 <__aeabi_d2f+0x100>)
 8002d16:	4694      	mov	ip, r2
 8002d18:	4464      	add	r4, ip
 8002d1a:	40a3      	lsls	r3, r4
 8002d1c:	431d      	orrs	r5, r3
 8002d1e:	002b      	movs	r3, r5
 8002d20:	1e5d      	subs	r5, r3, #1
 8002d22:	41ab      	sbcs	r3, r5
 8002d24:	2207      	movs	r2, #7
 8002d26:	433b      	orrs	r3, r7
 8002d28:	401a      	ands	r2, r3
 8002d2a:	2700      	movs	r7, #0
 8002d2c:	e7ad      	b.n	8002c8a <__aeabi_d2f+0x3a>
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <__aeabi_d2f+0x104>)
 8002d30:	0028      	movs	r0, r5
 8002d32:	18a2      	adds	r2, r4, r2
 8002d34:	4095      	lsls	r5, r2
 8002d36:	4093      	lsls	r3, r2
 8002d38:	1e6c      	subs	r4, r5, #1
 8002d3a:	41a5      	sbcs	r5, r4
 8002d3c:	40f0      	lsrs	r0, r6
 8002d3e:	2207      	movs	r2, #7
 8002d40:	432b      	orrs	r3, r5
 8002d42:	4303      	orrs	r3, r0
 8002d44:	401a      	ands	r2, r3
 8002d46:	2700      	movs	r7, #0
 8002d48:	e79f      	b.n	8002c8a <__aeabi_d2f+0x3a>
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fffffc80 	.word	0xfffffc80
 8002d50:	fffffca2 	.word	0xfffffca2
 8002d54:	fffffc82 	.word	0xfffffc82

08002d58 <__clzsi2>:
 8002d58:	211c      	movs	r1, #28
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	041b      	lsls	r3, r3, #16
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	d301      	bcc.n	8002d66 <__clzsi2+0xe>
 8002d62:	0c00      	lsrs	r0, r0, #16
 8002d64:	3910      	subs	r1, #16
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	4298      	cmp	r0, r3
 8002d6a:	d301      	bcc.n	8002d70 <__clzsi2+0x18>
 8002d6c:	0a00      	lsrs	r0, r0, #8
 8002d6e:	3908      	subs	r1, #8
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	4298      	cmp	r0, r3
 8002d74:	d301      	bcc.n	8002d7a <__clzsi2+0x22>
 8002d76:	0900      	lsrs	r0, r0, #4
 8002d78:	3904      	subs	r1, #4
 8002d7a:	a202      	add	r2, pc, #8	; (adr r2, 8002d84 <__clzsi2+0x2c>)
 8002d7c:	5c10      	ldrb	r0, [r2, r0]
 8002d7e:	1840      	adds	r0, r0, r1
 8002d80:	4770      	bx	lr
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	02020304 	.word	0x02020304
 8002d88:	01010101 	.word	0x01010101
	...

08002d94 <__clzdi2>:
 8002d94:	b510      	push	{r4, lr}
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d103      	bne.n	8002da2 <__clzdi2+0xe>
 8002d9a:	f7ff ffdd 	bl	8002d58 <__clzsi2>
 8002d9e:	3020      	adds	r0, #32
 8002da0:	e002      	b.n	8002da8 <__clzdi2+0x14>
 8002da2:	1c08      	adds	r0, r1, #0
 8002da4:	f7ff ffd8 	bl	8002d58 <__clzsi2>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)

08002dac <pi_controller>:




uint16_t pi_controller(uint8_t process_variable)
{
 8002dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	float error_integral = 0;
	uint16_t bias = min_pwm_val;
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <pi_controller+0xac>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	9301      	str	r3, [sp, #4]
	float error = setpoint_humidity - process_variable;
 8002db4:	f7fe f95a 	bl	800106c <__aeabi_i2f>
 8002db8:	4b28      	ldr	r3, [pc, #160]	; (8002e5c <pi_controller+0xb0>)
 8002dba:	1c01      	adds	r1, r0, #0
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	f7fd ff71 	bl	8000ca4 <__aeabi_fsub>
	error_integral += error * pi_param.dt;
 8002dc2:	4d27      	ldr	r5, [pc, #156]	; (8002e60 <pi_controller+0xb4>)
	float error = setpoint_humidity - process_variable;
 8002dc4:	1c06      	adds	r6, r0, #0
	error_integral += error * pi_param.dt;
 8002dc6:	78e8      	ldrb	r0, [r5, #3]
 8002dc8:	f7fe f950 	bl	800106c <__aeabi_i2f>
 8002dcc:	1c31      	adds	r1, r6, #0
 8002dce:	f7fd fe37 	bl	8000a40 <__aeabi_fmul>
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f7fd fbd4 	bl	8000580 <__aeabi_fadd>

	//Integralfehler begrenzen (Anti-Windup)
	if(error_integral > max_error_integral){
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <pi_controller+0xb8>)
	error_integral += error * pi_param.dt;
 8002dda:	1c04      	adds	r4, r0, #0
	if(error_integral > max_error_integral){
 8002ddc:	881f      	ldrh	r7, [r3, #0]
 8002dde:	0038      	movs	r0, r7
 8002de0:	f7fe f944 	bl	800106c <__aeabi_i2f>
 8002de4:	1c21      	adds	r1, r4, #0
 8002de6:	f7fd fa7f 	bl	80002e8 <__aeabi_fcmplt>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d004      	beq.n	8002df8 <pi_controller+0x4c>
		error_integral = max_error_integral;
	}
	else if(error_integral < min_error_integral ){
		error_integral = min_error_integral;
 8002dee:	0038      	movs	r0, r7
 8002df0:	f7fe f986 	bl	8001100 <__aeabi_ui2f>
 8002df4:	1c04      	adds	r4, r0, #0
 8002df6:	e009      	b.n	8002e0c <pi_controller+0x60>
	else if(error_integral < min_error_integral ){
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <pi_controller+0xbc>)
 8002dfa:	881f      	ldrh	r7, [r3, #0]
 8002dfc:	0038      	movs	r0, r7
 8002dfe:	f7fe f935 	bl	800106c <__aeabi_i2f>
 8002e02:	1c21      	adds	r1, r4, #0
 8002e04:	f7fd fa84 	bl	8000310 <__aeabi_fcmpgt>
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d1f0      	bne.n	8002dee <pi_controller+0x42>
	}

	uint16_t pi_output = ((pi_param.kp * error) + (pi_param.ki * error_integral)) * (-1);
 8002e0c:	7828      	ldrb	r0, [r5, #0]
 8002e0e:	f7fe f92d 	bl	800106c <__aeabi_i2f>
 8002e12:	1c31      	adds	r1, r6, #0
 8002e14:	f7fd fe14 	bl	8000a40 <__aeabi_fmul>
 8002e18:	1c06      	adds	r6, r0, #0
 8002e1a:	7868      	ldrb	r0, [r5, #1]
 8002e1c:	f7fe f926 	bl	800106c <__aeabi_i2f>
 8002e20:	1c21      	adds	r1, r4, #0
 8002e22:	f7fd fe0d 	bl	8000a40 <__aeabi_fmul>
 8002e26:	1c01      	adds	r1, r0, #0
 8002e28:	1c30      	adds	r0, r6, #0
 8002e2a:	f7fd fba9 	bl	8000580 <__aeabi_fadd>
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	18c0      	adds	r0, r0, r3
 8002e34:	f7fd faca 	bl	80003cc <__aeabi_f2uiz>
	pi_output += bias;
 8002e38:	9b01      	ldr	r3, [sp, #4]
	//Stellgröße (PWM) begrenzen
	if(pi_output > htim2.Init.Period){
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <pi_controller+0xc0>)
	pi_output += bias;
 8002e3c:	18c0      	adds	r0, r0, r3
 8002e3e:	b283      	uxth	r3, r0
	if(pi_output > htim2.Init.Period){
 8002e40:	68d0      	ldr	r0, [r2, #12]
 8002e42:	4283      	cmp	r3, r0
 8002e44:	d901      	bls.n	8002e4a <pi_controller+0x9e>
 8002e46:	b280      	uxth	r0, r0
	}
	else if(pi_output < min_pwm_val){
		pi_output = min_pwm_val;
	}
	return pi_output;
}
 8002e48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e4a:	466a      	mov	r2, sp
 8002e4c:	8890      	ldrh	r0, [r2, #4]
 8002e4e:	9a01      	ldr	r2, [sp, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d2f8      	bcs.n	8002e46 <pi_controller+0x9a>
 8002e54:	1c18      	adds	r0, r3, #0
 8002e56:	e7f6      	b.n	8002e46 <pi_controller+0x9a>
 8002e58:	08006dee 	.word	0x08006dee
 8002e5c:	08006df0 	.word	0x08006df0
 8002e60:	20000000 	.word	0x20000000
 8002e64:	08006dea 	.word	0x08006dea
 8002e68:	08006dec 	.word	0x08006dec
 8002e6c:	200002d4 	.word	0x200002d4

08002e70 <adjust_pwm_value>:



void adjust_pwm_value(uint16_t new_duty){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_duty);
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <adjust_pwm_value+0xc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6358      	str	r0, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, new_duty);
 8002e76:	6398      	str	r0, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, new_duty);
 8002e78:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8002e7a:	4770      	bx	lr
 8002e7c:	200002d4 	.word	0x200002d4

08002e80 <start_timers>:

void start_timers(void){
 8002e80:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e82:	4c14      	ldr	r4, [pc, #80]	; (8002ed4 <start_timers+0x54>)
 8002e84:	2100      	movs	r1, #0
 8002e86:	0020      	movs	r0, r4
 8002e88:	f001 fef6 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002e8c:	2104      	movs	r1, #4
 8002e8e:	0020      	movs	r0, r4
 8002e90:	f001 fef2 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002e94:	2108      	movs	r1, #8
 8002e96:	0020      	movs	r0, r4
 8002e98:	f001 feee 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002e9c:	210c      	movs	r1, #12
 8002e9e:	0020      	movs	r0, r4
 8002ea0:	f001 feea 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 8002ea4:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <start_timers+0x58>)
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	0020      	movs	r0, r4
 8002eaa:	f001 fee5 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_2);
 8002eae:	2104      	movs	r1, #4
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f001 fee1 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8002eb6:	4c09      	ldr	r4, [pc, #36]	; (8002edc <start_timers+0x5c>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	0020      	movs	r0, r4
 8002ebc:	f001 fedc 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 8002ec0:	2104      	movs	r1, #4
 8002ec2:	0020      	movs	r0, r4
 8002ec4:	f001 fed8 	bl	8004c78 <HAL_TIM_PWM_Start>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <start_timers+0x60>)
 8002eca:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <start_timers+0x64>)
 8002ecc:	8819      	ldrh	r1, [r3, #0]
 8002ece:	f001 f933 	bl	8004138 <HAL_LPTIM_Counter_Start_IT>

}
 8002ed2:	bd10      	pop	{r4, pc}
 8002ed4:	200002d4 	.word	0x200002d4
 8002ed8:	20000314 	.word	0x20000314
 8002edc:	20000294 	.word	0x20000294
 8002ee0:	08006de8 	.word	0x08006de8
 8002ee4:	20000264 	.word	0x20000264

08002ee8 <reset_all_pwm>:
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_2);
}

void set_pwm(int TIM2_CH1, int TIM2_CH2, int TIM2_CH3, int TIM2_CH4, int TIM21_CH1, int TIM21_CH2, int TIM22_CH1, int TIM22_CH2){
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH1);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <reset_all_pwm+0x18>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH2);
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH3);
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH4);
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH1);
 8002ef6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH2);
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH1);
 8002efa:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH2);
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002efe:	4770      	bx	lr
 8002f00:	200002d4 	.word	0x200002d4

08002f04 <stop_timers>:
void stop_timers(void){
 8002f04:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002f06:	4c12      	ldr	r4, [pc, #72]	; (8002f50 <stop_timers+0x4c>)
 8002f08:	2100      	movs	r1, #0
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f001 feb8 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002f10:	2104      	movs	r1, #4
 8002f12:	0020      	movs	r0, r4
 8002f14:	f001 feb4 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002f18:	2108      	movs	r1, #8
 8002f1a:	0020      	movs	r0, r4
 8002f1c:	f001 feb0 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8002f20:	210c      	movs	r1, #12
 8002f22:	0020      	movs	r0, r4
 8002f24:	f001 feac 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_1);
 8002f28:	4c0a      	ldr	r4, [pc, #40]	; (8002f54 <stop_timers+0x50>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	0020      	movs	r0, r4
 8002f2e:	f001 fea7 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_2);
 8002f32:	2104      	movs	r1, #4
 8002f34:	0020      	movs	r0, r4
 8002f36:	f001 fea3 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_1);
 8002f3a:	4c07      	ldr	r4, [pc, #28]	; (8002f58 <stop_timers+0x54>)
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	0020      	movs	r0, r4
 8002f40:	f001 fe9e 	bl	8004c80 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_2);
 8002f44:	2104      	movs	r1, #4
 8002f46:	0020      	movs	r0, r4
 8002f48:	f001 fe9a 	bl	8004c80 <HAL_TIM_PWM_Stop>
}
 8002f4c:	bd10      	pop	{r4, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	200002d4 	.word	0x200002d4
 8002f54:	20000314 	.word	0x20000314
 8002f58:	20000294 	.word	0x20000294

08002f5c <set_pwm>:
void set_pwm(int TIM2_CH1, int TIM2_CH2, int TIM2_CH3, int TIM2_CH4, int TIM21_CH1, int TIM21_CH2, int TIM22_CH1, int TIM22_CH2){
 8002f5c:	b510      	push	{r4, lr}
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH1);
 8002f5e:	4c07      	ldr	r4, [pc, #28]	; (8002f7c <set_pwm+0x20>)
 8002f60:	6824      	ldr	r4, [r4, #0]
 8002f62:	6360      	str	r0, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH2);
 8002f64:	6361      	str	r1, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH3);
 8002f66:	6362      	str	r2, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH4);
 8002f68:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH1);
 8002f6a:	9b02      	ldr	r3, [sp, #8]
 8002f6c:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH2);
 8002f6e:	9b03      	ldr	r3, [sp, #12]
 8002f70:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH1);
 8002f72:	9b04      	ldr	r3, [sp, #16]
 8002f74:	6363      	str	r3, [r4, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH2);
 8002f76:	9b05      	ldr	r3, [sp, #20]
 8002f78:	6363      	str	r3, [r4, #52]	; 0x34
}
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	200002d4 	.word	0x200002d4

08002f80 <toggle_all_gpio>:
	HAL_Delay(1000);
	toggle_all_gpio();

}

void toggle_all_gpio(void){
 8002f80:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002f82:	2580      	movs	r5, #128	; 0x80
 8002f84:	24a0      	movs	r4, #160	; 0xa0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002f86:	2680      	movs	r6, #128	; 0x80
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002f88:	05e4      	lsls	r4, r4, #23
 8002f8a:	006d      	lsls	r5, r5, #1
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002f8c:	0136      	lsls	r6, r6, #4
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002f8e:	0029      	movs	r1, r5
 8002f90:	0020      	movs	r0, r4
 8002f92:	f000 ff87 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8002f96:	0031      	movs	r1, r6
 8002f98:	0020      	movs	r0, r4
 8002f9a:	f000 ff83 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	0020      	movs	r0, r4
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002fa2:	4c0b      	ldr	r4, [pc, #44]	; (8002fd0 <toggle_all_gpio+0x50>)
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 8002fa4:	0149      	lsls	r1, r1, #5
 8002fa6:	f000 ff7d 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002faa:	0029      	movs	r1, r5
 8002fac:	0020      	movs	r0, r4
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8002fae:	196d      	adds	r5, r5, r5
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8002fb0:	f000 ff78 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8002fb4:	0029      	movs	r1, r5
 8002fb6:	0020      	movs	r0, r4
 8002fb8:	f000 ff74 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 8002fbc:	0031      	movs	r1, r6
 8002fbe:	0020      	movs	r0, r4
 8002fc0:	f000 ff70 	bl	8003ea4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002fc4:	0029      	movs	r1, r5
 8002fc6:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <toggle_all_gpio+0x54>)
 8002fc8:	f000 ff6c 	bl	8003ea4 <HAL_GPIO_TogglePin>
	//einer fehlt wegen nucleo board
}
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	50000400 	.word	0x50000400
 8002fd4:	50000800 	.word	0x50000800

08002fd8 <switch_direction>:
void switch_direction(void){
 8002fd8:	b510      	push	{r4, lr}
	reset_all_pwm();
 8002fda:	f7ff ff85 	bl	8002ee8 <reset_all_pwm>
	HAL_Delay(1000);
 8002fde:	20fa      	movs	r0, #250	; 0xfa
 8002fe0:	0080      	lsls	r0, r0, #2
 8002fe2:	f000 fdfb 	bl	8003bdc <HAL_Delay>
	toggle_all_gpio();
 8002fe6:	f7ff ffcb 	bl	8002f80 <toggle_all_gpio>
}
 8002fea:	bd10      	pop	{r4, pc}

08002fec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002fec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	2501      	movs	r5, #1
{
 8002ff0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff2:	2214      	movs	r2, #20
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	a803      	add	r0, sp, #12
 8002ff8:	f002 fcad 	bl	8005956 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffc:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <MX_GPIO_Init+0x78>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8003000:	4c19      	ldr	r4, [pc, #100]	; (8003068 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8003004:	4f19      	ldr	r7, [pc, #100]	; (800306c <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	432a      	orrs	r2, r5
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 800300c:	0038      	movs	r0, r7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	402a      	ands	r2, r5
 8003010:	9201      	str	r2, [sp, #4]
 8003012:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8003016:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	430a      	orrs	r2, r1
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 800301e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	400b      	ands	r3, r1
 8003022:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8003024:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8003028:	f000 ff36 	bl	8003e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800302c:	21c8      	movs	r1, #200	; 0xc8
 800302e:	05f6      	lsls	r6, r6, #23
 8003030:	2200      	movs	r2, #0
 8003032:	0030      	movs	r0, r6
 8003034:	0149      	lsls	r1, r1, #5
 8003036:	f000 ff2f 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 800303a:	9403      	str	r4, [sp, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303e:	a903      	add	r1, sp, #12
 8003040:	0038      	movs	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003042:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	f000 fe70 	bl	8003d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800304c:	23c8      	movs	r3, #200	; 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003050:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003054:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003056:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f000 fe66 	bl	8003d2c <HAL_GPIO_Init>

}
 8003060:	b009      	add	sp, #36	; 0x24
 8003062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	00000f04 	.word	0x00000f04
 800306c:	50000400 	.word	0x50000400

08003070 <is_knx_controlbyte>:



uint8_t listen_group_address_counter = 0;

bool is_knx_controlbyte(uint8_t byte){
 8003070:	0003      	movs	r3, r0
  return ((byte | 0b00101100) == 0b10111100 ); // Ignore repeat flag and priority flag
 8003072:	202c      	movs	r0, #44	; 0x2c
 8003074:	4318      	orrs	r0, r3
 8003076:	38bc      	subs	r0, #188	; 0xbc
 8003078:	4243      	negs	r3, r0
 800307a:	4158      	adcs	r0, r3
 800307c:	b2c0      	uxtb	r0, r0
}
 800307e:	4770      	bx	lr

08003080 <get_payload_length>:

uint8_t get_payload_length(uint8_t *address_buffer){
  uint8_t length = (address_buffer[4] & 0b00001111) + 1;
 8003080:	230f      	movs	r3, #15
 8003082:	7900      	ldrb	r0, [r0, #4]
 8003084:	4018      	ands	r0, r3
  return length;
 8003086:	3001      	adds	r0, #1
}
 8003088:	4770      	bx	lr
	...

0800308c <get_2byte_float_value>:

uint8_t get_target_subgroup(uint8_t *address_buffer){
  return address_buffer[3];
}

float get_2byte_float_value(uint8_t *payload_buffer){
 800308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  uint8_t exponent = (payload_buffer[2] & 0b01111000) >> 3;
 800308e:	7885      	ldrb	r5, [r0, #2]
 8003090:	78c4      	ldrb	r4, [r0, #3]
 8003092:	0668      	lsls	r0, r5, #25
 8003094:	0f00      	lsrs	r0, r0, #28
 8003096:	f7ff fda9 	bl	8002bec <__aeabi_ui2d>
 800309a:	000b      	movs	r3, r1
	  uint8_t mantisse = ((payload_buffer[2] & 0b00000111) << 8) | (payload_buffer[3]);

	  //falls negatives vorzeichen(eigentlich nie)
	  if (payload_buffer[2] & 0b10000000) {
	    return ((-2048 + mantisse) * 0.01) * pow(2.0, exponent);
 800309c:	2180      	movs	r1, #128	; 0x80
	  if (payload_buffer[2] & 0b10000000) {
 800309e:	b26d      	sxtb	r5, r5
 80030a0:	0002      	movs	r2, r0
	    return ((-2048 + mantisse) * 0.01) * pow(2.0, exponent);
 80030a2:	05c9      	lsls	r1, r1, #23
 80030a4:	2000      	movs	r0, #0
	  if (payload_buffer[2] & 0b10000000) {
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	da12      	bge.n	80030d0 <get_2byte_float_value+0x44>
	    return ((-2048 + mantisse) * 0.01) * pow(2.0, exponent);
 80030aa:	f002 fde5 	bl	8005c78 <pow>
 80030ae:	000f      	movs	r7, r1
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <get_2byte_float_value+0x50>)
 80030b2:	0006      	movs	r6, r0
 80030b4:	18e0      	adds	r0, r4, r3
	  }

	  return (mantisse * 0.01) * pow(2.0, exponent);
 80030b6:	f7ff fd5f 	bl	8002b78 <__aeabi_i2d>
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <get_2byte_float_value+0x54>)
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <get_2byte_float_value+0x58>)
 80030be:	f7fe ff85 	bl	8001fcc <__aeabi_dmul>
 80030c2:	0032      	movs	r2, r6
 80030c4:	003b      	movs	r3, r7
 80030c6:	f7fe ff81 	bl	8001fcc <__aeabi_dmul>
 80030ca:	f7ff fdc1 	bl	8002c50 <__aeabi_d2f>
}
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  return (mantisse * 0.01) * pow(2.0, exponent);
 80030d0:	f002 fdd2 	bl	8005c78 <pow>
 80030d4:	0006      	movs	r6, r0
 80030d6:	000f      	movs	r7, r1
 80030d8:	0020      	movs	r0, r4
 80030da:	e7ec      	b.n	80030b6 <get_2byte_float_value+0x2a>
 80030dc:	fffff800 	.word	0xfffff800
 80030e0:	47ae147b 	.word	0x47ae147b
 80030e4:	3f847ae1 	.word	0x3f847ae1

080030e8 <check_for_controlbyte>:

bool check_for_controlbyte(uint8_t *buffer, uint8_t size){
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool rtrn_buffer[size];
 80030ea:	466a      	mov	r2, sp
 80030ec:	1dcb      	adds	r3, r1, #7
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	1ad3      	subs	r3, r2, r3
bool check_for_controlbyte(uint8_t *buffer, uint8_t size){
 80030f4:	af00      	add	r7, sp, #0
	bool rtrn = false;
	for(int i = 0; 0 < size; i++){
 80030f6:	2200      	movs	r2, #0
	bool rtrn_buffer[size];
 80030f8:	469d      	mov	sp, r3
bool check_for_controlbyte(uint8_t *buffer, uint8_t size){
 80030fa:	0005      	movs	r5, r0
	bool rtrn_buffer[size];
 80030fc:	466c      	mov	r4, sp
	bool rtrn = false;
 80030fe:	0010      	movs	r0, r2
	for(int i = 0; 0 < size; i++){
 8003100:	2900      	cmp	r1, #0
 8003102:	d101      	bne.n	8003108 <check_for_controlbyte+0x20>
		rtrn_buffer[i] = ((buffer[i] | 0b00101100) == 0b10111100);
		rtrn = rtrn || rtrn_buffer[i];
	}
	return rtrn;
}
 8003104:	46bd      	mov	sp, r7
 8003106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtrn_buffer[i] = ((buffer[i] | 0b00101100) == 0b10111100);
 8003108:	262c      	movs	r6, #44	; 0x2c
 800310a:	5cab      	ldrb	r3, [r5, r2]
 800310c:	4333      	orrs	r3, r6
 800310e:	3bbc      	subs	r3, #188	; 0xbc
 8003110:	425e      	negs	r6, r3
 8003112:	415e      	adcs	r6, r3
 8003114:	b2f3      	uxtb	r3, r6
 8003116:	54a3      	strb	r3, [r4, r2]
		rtrn = rtrn || rtrn_buffer[i];
 8003118:	2800      	cmp	r0, #0
 800311a:	d000      	beq.n	800311e <check_for_controlbyte+0x36>
 800311c:	0003      	movs	r3, r0
	for(int i = 0; 0 < size; i++){
 800311e:	3201      	adds	r2, #1
		rtrn = rtrn || rtrn_buffer[i];
 8003120:	0018      	movs	r0, r3
 8003122:	e7ed      	b.n	8003100 <check_for_controlbyte+0x18>

08003124 <add_listen_group_address>:
	flag_address_receive_started 		= FLAG_FALSE;
	flag_payload_receive_started 		= FLAG_FALSE;
	flag_checksum_receive_started		= FLAG_FALSE;
}

void add_listen_group_address(char *address){
 8003124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003126:	0006      	movs	r6, r0
	char substring1[3];
	char substring2[3];
	char substring3[4];

	strncpy(substring1, &address[0], 2);
	substring1[2] = '\0';
 8003128:	2500      	movs	r5, #0
void add_listen_group_address(char *address){
 800312a:	b085      	sub	sp, #20
	strncpy(substring1, &address[0], 2);
 800312c:	ac01      	add	r4, sp, #4
 800312e:	0001      	movs	r1, r0
 8003130:	2202      	movs	r2, #2
 8003132:	0020      	movs	r0, r4
 8003134:	f002 fcd2 	bl	8005adc <strncpy>
	strncpy(substring1, &address[3], 2);
 8003138:	1cf1      	adds	r1, r6, #3
 800313a:	2202      	movs	r2, #2
 800313c:	0020      	movs	r0, r4
	substring1[2] = '\0';
 800313e:	70a5      	strb	r5, [r4, #2]
	substring2[1] = '\0';
 8003140:	af02      	add	r7, sp, #8
	strncpy(substring1, &address[3], 2);
 8003142:	f002 fccb 	bl	8005adc <strncpy>
	strncpy(substring1, &address[6], 3);
 8003146:	1db1      	adds	r1, r6, #6
 8003148:	2203      	movs	r2, #3
 800314a:	0020      	movs	r0, r4
	substring2[1] = '\0';
 800314c:	707d      	strb	r5, [r7, #1]
	strncpy(substring1, &address[6], 3);
 800314e:	f002 fcc5 	bl	8005adc <strncpy>
	substring3[1] = '\0';
 8003152:	466b      	mov	r3, sp


	listen_group_addresses[listen_group_address_counter][0] = atoi(substring1);
 8003154:	0020      	movs	r0, r4
 8003156:	2403      	movs	r4, #3
	substring3[1] = '\0';
 8003158:	735d      	strb	r5, [r3, #13]
	listen_group_addresses[listen_group_address_counter][0] = atoi(substring1);
 800315a:	f002 fbae 	bl	80058ba <atoi>
 800315e:	4d0b      	ldr	r5, [pc, #44]	; (800318c <add_listen_group_address+0x68>)
 8003160:	4e0b      	ldr	r6, [pc, #44]	; (8003190 <add_listen_group_address+0x6c>)
 8003162:	782b      	ldrb	r3, [r5, #0]
 8003164:	4363      	muls	r3, r4
 8003166:	5598      	strb	r0, [r3, r6]
	listen_group_addresses[listen_group_address_counter][1] = atoi(substring2);
 8003168:	0038      	movs	r0, r7
 800316a:	f002 fba6 	bl	80058ba <atoi>
 800316e:	782b      	ldrb	r3, [r5, #0]
 8003170:	4363      	muls	r3, r4
 8003172:	18f3      	adds	r3, r6, r3
 8003174:	7058      	strb	r0, [r3, #1]
	listen_group_addresses[listen_group_address_counter][2] = atoi(substring3);
 8003176:	a803      	add	r0, sp, #12
 8003178:	f002 fb9f 	bl	80058ba <atoi>
 800317c:	782b      	ldrb	r3, [r5, #0]
 800317e:	435c      	muls	r4, r3
	listen_group_address_counter++;
 8003180:	3301      	adds	r3, #1
	listen_group_addresses[listen_group_address_counter][2] = atoi(substring3);
 8003182:	1934      	adds	r4, r6, r4
 8003184:	70a0      	strb	r0, [r4, #2]
	listen_group_address_counter++;
 8003186:	702b      	strb	r3, [r5, #0]
}
 8003188:	b005      	add	sp, #20
 800318a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318c:	20000218 	.word	0x20000218
 8003190:	20000238 	.word	0x20000238

08003194 <is_listening_to_group_address>:

bool is_listening_to_group_address(uint8_t maingroup, uint8_t middlegroup, uint8_t subgroup){
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i < listen_group_address_counter; i++){
 8003196:	2400      	movs	r4, #0
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <is_listening_to_group_address+0x34>)
    if ((listen_group_addresses[i][0] == maingroup)
 800319a:	4f0c      	ldr	r7, [pc, #48]	; (80031cc <is_listening_to_group_address+0x38>)
  for (int i = 0; i < listen_group_address_counter; i++){
 800319c:	781d      	ldrb	r5, [r3, #0]
 800319e:	42a5      	cmp	r5, r4
 80031a0:	dc01      	bgt.n	80031a6 <is_listening_to_group_address+0x12>
         && (listen_group_addresses[i][1] == middlegroup)
         && (listen_group_addresses[i][2] == subgroup)){
      return true;
    }
  }
  return false;
 80031a2:	2000      	movs	r0, #0
}
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a6:	2303      	movs	r3, #3
 80031a8:	4363      	muls	r3, r4
    if ((listen_group_addresses[i][0] == maingroup)
 80031aa:	19db      	adds	r3, r3, r7
 80031ac:	781e      	ldrb	r6, [r3, #0]
 80031ae:	4286      	cmp	r6, r0
 80031b0:	d105      	bne.n	80031be <is_listening_to_group_address+0x2a>
         && (listen_group_addresses[i][1] == middlegroup)
 80031b2:	785e      	ldrb	r6, [r3, #1]
 80031b4:	428e      	cmp	r6, r1
 80031b6:	d102      	bne.n	80031be <is_listening_to_group_address+0x2a>
         && (listen_group_addresses[i][2] == subgroup)){
 80031b8:	789b      	ldrb	r3, [r3, #2]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d001      	beq.n	80031c2 <is_listening_to_group_address+0x2e>
  for (int i = 0; i < listen_group_address_counter; i++){
 80031be:	3401      	adds	r4, #1
 80031c0:	e7ed      	b.n	800319e <is_listening_to_group_address+0xa>
      return true;
 80031c2:	2001      	movs	r0, #1
 80031c4:	e7ee      	b.n	80031a4 <is_listening_to_group_address+0x10>
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	20000218 	.word	0x20000218
 80031cc:	20000238 	.word	0x20000238

080031d0 <check_interest>:
bool check_interest(uint8_t *address_buffer){
 80031d0:	b510      	push	{r4, lr}
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 80031d2:	7903      	ldrb	r3, [r0, #4]
bool check_interest(uint8_t *address_buffer){
 80031d4:	0002      	movs	r2, r0
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 80031d6:	2000      	movs	r0, #0
 80031d8:	2b7f      	cmp	r3, #127	; 0x7f
 80031da:	d907      	bls.n	80031ec <check_interest+0x1c>
 80031dc:	2107      	movs	r1, #7
  return ((address_buffer[2] & 0b01111000) >> 3);
 80031de:	7890      	ldrb	r0, [r2, #2]
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 80031e0:	78d2      	ldrb	r2, [r2, #3]
 80031e2:	4001      	ands	r1, r0
  return ((address_buffer[2] & 0b01111000) >> 3);
 80031e4:	0640      	lsls	r0, r0, #25
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 80031e6:	0f00      	lsrs	r0, r0, #28
 80031e8:	f7ff ffd4 	bl	8003194 <is_listening_to_group_address>
	return interested;
 80031ec:	2301      	movs	r3, #1
 80031ee:	4018      	ands	r0, r3
}
 80031f0:	bd10      	pop	{r4, pc}
	...

080031f4 <MX_LPTIM1_Init>:
  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80031f4:	22e0      	movs	r2, #224	; 0xe0
  hlptim1.Instance = LPTIM1;
 80031f6:	480a      	ldr	r0, [pc, #40]	; (8003220 <MX_LPTIM1_Init+0x2c>)
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <MX_LPTIM1_Init+0x30>)
{
 80031fa:	b510      	push	{r4, lr}
  hlptim1.Instance = LPTIM1;
 80031fc:	6003      	str	r3, [r0, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80031fe:	2300      	movs	r3, #0
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	6082      	str	r2, [r0, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <MX_LPTIM1_Init+0x34>)
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003206:	6043      	str	r3, [r0, #4]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003208:	6142      	str	r2, [r0, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800320a:	6203      	str	r3, [r0, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800320c:	6243      	str	r3, [r0, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800320e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003210:	f000 fe6e 	bl	8003ef0 <HAL_LPTIM_Init>
 8003214:	2800      	cmp	r0, #0
 8003216:	d001      	beq.n	800321c <MX_LPTIM1_Init+0x28>
  {
    Error_Handler();
 8003218:	f000 f8aa 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800321c:	bd10      	pop	{r4, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000264 	.word	0x20000264
 8003224:	40007c00 	.word	0x40007c00
 8003228:	0000ffff 	.word	0x0000ffff

0800322c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{

  if(lptimHandle->Instance==LPTIM1)
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_LPTIM_MspInit+0x28>)
 800322e:	6802      	ldr	r2, [r0, #0]
{
 8003230:	b510      	push	{r4, lr}
  if(lptimHandle->Instance==LPTIM1)
 8003232:	429a      	cmp	r2, r3
 8003234:	d10d      	bne.n	8003252 <HAL_LPTIM_MspInit+0x26>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_LPTIM_MspInit+0x2c>)
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	6b91      	ldr	r1, [r2, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800323e:	200d      	movs	r0, #13
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003240:	430b      	orrs	r3, r1
 8003242:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	0011      	movs	r1, r2
 8003248:	f000 fcda 	bl	8003c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800324c:	200d      	movs	r0, #13
 800324e:	f000 fd01 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003252:	bd10      	pop	{r4, pc}
 8003254:	40007c00 	.word	0x40007c00
 8003258:	40021000 	.word	0x40021000

0800325c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800325c:	b530      	push	{r4, r5, lr}
 800325e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003260:	2220      	movs	r2, #32
 8003262:	2100      	movs	r1, #0
 8003264:	a80c      	add	r0, sp, #48	; 0x30
 8003266:	f002 fb76 	bl	8005956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800326a:	2214      	movs	r2, #20
 800326c:	2100      	movs	r1, #0
 800326e:	4668      	mov	r0, sp
 8003270:	f002 fb71 	bl	8005956 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003274:	2218      	movs	r2, #24
 8003276:	2100      	movs	r1, #0
 8003278:	a805      	add	r0, sp, #20
 800327a:	f002 fb6c 	bl	8005956 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800327e:	491e      	ldr	r1, [pc, #120]	; (80032f8 <SystemClock_Config+0x9c>)
 8003280:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <SystemClock_Config+0xa0>)
 8003282:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003284:	2580      	movs	r5, #128	; 0x80
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003286:	401a      	ands	r2, r3
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003290:	230a      	movs	r3, #10
 8003292:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003294:	3306      	adds	r3, #6
 8003296:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003298:	3b0e      	subs	r3, #14
 800329a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800329c:	2300      	movs	r3, #0
 800329e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80032a0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032a2:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80032a4:	02ed      	lsls	r5, r5, #11
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80032a6:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032a8:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032aa:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80032ac:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80032ae:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80032b0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032b2:	f000 fff1 	bl	8004298 <HAL_RCC_OscConfig>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d001      	beq.n	80032be <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032ba:	b672      	cpsid	i
 80032bc:	e7fe      	b.n	80032bc <SystemClock_Config+0x60>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032be:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032c0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80032c4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c6:	3b0c      	subs	r3, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032c8:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80032ca:	0021      	movs	r1, r4
 80032cc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ce:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80032d0:	f001 fa38 	bl	8004744 <HAL_RCC_ClockConfig>
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d001      	beq.n	80032dc <SystemClock_Config+0x80>
 80032d8:	b672      	cpsid	i
 80032da:	e7fe      	b.n	80032da <SystemClock_Config+0x7e>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80032dc:	2382      	movs	r3, #130	; 0x82
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032de:	9007      	str	r0, [sp, #28]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e0:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 80032e2:	9305      	str	r3, [sp, #20]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80032e4:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e6:	f001 fb1b 	bl	8004920 <HAL_RCCEx_PeriphCLKConfig>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d001      	beq.n	80032f2 <SystemClock_Config+0x96>
 80032ee:	b672      	cpsid	i
 80032f0:	e7fe      	b.n	80032f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
  }
}
 80032f2:	b019      	add	sp, #100	; 0x64
 80032f4:	bd30      	pop	{r4, r5, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40007000 	.word	0x40007000
 80032fc:	ffffe7ff 	.word	0xffffe7ff

08003300 <main>:
{
 8003300:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8003302:	f000 fc45 	bl	8003b90 <HAL_Init>
  SystemClock_Config();
 8003306:	f7ff ffa9 	bl	800325c <SystemClock_Config>
  MX_GPIO_Init();
 800330a:	f7ff fe6f 	bl	8002fec <MX_GPIO_Init>
  MX_TIM2_Init();
 800330e:	f000 fab1 	bl	8003874 <MX_TIM2_Init>
  MX_TIM21_Init();
 8003312:	f000 fb09 	bl	8003928 <MX_TIM21_Init>
  MX_TIM22_Init();
 8003316:	f000 fb51 	bl	80039bc <MX_TIM22_Init>
  MX_USART2_UART_Init();
 800331a:	f000 fb99 	bl	8003a50 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 800331e:	f7ff ff69 	bl	80031f4 <MX_LPTIM1_Init>
  uint8_t test_buffer_address[5] =  {0, 0, 120, 1, 227};
 8003322:	2205      	movs	r2, #5
 8003324:	4907      	ldr	r1, [pc, #28]	; (8003344 <main+0x44>)
 8003326:	4668      	mov	r0, sp
 8003328:	f002 fb0c 	bl	8005944 <memcpy>
  add_listen_group_address("15/0/1");
 800332c:	4806      	ldr	r0, [pc, #24]	; (8003348 <main+0x48>)
 800332e:	f7ff fef9 	bl	8003124 <add_listen_group_address>
  test_interest = check_interest(test_buffer_address);
 8003332:	4668      	mov	r0, sp
 8003334:	f7ff ff4c 	bl	80031d0 <check_interest>
	  statemachine_process();
 8003338:	f000 f8b2 	bl	80034a0 <statemachine_process>
	  extract_data();
 800333c:	f000 f9c2 	bl	80036c4 <extract_data>
 8003340:	e7fa      	b.n	8003338 <main+0x38>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	08006d20 	.word	0x08006d20
 8003348:	08006df4 	.word	0x08006df4

0800334c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800334c:	b510      	push	{r4, lr}
	statemachine_uart();
 800334e:	f000 f9a1 	bl	8003694 <statemachine_uart>
}
 8003352:	bd10      	pop	{r4, pc}

08003354 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
	__NOP();
 8003354:	46c0      	nop			; (mov r8, r8)
}
 8003356:	4770      	bx	lr

08003358 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003358:	b510      	push	{r4, lr}
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <HAL_LPTIM_AutoReloadMatchCallback+0x10>)
 800335c:	f000 ff30 	bl	80041c0 <HAL_LPTIM_Counter_Stop_IT>
	flag_lptim_interrupt = FLAG_TRUE;
 8003360:	2201      	movs	r2, #1
 8003362:	4b02      	ldr	r3, [pc, #8]	; (800336c <HAL_LPTIM_AutoReloadMatchCallback+0x14>)
 8003364:	701a      	strb	r2, [r3, #0]
}
 8003366:	bd10      	pop	{r4, pc}
 8003368:	20000264 	.word	0x20000264
 800336c:	20000212 	.word	0x20000212

08003370 <Error_Handler>:
 8003370:	b672      	cpsid	i
 8003372:	e7fe      	b.n	8003372 <Error_Handler+0x2>

08003374 <statemachine_standby_state>:
	}
}



void statemachine_standby_state(){
 8003374:	b510      	push	{r4, lr}
	reset_all_pwm();
 8003376:	f7ff fdb7 	bl	8002ee8 <reset_all_pwm>
	stop_timers();
 800337a:	f7ff fdc3 	bl	8002f04 <stop_timers>
	statemachine_process_state = INIT_STATE;
 800337e:	2201      	movs	r2, #1
 8003380:	4b01      	ldr	r3, [pc, #4]	; (8003388 <statemachine_standby_state+0x14>)
 8003382:	701a      	strb	r2, [r3, #0]
}
 8003384:	bd10      	pop	{r4, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	20000220 	.word	0x20000220

0800338c <statemachine_init_state>:


void statemachine_init_state(){
	flag_controlbyte_receive_started = FLAG_TRUE;
 800338c:	2201      	movs	r2, #1
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <statemachine_init_state+0x24>)
void statemachine_init_state(){
 8003390:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <statemachine_init_state+0x28>)
	flag_controlbyte_receive_started = FLAG_TRUE;
 8003394:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003396:	4808      	ldr	r0, [pc, #32]	; (80033b8 <statemachine_init_state+0x2c>)
 8003398:	1892      	adds	r2, r2, r2
 800339a:	f002 fa55 	bl	8005848 <HAL_UART_Receive_IT>

	start_timers();
 800339e:	f7ff fd6f 	bl	8002e80 <start_timers>
	reset_all_pwm();
 80033a2:	f7ff fda1 	bl	8002ee8 <reset_all_pwm>
	statemachine_process_state = SET_STATE;
 80033a6:	2203      	movs	r2, #3
 80033a8:	4b04      	ldr	r3, [pc, #16]	; (80033bc <statemachine_init_state+0x30>)
 80033aa:	701a      	strb	r2, [r3, #0]
}
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	20000210 	.word	0x20000210
 80033b4:	20000262 	.word	0x20000262
 80033b8:	20000354 	.word	0x20000354
 80033bc:	20000220 	.word	0x20000220

080033c0 <statemachine_set_state>:


void statemachine_set_state(){
 80033c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	set_pwm(min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val);
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <statemachine_set_state+0x24>)
 80033c4:	8818      	ldrh	r0, [r3, #0]
 80033c6:	0003      	movs	r3, r0
 80033c8:	0002      	movs	r2, r0
 80033ca:	9003      	str	r0, [sp, #12]
 80033cc:	9002      	str	r0, [sp, #8]
 80033ce:	9001      	str	r0, [sp, #4]
 80033d0:	9000      	str	r0, [sp, #0]
 80033d2:	0001      	movs	r1, r0
 80033d4:	f7ff fdc2 	bl	8002f5c <set_pwm>
	statemachine_process_state = STANDARD_STATE;
 80033d8:	2202      	movs	r2, #2
 80033da:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <statemachine_set_state+0x28>)
 80033dc:	701a      	strb	r2, [r3, #0]
}
 80033de:	b005      	add	sp, #20
 80033e0:	bd00      	pop	{pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	08006dee 	.word	0x08006dee
 80033e8:	20000220 	.word	0x20000220

080033ec <statemachine_standard_state>:


void statemachine_standard_state(){
	if(humidity >= max_humidity_allowed){
 80033ec:	4b0d      	ldr	r3, [pc, #52]	; (8003424 <statemachine_standard_state+0x38>)
void statemachine_standard_state(){
 80033ee:	b570      	push	{r4, r5, r6, lr}
	if(humidity >= max_humidity_allowed){
 80033f0:	6819      	ldr	r1, [r3, #0]
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <statemachine_standard_state+0x3c>)
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f7fc ff95 	bl	8000324 <__aeabi_fcmpge>
 80033fa:	1e05      	subs	r5, r0, #0
 80033fc:	d003      	beq.n	8003406 <statemachine_standard_state+0x1a>
		statemachine_process_state = CONTROLLED_STATE;
 80033fe:	2204      	movs	r2, #4
 8003400:	4b0a      	ldr	r3, [pc, #40]	; (800342c <statemachine_standard_state+0x40>)
	}
	else if(flag_lptim_interrupt == FLAG_TRUE){
		switch_direction();
		flag_lptim_interrupt = FLAG_FALSE;
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
		statemachine_process_state = SET_STATE;
 8003402:	701a      	strb	r2, [r3, #0]
	}
}
 8003404:	bd70      	pop	{r4, r5, r6, pc}
	else if(flag_lptim_interrupt == FLAG_TRUE){
 8003406:	4c0a      	ldr	r4, [pc, #40]	; (8003430 <statemachine_standard_state+0x44>)
 8003408:	7823      	ldrb	r3, [r4, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0fa      	beq.n	8003404 <statemachine_standard_state+0x18>
		switch_direction();
 800340e:	f7ff fde3 	bl	8002fd8 <switch_direction>
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <statemachine_standard_state+0x48>)
 8003414:	4808      	ldr	r0, [pc, #32]	; (8003438 <statemachine_standard_state+0x4c>)
 8003416:	8819      	ldrh	r1, [r3, #0]
		flag_lptim_interrupt = FLAG_FALSE;
 8003418:	7025      	strb	r5, [r4, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 800341a:	f000 fe8d 	bl	8004138 <HAL_LPTIM_Counter_Start_IT>
		statemachine_process_state = SET_STATE;
 800341e:	4b03      	ldr	r3, [pc, #12]	; (800342c <statemachine_standard_state+0x40>)
 8003420:	2203      	movs	r2, #3
 8003422:	e7ee      	b.n	8003402 <statemachine_standard_state+0x16>
 8003424:	20000008 	.word	0x20000008
 8003428:	2000021c 	.word	0x2000021c
 800342c:	20000220 	.word	0x20000220
 8003430:	20000212 	.word	0x20000212
 8003434:	08006de8 	.word	0x08006de8
 8003438:	20000264 	.word	0x20000264

0800343c <statemachine_controlled_state>:


void statemachine_controlled_state(){

	uint16_t new_dutycycle = pi_controller(actual_humidity);
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <statemachine_controlled_state+0x48>)
void statemachine_controlled_state(){
 800343e:	b510      	push	{r4, lr}
	uint16_t new_dutycycle = pi_controller(actual_humidity);
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	f7fc ffc3 	bl	80003cc <__aeabi_f2uiz>
 8003446:	b2c0      	uxtb	r0, r0
 8003448:	f7ff fcb0 	bl	8002dac <pi_controller>
	adjust_pwm_value(new_dutycycle);
 800344c:	f7ff fd10 	bl	8002e70 <adjust_pwm_value>
	if(flag_lptim_interrupt == FLAG_TRUE){
 8003450:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <statemachine_controlled_state+0x4c>)
 8003452:	7823      	ldrb	r3, [r4, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <statemachine_controlled_state+0x2e>
		switch_direction();
 8003458:	f7ff fdbe 	bl	8002fd8 <switch_direction>
		flag_lptim_interrupt = FLAG_FALSE;
 800345c:	2300      	movs	r3, #0
 800345e:	7023      	strb	r3, [r4, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <statemachine_controlled_state+0x50>)
 8003462:	480b      	ldr	r0, [pc, #44]	; (8003490 <statemachine_controlled_state+0x54>)
 8003464:	8819      	ldrh	r1, [r3, #0]
 8003466:	f000 fe67 	bl	8004138 <HAL_LPTIM_Counter_Start_IT>

	}
	if(humidity <= max_humidity_allowed){
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <statemachine_controlled_state+0x58>)
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <statemachine_controlled_state+0x5c>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f7fc ff43 	bl	80002fc <__aeabi_fcmple>
 8003476:	2800      	cmp	r0, #0
 8003478:	d002      	beq.n	8003480 <statemachine_controlled_state+0x44>
		statemachine_process_state = STANDARD_STATE;
 800347a:	2202      	movs	r2, #2
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <statemachine_controlled_state+0x60>)
 800347e:	701a      	strb	r2, [r3, #0]
	}

}
 8003480:	bd10      	pop	{r4, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	2000020c 	.word	0x2000020c
 8003488:	20000212 	.word	0x20000212
 800348c:	08006de8 	.word	0x08006de8
 8003490:	20000264 	.word	0x20000264
 8003494:	20000008 	.word	0x20000008
 8003498:	2000021c 	.word	0x2000021c
 800349c:	20000220 	.word	0x20000220

080034a0 <statemachine_process>:
{
 80034a0:	b510      	push	{r4, lr}
	switch(statemachine_process_state)
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <statemachine_process+0x34>)
 80034a4:	7818      	ldrb	r0, [r3, #0]
 80034a6:	2804      	cmp	r0, #4
 80034a8:	d806      	bhi.n	80034b8 <statemachine_process+0x18>
 80034aa:	f7fc fe37 	bl	800011c <__gnu_thumb1_case_uqi>
 80034ae:	0603      	.short	0x0603
 80034b0:	090c      	.short	0x090c
 80034b2:	0f          	.byte	0x0f
 80034b3:	00          	.byte	0x00
		statemachine_standby_state();
 80034b4:	f7ff ff5e 	bl	8003374 <statemachine_standby_state>
}
 80034b8:	bd10      	pop	{r4, pc}
		statemachine_init_state();
 80034ba:	f7ff ff67 	bl	800338c <statemachine_init_state>
		break;
 80034be:	e7fb      	b.n	80034b8 <statemachine_process+0x18>
		statemachine_set_state();
 80034c0:	f7ff ff7e 	bl	80033c0 <statemachine_set_state>
		break;
 80034c4:	e7f8      	b.n	80034b8 <statemachine_process+0x18>
		statemachine_standard_state();
 80034c6:	f7ff ff91 	bl	80033ec <statemachine_standard_state>
		break;
 80034ca:	e7f5      	b.n	80034b8 <statemachine_process+0x18>
		statemachine_controlled_state();
 80034cc:	f7ff ffb6 	bl	800343c <statemachine_controlled_state>
}
 80034d0:	e7f2      	b.n	80034b8 <statemachine_process+0x18>
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	20000220 	.word	0x20000220

080034d8 <statemachine_controlbyte_state>:
	default:
		break;
	}
}

void statemachine_controlbyte_state(){
 80034d8:	b570      	push	{r4, r5, r6, lr}
	if(is_knx_controlbyte(knx_controlbytes[0]) && is_knx_controlbyte(knx_controlbytes[1]) && flag_data_processed == FLAG_TRUE){
 80034da:	4c0f      	ldr	r4, [pc, #60]	; (8003518 <statemachine_controlbyte_state+0x40>)
 80034dc:	7820      	ldrb	r0, [r4, #0]
 80034de:	f7ff fdc7 	bl	8003070 <is_knx_controlbyte>
 80034e2:	4d0e      	ldr	r5, [pc, #56]	; (800351c <statemachine_controlbyte_state+0x44>)
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d011      	beq.n	800350c <statemachine_controlbyte_state+0x34>
 80034e8:	7860      	ldrb	r0, [r4, #1]
 80034ea:	f7ff fdc1 	bl	8003070 <is_knx_controlbyte>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d00c      	beq.n	800350c <statemachine_controlbyte_state+0x34>
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <statemachine_controlbyte_state+0x48>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <statemachine_controlbyte_state+0x34>
		HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 80034fa:	2205      	movs	r2, #5
 80034fc:	4909      	ldr	r1, [pc, #36]	; (8003524 <statemachine_controlbyte_state+0x4c>)
 80034fe:	0028      	movs	r0, r5
 8003500:	f002 f9a2 	bl	8005848 <HAL_UART_Receive_IT>
		statemachine_uart_state = ADDRESS_STATE;
 8003504:	2201      	movs	r2, #1
 8003506:	4b08      	ldr	r3, [pc, #32]	; (8003528 <statemachine_controlbyte_state+0x50>)
 8003508:	701a      	strb	r2, [r3, #0]
	}
	else{
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
	}
}
 800350a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 800350c:	2202      	movs	r2, #2
 800350e:	0021      	movs	r1, r4
 8003510:	0028      	movs	r0, r5
 8003512:	f002 f999 	bl	8005848 <HAL_UART_Receive_IT>
}
 8003516:	e7f8      	b.n	800350a <statemachine_controlbyte_state+0x32>
 8003518:	20000262 	.word	0x20000262
 800351c:	20000354 	.word	0x20000354
 8003520:	20000004 	.word	0x20000004
 8003524:	2000025d 	.word	0x2000025d
 8003528:	20000228 	.word	0x20000228

0800352c <statemachine_address_state>:


//Richtiges controllbyte wurde empfangen
void statemachine_address_state(){
 800352c:	b570      	push	{r4, r5, r6, lr}
	if(check_for_controlbyte(buffer_knx_address, sizeof(buffer_knx_address))){
 800352e:	4c10      	ldr	r4, [pc, #64]	; (8003570 <statemachine_address_state+0x44>)
 8003530:	2105      	movs	r1, #5
 8003532:	0020      	movs	r0, r4
 8003534:	f7ff fdd8 	bl	80030e8 <check_for_controlbyte>
 8003538:	4e0e      	ldr	r6, [pc, #56]	; (8003574 <statemachine_address_state+0x48>)
 800353a:	4d0f      	ldr	r5, [pc, #60]	; (8003578 <statemachine_address_state+0x4c>)
 800353c:	2800      	cmp	r0, #0
 800353e:	d007      	beq.n	8003550 <statemachine_address_state+0x24>
		statemachine_uart_state = CONTROLBYTE_STATE;
 8003540:	2300      	movs	r3, #0
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003542:	2202      	movs	r2, #2
 8003544:	490d      	ldr	r1, [pc, #52]	; (800357c <statemachine_address_state+0x50>)
		statemachine_uart_state = CONTROLBYTE_STATE;
 8003546:	7033      	strb	r3, [r6, #0]
	}
	else{
		payload_length = get_payload_length(buffer_knx_address);
		buffer_knx_payload = (uint8_t *) malloc( sizeof(uint8_t) * payload_length );			//speicher nach auswertung freigeben
		statemachine_uart_state = PAYLOAD_STATE;
		HAL_UART_Receive_IT(&huart2, buffer_knx_payload, payload_length);
 8003548:	0028      	movs	r0, r5
 800354a:	f002 f97d 	bl	8005848 <HAL_UART_Receive_IT>
	}
}
 800354e:	bd70      	pop	{r4, r5, r6, pc}
		payload_length = get_payload_length(buffer_knx_address);
 8003550:	0020      	movs	r0, r4
 8003552:	f7ff fd95 	bl	8003080 <get_payload_length>
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <statemachine_address_state+0x54>)
 8003558:	0004      	movs	r4, r0
 800355a:	7018      	strb	r0, [r3, #0]
		buffer_knx_payload = (uint8_t *) malloc( sizeof(uint8_t) * payload_length );			//speicher nach auswertung freigeben
 800355c:	f002 f9de 	bl	800591c <malloc>
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <statemachine_address_state+0x58>)
 8003562:	0001      	movs	r1, r0
 8003564:	6018      	str	r0, [r3, #0]
		statemachine_uart_state = PAYLOAD_STATE;
 8003566:	2302      	movs	r3, #2
		HAL_UART_Receive_IT(&huart2, buffer_knx_payload, payload_length);
 8003568:	b2a2      	uxth	r2, r4
		statemachine_uart_state = PAYLOAD_STATE;
 800356a:	7033      	strb	r3, [r6, #0]
 800356c:	e7ec      	b.n	8003548 <statemachine_address_state+0x1c>
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	2000025d 	.word	0x2000025d
 8003574:	20000228 	.word	0x20000228
 8003578:	20000354 	.word	0x20000354
 800357c:	20000262 	.word	0x20000262
 8003580:	20000227 	.word	0x20000227
 8003584:	20000214 	.word	0x20000214

08003588 <statemachine_payload_state>:

void statemachine_payload_state(){
 8003588:	b510      	push	{r4, lr}
	buffer_val1 = buffer_knx_payload[0];
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <statemachine_payload_state+0x4c>)
	buffer_val2 = buffer_knx_payload[1];
	buffer_val3 = buffer_knx_payload[2];
	buffer_val4 = buffer_knx_payload[3];
	buffer_val5 = buffer_knx_payload[4];
	if(check_for_controlbyte(buffer_knx_payload, sizeof(buffer_knx_payload))){
 800358c:	2104      	movs	r1, #4
	buffer_val1 = buffer_knx_payload[0];
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <statemachine_payload_state+0x50>)
 8003592:	7802      	ldrb	r2, [r0, #0]
 8003594:	701a      	strb	r2, [r3, #0]
	buffer_val2 = buffer_knx_payload[1];
 8003596:	7842      	ldrb	r2, [r0, #1]
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <statemachine_payload_state+0x54>)
 800359a:	701a      	strb	r2, [r3, #0]
	buffer_val3 = buffer_knx_payload[2];
 800359c:	7882      	ldrb	r2, [r0, #2]
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <statemachine_payload_state+0x58>)
 80035a0:	701a      	strb	r2, [r3, #0]
	buffer_val4 = buffer_knx_payload[3];
 80035a2:	78c2      	ldrb	r2, [r0, #3]
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <statemachine_payload_state+0x5c>)
 80035a6:	701a      	strb	r2, [r3, #0]
	buffer_val5 = buffer_knx_payload[4];
 80035a8:	7902      	ldrb	r2, [r0, #4]
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <statemachine_payload_state+0x60>)
 80035ac:	701a      	strb	r2, [r3, #0]
	if(check_for_controlbyte(buffer_knx_payload, sizeof(buffer_knx_payload))){
 80035ae:	f7ff fd9b 	bl	80030e8 <check_for_controlbyte>
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <statemachine_payload_state+0x64>)
 80035b4:	1e02      	subs	r2, r0, #0
 80035b6:	480e      	ldr	r0, [pc, #56]	; (80035f0 <statemachine_payload_state+0x68>)
 80035b8:	d006      	beq.n	80035c8 <statemachine_payload_state+0x40>
		statemachine_uart_state = CONTROLBYTE_STATE;
 80035ba:	2200      	movs	r2, #0
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 80035bc:	490d      	ldr	r1, [pc, #52]	; (80035f4 <statemachine_payload_state+0x6c>)
		statemachine_uart_state = CONTROLBYTE_STATE;
 80035be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 80035c0:	3202      	adds	r2, #2
		statemachine_uart_state = CONTROLBYTE_STATE;
		HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
	}
	else{
		statemachine_uart_state = ACK_STATE;
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 80035c2:	f002 f941 	bl	8005848 <HAL_UART_Receive_IT>

	}

}
 80035c6:	bd10      	pop	{r4, pc}
		statemachine_uart_state = ACK_STATE;
 80035c8:	2204      	movs	r2, #4
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 80035ca:	490b      	ldr	r1, [pc, #44]	; (80035f8 <statemachine_payload_state+0x70>)
		statemachine_uart_state = ACK_STATE;
 80035cc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 80035ce:	3a03      	subs	r2, #3
 80035d0:	e7f7      	b.n	80035c2 <statemachine_payload_state+0x3a>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20000214 	.word	0x20000214
 80035d8:	20000221 	.word	0x20000221
 80035dc:	20000222 	.word	0x20000222
 80035e0:	20000223 	.word	0x20000223
 80035e4:	20000224 	.word	0x20000224
 80035e8:	20000225 	.word	0x20000225
 80035ec:	20000228 	.word	0x20000228
 80035f0:	20000354 	.word	0x20000354
 80035f4:	20000262 	.word	0x20000262
 80035f8:	2000025c 	.word	0x2000025c

080035fc <statemachine_ack_state>:

void statemachine_ack_state(){
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	flag_entered_uart_callback = FLAG_TRUE;
 80035fe:	2501      	movs	r5, #1
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <statemachine_ack_state+0x6c>)
 8003602:	701d      	strb	r5, [r3, #0]

	if(is_knx_controlbyte(knx_checksum_byte)){
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <statemachine_ack_state+0x70>)
 8003606:	7818      	ldrb	r0, [r3, #0]
 8003608:	f7ff fd32 	bl	8003070 <is_knx_controlbyte>
 800360c:	4c18      	ldr	r4, [pc, #96]	; (8003670 <statemachine_ack_state+0x74>)
 800360e:	2800      	cmp	r0, #0
 8003610:	d015      	beq.n	800363e <statemachine_ack_state+0x42>
			statemachine_uart_state = CONTROLBYTE_STATE;
 8003612:	2300      	movs	r3, #0
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <statemachine_ack_state+0x78>)
			HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003616:	4918      	ldr	r1, [pc, #96]	; (8003678 <statemachine_ack_state+0x7c>)
			statemachine_uart_state = CONTROLBYTE_STATE;
 8003618:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 800361a:	0020      	movs	r0, r4
 800361c:	2202      	movs	r2, #2
 800361e:	f002 f913 	bl	8005848 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
		flag_knx_message_interested = FLAG_FALSE;
	}


	flag_uart_reception_complete = FLAG_TRUE;
 8003622:	2201      	movs	r2, #1
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <statemachine_ack_state+0x80>)
	flag_data_processed = FLAG_FALSE;
	statemachine_uart_state = CONTROLBYTE_STATE;
	HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003626:	4914      	ldr	r1, [pc, #80]	; (8003678 <statemachine_ack_state+0x7c>)
	flag_uart_reception_complete = FLAG_TRUE;
 8003628:	701a      	strb	r2, [r3, #0]
	flag_data_processed = FLAG_FALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <statemachine_ack_state+0x84>)
	HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 800362e:	0020      	movs	r0, r4
	flag_data_processed = FLAG_FALSE;
 8003630:	7013      	strb	r3, [r2, #0]
	statemachine_uart_state = CONTROLBYTE_STATE;
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <statemachine_ack_state+0x78>)
 8003634:	7013      	strb	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, knx_controlbytes, sizeof(knx_controlbytes));
 8003636:	2202      	movs	r2, #2
 8003638:	f002 f906 	bl	8005848 <HAL_UART_Receive_IT>


}
 800363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(check_interest(buffer_knx_address)){
 800363e:	4811      	ldr	r0, [pc, #68]	; (8003684 <statemachine_ack_state+0x88>)
 8003640:	f7ff fdc6 	bl	80031d0 <check_interest>
 8003644:	4e10      	ldr	r6, [pc, #64]	; (8003688 <statemachine_ack_state+0x8c>)
 8003646:	0007      	movs	r7, r0
		HAL_UART_Transmit_IT(&huart2, &interested_byte, sizeof(interested_byte));
 8003648:	002a      	movs	r2, r5
	else if(check_interest(buffer_knx_address)){
 800364a:	2800      	cmp	r0, #0
 800364c:	d005      	beq.n	800365a <statemachine_ack_state+0x5e>
		HAL_UART_Transmit_IT(&huart2, &interested_byte, sizeof(interested_byte));
 800364e:	490f      	ldr	r1, [pc, #60]	; (800368c <statemachine_ack_state+0x90>)
 8003650:	0020      	movs	r0, r4
 8003652:	f001 fc53 	bl	8004efc <HAL_UART_Transmit_IT>
		flag_knx_message_interested = FLAG_TRUE;
 8003656:	7035      	strb	r5, [r6, #0]
 8003658:	e7e3      	b.n	8003622 <statemachine_ack_state+0x26>
		HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
 800365a:	490d      	ldr	r1, [pc, #52]	; (8003690 <statemachine_ack_state+0x94>)
 800365c:	0020      	movs	r0, r4
 800365e:	f001 fc4d 	bl	8004efc <HAL_UART_Transmit_IT>
		flag_knx_message_interested = FLAG_FALSE;
 8003662:	7037      	strb	r7, [r6, #0]
 8003664:	e7dd      	b.n	8003622 <statemachine_ack_state+0x26>
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	20000211 	.word	0x20000211
 800366c:	2000025c 	.word	0x2000025c
 8003670:	20000354 	.word	0x20000354
 8003674:	20000228 	.word	0x20000228
 8003678:	20000262 	.word	0x20000262
 800367c:	20000213 	.word	0x20000213
 8003680:	20000004 	.word	0x20000004
 8003684:	2000025d 	.word	0x2000025d
 8003688:	20000226 	.word	0x20000226
 800368c:	2000000c 	.word	0x2000000c
 8003690:	2000000d 	.word	0x2000000d

08003694 <statemachine_uart>:
{
 8003694:	b510      	push	{r4, lr}
	switch(statemachine_uart_state)
 8003696:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <statemachine_uart+0x2c>)
 8003698:	7818      	ldrb	r0, [r3, #0]
 800369a:	2804      	cmp	r0, #4
 800369c:	d806      	bhi.n	80036ac <statemachine_uart+0x18>
 800369e:	f7fc fd3d 	bl	800011c <__gnu_thumb1_case_uqi>
 80036a2:	0603      	.short	0x0603
 80036a4:	0509      	.short	0x0509
 80036a6:	0c          	.byte	0x0c
 80036a7:	00          	.byte	0x00
		statemachine_controlbyte_state();
 80036a8:	f7ff ff16 	bl	80034d8 <statemachine_controlbyte_state>
}
 80036ac:	bd10      	pop	{r4, pc}
		statemachine_address_state();
 80036ae:	f7ff ff3d 	bl	800352c <statemachine_address_state>
		break;
 80036b2:	e7fb      	b.n	80036ac <statemachine_uart+0x18>
		statemachine_payload_state();
 80036b4:	f7ff ff68 	bl	8003588 <statemachine_payload_state>
		break;
 80036b8:	e7f8      	b.n	80036ac <statemachine_uart+0x18>
		statemachine_ack_state();
 80036ba:	f7ff ff9f 	bl	80035fc <statemachine_ack_state>
}
 80036be:	e7f5      	b.n	80036ac <statemachine_uart+0x18>
 80036c0:	20000228 	.word	0x20000228

080036c4 <extract_data>:



void extract_data(void){
 80036c4:	b570      	push	{r4, r5, r6, lr}
	if(flag_uart_reception_complete == FLAG_TRUE){
 80036c6:	4c09      	ldr	r4, [pc, #36]	; (80036ec <extract_data+0x28>)
 80036c8:	7823      	ldrb	r3, [r4, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <extract_data+0x26>
		if(flag_knx_message_interested == FLAG_TRUE){}
		actual_humidity = get_2byte_float_value(buffer_knx_payload);
 80036ce:	4d08      	ldr	r5, [pc, #32]	; (80036f0 <extract_data+0x2c>)
 80036d0:	6828      	ldr	r0, [r5, #0]
 80036d2:	f7ff fcdb 	bl	800308c <get_2byte_float_value>
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <extract_data+0x30>)
 80036d8:	6018      	str	r0, [r3, #0]
		free(buffer_knx_payload);
 80036da:	6828      	ldr	r0, [r5, #0]
 80036dc:	f002 f928 	bl	8005930 <free>
		flag_data_processed = FLAG_TRUE;
 80036e0:	2201      	movs	r2, #1
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <extract_data+0x34>)
 80036e4:	701a      	strb	r2, [r3, #0]
		flag_uart_reception_complete = FLAG_FALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	7023      	strb	r3, [r4, #0]
	  }
}
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	20000213 	.word	0x20000213
 80036f0:	20000214 	.word	0x20000214
 80036f4:	2000020c 	.word	0x2000020c
 80036f8:	20000004 	.word	0x20000004

080036fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fc:	2201      	movs	r2, #1
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_MspInit+0x18>)
 8003700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003702:	430a      	orrs	r2, r1
 8003704:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800370a:	0552      	lsls	r2, r2, #21
 800370c:	430a      	orrs	r2, r1
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003710:	4770      	bx	lr
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40021000 	.word	0x40021000

08003718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003718:	e7fe      	b.n	8003718 <NMI_Handler>

0800371a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371a:	e7fe      	b.n	800371a <HardFault_Handler>

0800371c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800371c:	4770      	bx	lr

0800371e <PendSV_Handler>:
 800371e:	4770      	bx	lr

08003720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003720:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003722:	f000 fa49 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003726:	bd10      	pop	{r4, pc}

08003728 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8003728:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800372a:	4802      	ldr	r0, [pc, #8]	; (8003734 <LPTIM1_IRQHandler+0xc>)
 800372c:	f000 fc3c 	bl	8003fa8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003730:	bd10      	pop	{r4, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000264 	.word	0x20000264

08003738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003738:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800373a:	4802      	ldr	r0, [pc, #8]	; (8003744 <USART2_IRQHandler+0xc>)
 800373c:	f001 fc32 	bl	8004fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003740:	bd10      	pop	{r4, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	20000354 	.word	0x20000354

08003748 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <_sbrk+0x30>)
 800374a:	490c      	ldr	r1, [pc, #48]	; (800377c <_sbrk+0x34>)
{
 800374c:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800374e:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <_sbrk+0x38>)
{
 8003752:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	2800      	cmp	r0, #0
 8003758:	d101      	bne.n	800375e <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800375a:	480a      	ldr	r0, [pc, #40]	; (8003784 <_sbrk+0x3c>)
 800375c:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	1882      	adds	r2, r0, r2
 8003762:	428a      	cmp	r2, r1
 8003764:	d906      	bls.n	8003774 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8003766:	f002 f8af 	bl	80058c8 <__errno>
 800376a:	230c      	movs	r3, #12
 800376c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800376e:	2001      	movs	r0, #1
 8003770:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003772:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003774:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8003776:	e7fc      	b.n	8003772 <_sbrk+0x2a>
 8003778:	00000400 	.word	0x00000400
 800377c:	20002000 	.word	0x20002000
 8003780:	2000022c 	.word	0x2000022c
 8003784:	200003e0 	.word	0x200003e0

08003788 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003788:	4770      	bx	lr
	...

0800378c <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	05d2      	lsls	r2, r2, #23
 8003792:	4293      	cmp	r3, r2
 8003794:	d105      	bne.n	80037a2 <HAL_TIM_PWM_MspInit+0x16>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003796:	2301      	movs	r3, #1
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_TIM_PWM_MspInit+0x38>)
 800379a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800379c:	430b      	orrs	r3, r1
 800379e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 80037a0:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM21)
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d105      	bne.n	80037b4 <HAL_TIM_PWM_MspInit+0x28>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80037a8:	2304      	movs	r3, #4
 80037aa:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <HAL_TIM_PWM_MspInit+0x38>)
 80037ac:	6b51      	ldr	r1, [r2, #52]	; 0x34
    __HAL_RCC_TIM22_CLK_ENABLE();
 80037ae:	430b      	orrs	r3, r1
 80037b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80037b2:	e7f5      	b.n	80037a0 <HAL_TIM_PWM_MspInit+0x14>
  else if(tim_pwmHandle->Instance==TIM22)
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_TIM_PWM_MspInit+0x40>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d1f2      	bne.n	80037a0 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80037ba:	4a02      	ldr	r2, [pc, #8]	; (80037c4 <HAL_TIM_PWM_MspInit+0x38>)
 80037bc:	2320      	movs	r3, #32
 80037be:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80037c0:	e7f5      	b.n	80037ae <HAL_TIM_PWM_MspInit+0x22>
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40010800 	.word	0x40010800
 80037cc:	40011400 	.word	0x40011400

080037d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037d0:	b510      	push	{r4, lr}
 80037d2:	0004      	movs	r4, r0
 80037d4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d6:	2214      	movs	r2, #20
 80037d8:	2100      	movs	r1, #0
 80037da:	a803      	add	r0, sp, #12
 80037dc:	f002 f8bb 	bl	8005956 <memset>
  if(timHandle->Instance==TIM2)
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	05d2      	lsls	r2, r2, #23
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d111      	bne.n	800380e <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	2001      	movs	r0, #1
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_TIM_MspPostInit+0x94>)
 80037ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037f0:	4301      	orrs	r1, r0
 80037f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80037f6:	4003      	ands	r3, r0
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	9b00      	ldr	r3, [sp, #0]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80037fc:	230f      	movs	r3, #15
 80037fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	3b0d      	subs	r3, #13
 8003802:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003804:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8003806:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003808:	a903      	add	r1, sp, #12
 800380a:	05c0      	lsls	r0, r0, #23
 800380c:	e013      	b.n	8003836 <HAL_TIM_MspPostInit+0x66>
  else if(timHandle->Instance==TIM21)
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_TIM_MspPostInit+0x98>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d114      	bne.n	800383e <HAL_TIM_MspPostInit+0x6e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003814:	2302      	movs	r3, #2
 8003816:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_TIM_MspPostInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003818:	4814      	ldr	r0, [pc, #80]	; (800386c <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800381c:	4319      	orrs	r1, r3
 800381e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003820:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	401a      	ands	r2, r3
 8003826:	9201      	str	r2, [sp, #4]
 8003828:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800382a:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 800382c:	3303      	adds	r3, #3
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800382e:	01d2      	lsls	r2, r2, #7
 8003830:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8003832:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003834:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003836:	f000 fa79 	bl	8003d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800383a:	b008      	add	sp, #32
 800383c:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM22)
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_TIM_MspPostInit+0xa0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d1fa      	bne.n	800383a <HAL_TIM_MspPostInit+0x6a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	2001      	movs	r0, #1
 8003846:	4a07      	ldr	r2, [pc, #28]	; (8003864 <HAL_TIM_MspPostInit+0x94>)
 8003848:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800384a:	4301      	orrs	r1, r0
 800384c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800384e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003850:	4003      	ands	r3, r0
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003856:	23c0      	movs	r3, #192	; 0xc0
 8003858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	3bbe      	subs	r3, #190	; 0xbe
 800385c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 800385e:	3303      	adds	r3, #3
 8003860:	e7d0      	b.n	8003804 <HAL_TIM_MspPostInit+0x34>
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	40021000 	.word	0x40021000
 8003868:	40010800 	.word	0x40010800
 800386c:	50000400 	.word	0x50000400
 8003870:	40011400 	.word	0x40011400

08003874 <MX_TIM2_Init>:
{
 8003874:	b530      	push	{r4, r5, lr}
 8003876:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003878:	2208      	movs	r2, #8
 800387a:	2100      	movs	r1, #0
 800387c:	4668      	mov	r0, sp
 800387e:	f002 f86a 	bl	8005956 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003882:	2210      	movs	r2, #16
 8003884:	2100      	movs	r1, #0
 8003886:	a802      	add	r0, sp, #8
 8003888:	f002 f865 	bl	8005956 <memset>
  htim2.Instance = TIM2;
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	4c25      	ldr	r4, [pc, #148]	; (8003924 <MX_TIM2_Init+0xb0>)
 8003890:	05db      	lsls	r3, r3, #23
 8003892:	6023      	str	r3, [r4, #0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003894:	2320      	movs	r3, #32
 8003896:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 4000;
 8003898:	23fa      	movs	r3, #250	; 0xfa
  htim2.Init.Prescaler = 0;
 800389a:	2500      	movs	r5, #0
  htim2.Init.Period = 4000;
 800389c:	011b      	lsls	r3, r3, #4
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800389e:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 80038a0:	6065      	str	r5, [r4, #4]
  htim2.Init.Period = 4000;
 80038a2:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a4:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a6:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038a8:	f001 f9c2 	bl	8004c30 <HAL_TIM_PWM_Init>
 80038ac:	42a8      	cmp	r0, r5
 80038ae:	d001      	beq.n	80038b4 <MX_TIM2_Init+0x40>
    Error_Handler();
 80038b0:	f7ff fd5e 	bl	8003370 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038b4:	4669      	mov	r1, sp
 80038b6:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b8:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ba:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038bc:	f001 fa78 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM2_Init+0x54>
    Error_Handler();
 80038c4:	f7ff fd54 	bl	8003370 <Error_Handler>
  sConfigOC.Pulse = 0;
 80038c8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ca:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038cc:	a902      	add	r1, sp, #8
 80038ce:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038d0:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 80038d2:	9203      	str	r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038d4:	9204      	str	r2, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038d6:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038d8:	f001 f9d6 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM2_Init+0x70>
    Error_Handler();
 80038e0:	f7ff fd46 	bl	8003370 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038e4:	2204      	movs	r2, #4
 80038e6:	a902      	add	r1, sp, #8
 80038e8:	0020      	movs	r0, r4
 80038ea:	f001 f9cd 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM2_Init+0x82>
    Error_Handler();
 80038f2:	f7ff fd3d 	bl	8003370 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038f6:	2208      	movs	r2, #8
 80038f8:	a902      	add	r1, sp, #8
 80038fa:	0020      	movs	r0, r4
 80038fc:	f001 f9c4 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8003900:	2800      	cmp	r0, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM2_Init+0x94>
    Error_Handler();
 8003904:	f7ff fd34 	bl	8003370 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003908:	220c      	movs	r2, #12
 800390a:	a902      	add	r1, sp, #8
 800390c:	0020      	movs	r0, r4
 800390e:	f001 f9bb 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8003912:	2800      	cmp	r0, #0
 8003914:	d001      	beq.n	800391a <MX_TIM2_Init+0xa6>
    Error_Handler();
 8003916:	f7ff fd2b 	bl	8003370 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 800391a:	0020      	movs	r0, r4
 800391c:	f7ff ff58 	bl	80037d0 <HAL_TIM_MspPostInit>
}
 8003920:	b007      	add	sp, #28
 8003922:	bd30      	pop	{r4, r5, pc}
 8003924:	200002d4 	.word	0x200002d4

08003928 <MX_TIM21_Init>:
{
 8003928:	b530      	push	{r4, r5, lr}
 800392a:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800392c:	2208      	movs	r2, #8
 800392e:	2100      	movs	r1, #0
 8003930:	4668      	mov	r0, sp
 8003932:	f002 f810 	bl	8005956 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003936:	2210      	movs	r2, #16
 8003938:	2100      	movs	r1, #0
 800393a:	a802      	add	r0, sp, #8
 800393c:	f002 f80b 	bl	8005956 <memset>
  htim21.Instance = TIM21;
 8003940:	4c1c      	ldr	r4, [pc, #112]	; (80039b4 <MX_TIM21_Init+0x8c>)
 8003942:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <MX_TIM21_Init+0x90>)
  htim21.Init.Prescaler = 0;
 8003944:	2500      	movs	r5, #0
  htim21.Instance = TIM21;
 8003946:	6023      	str	r3, [r4, #0]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003948:	2320      	movs	r3, #32
 800394a:	60a3      	str	r3, [r4, #8]
  htim21.Init.Period = 4000;
 800394c:	23fa      	movs	r3, #250	; 0xfa
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800394e:	0020      	movs	r0, r4
  htim21.Init.Period = 4000;
 8003950:	011b      	lsls	r3, r3, #4
  htim21.Init.Prescaler = 0;
 8003952:	6065      	str	r5, [r4, #4]
  htim21.Init.Period = 4000;
 8003954:	60e3      	str	r3, [r4, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003956:	6125      	str	r5, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003958:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800395a:	f001 f969 	bl	8004c30 <HAL_TIM_PWM_Init>
 800395e:	42a8      	cmp	r0, r5
 8003960:	d001      	beq.n	8003966 <MX_TIM21_Init+0x3e>
    Error_Handler();
 8003962:	f7ff fd05 	bl	8003370 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003966:	4669      	mov	r1, sp
 8003968:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800396a:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800396c:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800396e:	f001 fa1f 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8003972:	2800      	cmp	r0, #0
 8003974:	d001      	beq.n	800397a <MX_TIM21_Init+0x52>
    Error_Handler();
 8003976:	f7ff fcfb 	bl	8003370 <Error_Handler>
  sConfigOC.Pulse = 0;
 800397a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800397c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800397e:	a902      	add	r1, sp, #8
 8003980:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003982:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 8003984:	9203      	str	r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003986:	9204      	str	r2, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003988:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800398a:	f001 f97d 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 800398e:	2800      	cmp	r0, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM21_Init+0x6e>
    Error_Handler();
 8003992:	f7ff fced 	bl	8003370 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003996:	2204      	movs	r2, #4
 8003998:	a902      	add	r1, sp, #8
 800399a:	0020      	movs	r0, r4
 800399c:	f001 f974 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM21_Init+0x80>
    Error_Handler();
 80039a4:	f7ff fce4 	bl	8003370 <Error_Handler>
  HAL_TIM_MspPostInit(&htim21);
 80039a8:	0020      	movs	r0, r4
 80039aa:	f7ff ff11 	bl	80037d0 <HAL_TIM_MspPostInit>
}
 80039ae:	b007      	add	sp, #28
 80039b0:	bd30      	pop	{r4, r5, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	20000314 	.word	0x20000314
 80039b8:	40010800 	.word	0x40010800

080039bc <MX_TIM22_Init>:
{
 80039bc:	b530      	push	{r4, r5, lr}
 80039be:	b087      	sub	sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c0:	2208      	movs	r2, #8
 80039c2:	2100      	movs	r1, #0
 80039c4:	4668      	mov	r0, sp
 80039c6:	f001 ffc6 	bl	8005956 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039ca:	2210      	movs	r2, #16
 80039cc:	2100      	movs	r1, #0
 80039ce:	a802      	add	r0, sp, #8
 80039d0:	f001 ffc1 	bl	8005956 <memset>
  htim22.Instance = TIM22;
 80039d4:	4c1c      	ldr	r4, [pc, #112]	; (8003a48 <MX_TIM22_Init+0x8c>)
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <MX_TIM22_Init+0x90>)
  htim22.Init.Prescaler = 0;
 80039d8:	2500      	movs	r5, #0
  htim22.Instance = TIM22;
 80039da:	6023      	str	r3, [r4, #0]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80039dc:	2320      	movs	r3, #32
 80039de:	60a3      	str	r3, [r4, #8]
  htim22.Init.Period = 4000;
 80039e0:	23fa      	movs	r3, #250	; 0xfa
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80039e2:	0020      	movs	r0, r4
  htim22.Init.Period = 4000;
 80039e4:	011b      	lsls	r3, r3, #4
  htim22.Init.Prescaler = 0;
 80039e6:	6065      	str	r5, [r4, #4]
  htim22.Init.Period = 4000;
 80039e8:	60e3      	str	r3, [r4, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039ea:	6125      	str	r5, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ec:	6165      	str	r5, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80039ee:	f001 f91f 	bl	8004c30 <HAL_TIM_PWM_Init>
 80039f2:	42a8      	cmp	r0, r5
 80039f4:	d001      	beq.n	80039fa <MX_TIM22_Init+0x3e>
    Error_Handler();
 80039f6:	f7ff fcbb 	bl	8003370 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80039fa:	4669      	mov	r1, sp
 80039fc:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fe:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a00:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003a02:	f001 f9d5 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a06:	2800      	cmp	r0, #0
 8003a08:	d001      	beq.n	8003a0e <MX_TIM22_Init+0x52>
    Error_Handler();
 8003a0a:	f7ff fcb1 	bl	8003370 <Error_Handler>
  sConfigOC.Pulse = 0;
 8003a0e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a10:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a12:	a902      	add	r1, sp, #8
 8003a14:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a16:	9302      	str	r3, [sp, #8]
  sConfigOC.Pulse = 0;
 8003a18:	9203      	str	r2, [sp, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a1a:	9204      	str	r2, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1c:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1e:	f001 f933 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM22_Init+0x6e>
    Error_Handler();
 8003a26:	f7ff fca3 	bl	8003370 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	a902      	add	r1, sp, #8
 8003a2e:	0020      	movs	r0, r4
 8003a30:	f001 f92a 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM22_Init+0x80>
    Error_Handler();
 8003a38:	f7ff fc9a 	bl	8003370 <Error_Handler>
  HAL_TIM_MspPostInit(&htim22);
 8003a3c:	0020      	movs	r0, r4
 8003a3e:	f7ff fec7 	bl	80037d0 <HAL_TIM_MspPostInit>
}
 8003a42:	b007      	add	sp, #28
 8003a44:	bd30      	pop	{r4, r5, pc}
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	20000294 	.word	0x20000294
 8003a4c:	40011400 	.word	0x40011400

08003a50 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <MX_USART2_UART_Init+0x30>)
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <MX_USART2_UART_Init+0x34>)
{
 8003a54:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8003a56:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 19200;
 8003a58:	2396      	movs	r3, #150	; 0x96
 8003a5a:	01db      	lsls	r3, r3, #7
 8003a5c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a5e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a60:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a62:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a64:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a66:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a68:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a6a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a6c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a6e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a70:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a72:	f001 fe59 	bl	8005728 <HAL_UART_Init>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d001      	beq.n	8003a7e <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8003a7a:	f7ff fc79 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a7e:	bd10      	pop	{r4, pc}
 8003a80:	20000354 	.word	0x20000354
 8003a84:	40004400 	.word	0x40004400

08003a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	0004      	movs	r4, r0
 8003a8c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8e:	2214      	movs	r2, #20
 8003a90:	2100      	movs	r1, #0
 8003a92:	a801      	add	r0, sp, #4
 8003a94:	f001 ff5f 	bl	8005956 <memset>
  if(uartHandle->Instance==USART2)
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_UART_MspInit+0x64>)
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d123      	bne.n	8003ae8 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_UART_MspInit+0x68>)
 8003aa4:	0292      	lsls	r2, r2, #10
 8003aa6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aaa:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	400b      	ands	r3, r1
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ac0:	23c0      	movs	r3, #192	; 0xc0
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aca:	185b      	adds	r3, r3, r1
 8003acc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003ace:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003ad2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ad4:	f000 f92a 	bl	8003d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	201c      	movs	r0, #28
 8003adc:	0011      	movs	r1, r2
 8003ade:	f000 f88f 	bl	8003c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ae2:	201c      	movs	r0, #28
 8003ae4:	f000 f8b6 	bl	8003c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ae8:	b006      	add	sp, #24
 8003aea:	bd10      	pop	{r4, pc}
 8003aec:	40004400 	.word	0x40004400
 8003af0:	40021000 	.word	0x40021000

08003af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003af4:	480d      	ldr	r0, [pc, #52]	; (8003b2c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003af6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <LoopForever+0x6>)
  ldr r1, =_edata
 8003afa:	490e      	ldr	r1, [pc, #56]	; (8003b34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003afc:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <LoopForever+0xe>)
  movs r3, #0
 8003afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b00:	e002      	b.n	8003b08 <LoopCopyDataInit>

08003b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b06:	3304      	adds	r3, #4

08003b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b0c:	d3f9      	bcc.n	8003b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	; (8003b3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b10:	4c0b      	ldr	r4, [pc, #44]	; (8003b40 <LoopForever+0x16>)
  movs r3, #0
 8003b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b14:	e001      	b.n	8003b1a <LoopFillZerobss>

08003b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b18:	3204      	adds	r2, #4

08003b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b1c:	d3fb      	bcc.n	8003b16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b1e:	f7ff fe33 	bl	8003788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b22:	f001 fed7 	bl	80058d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b26:	f7ff fbeb 	bl	8003300 <main>

08003b2a <LoopForever>:

LoopForever:
    b LoopForever
 8003b2a:	e7fe      	b.n	8003b2a <LoopForever>
   ldr   r0, =_estack
 8003b2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b34:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003b38:	08006f88 	.word	0x08006f88
  ldr r2, =_sbss
 8003b3c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003b40:	200003e0 	.word	0x200003e0

08003b44 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b44:	e7fe      	b.n	8003b44 <ADC1_COMP_IRQHandler>
	...

08003b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	0005      	movs	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b4c:	20fa      	movs	r0, #250	; 0xfa
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <HAL_InitTick+0x3c>)
 8003b50:	0080      	lsls	r0, r0, #2
 8003b52:	7819      	ldrb	r1, [r3, #0]
 8003b54:	f7fc faec 	bl	8000130 <__udivsi3>
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_InitTick+0x40>)
 8003b5a:	0001      	movs	r1, r0
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f7fc fae7 	bl	8000130 <__udivsi3>
 8003b62:	f000 f883 	bl	8003c6c <HAL_SYSTICK_Config>
 8003b66:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6e:	2d03      	cmp	r5, #3
 8003b70:	d807      	bhi.n	8003b82 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b72:	3802      	subs	r0, #2
 8003b74:	0022      	movs	r2, r4
 8003b76:	0029      	movs	r1, r5
 8003b78:	f000 f842 	bl	8003c00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_InitTick+0x44>)
 8003b80:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	20000014 	.word	0x20000014
 8003b88:	20000010 	.word	0x20000010
 8003b8c:	20000018 	.word	0x20000018

08003b90 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b90:	2340      	movs	r3, #64	; 0x40
 8003b92:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <HAL_Init+0x24>)
{
 8003b94:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b96:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b98:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b9e:	f7ff ffd3 	bl	8003b48 <HAL_InitTick>
 8003ba2:	1e04      	subs	r4, r0, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_Init+0x1e>
    HAL_MspInit();
 8003ba6:	f7ff fda9 	bl	80036fc <HAL_MspInit>
}
 8003baa:	0020      	movs	r0, r4
 8003bac:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003bae:	2401      	movs	r4, #1
 8003bb0:	e7fb      	b.n	8003baa <HAL_Init+0x1a>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40022000 	.word	0x40022000

08003bb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003bb8:	4a03      	ldr	r2, [pc, #12]	; (8003bc8 <HAL_IncTick+0x10>)
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_IncTick+0x14>)
 8003bbc:	6811      	ldr	r1, [r2, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	185b      	adds	r3, r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	4770      	bx	lr
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	200003d8 	.word	0x200003d8
 8003bcc:	20000014 	.word	0x20000014

08003bd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003bd0:	4b01      	ldr	r3, [pc, #4]	; (8003bd8 <HAL_GetTick+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
}
 8003bd4:	4770      	bx	lr
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	200003d8 	.word	0x200003d8

08003bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7ff fff6 	bl	8003bd0 <HAL_GetTick>
 8003be4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	1c63      	adds	r3, r4, #1
 8003be8:	d002      	beq.n	8003bf0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bea:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <HAL_Delay+0x20>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bf0:	f7ff ffee 	bl	8003bd0 <HAL_GetTick>
 8003bf4:	1b40      	subs	r0, r0, r5
 8003bf6:	42a0      	cmp	r0, r4
 8003bf8:	d3fa      	bcc.n	8003bf0 <HAL_Delay+0x14>
  {
  }
}
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	20000014 	.word	0x20000014

08003c00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c00:	b530      	push	{r4, r5, lr}
 8003c02:	25ff      	movs	r5, #255	; 0xff
 8003c04:	2403      	movs	r4, #3
 8003c06:	002a      	movs	r2, r5
 8003c08:	b2c3      	uxtb	r3, r0
 8003c0a:	401c      	ands	r4, r3
 8003c0c:	00e4      	lsls	r4, r4, #3
 8003c0e:	40a2      	lsls	r2, r4
 8003c10:	0189      	lsls	r1, r1, #6
 8003c12:	4029      	ands	r1, r5
 8003c14:	43d2      	mvns	r2, r2
 8003c16:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	db0a      	blt.n	8003c32 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c1c:	24c0      	movs	r4, #192	; 0xc0
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_NVIC_SetPriority+0x4c>)
 8003c20:	0880      	lsrs	r0, r0, #2
 8003c22:	0080      	lsls	r0, r0, #2
 8003c24:	18c0      	adds	r0, r0, r3
 8003c26:	00a4      	lsls	r4, r4, #2
 8003c28:	5903      	ldr	r3, [r0, r4]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003c30:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c32:	200f      	movs	r0, #15
 8003c34:	4003      	ands	r3, r0
 8003c36:	3b08      	subs	r3, #8
 8003c38:	4805      	ldr	r0, [pc, #20]	; (8003c50 <HAL_NVIC_SetPriority+0x50>)
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	181b      	adds	r3, r3, r0
 8003c40:	69d8      	ldr	r0, [r3, #28]
 8003c42:	4002      	ands	r2, r0
 8003c44:	4311      	orrs	r1, r2
 8003c46:	61d9      	str	r1, [r3, #28]
 8003c48:	e7f2      	b.n	8003c30 <HAL_NVIC_SetPriority+0x30>
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c54:	2800      	cmp	r0, #0
 8003c56:	db05      	blt.n	8003c64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c58:	231f      	movs	r3, #31
 8003c5a:	4018      	ands	r0, r3
 8003c5c:	3b1e      	subs	r3, #30
 8003c5e:	4083      	lsls	r3, r0
 8003c60:	4a01      	ldr	r2, [pc, #4]	; (8003c68 <HAL_NVIC_EnableIRQ+0x14>)
 8003c62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c64:	4770      	bx	lr
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c6c:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_SYSTICK_Config+0x28>)
 8003c6e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c70:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d80d      	bhi.n	8003c92 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c76:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c7a:	4808      	ldr	r0, [pc, #32]	; (8003c9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c7e:	6a03      	ldr	r3, [r0, #32]
 8003c80:	0609      	lsls	r1, r1, #24
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c8a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c8e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c90:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c92:	4770      	bx	lr
 8003c94:	00ffffff 	.word	0x00ffffff
 8003c98:	e000e010 	.word	0xe000e010
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca2:	1d85      	adds	r5, r0, #6
 8003ca4:	7feb      	ldrb	r3, [r5, #31]
 8003ca6:	1d44      	adds	r4, r0, #5
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d005      	beq.n	8003cb8 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cac:	2304      	movs	r3, #4
 8003cae:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cb0:	2300      	movs	r3, #0

    return HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003cb4:	77e3      	strb	r3, [r4, #31]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8003cb6:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb8:	210e      	movs	r1, #14
 8003cba:	6803      	ldr	r3, [r0, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	4391      	bics	r1, r2
 8003cc8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ccc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003cce:	201c      	movs	r0, #28
 8003cd0:	4003      	ands	r3, r0
 8003cd2:	0010      	movs	r0, r2
 8003cd4:	4098      	lsls	r0, r3
 8003cd6:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003cd8:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003cda:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8003cdc:	77e0      	strb	r0, [r4, #31]
    return status;
 8003cde:	e7ea      	b.n	8003cb6 <HAL_DMA_Abort+0x16>

08003ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ce2:	1d84      	adds	r4, r0, #6
 8003ce4:	7fe3      	ldrb	r3, [r4, #31]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cea:	2304      	movs	r3, #4
 8003cec:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8003cee:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf4:	210e      	movs	r1, #14
 8003cf6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cf8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d00:	2201      	movs	r2, #1
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	4391      	bics	r1, r2
 8003d06:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d08:	231c      	movs	r3, #28
 8003d0a:	402b      	ands	r3, r5
 8003d0c:	0015      	movs	r5, r2
 8003d0e:	409d      	lsls	r5, r3
 8003d10:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8003d12:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d14:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003d16:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003d18:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8003d1a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003d1c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003d20:	42a2      	cmp	r2, r4
 8003d22:	d0e5      	beq.n	8003cf0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003d24:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	0023      	movs	r3, r4
 8003d28:	e7e2      	b.n	8003cf0 <HAL_DMA_Abort_IT+0x10>
	...

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d2e:	4a54      	ldr	r2, [pc, #336]	; (8003e80 <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d30:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d32:	1882      	adds	r2, r0, r2
 8003d34:	1e54      	subs	r4, r2, #1
 8003d36:	41a2      	sbcs	r2, r4
{
 8003d38:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d3a:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8003d3c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d3e:	3205      	adds	r2, #5
 8003d40:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d42:	9a03      	ldr	r2, [sp, #12]
 8003d44:	40da      	lsrs	r2, r3
 8003d46:	d101      	bne.n	8003d4c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003d48:	b007      	add	sp, #28
 8003d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003d4c:	2701      	movs	r7, #1
 8003d4e:	003a      	movs	r2, r7
 8003d50:	409a      	lsls	r2, r3
 8003d52:	4694      	mov	ip, r2
 8003d54:	4664      	mov	r4, ip
 8003d56:	9a03      	ldr	r2, [sp, #12]
 8003d58:	4022      	ands	r2, r4
 8003d5a:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 8003d5c:	d100      	bne.n	8003d60 <HAL_GPIO_Init+0x34>
 8003d5e:	e08c      	b.n	8003e7a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003d60:	2403      	movs	r4, #3
 8003d62:	684a      	ldr	r2, [r1, #4]
 8003d64:	005e      	lsls	r6, r3, #1
 8003d66:	9200      	str	r2, [sp, #0]
 8003d68:	4022      	ands	r2, r4
 8003d6a:	40b4      	lsls	r4, r6
 8003d6c:	43e4      	mvns	r4, r4
 8003d6e:	9402      	str	r4, [sp, #8]
 8003d70:	1e54      	subs	r4, r2, #1
 8003d72:	42bc      	cmp	r4, r7
 8003d74:	d829      	bhi.n	8003dca <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8003d76:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003d78:	9c02      	ldr	r4, [sp, #8]
 8003d7a:	4025      	ands	r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d7c:	68cc      	ldr	r4, [r1, #12]
 8003d7e:	40b4      	lsls	r4, r6
 8003d80:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003d82:	6084      	str	r4, [r0, #8]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d84:	4664      	mov	r4, ip
        temp = GPIOx->OTYPER;
 8003d86:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d88:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d8a:	9c00      	ldr	r4, [sp, #0]
 8003d8c:	0924      	lsrs	r4, r4, #4
 8003d8e:	403c      	ands	r4, r7
 8003d90:	409c      	lsls	r4, r3
 8003d92:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003d94:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8003d96:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d98:	9c02      	ldr	r4, [sp, #8]
 8003d9a:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d9c:	688c      	ldr	r4, [r1, #8]
 8003d9e:	40b4      	lsls	r4, r6
 8003da0:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003da2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da4:	2a02      	cmp	r2, #2
 8003da6:	d112      	bne.n	8003dce <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3U];
 8003da8:	08dc      	lsrs	r4, r3, #3
 8003daa:	00a4      	lsls	r4, r4, #2
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003dac:	2507      	movs	r5, #7
 8003dae:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3U];
 8003db0:	6a27      	ldr	r7, [r4, #32]
 8003db2:	9404      	str	r4, [sp, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003db4:	240f      	movs	r4, #15
 8003db6:	401d      	ands	r5, r3
 8003db8:	00ad      	lsls	r5, r5, #2
 8003dba:	40ac      	lsls	r4, r5
 8003dbc:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003dbe:	690c      	ldr	r4, [r1, #16]
 8003dc0:	40ac      	lsls	r4, r5
 8003dc2:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8003dc4:	9c04      	ldr	r4, [sp, #16]
 8003dc6:	6227      	str	r7, [r4, #32]
 8003dc8:	e001      	b.n	8003dce <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dca:	2a03      	cmp	r2, #3
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_GPIO_Init+0x6a>
      temp = GPIOx->MODER;
 8003dce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd0:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd2:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd4:	4025      	ands	r5, r4
 8003dd6:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd8:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dda:	22c0      	movs	r2, #192	; 0xc0
      GPIOx->MODER = temp;
 8003ddc:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dde:	9c00      	ldr	r4, [sp, #0]
 8003de0:	0292      	lsls	r2, r2, #10
 8003de2:	4214      	tst	r4, r2
 8003de4:	d049      	beq.n	8003e7a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	2701      	movs	r7, #1
 8003de8:	4c26      	ldr	r4, [pc, #152]	; (8003e84 <HAL_GPIO_Init+0x158>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003dea:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dec:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003dee:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df0:	433a      	orrs	r2, r7
 8003df2:	6362      	str	r2, [r4, #52]	; 0x34
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8003df6:	089c      	lsrs	r4, r3, #2
 8003df8:	00a4      	lsls	r4, r4, #2
 8003dfa:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003dfc:	220f      	movs	r2, #15
 8003dfe:	00ad      	lsls	r5, r5, #2
 8003e00:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 8003e02:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003e04:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003e06:	22a0      	movs	r2, #160	; 0xa0
 8003e08:	05d2      	lsls	r2, r2, #23
 8003e0a:	4694      	mov	ip, r2
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4560      	cmp	r0, ip
 8003e10:	d009      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_GPIO_Init+0x160>)
 8003e14:	4694      	mov	ip, r2
 8003e16:	003a      	movs	r2, r7
 8003e18:	4560      	cmp	r0, ip
 8003e1a:	d004      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003e1c:	4f1c      	ldr	r7, [pc, #112]	; (8003e90 <HAL_GPIO_Init+0x164>)
 8003e1e:	1892      	adds	r2, r2, r2
 8003e20:	42b8      	cmp	r0, r7
 8003e22:	d000      	beq.n	8003e26 <HAL_GPIO_Init+0xfa>
 8003e24:	9a05      	ldr	r2, [sp, #20]
 8003e26:	40aa      	lsls	r2, r5
 8003e28:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e2a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8003e2e:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8003e30:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8003e32:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e34:	9f00      	ldr	r7, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8003e38:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3a:	03ff      	lsls	r7, r7, #15
 8003e3c:	d401      	bmi.n	8003e42 <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	0035      	movs	r5, r6
 8003e40:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8003e42:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8003e44:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003e46:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e48:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003e4a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e4c:	03bf      	lsls	r7, r7, #14
 8003e4e:	d401      	bmi.n	8003e54 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8003e50:	0035      	movs	r5, r6
 8003e52:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8003e54:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8003e56:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8003e58:	9d01      	ldr	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003e5c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5e:	02ff      	lsls	r7, r7, #11
 8003e60:	d401      	bmi.n	8003e66 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8003e62:	0035      	movs	r5, r6
 8003e64:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8003e66:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8003e68:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8003e6a:	9e01      	ldr	r6, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e6c:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8003e6e:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e70:	02bf      	lsls	r7, r7, #10
 8003e72:	d401      	bmi.n	8003e78 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8003e74:	4025      	ands	r5, r4
 8003e76:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8003e78:	60d6      	str	r6, [r2, #12]
    position++;
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	e761      	b.n	8003d42 <HAL_GPIO_Init+0x16>
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	afffe400 	.word	0xafffe400
 8003e84:	40021000 	.word	0x40021000
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	50000400 	.word	0x50000400
 8003e90:	50000800 	.word	0x50000800
 8003e94:	40010400 	.word	0x40010400

08003e98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e98:	2a00      	cmp	r2, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003e9e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8003ea0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003ea2:	e7fc      	b.n	8003e9e <HAL_GPIO_WritePin+0x6>

08003ea4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ea4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	400b      	ands	r3, r1
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	4391      	bics	r1, r2
 8003eae:	4319      	orrs	r1, r3
 8003eb0:	6181      	str	r1, [r0, #24]
}
 8003eb2:	4770      	bx	lr

08003eb4 <LPTIM_WaitForFlag>:
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
  HAL_StatusTypeDef result = HAL_OK;
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <LPTIM_WaitForFlag+0x34>)
{
 8003eb6:	b570      	push	{r4, r5, r6, lr}
 8003eb8:	0005      	movs	r5, r0
 8003eba:	000c      	movs	r4, r1
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	490b      	ldr	r1, [pc, #44]	; (8003eec <LPTIM_WaitForFlag+0x38>)
 8003ec0:	f7fc f936 	bl	8000130 <__udivsi3>
 8003ec4:	23fa      	movs	r3, #250	; 0xfa
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4343      	muls	r3, r0
    count--;
    if (count == 0UL)
    {
      result = HAL_TIMEOUT;
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003eca:	6829      	ldr	r1, [r5, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003ecc:	2000      	movs	r0, #0
      result = HAL_TIMEOUT;
 8003ece:	2503      	movs	r5, #3
    count--;
 8003ed0:	3b01      	subs	r3, #1
    if (count == 0UL)
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d100      	bne.n	8003ed8 <LPTIM_WaitForFlag+0x24>
      result = HAL_TIMEOUT;
 8003ed6:	0028      	movs	r0, r5
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003ed8:	680a      	ldr	r2, [r1, #0]
 8003eda:	4022      	ands	r2, r4
 8003edc:	42a2      	cmp	r2, r4
 8003ede:	d001      	beq.n	8003ee4 <LPTIM_WaitForFlag+0x30>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f5      	bne.n	8003ed0 <LPTIM_WaitForFlag+0x1c>

  return result;
}
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	20000010 	.word	0x20000010
 8003eec:	00004e20 	.word	0x00004e20

08003ef0 <HAL_LPTIM_Init>:
{
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003ef4:	2001      	movs	r0, #1
  if (hlptim == NULL)
 8003ef6:	2c00      	cmp	r4, #0
 8003ef8:	d042      	beq.n	8003f80 <HAL_LPTIM_Init+0x90>
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003efa:	0025      	movs	r5, r4
 8003efc:	352e      	adds	r5, #46	; 0x2e
 8003efe:	782b      	ldrb	r3, [r5, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d105      	bne.n	8003f12 <HAL_LPTIM_Init+0x22>
    hlptim->Lock = HAL_UNLOCKED;
 8003f06:	0022      	movs	r2, r4
 8003f08:	322d      	adds	r2, #45	; 0x2d
 8003f0a:	7013      	strb	r3, [r2, #0]
    HAL_LPTIM_MspInit(hlptim);
 8003f0c:	0020      	movs	r0, r4
 8003f0e:	f7ff f98d 	bl	800322c <HAL_LPTIM_MspInit>
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003f12:	2302      	movs	r3, #2
  tmpcfgr = hlptim->Instance->CFGR;
 8003f14:	6826      	ldr	r6, [r4, #0]
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003f16:	6861      	ldr	r1, [r4, #4]
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003f18:	702b      	strb	r3, [r5, #0]
  tmpcfgr = hlptim->Instance->CFGR;
 8003f1a:	68f3      	ldr	r3, [r6, #12]
 8003f1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003f1e:	2901      	cmp	r1, #1
 8003f20:	d003      	beq.n	8003f2a <HAL_LPTIM_Init+0x3a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	0412      	lsls	r2, r2, #16
 8003f26:	4290      	cmp	r0, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_LPTIM_Init+0x3e>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003f2a:	221e      	movs	r2, #30
 8003f2c:	4393      	bics	r3, r2
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003f2e:	6962      	ldr	r2, [r4, #20]
 8003f30:	4f17      	ldr	r7, [pc, #92]	; (8003f90 <HAL_LPTIM_Init+0xa0>)
 8003f32:	42ba      	cmp	r2, r7
 8003f34:	d001      	beq.n	8003f3a <HAL_LPTIM_Init+0x4a>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003f36:	4f17      	ldr	r7, [pc, #92]	; (8003f94 <HAL_LPTIM_Init+0xa4>)
 8003f38:	403b      	ands	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003f3a:	4f17      	ldr	r7, [pc, #92]	; (8003f98 <HAL_LPTIM_Init+0xa8>)
 8003f3c:	401f      	ands	r7, r3
              hlptim->Init.UpdateMode      |
 8003f3e:	000b      	movs	r3, r1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003f40:	46bc      	mov	ip, r7
              hlptim->Init.UpdateMode      |
 8003f42:	68a7      	ldr	r7, [r4, #8]
 8003f44:	4303      	orrs	r3, r0
 8003f46:	433b      	orrs	r3, r7
 8003f48:	6a27      	ldr	r7, [r4, #32]
 8003f4a:	433b      	orrs	r3, r7
 8003f4c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003f4e:	433b      	orrs	r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003f50:	4667      	mov	r7, ip
 8003f52:	433b      	orrs	r3, r7
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d114      	bne.n	8003f82 <HAL_LPTIM_Init+0x92>
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003f58:	69e1      	ldr	r1, [r4, #28]
 8003f5a:	6927      	ldr	r7, [r4, #16]
 8003f5c:	4339      	orrs	r1, r7
 8003f5e:	430b      	orrs	r3, r1
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003f60:	2180      	movs	r1, #128	; 0x80
 8003f62:	0409      	lsls	r1, r1, #16
 8003f64:	4288      	cmp	r0, r1
 8003f66:	d00e      	beq.n	8003f86 <HAL_LPTIM_Init+0x96>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003f68:	4909      	ldr	r1, [pc, #36]	; (8003f90 <HAL_LPTIM_Init+0xa0>)
 8003f6a:	428a      	cmp	r2, r1
 8003f6c:	d004      	beq.n	8003f78 <HAL_LPTIM_Init+0x88>
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003f6e:	69a1      	ldr	r1, [r4, #24]
 8003f70:	430a      	orrs	r2, r1
                hlptim->Init.Trigger.ActiveEdge |
 8003f72:	69e1      	ldr	r1, [r4, #28]
 8003f74:	430a      	orrs	r2, r1
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003f76:	4313      	orrs	r3, r2
  hlptim->Instance->CFGR = tmpcfgr;
 8003f78:	60f3      	str	r3, [r6, #12]
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003f7a:	2301      	movs	r3, #1
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003f7e:	702b      	strb	r3, [r5, #0]
}
 8003f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003f82:	2901      	cmp	r1, #1
 8003f84:	d1ec      	bne.n	8003f60 <HAL_LPTIM_Init+0x70>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003f86:	68e1      	ldr	r1, [r4, #12]
 8003f88:	6920      	ldr	r0, [r4, #16]
 8003f8a:	4301      	orrs	r1, r0
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	e7eb      	b.n	8003f68 <HAL_LPTIM_Init+0x78>
 8003f90:	0000ffff 	.word	0x0000ffff
 8003f94:	ffff1f3f 	.word	0xffff1f3f
 8003f98:	ff19f1fe 	.word	0xff19f1fe

08003f9c <HAL_LPTIM_CompareMatchCallback>:
 8003f9c:	4770      	bx	lr

08003f9e <HAL_LPTIM_TriggerCallback>:
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_LPTIM_CompareWriteCallback>:
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_LPTIM_AutoReloadWriteCallback>:
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_LPTIM_DirectionUpCallback>:
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_LPTIM_DirectionDownCallback>:
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_LPTIM_IRQHandler>:
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	6803      	ldr	r3, [r0, #0]
{
 8003fac:	b510      	push	{r4, lr}
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003fae:	6819      	ldr	r1, [r3, #0]
{
 8003fb0:	0004      	movs	r4, r0
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003fb2:	4211      	tst	r1, r2
 8003fb4:	d005      	beq.n	8003fc2 <HAL_LPTIM_IRQHandler+0x1a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003fb6:	6899      	ldr	r1, [r3, #8]
 8003fb8:	4211      	tst	r1, r2
 8003fba:	d002      	beq.n	8003fc2 <HAL_LPTIM_IRQHandler+0x1a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003fbc:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003fbe:	f7ff ffed 	bl	8003f9c <HAL_LPTIM_CompareMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	4211      	tst	r1, r2
 8003fca:	d006      	beq.n	8003fda <HAL_LPTIM_IRQHandler+0x32>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	4211      	tst	r1, r2
 8003fd0:	d003      	beq.n	8003fda <HAL_LPTIM_IRQHandler+0x32>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003fd2:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f7ff f9bf 	bl	8003358 <HAL_LPTIM_AutoReloadMatchCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003fda:	2204      	movs	r2, #4
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	6819      	ldr	r1, [r3, #0]
 8003fe0:	4211      	tst	r1, r2
 8003fe2:	d006      	beq.n	8003ff2 <HAL_LPTIM_IRQHandler+0x4a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	4211      	tst	r1, r2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_LPTIM_IRQHandler+0x4a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003fea:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_TriggerCallback(hlptim);
 8003fec:	0020      	movs	r0, r4
 8003fee:	f7ff ffd6 	bl	8003f9e <HAL_LPTIM_TriggerCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003ff2:	2208      	movs	r2, #8
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	4211      	tst	r1, r2
 8003ffa:	d006      	beq.n	800400a <HAL_LPTIM_IRQHandler+0x62>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	4211      	tst	r1, r2
 8004000:	d003      	beq.n	800400a <HAL_LPTIM_IRQHandler+0x62>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004002:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004004:	0020      	movs	r0, r4
 8004006:	f7ff ffcb 	bl	8003fa0 <HAL_LPTIM_CompareWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800400a:	2210      	movs	r2, #16
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	4211      	tst	r1, r2
 8004012:	d006      	beq.n	8004022 <HAL_LPTIM_IRQHandler+0x7a>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	4211      	tst	r1, r2
 8004018:	d003      	beq.n	8004022 <HAL_LPTIM_IRQHandler+0x7a>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800401a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800401c:	0020      	movs	r0, r4
 800401e:	f7ff ffc0 	bl	8003fa2 <HAL_LPTIM_AutoReloadWriteCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004022:	2220      	movs	r2, #32
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	4211      	tst	r1, r2
 800402a:	d006      	beq.n	800403a <HAL_LPTIM_IRQHandler+0x92>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800402c:	6899      	ldr	r1, [r3, #8]
 800402e:	4211      	tst	r1, r2
 8004030:	d003      	beq.n	800403a <HAL_LPTIM_IRQHandler+0x92>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004032:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004034:	0020      	movs	r0, r4
 8004036:	f7ff ffb5 	bl	8003fa4 <HAL_LPTIM_DirectionUpCallback>
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	4211      	tst	r1, r2
 8004042:	d006      	beq.n	8004052 <HAL_LPTIM_IRQHandler+0xaa>
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	4211      	tst	r1, r2
 8004048:	d003      	beq.n	8004052 <HAL_LPTIM_IRQHandler+0xaa>
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800404a:	605a      	str	r2, [r3, #4]
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800404c:	0020      	movs	r0, r4
 800404e:	f7ff ffaa 	bl	8003fa6 <HAL_LPTIM_DirectionDownCallback>
}
 8004052:	bd10      	pop	{r4, pc}

08004054 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	0004      	movs	r4, r0
 8004058:	b085      	sub	sp, #20
 800405a:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800405c:	4e33      	ldr	r6, [pc, #204]	; (800412c <LPTIM_Disable+0xd8>)
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	42b3      	cmp	r3, r6
 8004062:	d160      	bne.n	8004126 <LPTIM_Disable+0xd2>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004064:	4a32      	ldr	r2, [pc, #200]	; (8004130 <LPTIM_Disable+0xdc>)
 8004066:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8004068:	22c0      	movs	r2, #192	; 0xc0
 800406a:	0312      	lsls	r2, r2, #12
 800406c:	4015      	ands	r5, r2
 800406e:	9501      	str	r5, [sp, #4]
    default:
      break;
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	9202      	str	r2, [sp, #8]
  tmpCFGR = hlptim->Instance->CFGR;
 8004074:	68da      	ldr	r2, [r3, #12]
  tmpCMP = hlptim->Instance->CMP;
 8004076:	6958      	ldr	r0, [r3, #20]
  tmpCFGR = hlptim->Instance->CFGR;
 8004078:	9203      	str	r2, [sp, #12]
  tmpARR = hlptim->Instance->ARR;
 800407a:	699f      	ldr	r7, [r3, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800407c:	42b3      	cmp	r3, r6
 800407e:	d10b      	bne.n	8004098 <LPTIM_Disable+0x44>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004080:	492b      	ldr	r1, [pc, #172]	; (8004130 <LPTIM_Disable+0xdc>)
 8004082:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004084:	4694      	mov	ip, r2
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	4665      	mov	r5, ip
 800408a:	0612      	lsls	r2, r2, #24
 800408c:	432a      	orrs	r2, r5
 800408e:	628a      	str	r2, [r1, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004090:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004092:	0052      	lsls	r2, r2, #1
 8004094:	0852      	lsrs	r2, r2, #1
 8004096:	628a      	str	r2, [r1, #40]	; 0x28
    default:
      break;
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004098:	0002      	movs	r2, r0
 800409a:	433a      	orrs	r2, r7
 800409c:	d037      	beq.n	800410e <LPTIM_Disable+0xba>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800409e:	42b3      	cmp	r3, r6
 80040a0:	d104      	bne.n	80040ac <LPTIM_Disable+0x58>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80040a2:	4923      	ldr	r1, [pc, #140]	; (8004130 <LPTIM_Disable+0xdc>)
 80040a4:	4d23      	ldr	r5, [pc, #140]	; (8004134 <LPTIM_Disable+0xe0>)
 80040a6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80040a8:	402a      	ands	r2, r5
 80040aa:	64ca      	str	r2, [r1, #76]	; 0x4c
        break;
      default:
        break;
    }

    if (tmpCMP != 0UL)
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d010      	beq.n	80040d2 <LPTIM_Disable+0x7e>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80040b0:	2201      	movs	r2, #1
 80040b2:	6919      	ldr	r1, [r3, #16]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80040b8:	2108      	movs	r1, #8
      hlptim->Instance->CMP = tmpCMP;
 80040ba:	6158      	str	r0, [r3, #20]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80040bc:	0020      	movs	r0, r4
 80040be:	f7ff fef9 	bl	8003eb4 <LPTIM_WaitForFlag>
 80040c2:	2803      	cmp	r0, #3
 80040c4:	d102      	bne.n	80040cc <LPTIM_Disable+0x78>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80040c6:	0023      	movs	r3, r4
 80040c8:	332e      	adds	r3, #46	; 0x2e
 80040ca:	7018      	strb	r0, [r3, #0]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80040cc:	2208      	movs	r2, #8
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80040d2:	2f00      	cmp	r7, #0
 80040d4:	d011      	beq.n	80040fa <LPTIM_Disable+0xa6>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80040d6:	2201      	movs	r2, #1
 80040d8:	6823      	ldr	r3, [r4, #0]
      hlptim->Instance->ARR = tmpARR;

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80040da:	0020      	movs	r0, r4
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	430a      	orrs	r2, r1
 80040e0:	611a      	str	r2, [r3, #16]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80040e2:	2110      	movs	r1, #16
      hlptim->Instance->ARR = tmpARR;
 80040e4:	619f      	str	r7, [r3, #24]
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80040e6:	f7ff fee5 	bl	8003eb4 <LPTIM_WaitForFlag>
 80040ea:	2803      	cmp	r0, #3
 80040ec:	d102      	bne.n	80040f4 <LPTIM_Disable+0xa0>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80040ee:	0023      	movs	r3, r4
 80040f0:	332e      	adds	r3, #46	; 0x2e
 80040f2:	7018      	strb	r0, [r3, #0]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80040f4:	2210      	movs	r2, #16
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	42b3      	cmp	r3, r6
 80040fe:	d106      	bne.n	800410e <LPTIM_Disable+0xba>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004100:	4a0b      	ldr	r2, [pc, #44]	; (8004130 <LPTIM_Disable+0xdc>)
 8004102:	490c      	ldr	r1, [pc, #48]	; (8004134 <LPTIM_Disable+0xe0>)
 8004104:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004106:	9d01      	ldr	r5, [sp, #4]
 8004108:	400b      	ands	r3, r1
 800410a:	431d      	orrs	r5, r3
 800410c:	64d5      	str	r5, [r2, #76]	; 0x4c
        break;
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800410e:	2101      	movs	r1, #1
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	438a      	bics	r2, r1
 8004116:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004118:	9a02      	ldr	r2, [sp, #8]
 800411a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800411c:	9a03      	ldr	r2, [sp, #12]
 800411e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004120:	b662      	cpsie	i

  __enable_irq();
}
 8004122:	b005      	add	sp, #20
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint32_t tmpclksource = 0;
 8004126:	2200      	movs	r2, #0
 8004128:	9201      	str	r2, [sp, #4]
 800412a:	e7a1      	b.n	8004070 <LPTIM_Disable+0x1c>
 800412c:	40007c00 	.word	0x40007c00
 8004130:	40021000 	.word	0x40021000
 8004134:	fff3ffff 	.word	0xfff3ffff

08004138 <HAL_LPTIM_Counter_Start_IT>:
{
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800413a:	0005      	movs	r5, r0
 800413c:	2302      	movs	r3, #2
 800413e:	352e      	adds	r5, #46	; 0x2e
 8004140:	702b      	strb	r3, [r5, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004142:	2380      	movs	r3, #128	; 0x80
{
 8004144:	0007      	movs	r7, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_LPTIM_Counter_Start_IT+0x80>)
 8004148:	059b      	lsls	r3, r3, #22
 800414a:	6810      	ldr	r0, [r2, #0]
 800414c:	4303      	orrs	r3, r0
 800414e:	6013      	str	r3, [r2, #0]
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2a01      	cmp	r2, #1
 8004156:	d008      	beq.n	800416a <HAL_LPTIM_Counter_Start_IT+0x32>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004158:	2280      	movs	r2, #128	; 0x80
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	0412      	lsls	r2, r2, #16
 800415e:	4290      	cmp	r0, r2
 8004160:	d103      	bne.n	800416a <HAL_LPTIM_Counter_Start_IT+0x32>
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4815      	ldr	r0, [pc, #84]	; (80041bc <HAL_LPTIM_Counter_Start_IT+0x84>)
 8004166:	4002      	ands	r2, r0
 8004168:	60da      	str	r2, [r3, #12]
  __HAL_LPTIM_ENABLE(hlptim);
 800416a:	2601      	movs	r6, #1
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800416c:	2410      	movs	r4, #16
  __HAL_LPTIM_ENABLE(hlptim);
 800416e:	691a      	ldr	r2, [r3, #16]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004170:	0038      	movs	r0, r7
  __HAL_LPTIM_ENABLE(hlptim);
 8004172:	4332      	orrs	r2, r6
 8004174:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004176:	605c      	str	r4, [r3, #4]
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004178:	6199      	str	r1, [r3, #24]
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800417a:	0021      	movs	r1, r4
 800417c:	f7ff fe9a 	bl	8003eb4 <LPTIM_WaitForFlag>
 8004180:	2803      	cmp	r0, #3
 8004182:	d101      	bne.n	8004188 <HAL_LPTIM_Counter_Start_IT+0x50>
    return HAL_TIMEOUT;
 8004184:	2003      	movs	r0, #3
}
 8004186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LPTIM_DISABLE(hlptim);
 8004188:	0038      	movs	r0, r7
 800418a:	f7ff ff63 	bl	8004054 <LPTIM_Disable>
  return hlptim->State;
 800418e:	782b      	ldrb	r3, [r5, #0]
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004190:	2b03      	cmp	r3, #3
 8004192:	d0f7      	beq.n	8004184 <HAL_LPTIM_Counter_Start_IT+0x4c>
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004194:	683b      	ldr	r3, [r7, #0]
  return HAL_OK;
 8004196:	2000      	movs	r0, #0
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4314      	orrs	r4, r2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800419c:	2202      	movs	r2, #2
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800419e:	609c      	str	r4, [r3, #8]
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_ENABLE(hlptim);
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	4332      	orrs	r2, r6
 80041aa:	611a      	str	r2, [r3, #16]
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80041ac:	2204      	movs	r2, #4
 80041ae:	6919      	ldr	r1, [r3, #16]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	611a      	str	r2, [r3, #16]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80041b4:	702e      	strb	r6, [r5, #0]
  return HAL_OK;
 80041b6:	e7e6      	b.n	8004186 <HAL_LPTIM_Counter_Start_IT+0x4e>
 80041b8:	40010400 	.word	0x40010400
 80041bc:	fffff1ff 	.word	0xfffff1ff

080041c0 <HAL_LPTIM_Counter_Stop_IT>:
{
 80041c0:	b570      	push	{r4, r5, r6, lr}
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80041c2:	0004      	movs	r4, r0
 80041c4:	2502      	movs	r5, #2
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80041c6:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <HAL_LPTIM_Counter_Stop_IT+0x3c>)
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80041c8:	342e      	adds	r4, #46	; 0x2e
 80041ca:	7025      	strb	r5, [r4, #0]
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	490c      	ldr	r1, [pc, #48]	; (8004200 <HAL_LPTIM_Counter_Stop_IT+0x40>)
{
 80041d0:	0006      	movs	r6, r0
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80041d2:	400b      	ands	r3, r1
 80041d4:	6013      	str	r3, [r2, #0]
  __HAL_LPTIM_DISABLE(hlptim);
 80041d6:	f7ff ff3d 	bl	8004054 <LPTIM_Disable>
  return hlptim->State;
 80041da:	7823      	ldrb	r3, [r4, #0]
 80041dc:	b2db      	uxtb	r3, r3
    return HAL_TIMEOUT;
 80041de:	0018      	movs	r0, r3
  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d00a      	beq.n	80041fa <HAL_LPTIM_Counter_Stop_IT+0x3a>
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80041e4:	2110      	movs	r1, #16
 80041e6:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 80041e8:	2000      	movs	r0, #0
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	438a      	bics	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	43aa      	bics	r2, r5
 80041f4:	609a      	str	r2, [r3, #8]
  hlptim->State = HAL_LPTIM_STATE_READY;
 80041f6:	2301      	movs	r3, #1
 80041f8:	7023      	strb	r3, [r4, #0]
}
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	40010400 	.word	0x40010400
 8004200:	dfffffff 	.word	0xdfffffff

08004204 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004204:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8004208:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800420a:	68d4      	ldr	r4, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800420c:	4023      	ands	r3, r4
 800420e:	2b08      	cmp	r3, #8
 8004210:	d034      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x78>
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d00c      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x2c>
 8004216:	2b04      	cmp	r3, #4
 8004218:	d128      	bne.n	800426c <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800421a:	6810      	ldr	r0, [r2, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004220:	4243      	negs	r3, r0
 8004222:	4158      	adcs	r0, r3
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_RCC_GetSysClockFreq+0x80>)
 8004226:	4240      	negs	r0, r0
 8004228:	4018      	ands	r0, r3
 800422a:	4b17      	ldr	r3, [pc, #92]	; (8004288 <HAL_RCC_GetSysClockFreq+0x84>)
 800422c:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800422e:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004230:	02a3      	lsls	r3, r4, #10
 8004232:	4916      	ldr	r1, [pc, #88]	; (800428c <HAL_RCC_GetSysClockFreq+0x88>)
 8004234:	0f1b      	lsrs	r3, r3, #28
 8004236:	5cc8      	ldrb	r0, [r1, r3]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	68d5      	ldr	r5, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800423c:	0224      	lsls	r4, r4, #8
 800423e:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004240:	025b      	lsls	r3, r3, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004242:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004244:	401d      	ands	r5, r3
 8004246:	d009      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_RCC_GetSysClockFreq+0x8c>)
 800424a:	2300      	movs	r3, #0
 800424c:	2100      	movs	r1, #0
 800424e:	f7fc f893 	bl	8000378 <__aeabi_lmul>
 8004252:	0022      	movs	r2, r4
 8004254:	2300      	movs	r3, #0
 8004256:	f7fc f86f 	bl	8000338 <__aeabi_uldivmod>
 800425a:	e7e8      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800425c:	2310      	movs	r3, #16
 800425e:	6816      	ldr	r6, [r2, #0]
 8004260:	401e      	ands	r6, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004264:	4a08      	ldr	r2, [pc, #32]	; (8004288 <HAL_RCC_GetSysClockFreq+0x84>)
 8004266:	e7f0      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004268:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <HAL_RCC_GetSysClockFreq+0x90>)
 800426a:	e7ee      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800426c:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800426e:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004270:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004276:	3301      	adds	r3, #1
 8004278:	4098      	lsls	r0, r3
 800427a:	e7d8      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 800427c:	4804      	ldr	r0, [pc, #16]	; (8004290 <HAL_RCC_GetSysClockFreq+0x8c>)
 800427e:	e7d6      	b.n	800422e <HAL_RCC_GetSysClockFreq+0x2a>
 8004280:	40021000 	.word	0x40021000
 8004284:	00b71b00 	.word	0x00b71b00
 8004288:	003d0900 	.word	0x003d0900
 800428c:	08006e13 	.word	0x08006e13
 8004290:	007a1200 	.word	0x007a1200
 8004294:	00f42400 	.word	0x00f42400

08004298 <HAL_RCC_OscConfig>:
{
 8004298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429a:	0005      	movs	r5, r0
 800429c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800429e:	2800      	cmp	r0, #0
 80042a0:	d102      	bne.n	80042a8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80042a2:	2001      	movs	r0, #1
}
 80042a4:	b007      	add	sp, #28
 80042a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a8:	230c      	movs	r3, #12
 80042aa:	4cc1      	ldr	r4, [pc, #772]	; (80045b0 <HAL_RCC_OscConfig+0x318>)
 80042ac:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ae:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	025b      	lsls	r3, r3, #9
 80042b6:	401a      	ands	r2, r3
 80042b8:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	6802      	ldr	r2, [r0, #0]
 80042bc:	07d2      	lsls	r2, r2, #31
 80042be:	d43e      	bmi.n	800433e <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	079b      	lsls	r3, r3, #30
 80042c4:	d500      	bpl.n	80042c8 <HAL_RCC_OscConfig+0x30>
 80042c6:	e084      	b.n	80043d2 <HAL_RCC_OscConfig+0x13a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	06db      	lsls	r3, r3, #27
 80042cc:	d529      	bpl.n	8004322 <HAL_RCC_OscConfig+0x8a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d000      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3c>
 80042d2:	e0df      	b.n	8004494 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	059b      	lsls	r3, r3, #22
 80042d8:	d502      	bpl.n	80042e0 <HAL_RCC_OscConfig+0x48>
 80042da:	69ab      	ldr	r3, [r5, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0e0      	beq.n	80042a2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042e0:	6862      	ldr	r2, [r4, #4]
 80042e2:	49b4      	ldr	r1, [pc, #720]	; (80045b4 <HAL_RCC_OscConfig+0x31c>)
 80042e4:	6a2b      	ldr	r3, [r5, #32]
 80042e6:	400a      	ands	r2, r1
 80042e8:	431a      	orrs	r2, r3
 80042ea:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ec:	6861      	ldr	r1, [r4, #4]
 80042ee:	69ea      	ldr	r2, [r5, #28]
 80042f0:	0209      	lsls	r1, r1, #8
 80042f2:	0a09      	lsrs	r1, r1, #8
 80042f4:	0612      	lsls	r2, r2, #24
 80042f6:	430a      	orrs	r2, r1
 80042f8:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042fa:	2280      	movs	r2, #128	; 0x80
 80042fc:	0b5b      	lsrs	r3, r3, #13
 80042fe:	3301      	adds	r3, #1
 8004300:	0212      	lsls	r2, r2, #8
 8004302:	409a      	lsls	r2, r3
 8004304:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004306:	68e1      	ldr	r1, [r4, #12]
 8004308:	060a      	lsls	r2, r1, #24
 800430a:	49ab      	ldr	r1, [pc, #684]	; (80045b8 <HAL_RCC_OscConfig+0x320>)
 800430c:	0f12      	lsrs	r2, r2, #28
 800430e:	5c8a      	ldrb	r2, [r1, r2]
 8004310:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004312:	4aaa      	ldr	r2, [pc, #680]	; (80045bc <HAL_RCC_OscConfig+0x324>)
 8004314:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8004316:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <HAL_RCC_OscConfig+0x328>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f7ff fc15 	bl	8003b48 <HAL_InitTick>
        if(status != HAL_OK)
 800431e:	2800      	cmp	r0, #0
 8004320:	d1c0      	bne.n	80042a4 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004322:	682b      	ldr	r3, [r5, #0]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	d500      	bpl.n	800432a <HAL_RCC_OscConfig+0x92>
 8004328:	e0eb      	b.n	8004502 <HAL_RCC_OscConfig+0x26a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	075b      	lsls	r3, r3, #29
 800432e:	d500      	bpl.n	8004332 <HAL_RCC_OscConfig+0x9a>
 8004330:	e10d      	b.n	800454e <HAL_RCC_OscConfig+0x2b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004334:	2b00      	cmp	r3, #0
 8004336:	d000      	beq.n	800433a <HAL_RCC_OscConfig+0xa2>
 8004338:	e194      	b.n	8004664 <HAL_RCC_OscConfig+0x3cc>
  return HAL_OK;
 800433a:	2000      	movs	r0, #0
 800433c:	e7b2      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800433e:	2e08      	cmp	r6, #8
 8004340:	d004      	beq.n	800434c <HAL_RCC_OscConfig+0xb4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004342:	2e0c      	cmp	r6, #12
 8004344:	d109      	bne.n	800435a <HAL_RCC_OscConfig+0xc2>
 8004346:	9a01      	ldr	r2, [sp, #4]
 8004348:	2a00      	cmp	r2, #0
 800434a:	d006      	beq.n	800435a <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	039b      	lsls	r3, r3, #14
 8004350:	d5b6      	bpl.n	80042c0 <HAL_RCC_OscConfig+0x28>
 8004352:	686b      	ldr	r3, [r5, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1b3      	bne.n	80042c0 <HAL_RCC_OscConfig+0x28>
 8004358:	e7a3      	b.n	80042a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	686a      	ldr	r2, [r5, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	d111      	bne.n	8004384 <HAL_RCC_OscConfig+0xec>
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004366:	f7ff fc33 	bl	8003bd0 <HAL_GetTick>
 800436a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	0292      	lsls	r2, r2, #10
 8004372:	4213      	tst	r3, r2
 8004374:	d1a4      	bne.n	80042c0 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004376:	f7ff fc2b 	bl	8003bd0 <HAL_GetTick>
 800437a:	1bc0      	subs	r0, r0, r7
 800437c:	2864      	cmp	r0, #100	; 0x64
 800437e:	d9f5      	bls.n	800436c <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8004380:	2003      	movs	r0, #3
 8004382:	e78f      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	21a0      	movs	r1, #160	; 0xa0
 8004386:	02c9      	lsls	r1, r1, #11
 8004388:	428a      	cmp	r2, r1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0x100>
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	6821      	ldr	r1, [r4, #0]
 8004390:	02d2      	lsls	r2, r2, #11
 8004392:	430a      	orrs	r2, r1
 8004394:	6022      	str	r2, [r4, #0]
 8004396:	e7e3      	b.n	8004360 <HAL_RCC_OscConfig+0xc8>
 8004398:	6821      	ldr	r1, [r4, #0]
 800439a:	488a      	ldr	r0, [pc, #552]	; (80045c4 <HAL_RCC_OscConfig+0x32c>)
 800439c:	4001      	ands	r1, r0
 800439e:	6021      	str	r1, [r4, #0]
 80043a0:	6821      	ldr	r1, [r4, #0]
 80043a2:	400b      	ands	r3, r1
 80043a4:	9305      	str	r3, [sp, #20]
 80043a6:	9b05      	ldr	r3, [sp, #20]
 80043a8:	4987      	ldr	r1, [pc, #540]	; (80045c8 <HAL_RCC_OscConfig+0x330>)
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	400b      	ands	r3, r1
 80043ae:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b0:	2a00      	cmp	r2, #0
 80043b2:	d1d8      	bne.n	8004366 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 80043b4:	f7ff fc0c 	bl	8003bd0 <HAL_GetTick>
 80043b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	0292      	lsls	r2, r2, #10
 80043c0:	4213      	tst	r3, r2
 80043c2:	d100      	bne.n	80043c6 <HAL_RCC_OscConfig+0x12e>
 80043c4:	e77c      	b.n	80042c0 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c6:	f7ff fc03 	bl	8003bd0 <HAL_GetTick>
 80043ca:	1bc0      	subs	r0, r0, r7
 80043cc:	2864      	cmp	r0, #100	; 0x64
 80043ce:	d9f4      	bls.n	80043ba <HAL_RCC_OscConfig+0x122>
 80043d0:	e7d6      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80043d2:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80043d4:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80043d6:	4213      	tst	r3, r2
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_OscConfig+0x14a>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80043da:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80043dc:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80043de:	4311      	orrs	r1, r2
 80043e0:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043e2:	2e04      	cmp	r6, #4
 80043e4:	d004      	beq.n	80043f0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043e6:	2e0c      	cmp	r6, #12
 80043e8:	d126      	bne.n	8004438 <HAL_RCC_OscConfig+0x1a0>
 80043ea:	9a01      	ldr	r2, [sp, #4]
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	d123      	bne.n	8004438 <HAL_RCC_OscConfig+0x1a0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80043f0:	6822      	ldr	r2, [r4, #0]
 80043f2:	0752      	lsls	r2, r2, #29
 80043f4:	d502      	bpl.n	80043fc <HAL_RCC_OscConfig+0x164>
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d100      	bne.n	80043fc <HAL_RCC_OscConfig+0x164>
 80043fa:	e752      	b.n	80042a2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	6861      	ldr	r1, [r4, #4]
 80043fe:	692a      	ldr	r2, [r5, #16]
 8004400:	4872      	ldr	r0, [pc, #456]	; (80045cc <HAL_RCC_OscConfig+0x334>)
 8004402:	0212      	lsls	r2, r2, #8
 8004404:	4001      	ands	r1, r0
 8004406:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004408:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800440c:	6822      	ldr	r2, [r4, #0]
 800440e:	438a      	bics	r2, r1
 8004410:	4313      	orrs	r3, r2
 8004412:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004414:	f7ff fef6 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 8004418:	68e3      	ldr	r3, [r4, #12]
 800441a:	4a67      	ldr	r2, [pc, #412]	; (80045b8 <HAL_RCC_OscConfig+0x320>)
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	0f1b      	lsrs	r3, r3, #28
 8004420:	5cd3      	ldrb	r3, [r2, r3]
 8004422:	40d8      	lsrs	r0, r3
 8004424:	4b65      	ldr	r3, [pc, #404]	; (80045bc <HAL_RCC_OscConfig+0x324>)
 8004426:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8004428:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x328>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	f7ff fb8c 	bl	8003b48 <HAL_InitTick>
      if(status != HAL_OK)
 8004430:	2800      	cmp	r0, #0
 8004432:	d100      	bne.n	8004436 <HAL_RCC_OscConfig+0x19e>
 8004434:	e748      	b.n	80042c8 <HAL_RCC_OscConfig+0x30>
 8004436:	e735      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8004438:	2b00      	cmp	r3, #0
 800443a:	d019      	beq.n	8004470 <HAL_RCC_OscConfig+0x1d8>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800443c:	2109      	movs	r1, #9
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	438a      	bics	r2, r1
 8004442:	4313      	orrs	r3, r2
 8004444:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004446:	f7ff fbc3 	bl	8003bd0 <HAL_GetTick>
 800444a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800444c:	2204      	movs	r2, #4
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	4213      	tst	r3, r2
 8004452:	d007      	beq.n	8004464 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	6862      	ldr	r2, [r4, #4]
 8004456:	692b      	ldr	r3, [r5, #16]
 8004458:	495c      	ldr	r1, [pc, #368]	; (80045cc <HAL_RCC_OscConfig+0x334>)
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	400a      	ands	r2, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	e731      	b.n	80042c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004464:	f7ff fbb4 	bl	8003bd0 <HAL_GetTick>
 8004468:	1bc0      	subs	r0, r0, r7
 800446a:	2802      	cmp	r0, #2
 800446c:	d9ee      	bls.n	800444c <HAL_RCC_OscConfig+0x1b4>
 800446e:	e787      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 8004470:	2201      	movs	r2, #1
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	4393      	bics	r3, r2
 8004476:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004478:	f7ff fbaa 	bl	8003bd0 <HAL_GetTick>
 800447c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800447e:	2204      	movs	r2, #4
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	4213      	tst	r3, r2
 8004484:	d100      	bne.n	8004488 <HAL_RCC_OscConfig+0x1f0>
 8004486:	e71f      	b.n	80042c8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004488:	f7ff fba2 	bl	8003bd0 <HAL_GetTick>
 800448c:	1bc0      	subs	r0, r0, r7
 800448e:	2802      	cmp	r0, #2
 8004490:	d9f5      	bls.n	800447e <HAL_RCC_OscConfig+0x1e6>
 8004492:	e775      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004494:	69ab      	ldr	r3, [r5, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d020      	beq.n	80044dc <HAL_RCC_OscConfig+0x244>
        __HAL_RCC_MSI_ENABLE();
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044a4:	f7ff fb94 	bl	8003bd0 <HAL_GetTick>
 80044a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	0092      	lsls	r2, r2, #2
 80044b0:	4213      	tst	r3, r2
 80044b2:	d00d      	beq.n	80044d0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	4a3f      	ldr	r2, [pc, #252]	; (80045b4 <HAL_RCC_OscConfig+0x31c>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	6a2a      	ldr	r2, [r5, #32]
 80044bc:	4313      	orrs	r3, r2
 80044be:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c0:	6862      	ldr	r2, [r4, #4]
 80044c2:	69eb      	ldr	r3, [r5, #28]
 80044c4:	0212      	lsls	r2, r2, #8
 80044c6:	061b      	lsls	r3, r3, #24
 80044c8:	0a12      	lsrs	r2, r2, #8
 80044ca:	4313      	orrs	r3, r2
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	e728      	b.n	8004322 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044d0:	f7ff fb7e 	bl	8003bd0 <HAL_GetTick>
 80044d4:	1bc0      	subs	r0, r0, r7
 80044d6:	2802      	cmp	r0, #2
 80044d8:	d9e7      	bls.n	80044aa <HAL_RCC_OscConfig+0x212>
 80044da:	e751      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <HAL_RCC_OscConfig+0x338>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044e4:	f7ff fb74 	bl	8003bd0 <HAL_GetTick>
 80044e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	0092      	lsls	r2, r2, #2
 80044f0:	4213      	tst	r3, r2
 80044f2:	d100      	bne.n	80044f6 <HAL_RCC_OscConfig+0x25e>
 80044f4:	e715      	b.n	8004322 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044f6:	f7ff fb6b 	bl	8003bd0 <HAL_GetTick>
 80044fa:	1bc0      	subs	r0, r0, r7
 80044fc:	2802      	cmp	r0, #2
 80044fe:	d9f4      	bls.n	80044ea <HAL_RCC_OscConfig+0x252>
 8004500:	e73e      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004502:	696a      	ldr	r2, [r5, #20]
 8004504:	2301      	movs	r3, #1
 8004506:	2a00      	cmp	r2, #0
 8004508:	d010      	beq.n	800452c <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 800450a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800450c:	4313      	orrs	r3, r2
 800450e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004510:	f7ff fb5e 	bl	8003bd0 <HAL_GetTick>
 8004514:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004516:	2202      	movs	r2, #2
 8004518:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800451a:	4213      	tst	r3, r2
 800451c:	d000      	beq.n	8004520 <HAL_RCC_OscConfig+0x288>
 800451e:	e704      	b.n	800432a <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004520:	f7ff fb56 	bl	8003bd0 <HAL_GetTick>
 8004524:	1bc0      	subs	r0, r0, r7
 8004526:	2802      	cmp	r0, #2
 8004528:	d9f5      	bls.n	8004516 <HAL_RCC_OscConfig+0x27e>
 800452a:	e729      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 800452c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800452e:	439a      	bics	r2, r3
 8004530:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004532:	f7ff fb4d 	bl	8003bd0 <HAL_GetTick>
 8004536:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004538:	2202      	movs	r2, #2
 800453a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800453c:	4213      	tst	r3, r2
 800453e:	d100      	bne.n	8004542 <HAL_RCC_OscConfig+0x2aa>
 8004540:	e6f3      	b.n	800432a <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004542:	f7ff fb45 	bl	8003bd0 <HAL_GetTick>
 8004546:	1bc0      	subs	r0, r0, r7
 8004548:	2802      	cmp	r0, #2
 800454a:	d9f5      	bls.n	8004538 <HAL_RCC_OscConfig+0x2a0>
 800454c:	e718      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004550:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004554:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004556:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004558:	421a      	tst	r2, r3
 800455a:	d104      	bne.n	8004566 <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800455e:	4313      	orrs	r3, r2
 8004560:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004562:	2301      	movs	r3, #1
 8004564:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004566:	2280      	movs	r2, #128	; 0x80
 8004568:	4f1a      	ldr	r7, [pc, #104]	; (80045d4 <HAL_RCC_OscConfig+0x33c>)
 800456a:	0052      	lsls	r2, r2, #1
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4213      	tst	r3, r2
 8004570:	d008      	beq.n	8004584 <HAL_RCC_OscConfig+0x2ec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004572:	2280      	movs	r2, #128	; 0x80
 8004574:	68ab      	ldr	r3, [r5, #8]
 8004576:	0052      	lsls	r2, r2, #1
 8004578:	4293      	cmp	r3, r2
 800457a:	d12d      	bne.n	80045d8 <HAL_RCC_OscConfig+0x340>
 800457c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800457e:	4313      	orrs	r3, r2
 8004580:	6523      	str	r3, [r4, #80]	; 0x50
 8004582:	e04e      	b.n	8004622 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	0052      	lsls	r2, r2, #1
 800458a:	4313      	orrs	r3, r2
 800458c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800458e:	f7ff fb1f 	bl	8003bd0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8004596:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	9303      	str	r3, [sp, #12]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	9a03      	ldr	r2, [sp, #12]
 800459e:	4213      	tst	r3, r2
 80045a0:	d1e7      	bne.n	8004572 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a2:	f7ff fb15 	bl	8003bd0 <HAL_GetTick>
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	1ac0      	subs	r0, r0, r3
 80045aa:	2864      	cmp	r0, #100	; 0x64
 80045ac:	d9f5      	bls.n	800459a <HAL_RCC_OscConfig+0x302>
 80045ae:	e6e7      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
 80045b0:	40021000 	.word	0x40021000
 80045b4:	ffff1fff 	.word	0xffff1fff
 80045b8:	08006dfb 	.word	0x08006dfb
 80045bc:	20000010 	.word	0x20000010
 80045c0:	20000018 	.word	0x20000018
 80045c4:	fffeffff 	.word	0xfffeffff
 80045c8:	fffbffff 	.word	0xfffbffff
 80045cc:	ffffe0ff 	.word	0xffffe0ff
 80045d0:	fffffeff 	.word	0xfffffeff
 80045d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x372>
 80045dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045de:	4a53      	ldr	r2, [pc, #332]	; (800472c <HAL_RCC_OscConfig+0x494>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	6523      	str	r3, [r4, #80]	; 0x50
 80045e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045e6:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_RCC_OscConfig+0x498>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80045ec:	f7ff faf0 	bl	8003bd0 <HAL_GetTick>
 80045f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80045f6:	0092      	lsls	r2, r2, #2
 80045f8:	4213      	tst	r3, r2
 80045fa:	d02a      	beq.n	8004652 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7ff fae8 	bl	8003bd0 <HAL_GetTick>
 8004600:	4b4c      	ldr	r3, [pc, #304]	; (8004734 <HAL_RCC_OscConfig+0x49c>)
 8004602:	1bc0      	subs	r0, r0, r7
 8004604:	4298      	cmp	r0, r3
 8004606:	d9f4      	bls.n	80045f2 <HAL_RCC_OscConfig+0x35a>
 8004608:	e6ba      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460a:	21a0      	movs	r1, #160	; 0xa0
 800460c:	00c9      	lsls	r1, r1, #3
 800460e:	428b      	cmp	r3, r1
 8004610:	d10b      	bne.n	800462a <HAL_RCC_OscConfig+0x392>
 8004612:	2380      	movs	r3, #128	; 0x80
 8004614:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	430b      	orrs	r3, r1
 800461a:	6523      	str	r3, [r4, #80]	; 0x50
 800461c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800461e:	431a      	orrs	r2, r3
 8004620:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004622:	f7ff fad5 	bl	8003bd0 <HAL_GetTick>
 8004626:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004628:	e00e      	b.n	8004648 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800462c:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0x494>)
 800462e:	4013      	ands	r3, r2
 8004630:	6523      	str	r3, [r4, #80]	; 0x50
 8004632:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004634:	4a3e      	ldr	r2, [pc, #248]	; (8004730 <HAL_RCC_OscConfig+0x498>)
 8004636:	4013      	ands	r3, r2
 8004638:	e7a2      	b.n	8004580 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7ff fac9 	bl	8003bd0 <HAL_GetTick>
 800463e:	4b3d      	ldr	r3, [pc, #244]	; (8004734 <HAL_RCC_OscConfig+0x49c>)
 8004640:	1bc0      	subs	r0, r0, r7
 8004642:	4298      	cmp	r0, r3
 8004644:	d900      	bls.n	8004648 <HAL_RCC_OscConfig+0x3b0>
 8004646:	e69b      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800464c:	0092      	lsls	r2, r2, #2
 800464e:	4213      	tst	r3, r2
 8004650:	d0f3      	beq.n	800463a <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004652:	9b01      	ldr	r3, [sp, #4]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d000      	beq.n	800465a <HAL_RCC_OscConfig+0x3c2>
 8004658:	e66b      	b.n	8004332 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800465a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800465c:	4a36      	ldr	r2, [pc, #216]	; (8004738 <HAL_RCC_OscConfig+0x4a0>)
 800465e:	4013      	ands	r3, r2
 8004660:	63a3      	str	r3, [r4, #56]	; 0x38
 8004662:	e666      	b.n	8004332 <HAL_RCC_OscConfig+0x9a>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004664:	2e0c      	cmp	r6, #12
 8004666:	d043      	beq.n	80046f0 <HAL_RCC_OscConfig+0x458>
 8004668:	4a34      	ldr	r2, [pc, #208]	; (800473c <HAL_RCC_OscConfig+0x4a4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	2b02      	cmp	r3, #2
 800466c:	d12e      	bne.n	80046cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_PLL_DISABLE();
 800466e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004670:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004672:	4013      	ands	r3, r2
 8004674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004676:	f7ff faab 	bl	8003bd0 <HAL_GetTick>
 800467a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800467c:	04b6      	lsls	r6, r6, #18
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	4233      	tst	r3, r6
 8004682:	d11d      	bne.n	80046c0 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004684:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004686:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004688:	68e2      	ldr	r2, [r4, #12]
 800468a:	430b      	orrs	r3, r1
 800468c:	492c      	ldr	r1, [pc, #176]	; (8004740 <HAL_RCC_OscConfig+0x4a8>)
 800468e:	400a      	ands	r2, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004694:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004696:	4313      	orrs	r3, r2
 8004698:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	045b      	lsls	r3, r3, #17
 80046a0:	4313      	orrs	r3, r2
 80046a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80046a4:	f7ff fa94 	bl	8003bd0 <HAL_GetTick>
 80046a8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046aa:	04ad      	lsls	r5, r5, #18
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	422b      	tst	r3, r5
 80046b0:	d000      	beq.n	80046b4 <HAL_RCC_OscConfig+0x41c>
 80046b2:	e642      	b.n	800433a <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b4:	f7ff fa8c 	bl	8003bd0 <HAL_GetTick>
 80046b8:	1b80      	subs	r0, r0, r6
 80046ba:	2802      	cmp	r0, #2
 80046bc:	d9f6      	bls.n	80046ac <HAL_RCC_OscConfig+0x414>
 80046be:	e65f      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7ff fa86 	bl	8003bd0 <HAL_GetTick>
 80046c4:	1bc0      	subs	r0, r0, r7
 80046c6:	2802      	cmp	r0, #2
 80046c8:	d9d9      	bls.n	800467e <HAL_RCC_OscConfig+0x3e6>
 80046ca:	e659      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 80046cc:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046ce:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4013      	ands	r3, r2
 80046d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80046d4:	f7ff fa7c 	bl	8003bd0 <HAL_GetTick>
 80046d8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046da:	04ad      	lsls	r5, r5, #18
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	422b      	tst	r3, r5
 80046e0:	d100      	bne.n	80046e4 <HAL_RCC_OscConfig+0x44c>
 80046e2:	e62a      	b.n	800433a <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e4:	f7ff fa74 	bl	8003bd0 <HAL_GetTick>
 80046e8:	1b80      	subs	r0, r0, r6
 80046ea:	2802      	cmp	r0, #2
 80046ec:	d9f6      	bls.n	80046dc <HAL_RCC_OscConfig+0x444>
 80046ee:	e647      	b.n	8004380 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 80046f0:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d100      	bne.n	80046f8 <HAL_RCC_OscConfig+0x460>
 80046f6:	e5d5      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f8:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80046fa:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80046fe:	0252      	lsls	r2, r2, #9
 8004700:	401a      	ands	r2, r3
        return HAL_ERROR;
 8004702:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	428a      	cmp	r2, r1
 8004706:	d000      	beq.n	800470a <HAL_RCC_OscConfig+0x472>
 8004708:	e5cc      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800470a:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800470e:	0392      	lsls	r2, r2, #14
 8004710:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004712:	428a      	cmp	r2, r1
 8004714:	d000      	beq.n	8004718 <HAL_RCC_OscConfig+0x480>
 8004716:	e5c5      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004718:	20c0      	movs	r0, #192	; 0xc0
 800471a:	0400      	lsls	r0, r0, #16
 800471c:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800471e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004720:	1a18      	subs	r0, r3, r0
 8004722:	1e43      	subs	r3, r0, #1
 8004724:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004726:	b2c0      	uxtb	r0, r0
 8004728:	e5bc      	b.n	80042a4 <HAL_RCC_OscConfig+0xc>
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	fffffeff 	.word	0xfffffeff
 8004730:	fffffbff 	.word	0xfffffbff
 8004734:	00001388 	.word	0x00001388
 8004738:	efffffff 	.word	0xefffffff
 800473c:	feffffff 	.word	0xfeffffff
 8004740:	ff02ffff 	.word	0xff02ffff

08004744 <HAL_RCC_ClockConfig>:
{
 8004744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004746:	1e06      	subs	r6, r0, #0
 8004748:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800474c:	2001      	movs	r0, #1
}
 800474e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004750:	2501      	movs	r5, #1
 8004752:	4c5b      	ldr	r4, [pc, #364]	; (80048c0 <HAL_RCC_ClockConfig+0x17c>)
 8004754:	9a01      	ldr	r2, [sp, #4]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	402b      	ands	r3, r5
 800475a:	4293      	cmp	r3, r2
 800475c:	d331      	bcc.n	80047c2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475e:	6832      	ldr	r2, [r6, #0]
 8004760:	0793      	lsls	r3, r2, #30
 8004762:	d443      	bmi.n	80047ec <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004764:	07d3      	lsls	r3, r2, #31
 8004766:	d449      	bmi.n	80047fc <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	2501      	movs	r5, #1
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	9a01      	ldr	r2, [sp, #4]
 800476e:	402b      	ands	r3, r5
 8004770:	4293      	cmp	r3, r2
 8004772:	d909      	bls.n	8004788 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	43ab      	bics	r3, r5
 8004778:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800477a:	f7ff fa29 	bl	8003bd0 <HAL_GetTick>
 800477e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	422b      	tst	r3, r5
 8004784:	d000      	beq.n	8004788 <HAL_RCC_ClockConfig+0x44>
 8004786:	e08c      	b.n	80048a2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	6832      	ldr	r2, [r6, #0]
 800478a:	4c4e      	ldr	r4, [pc, #312]	; (80048c4 <HAL_RCC_ClockConfig+0x180>)
 800478c:	0753      	lsls	r3, r2, #29
 800478e:	d500      	bpl.n	8004792 <HAL_RCC_ClockConfig+0x4e>
 8004790:	e08f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	0713      	lsls	r3, r2, #28
 8004794:	d506      	bpl.n	80047a4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004796:	68e2      	ldr	r2, [r4, #12]
 8004798:	6933      	ldr	r3, [r6, #16]
 800479a:	494b      	ldr	r1, [pc, #300]	; (80048c8 <HAL_RCC_ClockConfig+0x184>)
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	400a      	ands	r2, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047a4:	f7ff fd2e 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80047a8:	68e3      	ldr	r3, [r4, #12]
 80047aa:	4a48      	ldr	r2, [pc, #288]	; (80048cc <HAL_RCC_ClockConfig+0x188>)
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	0f1b      	lsrs	r3, r3, #28
 80047b0:	5cd3      	ldrb	r3, [r2, r3]
 80047b2:	40d8      	lsrs	r0, r3
 80047b4:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCC_ClockConfig+0x18c>)
 80047b6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80047b8:	4b46      	ldr	r3, [pc, #280]	; (80048d4 <HAL_RCC_ClockConfig+0x190>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	f7ff f9c4 	bl	8003b48 <HAL_InitTick>
 80047c0:	e7c5      	b.n	800474e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	9a01      	ldr	r2, [sp, #4]
 80047c6:	43ab      	bics	r3, r5
 80047c8:	4313      	orrs	r3, r2
 80047ca:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80047cc:	f7ff fa00 	bl	8003bd0 <HAL_GetTick>
 80047d0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	9a01      	ldr	r2, [sp, #4]
 80047d6:	402b      	ands	r3, r5
 80047d8:	4293      	cmp	r3, r2
 80047da:	d0c0      	beq.n	800475e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7ff f9f8 	bl	8003bd0 <HAL_GetTick>
 80047e0:	4b3d      	ldr	r3, [pc, #244]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 80047e2:	1bc0      	subs	r0, r0, r7
 80047e4:	4298      	cmp	r0, r3
 80047e6:	d9f4      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80047e8:	2003      	movs	r0, #3
 80047ea:	e7b0      	b.n	800474e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	20f0      	movs	r0, #240	; 0xf0
 80047ee:	4935      	ldr	r1, [pc, #212]	; (80048c4 <HAL_RCC_ClockConfig+0x180>)
 80047f0:	68cb      	ldr	r3, [r1, #12]
 80047f2:	4383      	bics	r3, r0
 80047f4:	68b0      	ldr	r0, [r6, #8]
 80047f6:	4303      	orrs	r3, r0
 80047f8:	60cb      	str	r3, [r1, #12]
 80047fa:	e7b3      	b.n	8004764 <HAL_RCC_ClockConfig+0x20>
 80047fc:	4d31      	ldr	r5, [pc, #196]	; (80048c4 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fe:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004800:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	2a02      	cmp	r2, #2
 8004804:	d118      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004806:	039b      	lsls	r3, r3, #14
 8004808:	d5a0      	bpl.n	800474c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480a:	2103      	movs	r1, #3
 800480c:	68eb      	ldr	r3, [r5, #12]
 800480e:	438b      	bics	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8004814:	f7ff f9dc 	bl	8003bd0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004818:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800481a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481c:	2b02      	cmp	r3, #2
 800481e:	d118      	bne.n	8004852 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004820:	220c      	movs	r2, #12
 8004822:	68eb      	ldr	r3, [r5, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	2b08      	cmp	r3, #8
 8004828:	d09e      	beq.n	8004768 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482a:	f7ff f9d1 	bl	8003bd0 <HAL_GetTick>
 800482e:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 8004830:	1bc0      	subs	r0, r0, r7
 8004832:	4298      	cmp	r0, r3
 8004834:	d9f4      	bls.n	8004820 <HAL_RCC_ClockConfig+0xdc>
 8004836:	e7d7      	b.n	80047e8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004838:	2a03      	cmp	r2, #3
 800483a:	d102      	bne.n	8004842 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	d4e4      	bmi.n	800480a <HAL_RCC_ClockConfig+0xc6>
 8004840:	e784      	b.n	800474c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004842:	2a01      	cmp	r2, #1
 8004844:	d102      	bne.n	800484c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004846:	075b      	lsls	r3, r3, #29
 8004848:	d4df      	bmi.n	800480a <HAL_RCC_ClockConfig+0xc6>
 800484a:	e77f      	b.n	800474c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800484c:	059b      	lsls	r3, r3, #22
 800484e:	d4dc      	bmi.n	800480a <HAL_RCC_ClockConfig+0xc6>
 8004850:	e77c      	b.n	800474c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004852:	2b03      	cmp	r3, #3
 8004854:	d10b      	bne.n	800486e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004856:	220c      	movs	r2, #12
 8004858:	68eb      	ldr	r3, [r5, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	4293      	cmp	r3, r2
 800485e:	d083      	beq.n	8004768 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7ff f9b6 	bl	8003bd0 <HAL_GetTick>
 8004864:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 8004866:	1bc0      	subs	r0, r0, r7
 8004868:	4298      	cmp	r0, r3
 800486a:	d9f4      	bls.n	8004856 <HAL_RCC_ClockConfig+0x112>
 800486c:	e7bc      	b.n	80047e8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800486e:	2b01      	cmp	r3, #1
 8004870:	d011      	beq.n	8004896 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004872:	220c      	movs	r2, #12
 8004874:	68eb      	ldr	r3, [r5, #12]
 8004876:	4213      	tst	r3, r2
 8004878:	d100      	bne.n	800487c <HAL_RCC_ClockConfig+0x138>
 800487a:	e775      	b.n	8004768 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800487c:	f7ff f9a8 	bl	8003bd0 <HAL_GetTick>
 8004880:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 8004882:	1bc0      	subs	r0, r0, r7
 8004884:	4298      	cmp	r0, r3
 8004886:	d9f4      	bls.n	8004872 <HAL_RCC_ClockConfig+0x12e>
 8004888:	e7ae      	b.n	80047e8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800488a:	f7ff f9a1 	bl	8003bd0 <HAL_GetTick>
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 8004890:	1bc0      	subs	r0, r0, r7
 8004892:	4298      	cmp	r0, r3
 8004894:	d8a8      	bhi.n	80047e8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004896:	220c      	movs	r2, #12
 8004898:	68eb      	ldr	r3, [r5, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b04      	cmp	r3, #4
 800489e:	d1f4      	bne.n	800488a <HAL_RCC_ClockConfig+0x146>
 80048a0:	e762      	b.n	8004768 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a2:	f7ff f995 	bl	8003bd0 <HAL_GetTick>
 80048a6:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <HAL_RCC_ClockConfig+0x194>)
 80048a8:	1bc0      	subs	r0, r0, r7
 80048aa:	4298      	cmp	r0, r3
 80048ac:	d800      	bhi.n	80048b0 <HAL_RCC_ClockConfig+0x16c>
 80048ae:	e767      	b.n	8004780 <HAL_RCC_ClockConfig+0x3c>
 80048b0:	e79a      	b.n	80047e8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	4909      	ldr	r1, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x198>)
 80048b6:	400b      	ands	r3, r1
 80048b8:	68f1      	ldr	r1, [r6, #12]
 80048ba:	430b      	orrs	r3, r1
 80048bc:	60e3      	str	r3, [r4, #12]
 80048be:	e768      	b.n	8004792 <HAL_RCC_ClockConfig+0x4e>
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40021000 	.word	0x40021000
 80048c8:	ffffc7ff 	.word	0xffffc7ff
 80048cc:	08006dfb 	.word	0x08006dfb
 80048d0:	20000010 	.word	0x20000010
 80048d4:	20000018 	.word	0x20000018
 80048d8:	00001388 	.word	0x00001388
 80048dc:	fffff8ff 	.word	0xfffff8ff

080048e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	055b      	lsls	r3, r3, #21
 80048e8:	0f5b      	lsrs	r3, r3, #29
 80048ea:	5cd3      	ldrb	r3, [r2, r3]
 80048ec:	4a03      	ldr	r2, [pc, #12]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80048ee:	6810      	ldr	r0, [r2, #0]
 80048f0:	40d8      	lsrs	r0, r3
}
 80048f2:	4770      	bx	lr
 80048f4:	40021000 	.word	0x40021000
 80048f8:	08006e0b 	.word	0x08006e0b
 80048fc:	20000010 	.word	0x20000010

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	049b      	lsls	r3, r3, #18
 8004908:	0f5b      	lsrs	r3, r3, #29
 800490a:	5cd3      	ldrb	r3, [r2, r3]
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800490e:	6810      	ldr	r0, [r2, #0]
 8004910:	40d8      	lsrs	r0, r3
}
 8004912:	4770      	bx	lr
 8004914:	40021000 	.word	0x40021000
 8004918:	08006e0b 	.word	0x08006e0b
 800491c:	20000010 	.word	0x20000010

08004920 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004920:	6803      	ldr	r3, [r0, #0]
{
 8004922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004924:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004926:	069b      	lsls	r3, r3, #26
 8004928:	d53b      	bpl.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800492c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492e:	4c4f      	ldr	r4, [pc, #316]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004930:	055b      	lsls	r3, r3, #21
 8004932:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004934:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	421a      	tst	r2, r3
 8004938:	d104      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800493c:	4313      	orrs	r3, r2
 800493e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004940:	2301      	movs	r3, #1
 8004942:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	2780      	movs	r7, #128	; 0x80
 8004946:	4e4a      	ldr	r6, [pc, #296]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004948:	007f      	lsls	r7, r7, #1
 800494a:	6833      	ldr	r3, [r6, #0]
 800494c:	423b      	tst	r3, r7
 800494e:	d04f      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004950:	6868      	ldr	r0, [r5, #4]
 8004952:	23c0      	movs	r3, #192	; 0xc0
 8004954:	26c0      	movs	r6, #192	; 0xc0
 8004956:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004958:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800495a:	03b6      	lsls	r6, r6, #14
 800495c:	029b      	lsls	r3, r3, #10
 800495e:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004960:	4032      	ands	r2, r6
 8004962:	4019      	ands	r1, r3
 8004964:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004966:	4290      	cmp	r0, r2
 8004968:	d153      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800496a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800496c:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800496e:	d157      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004970:	6869      	ldr	r1, [r5, #4]
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	000a      	movs	r2, r1
 8004976:	029b      	lsls	r3, r3, #10
 8004978:	401a      	ands	r2, r3
 800497a:	429a      	cmp	r2, r3
 800497c:	d107      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	483c      	ldr	r0, [pc, #240]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004982:	4003      	ands	r3, r0
 8004984:	20c0      	movs	r0, #192	; 0xc0
 8004986:	0380      	lsls	r0, r0, #14
 8004988:	4001      	ands	r1, r0
 800498a:	430b      	orrs	r3, r1
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004990:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004992:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004994:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800499a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800499c:	4a36      	ldr	r2, [pc, #216]	; (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800499e:	4013      	ands	r3, r2
 80049a0:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a2:	682a      	ldr	r2, [r5, #0]
 80049a4:	0793      	lsls	r3, r2, #30
 80049a6:	d506      	bpl.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a8:	200c      	movs	r0, #12
 80049aa:	4930      	ldr	r1, [pc, #192]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049ac:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80049ae:	4383      	bics	r3, r0
 80049b0:	68a8      	ldr	r0, [r5, #8]
 80049b2:	4303      	orrs	r3, r0
 80049b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b6:	0753      	lsls	r3, r2, #29
 80049b8:	d506      	bpl.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049ba:	492c      	ldr	r1, [pc, #176]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049bc:	482f      	ldr	r0, [pc, #188]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049be:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80049c0:	4003      	ands	r3, r0
 80049c2:	68e8      	ldr	r0, [r5, #12]
 80049c4:	4303      	orrs	r3, r0
 80049c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c8:	0713      	lsls	r3, r2, #28
 80049ca:	d506      	bpl.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049cc:	4927      	ldr	r1, [pc, #156]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049ce:	482c      	ldr	r0, [pc, #176]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049d0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80049d2:	4003      	ands	r3, r0
 80049d4:	6928      	ldr	r0, [r5, #16]
 80049d6:	4303      	orrs	r3, r0
 80049d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80049da:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049dc:	0613      	lsls	r3, r2, #24
 80049de:	d517      	bpl.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80049e0:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049e2:	4928      	ldr	r1, [pc, #160]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80049e6:	400b      	ands	r3, r1
 80049e8:	6969      	ldr	r1, [r5, #20]
 80049ea:	430b      	orrs	r3, r1
 80049ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ee:	e00f      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f0:	6833      	ldr	r3, [r6, #0]
 80049f2:	433b      	orrs	r3, r7
 80049f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80049f6:	f7ff f8eb 	bl	8003bd0 <HAL_GetTick>
 80049fa:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	423b      	tst	r3, r7
 8004a00:	d1a6      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7ff f8e5 	bl	8003bd0 <HAL_GetTick>
 8004a06:	9b01      	ldr	r3, [sp, #4]
 8004a08:	1ac0      	subs	r0, r0, r3
 8004a0a:	2864      	cmp	r0, #100	; 0x64
 8004a0c:	d9f6      	bls.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8004a0e:	2003      	movs	r0, #3
}
 8004a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a12:	4299      	cmp	r1, r3
 8004a14:	d1a9      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a16:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8004a18:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a1a:	039b      	lsls	r3, r3, #14
 8004a1c:	d5a5      	bpl.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004a1e:	e7f7      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a20:	428b      	cmp	r3, r1
 8004a22:	d0a5      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	069b      	lsls	r3, r3, #26
 8004a28:	d5a2      	bpl.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a2a:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a2c:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004a30:	0312      	lsls	r2, r2, #12
 8004a32:	4302      	orrs	r2, r0
 8004a34:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a36:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3a:	4814      	ldr	r0, [pc, #80]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a3c:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3e:	4002      	ands	r2, r0
 8004a40:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004a42:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a44:	05cb      	lsls	r3, r1, #23
 8004a46:	d400      	bmi.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8004a48:	e792      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8004a4a:	f7ff f8c1 	bl	8003bd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a4e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004a50:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a52:	00bf      	lsls	r7, r7, #2
 8004a54:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a56:	423b      	tst	r3, r7
 8004a58:	d000      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a5a:	e789      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7ff f8b8 	bl	8003bd0 <HAL_GetTick>
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8004a62:	1b80      	subs	r0, r0, r6
 8004a64:	4298      	cmp	r0, r3
 8004a66:	d9f5      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004a68:	e7d1      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xee>
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40007000 	.word	0x40007000
 8004a74:	ffcfffff 	.word	0xffcfffff
 8004a78:	efffffff 	.word	0xefffffff
 8004a7c:	fffff3ff 	.word	0xfffff3ff
 8004a80:	ffffcfff 	.word	0xffffcfff
 8004a84:	fff3ffff 	.word	0xfff3ffff
 8004a88:	fffcffff 	.word	0xfffcffff
 8004a8c:	fff7ffff 	.word	0xfff7ffff
 8004a90:	00001388 	.word	0x00001388

08004a94 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	2280      	movs	r2, #128	; 0x80
{
 8004a96:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8004a98:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9a:	05d2      	lsls	r2, r2, #23
 8004a9c:	4290      	cmp	r0, r2
 8004a9e:	d005      	beq.n	8004aac <TIM_Base_SetConfig+0x18>
 8004aa0:	4c10      	ldr	r4, [pc, #64]	; (8004ae4 <TIM_Base_SetConfig+0x50>)
 8004aa2:	42a0      	cmp	r0, r4
 8004aa4:	d002      	beq.n	8004aac <TIM_Base_SetConfig+0x18>
 8004aa6:	4c10      	ldr	r4, [pc, #64]	; (8004ae8 <TIM_Base_SetConfig+0x54>)
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d10f      	bne.n	8004acc <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aac:	2470      	movs	r4, #112	; 0x70
 8004aae:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004ab0:	684c      	ldr	r4, [r1, #4]
 8004ab2:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab4:	4290      	cmp	r0, r2
 8004ab6:	d005      	beq.n	8004ac4 <TIM_Base_SetConfig+0x30>
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <TIM_Base_SetConfig+0x50>)
 8004aba:	4290      	cmp	r0, r2
 8004abc:	d002      	beq.n	8004ac4 <TIM_Base_SetConfig+0x30>
 8004abe:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <TIM_Base_SetConfig+0x54>)
 8004ac0:	4290      	cmp	r0, r2
 8004ac2:	d103      	bne.n	8004acc <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <TIM_Base_SetConfig+0x58>)
 8004ac6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac8:	68ca      	ldr	r2, [r1, #12]
 8004aca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	4393      	bics	r3, r2
 8004ad0:	690a      	ldr	r2, [r1, #16]
 8004ad2:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ad4:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad6:	688b      	ldr	r3, [r1, #8]
 8004ad8:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ada:	680b      	ldr	r3, [r1, #0]
 8004adc:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	6143      	str	r3, [r0, #20]
}
 8004ae2:	bd10      	pop	{r4, pc}
 8004ae4:	40010800 	.word	0x40010800
 8004ae8:	40011400 	.word	0x40011400
 8004aec:	fffffcff 	.word	0xfffffcff

08004af0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af0:	2201      	movs	r2, #1
{
 8004af2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af4:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af6:	6a03      	ldr	r3, [r0, #32]
 8004af8:	4393      	bics	r3, r2
 8004afa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004afc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004afe:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b00:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b02:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	680d      	ldr	r5, [r1, #0]
 8004b06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b08:	2502      	movs	r5, #2
 8004b0a:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b0c:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b10:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b12:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8004b14:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8004b16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	6203      	str	r3, [r0, #32]
}
 8004b1a:	bd30      	pop	{r4, r5, pc}

08004b1c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	6a03      	ldr	r3, [r0, #32]
{
 8004b20:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b22:	4393      	bics	r3, r2
 8004b24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b28:	4c09      	ldr	r4, [pc, #36]	; (8004b50 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8004b2a:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b2c:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b2e:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	680a      	ldr	r2, [r1, #0]
 8004b32:	0212      	lsls	r2, r2, #8
 8004b34:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b36:	2420      	movs	r4, #32
 8004b38:	43a3      	bics	r3, r4
 8004b3a:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3c:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3e:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b42:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b44:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b46:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8004b48:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4a:	6203      	str	r3, [r0, #32]
}
 8004b4c:	bd30      	pop	{r4, r5, pc}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	ffff8cff 	.word	0xffff8cff

08004b54 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b54:	231f      	movs	r3, #31
{
 8004b56:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b58:	2401      	movs	r4, #1
 8004b5a:	4019      	ands	r1, r3
 8004b5c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b5e:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8004b60:	6a03      	ldr	r3, [r0, #32]
 8004b62:	43a3      	bics	r3, r4
 8004b64:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b66:	6a03      	ldr	r3, [r0, #32]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	6202      	str	r2, [r0, #32]
}
 8004b6c:	bd10      	pop	{r4, pc}
	...

08004b70 <HAL_TIM_OC_Start>:
{
 8004b70:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b72:	0003      	movs	r3, r0
{
 8004b74:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d105      	bne.n	8004b86 <HAL_TIM_OC_Start+0x16>
 8004b7a:	333a      	adds	r3, #58	; 0x3a
    return HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	4282      	cmp	r2, r0
 8004b82:	d00a      	beq.n	8004b9a <HAL_TIM_OC_Start+0x2a>
}
 8004b84:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b86:	2904      	cmp	r1, #4
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_OC_Start+0x1e>
 8004b8a:	333b      	adds	r3, #59	; 0x3b
 8004b8c:	e7f6      	b.n	8004b7c <HAL_TIM_OC_Start+0xc>
 8004b8e:	2908      	cmp	r1, #8
 8004b90:	d101      	bne.n	8004b96 <HAL_TIM_OC_Start+0x26>
 8004b92:	333c      	adds	r3, #60	; 0x3c
 8004b94:	e7f2      	b.n	8004b7c <HAL_TIM_OC_Start+0xc>
 8004b96:	333d      	adds	r3, #61	; 0x3d
 8004b98:	e7f0      	b.n	8004b7c <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	2202      	movs	r2, #2
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b9c:	6820      	ldr	r0, [r4, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9e:	701a      	strb	r2, [r3, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f7ff ffd7 	bl	8004b54 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba6:	2280      	movs	r2, #128	; 0x80
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	05d2      	lsls	r2, r2, #23
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d005      	beq.n	8004bbc <HAL_TIM_OC_Start+0x4c>
 8004bb0:	4a0b      	ldr	r2, [pc, #44]	; (8004be0 <HAL_TIM_OC_Start+0x70>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d002      	beq.n	8004bbc <HAL_TIM_OC_Start+0x4c>
 8004bb6:	4a0b      	ldr	r2, [pc, #44]	; (8004be4 <HAL_TIM_OC_Start+0x74>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d10a      	bne.n	8004bd2 <HAL_TIM_OC_Start+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbc:	2107      	movs	r1, #7
 8004bbe:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8004bc0:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc4:	2a06      	cmp	r2, #6
 8004bc6:	d0dd      	beq.n	8004b84 <HAL_TIM_OC_Start+0x14>
      __HAL_TIM_ENABLE(htim);
 8004bc8:	2201      	movs	r2, #1
 8004bca:	6819      	ldr	r1, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e7d8      	b.n	8004b84 <HAL_TIM_OC_Start+0x14>
    __HAL_TIM_ENABLE(htim);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 8004bd6:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e7d2      	b.n	8004b84 <HAL_TIM_OC_Start+0x14>
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	40010800 	.word	0x40010800
 8004be4:	40011400 	.word	0x40011400

08004be8 <HAL_TIM_OC_Stop>:
{
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bec:	2200      	movs	r2, #0
 8004bee:	6800      	ldr	r0, [r0, #0]
{
 8004bf0:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bf2:	f7ff ffaf 	bl	8004b54 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	4a0c      	ldr	r2, [pc, #48]	; (8004c2c <HAL_TIM_OC_Stop+0x44>)
 8004bfa:	6a19      	ldr	r1, [r3, #32]
 8004bfc:	4211      	tst	r1, r2
 8004bfe:	d103      	bne.n	8004c08 <HAL_TIM_OC_Stop+0x20>
 8004c00:	2101      	movs	r1, #1
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	438a      	bics	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	2301      	movs	r3, #1
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	2d00      	cmp	r5, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_TIM_OC_Stop+0x2e>
 8004c0e:	343a      	adds	r4, #58	; 0x3a
}
 8004c10:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c12:	7023      	strb	r3, [r4, #0]
}
 8004c14:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	2d04      	cmp	r5, #4
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_OC_Stop+0x36>
 8004c1a:	343b      	adds	r4, #59	; 0x3b
 8004c1c:	e7f8      	b.n	8004c10 <HAL_TIM_OC_Stop+0x28>
 8004c1e:	2d08      	cmp	r5, #8
 8004c20:	d101      	bne.n	8004c26 <HAL_TIM_OC_Stop+0x3e>
 8004c22:	343c      	adds	r4, #60	; 0x3c
 8004c24:	e7f4      	b.n	8004c10 <HAL_TIM_OC_Stop+0x28>
 8004c26:	343d      	adds	r4, #61	; 0x3d
 8004c28:	e7f2      	b.n	8004c10 <HAL_TIM_OC_Stop+0x28>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	00001111 	.word	0x00001111

08004c30 <HAL_TIM_PWM_Init>:
{
 8004c30:	b570      	push	{r4, r5, r6, lr}
 8004c32:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
  if (htim == NULL)
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d01d      	beq.n	8004c76 <HAL_TIM_PWM_Init+0x46>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3a:	0025      	movs	r5, r4
 8004c3c:	3539      	adds	r5, #57	; 0x39
 8004c3e:	782b      	ldrb	r3, [r5, #0]
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004c46:	0022      	movs	r2, r4
 8004c48:	3238      	adds	r2, #56	; 0x38
 8004c4a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	f7fe fd9d 	bl	800378c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004c52:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004c56:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c58:	1d21      	adds	r1, r4, #4
 8004c5a:	f7ff ff1b 	bl	8004a94 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c5e:	0022      	movs	r2, r4
 8004c60:	2301      	movs	r3, #1
  return HAL_OK;
 8004c62:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	323e      	adds	r2, #62	; 0x3e
 8004c66:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	343d      	adds	r4, #61	; 0x3d
 8004c6a:	3a04      	subs	r2, #4
 8004c6c:	7013      	strb	r3, [r2, #0]
 8004c6e:	7053      	strb	r3, [r2, #1]
 8004c70:	7093      	strb	r3, [r2, #2]
 8004c72:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	702b      	strb	r3, [r5, #0]
}
 8004c76:	bd70      	pop	{r4, r5, r6, pc}

08004c78 <HAL_TIM_PWM_Start>:
 8004c78:	b510      	push	{r4, lr}
 8004c7a:	f7ff ff79 	bl	8004b70 <HAL_TIM_OC_Start>
 8004c7e:	bd10      	pop	{r4, pc}

08004c80 <HAL_TIM_PWM_Stop>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	f7ff ffb1 	bl	8004be8 <HAL_TIM_OC_Stop>
 8004c86:	bd10      	pop	{r4, pc}

08004c88 <HAL_TIM_PWM_ConfigChannel>:
{
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004c8a:	0005      	movs	r5, r0
 8004c8c:	3538      	adds	r5, #56	; 0x38
{
 8004c8e:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004c90:	7829      	ldrb	r1, [r5, #0]
{
 8004c92:	0006      	movs	r6, r0
  __HAL_LOCK(htim);
 8004c94:	2002      	movs	r0, #2
 8004c96:	2901      	cmp	r1, #1
 8004c98:	d022      	beq.n	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x58>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	702b      	strb	r3, [r5, #0]
  switch (Channel)
 8004c9e:	2a0c      	cmp	r2, #12
 8004ca0:	d900      	bls.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8004ca2:	e077      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8004ca4:	0010      	movs	r0, r2
 8004ca6:	f7fb fa39 	bl	800011c <__gnu_thumb1_case_uqi>
 8004caa:	7507      	.short	0x7507
 8004cac:	751c7575 	.word	0x751c7575
 8004cb0:	752e7575 	.word	0x752e7575
 8004cb4:	7575      	.short	0x7575
 8004cb6:	51          	.byte	0x51
 8004cb7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cb8:	0021      	movs	r1, r4
 8004cba:	6830      	ldr	r0, [r6, #0]
 8004cbc:	f7ff ff18 	bl	8004af0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	6833      	ldr	r3, [r6, #0]
 8004cc4:	6999      	ldr	r1, [r3, #24]
 8004cc6:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc8:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	438a      	bics	r2, r1
 8004cd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	619a      	str	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	702a      	strb	r2, [r5, #0]
}
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce2:	0021      	movs	r1, r4
 8004ce4:	6830      	ldr	r0, [r6, #0]
 8004ce6:	f7ff ff19 	bl	8004b1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	4927      	ldr	r1, [pc, #156]	; (8004d98 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cfe:	68e2      	ldr	r2, [r4, #12]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	0212      	lsls	r2, r2, #8
 8004d04:	e7e7      	b.n	8004cd6 <HAL_TIM_PWM_ConfigChannel+0x4e>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d06:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d08:	6833      	ldr	r3, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0a:	4924      	ldr	r1, [pc, #144]	; (8004d9c <HAL_TIM_PWM_ConfigChannel+0x114>)
 8004d0c:	6a1a      	ldr	r2, [r3, #32]
 8004d0e:	400a      	ands	r2, r1
 8004d10:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d12:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d14:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d16:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d18:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1e:	4820      	ldr	r0, [pc, #128]	; (8004da0 <HAL_TIM_PWM_ConfigChannel+0x118>)
 8004d20:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004d24:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d26:	0212      	lsls	r2, r2, #8
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2a:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d2c:	4302      	orrs	r2, r0
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004d30:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d32:	2208      	movs	r2, #8
 8004d34:	69d9      	ldr	r1, [r3, #28]
 8004d36:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d38:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	438a      	bics	r2, r1
 8004d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d46:	430a      	orrs	r2, r1
 8004d48:	61da      	str	r2, [r3, #28]
 8004d4a:	e7c6      	b.n	8004cda <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d4c:	6833      	ldr	r3, [r6, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4e:	4915      	ldr	r1, [pc, #84]	; (8004da4 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 8004d50:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d52:	4815      	ldr	r0, [pc, #84]	; (8004da8 <HAL_TIM_PWM_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d54:	400a      	ands	r2, r1
 8004d56:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d58:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d5a:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d5c:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d5e:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d60:	6820      	ldr	r0, [r4, #0]
 8004d62:	0207      	lsls	r7, r0, #8
  tmpccer &= ~TIM_CCER_CC4P;
 8004d64:	4811      	ldr	r0, [pc, #68]	; (8004dac <HAL_TIM_PWM_ConfigChannel+0x124>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d66:	4339      	orrs	r1, r7
  tmpccer &= ~TIM_CCER_CC4P;
 8004d68:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d6a:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8004d6c:	605e      	str	r6, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d6e:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8004d70:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004d72:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d74:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 8004d76:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004d78:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	69d9      	ldr	r1, [r3, #28]
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	430a      	orrs	r2, r1
 8004d82:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_TIM_PWM_ConfigChannel+0x110>)
 8004d88:	400a      	ands	r2, r1
 8004d8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8c:	68e2      	ldr	r2, [r4, #12]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	0212      	lsls	r2, r2, #8
 8004d92:	e7d8      	b.n	8004d46 <HAL_TIM_PWM_ConfigChannel+0xbe>
      status = HAL_ERROR;
 8004d94:	2001      	movs	r0, #1
 8004d96:	e7a1      	b.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x54>
 8004d98:	fffffbff 	.word	0xfffffbff
 8004d9c:	fffffeff 	.word	0xfffffeff
 8004da0:	fffffdff 	.word	0xfffffdff
 8004da4:	ffffefff 	.word	0xffffefff
 8004da8:	ffff8cff 	.word	0xffff8cff
 8004dac:	ffffdfff 	.word	0xffffdfff

08004db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004db2:	0004      	movs	r4, r0
 8004db4:	2202      	movs	r2, #2
 8004db6:	3438      	adds	r4, #56	; 0x38
 8004db8:	7825      	ldrb	r5, [r4, #0]
{
 8004dba:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004dbc:	0010      	movs	r0, r2
 8004dbe:	2d01      	cmp	r5, #1
 8004dc0:	d01f      	beq.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc2:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc4:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8004dc6:	681b      	ldr	r3, [r3, #0]
  __HAL_LOCK(htim);
 8004dc8:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004dca:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 8004dcc:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004dd0:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004dd2:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	43b0      	bics	r0, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd6:	680e      	ldr	r6, [r1, #0]
 8004dd8:	4330      	orrs	r0, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dda:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ddc:	2080      	movs	r0, #128	; 0x80
 8004dde:	05c0      	lsls	r0, r0, #23
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d005      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004de4:	4807      	ldr	r0, [pc, #28]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004de6:	4283      	cmp	r3, r0
 8004de8:	d002      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8004dea:	4807      	ldr	r0, [pc, #28]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004dec:	4283      	cmp	r3, r0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df0:	2080      	movs	r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004df4:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004df6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8004dfc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004e00:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	40010800 	.word	0x40010800
 8004e08:	40011400 	.word	0x40011400

08004e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e0c:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e0e:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e12:	2201      	movs	r2, #1
 8004e14:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	4d12      	ldr	r5, [pc, #72]	; (8004e64 <UART_EndRxTransfer+0x58>)
 8004e1c:	680b      	ldr	r3, [r1, #0]
 8004e1e:	402b      	ands	r3, r5
 8004e20:	600b      	str	r3, [r1, #0]
 8004e22:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2e:	6801      	ldr	r1, [r0, #0]
 8004e30:	688b      	ldr	r3, [r1, #8]
 8004e32:	4393      	bics	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
 8004e36:	f384 8810 	msr	PRIMASK, r4

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10a      	bne.n	8004e56 <UART_EndRxTransfer+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e40:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e44:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e48:	2410      	movs	r4, #16
 8004e4a:	6802      	ldr	r2, [r0, #0]
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	43a3      	bics	r3, r4
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e56:	2320      	movs	r3, #32
 8004e58:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e5e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004e60:	bd30      	pop	{r4, r5, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	fffffedf 	.word	0xfffffedf

08004e68 <UART_TxISR_16BIT.part.1>:
  * @note   Function is called under interruption only, once
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
 8004e68:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f382 8810 	msr	PRIMASK, r2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
  {
    if (huart->TxXferCount == 0U)
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e74:	2580      	movs	r5, #128	; 0x80
 8004e76:	6801      	ldr	r1, [r0, #0]
 8004e78:	680b      	ldr	r3, [r1, #0]
 8004e7a:	43ab      	bics	r3, r5
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e86:	f382 8810 	msr	PRIMASK, r2

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8a:	2340      	movs	r3, #64	; 0x40
 8004e8c:	6802      	ldr	r2, [r0, #0]
 8004e8e:	6810      	ldr	r0, [r2, #0]
 8004e90:	4303      	orrs	r3, r0
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	f381 8810 	msr	PRIMASK, r1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004e98:	bd30      	pop	{r4, r5, pc}

08004e9a <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e9a:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004e9c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e9e:	2b21      	cmp	r3, #33	; 0x21
 8004ea0:	d106      	bne.n	8004eb0 <UART_TxISR_8BIT+0x16>
    if (huart->TxXferCount == 0U)
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	3252      	adds	r2, #82	; 0x52
 8004ea6:	8813      	ldrh	r3, [r2, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <UART_TxISR_8BIT+0x18>
 8004eac:	f7ff ffdc 	bl	8004e68 <UART_TxISR_16BIT.part.1>
}
 8004eb0:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eb2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004eb4:	6801      	ldr	r1, [r0, #0]
 8004eb6:	781c      	ldrb	r4, [r3, #0]
      huart->pTxBuffPtr++;
 8004eb8:	3301      	adds	r3, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eba:	628c      	str	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ebc:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8004ebe:	8813      	ldrh	r3, [r2, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
}
 8004ec6:	e7f3      	b.n	8004eb0 <UART_TxISR_8BIT+0x16>

08004ec8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ec8:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004eca:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ecc:	2b21      	cmp	r3, #33	; 0x21
 8004ece:	d106      	bne.n	8004ede <UART_TxISR_16BIT+0x16>
  {
    if (huart->TxXferCount == 0U)
 8004ed0:	0001      	movs	r1, r0
 8004ed2:	3152      	adds	r1, #82	; 0x52
 8004ed4:	880b      	ldrh	r3, [r1, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <UART_TxISR_16BIT+0x18>
 8004eda:	f7ff ffc5 	bl	8004e68 <UART_TxISR_16BIT.part.1>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ede:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ee0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004ee2:	6804      	ldr	r4, [r0, #0]
 8004ee4:	8813      	ldrh	r3, [r2, #0]
      huart->pTxBuffPtr += 2U;
 8004ee6:	3202      	adds	r2, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004ee8:	05db      	lsls	r3, r3, #23
 8004eea:	0ddb      	lsrs	r3, r3, #23
 8004eec:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004eee:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8004ef0:	880b      	ldrh	r3, [r1, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	800b      	strh	r3, [r1, #0]
}
 8004ef8:	e7f1      	b.n	8004ede <UART_TxISR_16BIT+0x16>
	...

08004efc <HAL_UART_Transmit_IT>:
{
 8004efc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8004efe:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8004f00:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004f02:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8004f04:	2c20      	cmp	r4, #32
 8004f06:	d138      	bne.n	8004f7a <HAL_UART_Transmit_IT+0x7e>
      return HAL_ERROR;
 8004f08:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d035      	beq.n	8004f7a <HAL_UART_Transmit_IT+0x7e>
 8004f0e:	2a00      	cmp	r2, #0
 8004f10:	d033      	beq.n	8004f7a <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f12:	2480      	movs	r4, #128	; 0x80
 8004f14:	689d      	ldr	r5, [r3, #8]
 8004f16:	0164      	lsls	r4, r4, #5
 8004f18:	42a5      	cmp	r5, r4
 8004f1a:	d104      	bne.n	8004f26 <HAL_UART_Transmit_IT+0x2a>
 8004f1c:	691c      	ldr	r4, [r3, #16]
 8004f1e:	2c00      	cmp	r4, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f22:	4201      	tst	r1, r0
 8004f24:	d129      	bne.n	8004f7a <HAL_UART_Transmit_IT+0x7e>
    __HAL_LOCK(huart);
 8004f26:	001c      	movs	r4, r3
 8004f28:	3474      	adds	r4, #116	; 0x74
 8004f2a:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8004f2c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8004f2e:	2e01      	cmp	r6, #1
 8004f30:	d023      	beq.n	8004f7a <HAL_UART_Transmit_IT+0x7e>
 8004f32:	3801      	subs	r0, #1
 8004f34:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8004f36:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004f38:	0019      	movs	r1, r3
 8004f3a:	3150      	adds	r1, #80	; 0x50
    huart->TxXferCount = Size;
 8004f3c:	804a      	strh	r2, [r1, #2]
    huart->TxXferSize  = Size;
 8004f3e:	800a      	strh	r2, [r1, #0]
    huart->TxISR       = NULL;
 8004f40:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	1d19      	adds	r1, r3, #4
    huart->TxISR       = NULL;
 8004f44:	669a      	str	r2, [r3, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f46:	67ca      	str	r2, [r1, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f48:	3221      	adds	r2, #33	; 0x21
 8004f4a:	679a      	str	r2, [r3, #120]	; 0x78
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f4c:	2280      	movs	r2, #128	; 0x80
 8004f4e:	0152      	lsls	r2, r2, #5
 8004f50:	4295      	cmp	r5, r2
 8004f52:	d113      	bne.n	8004f7c <HAL_UART_Transmit_IT+0x80>
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	2a00      	cmp	r2, #0
 8004f58:	d110      	bne.n	8004f7c <HAL_UART_Transmit_IT+0x80>
      huart->TxISR = UART_TxISR_16BIT;
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_UART_Transmit_IT+0x84>)
    __HAL_UNLOCK(huart);
 8004f5c:	2000      	movs	r0, #0
      huart->TxISR = UART_TxISR_8BIT;
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68
    __HAL_UNLOCK(huart);
 8004f60:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f62:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	2201      	movs	r2, #1
 8004f68:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	6814      	ldr	r4, [r2, #0]
 8004f72:	4323      	orrs	r3, r4
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	f381 8810 	msr	PRIMASK, r1
}
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8004f7c:	4a01      	ldr	r2, [pc, #4]	; (8004f84 <HAL_UART_Transmit_IT+0x88>)
 8004f7e:	e7ed      	b.n	8004f5c <HAL_UART_Transmit_IT+0x60>
 8004f80:	08004ec9 	.word	0x08004ec9
 8004f84:	08004e9b 	.word	0x08004e9b

08004f88 <HAL_UART_ErrorCallback>:
 8004f88:	4770      	bx	lr

08004f8a <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	0002      	movs	r2, r0
{
 8004f90:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8004f92:	325a      	adds	r2, #90	; 0x5a
 8004f94:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8004f96:	3a08      	subs	r2, #8
 8004f98:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8004f9a:	f7ff fff5 	bl	8004f88 <HAL_UART_ErrorCallback>
}
 8004f9e:	bd10      	pop	{r4, pc}

08004fa0 <HAL_UARTEx_RxEventCallback>:
}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_UART_IRQHandler>:
{
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fa8:	6800      	ldr	r0, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004faa:	4ba5      	ldr	r3, [pc, #660]	; (8005240 <HAL_UART_IRQHandler+0x29c>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004fac:	69c1      	ldr	r1, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fae:	6806      	ldr	r6, [r0, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb0:	6885      	ldr	r5, [r0, #8]
  if (errorflags == 0U)
 8004fb2:	4219      	tst	r1, r3
 8004fb4:	d10b      	bne.n	8004fce <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	4219      	tst	r1, r3
 8004fba:	d100      	bne.n	8004fbe <HAL_UART_IRQHandler+0x1a>
 8004fbc:	e07f      	b.n	80050be <HAL_UART_IRQHandler+0x11a>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fbe:	421e      	tst	r6, r3
 8004fc0:	d100      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x20>
 8004fc2:	e07c      	b.n	80050be <HAL_UART_IRQHandler+0x11a>
      if (huart->RxISR != NULL)
 8004fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8004fc6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d16e      	bne.n	80050aa <HAL_UART_IRQHandler+0x106>
 8004fcc:	e06e      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fce:	2301      	movs	r3, #1
 8004fd0:	002a      	movs	r2, r5
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fd6:	4f9b      	ldr	r7, [pc, #620]	; (8005244 <HAL_UART_IRQHandler+0x2a0>)
 8004fd8:	423e      	tst	r6, r7
 8004fda:	d100      	bne.n	8004fde <HAL_UART_IRQHandler+0x3a>
 8004fdc:	e06f      	b.n	80050be <HAL_UART_IRQHandler+0x11a>
 8004fde:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe0:	4219      	tst	r1, r3
 8004fe2:	d005      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x4c>
 8004fe4:	05f7      	lsls	r7, r6, #23
 8004fe6:	d503      	bpl.n	8004ff0 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe8:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fea:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8004fec:	433b      	orrs	r3, r7
 8004fee:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	4219      	tst	r1, r3
 8004ff4:	d006      	beq.n	8005004 <HAL_UART_IRQHandler+0x60>
 8004ff6:	2a00      	cmp	r2, #0
 8004ff8:	d004      	beq.n	8005004 <HAL_UART_IRQHandler+0x60>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ffa:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffc:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8004ffe:	18db      	adds	r3, r3, r3
 8005000:	433b      	orrs	r3, r7
 8005002:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005004:	2304      	movs	r3, #4
 8005006:	4219      	tst	r1, r3
 8005008:	d006      	beq.n	8005018 <HAL_UART_IRQHandler+0x74>
 800500a:	2a00      	cmp	r2, #0
 800500c:	d004      	beq.n	8005018 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800500e:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005010:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8005012:	3b02      	subs	r3, #2
 8005014:	433b      	orrs	r3, r7
 8005016:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005018:	070b      	lsls	r3, r1, #28
 800501a:	d508      	bpl.n	800502e <HAL_UART_IRQHandler+0x8a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800501c:	06b3      	lsls	r3, r6, #26
 800501e:	d401      	bmi.n	8005024 <HAL_UART_IRQHandler+0x80>
 8005020:	2a00      	cmp	r2, #0
 8005022:	d004      	beq.n	800502e <HAL_UART_IRQHandler+0x8a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	2308      	movs	r3, #8
 8005026:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005028:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800502a:	4313      	orrs	r3, r2
 800502c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4219      	tst	r1, r3
 8005034:	d006      	beq.n	8005044 <HAL_UART_IRQHandler+0xa0>
 8005036:	0172      	lsls	r2, r6, #5
 8005038:	d504      	bpl.n	8005044 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503a:	6203      	str	r3, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800503c:	2320      	movs	r3, #32
 800503e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8005040:	4313      	orrs	r3, r2
 8005042:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005044:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d030      	beq.n	80050ac <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800504a:	2320      	movs	r3, #32
 800504c:	4219      	tst	r1, r3
 800504e:	d006      	beq.n	800505e <HAL_UART_IRQHandler+0xba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005050:	421e      	tst	r6, r3
 8005052:	d004      	beq.n	800505e <HAL_UART_IRQHandler+0xba>
        if (huart->RxISR != NULL)
 8005054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_UART_IRQHandler+0xba>
          huart->RxISR(huart);
 800505a:	0020      	movs	r0, r4
 800505c:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800505e:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005060:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005062:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8005064:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005066:	065b      	lsls	r3, r3, #25
 8005068:	d402      	bmi.n	8005070 <HAL_UART_IRQHandler+0xcc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800506a:	2328      	movs	r3, #40	; 0x28
 800506c:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800506e:	d022      	beq.n	80050b6 <HAL_UART_IRQHandler+0x112>
        UART_EndRxTransfer(huart);
 8005070:	f7ff fecc 	bl	8004e0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	420b      	tst	r3, r1
 800507c:	d017      	beq.n	80050ae <HAL_UART_IRQHandler+0x10a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005082:	2301      	movs	r3, #1
 8005084:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005088:	6822      	ldr	r2, [r4, #0]
 800508a:	6893      	ldr	r3, [r2, #8]
 800508c:	438b      	bics	r3, r1
 800508e:	6093      	str	r3, [r2, #8]
 8005090:	f380 8810 	msr	PRIMASK, r0
          if (huart->hdmarx != NULL)
 8005094:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005096:	2800      	cmp	r0, #0
 8005098:	d009      	beq.n	80050ae <HAL_UART_IRQHandler+0x10a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800509a:	4b6b      	ldr	r3, [pc, #428]	; (8005248 <HAL_UART_IRQHandler+0x2a4>)
 800509c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509e:	f7fe fe1f 	bl	8003ce0 <HAL_DMA_Abort_IT>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80050a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80050aa:	4798      	blx	r3
}
 80050ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80050ae:	0020      	movs	r0, r4
 80050b0:	f7ff ff6a 	bl	8004f88 <HAL_UART_ErrorCallback>
 80050b4:	e7fa      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
        HAL_UART_ErrorCallback(huart);
 80050b6:	f7ff ff67 	bl	8004f88 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ba:	67ee      	str	r6, [r5, #124]	; 0x7c
 80050bc:	e7f6      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d000      	beq.n	80050c6 <HAL_UART_IRQHandler+0x122>
 80050c4:	e08f      	b.n	80051e6 <HAL_UART_IRQHandler+0x242>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050c6:	2210      	movs	r2, #16
 80050c8:	4211      	tst	r1, r2
 80050ca:	d100      	bne.n	80050ce <HAL_UART_IRQHandler+0x12a>
 80050cc:	e08b      	b.n	80051e6 <HAL_UART_IRQHandler+0x242>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050ce:	4216      	tst	r6, r2
 80050d0:	d100      	bne.n	80050d4 <HAL_UART_IRQHandler+0x130>
 80050d2:	e088      	b.n	80051e6 <HAL_UART_IRQHandler+0x242>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	2640      	movs	r6, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d6:	6202      	str	r2, [r0, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	6880      	ldr	r0, [r0, #8]
 80050da:	4030      	ands	r0, r6
 80050dc:	d04d      	beq.n	800517a <HAL_UART_IRQHandler+0x1d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050de:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80050e0:	6808      	ldr	r0, [r1, #0]
 80050e2:	6841      	ldr	r1, [r0, #4]
 80050e4:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d0e0      	beq.n	80050ac <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ea:	0025      	movs	r5, r4
 80050ec:	3558      	adds	r5, #88	; 0x58
 80050ee:	882d      	ldrh	r5, [r5, #0]
 80050f0:	428d      	cmp	r5, r1
 80050f2:	d9db      	bls.n	80050ac <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 80050f4:	0025      	movs	r5, r4
 80050f6:	355a      	adds	r5, #90	; 0x5a
 80050f8:	8029      	strh	r1, [r5, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050fa:	2520      	movs	r5, #32
 80050fc:	6801      	ldr	r1, [r0, #0]
 80050fe:	4029      	ands	r1, r5
 8005100:	d12f      	bne.n	8005162 <HAL_UART_IRQHandler+0x1be>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005102:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	4a4f      	ldr	r2, [pc, #316]	; (800524c <HAL_UART_IRQHandler+0x2a8>)
 800510e:	6800      	ldr	r0, [r0, #0]
 8005110:	4010      	ands	r0, r2
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	6010      	str	r0, [r2, #0]
 8005116:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	6827      	ldr	r7, [r4, #0]
 8005124:	68b8      	ldr	r0, [r7, #8]
 8005126:	4398      	bics	r0, r3
 8005128:	60b8      	str	r0, [r7, #8]
 800512a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005136:	6827      	ldr	r7, [r4, #0]
 8005138:	68b8      	ldr	r0, [r7, #8]
 800513a:	43b0      	bics	r0, r6
 800513c:	60b8      	str	r0, [r7, #8]
 800513e:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8005142:	67e5      	str	r5, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005144:	6621      	str	r1, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005146:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514e:	2210      	movs	r2, #16
 8005150:	6821      	ldr	r1, [r4, #0]
 8005152:	680b      	ldr	r3, [r1, #0]
 8005154:	4393      	bics	r3, r2
 8005156:	600b      	str	r3, [r1, #0]
 8005158:	f380 8810 	msr	PRIMASK, r0
          (void)HAL_DMA_Abort(huart->hdmarx);
 800515c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800515e:	f7fe fd9f 	bl	8003ca0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005162:	0023      	movs	r3, r4
 8005164:	0022      	movs	r2, r4
 8005166:	335a      	adds	r3, #90	; 0x5a
 8005168:	3258      	adds	r2, #88	; 0x58
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	8811      	ldrh	r1, [r2, #0]
 800516e:	1ac9      	subs	r1, r1, r3
 8005170:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005172:	0020      	movs	r0, r4
 8005174:	f7ff ff14 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
 8005178:	e798      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800517a:	0026      	movs	r6, r4
 800517c:	365a      	adds	r6, #90	; 0x5a
 800517e:	8835      	ldrh	r5, [r6, #0]
      if ((huart->RxXferCount > 0U)
 8005180:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005182:	b2ad      	uxth	r5, r5
      if ((huart->RxXferCount > 0U)
 8005184:	2900      	cmp	r1, #0
 8005186:	d100      	bne.n	800518a <HAL_UART_IRQHandler+0x1e6>
 8005188:	e790      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518a:	0021      	movs	r1, r4
 800518c:	3158      	adds	r1, #88	; 0x58
 800518e:	8809      	ldrh	r1, [r1, #0]
 8005190:	1b49      	subs	r1, r1, r5
 8005192:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005194:	2900      	cmp	r1, #0
 8005196:	d100      	bne.n	800519a <HAL_UART_IRQHandler+0x1f6>
 8005198:	e788      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	6826      	ldr	r6, [r4, #0]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <HAL_UART_IRQHandler+0x2ac>)
 80051a6:	6835      	ldr	r5, [r6, #0]
 80051a8:	4015      	ands	r5, r2
 80051aa:	6035      	str	r5, [r6, #0]
 80051ac:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	6826      	ldr	r6, [r4, #0]
 80051ba:	68b5      	ldr	r5, [r6, #8]
 80051bc:	439d      	bics	r5, r3
 80051be:	60b5      	str	r5, [r6, #8]
 80051c0:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80051c4:	2520      	movs	r5, #32
        huart->RxISR = NULL;
 80051c6:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80051c8:	67e5      	str	r5, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ca:	6620      	str	r0, [r4, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051cc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	3232      	adds	r2, #50	; 0x32
 80051d8:	6803      	ldr	r3, [r0, #0]
 80051da:	32ff      	adds	r2, #255	; 0xff
 80051dc:	4393      	bics	r3, r2
 80051de:	6003      	str	r3, [r0, #0]
 80051e0:	f385 8810 	msr	PRIMASK, r5
 80051e4:	e7c5      	b.n	8005172 <HAL_UART_IRQHandler+0x1ce>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051e6:	2380      	movs	r3, #128	; 0x80
 80051e8:	035b      	lsls	r3, r3, #13
 80051ea:	4219      	tst	r1, r3
 80051ec:	d006      	beq.n	80051fc <HAL_UART_IRQHandler+0x258>
 80051ee:	026a      	lsls	r2, r5, #9
 80051f0:	d504      	bpl.n	80051fc <HAL_UART_IRQHandler+0x258>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051f2:	6203      	str	r3, [r0, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80051f4:	0020      	movs	r0, r4
 80051f6:	f000 fb5f 	bl	80058b8 <HAL_UARTEx_WakeupCallback>
    return;
 80051fa:	e757      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	4219      	tst	r1, r3
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x266>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005202:	421e      	tst	r6, r3
 8005204:	d001      	beq.n	800520a <HAL_UART_IRQHandler+0x266>
    if (huart->TxISR != NULL)
 8005206:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005208:	e6dd      	b.n	8004fc6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	4211      	tst	r1, r2
 800520e:	d100      	bne.n	8005212 <HAL_UART_IRQHandler+0x26e>
 8005210:	e74c      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
 8005212:	4216      	tst	r6, r2
 8005214:	d100      	bne.n	8005218 <HAL_UART_IRQHandler+0x274>
 8005216:	e749      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005218:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	2301      	movs	r3, #1
 800521e:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005222:	6821      	ldr	r1, [r4, #0]
 8005224:	680b      	ldr	r3, [r1, #0]
 8005226:	4393      	bics	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
 800522a:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800522e:	2320      	movs	r3, #32
 8005230:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005232:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005234:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8005236:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005238:	f7fe f88c 	bl	8003354 <HAL_UART_TxCpltCallback>
 800523c:	e736      	b.n	80050ac <HAL_UART_IRQHandler+0x108>
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	0000080f 	.word	0x0000080f
 8005244:	04000120 	.word	0x04000120
 8005248:	08004f8b 	.word	0x08004f8b
 800524c:	fffffeff 	.word	0xfffffeff
 8005250:	fffffedf 	.word	0xfffffedf

08005254 <UART_RxISR_16BIT.part.3>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005254:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005256:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	2201      	movs	r2, #1
 800525c:	f382 8810 	msr	PRIMASK, r2
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005260:	6801      	ldr	r1, [r0, #0]
 8005262:	4d18      	ldr	r5, [pc, #96]	; (80052c4 <UART_RxISR_16BIT.part.3+0x70>)
 8005264:	680b      	ldr	r3, [r1, #0]
 8005266:	402b      	ands	r3, r5
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	f382 8810 	msr	PRIMASK, r2

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	6801      	ldr	r1, [r0, #0]
 8005278:	688b      	ldr	r3, [r1, #8]
 800527a:	4393      	bics	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
 800527e:	f384 8810 	msr	PRIMASK, r4

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005282:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005284:	2200      	movs	r2, #0
      huart->RxState = HAL_UART_STATE_READY;
 8005286:	67c3      	str	r3, [r0, #124]	; 0x7c

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	6e03      	ldr	r3, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800528a:	6642      	str	r2, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528c:	2b01      	cmp	r3, #1
 800528e:	d116      	bne.n	80052be <UART_RxISR_16BIT.part.3+0x6a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005290:	6602      	str	r2, [r0, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005292:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	f383 8810 	msr	PRIMASK, r3

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	6801      	ldr	r1, [r0, #0]
 800529c:	330f      	adds	r3, #15
 800529e:	680a      	ldr	r2, [r1, #0]
 80052a0:	439a      	bics	r2, r3
 80052a2:	600a      	str	r2, [r1, #0]
 80052a4:	f384 8810 	msr	PRIMASK, r4

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	69d1      	ldr	r1, [r2, #28]
 80052ac:	4219      	tst	r1, r3
 80052ae:	d000      	beq.n	80052b2 <UART_RxISR_16BIT.part.3+0x5e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052b0:	6213      	str	r3, [r2, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b2:	0003      	movs	r3, r0
 80052b4:	3358      	adds	r3, #88	; 0x58
 80052b6:	8819      	ldrh	r1, [r3, #0]
 80052b8:	f7ff fe72 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_RxCpltCallback(huart);
 80052be:	f7fe f845 	bl	800334c <HAL_UART_RxCpltCallback>
 80052c2:	e7fb      	b.n	80052bc <UART_RxISR_16BIT.part.3+0x68>
 80052c4:	fffffedf 	.word	0xfffffedf

080052c8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80052ca:	b510      	push	{r4, lr}
 80052cc:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ce:	2a22      	cmp	r2, #34	; 0x22
 80052d0:	d114      	bne.n	80052fc <UART_RxISR_16BIT+0x34>
  uint16_t uhMask = huart->Mask;
 80052d2:	0001      	movs	r1, r0
 80052d4:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80052d8:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052da:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 80052dc:	400a      	ands	r2, r1
 80052de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80052e0:	0002      	movs	r2, r0
    huart->pRxBuffPtr += 2U;
 80052e2:	3302      	adds	r3, #2
 80052e4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80052e6:	325a      	adds	r2, #90	; 0x5a
 80052e8:	8813      	ldrh	r3, [r2, #0]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80052f0:	8813      	ldrh	r3, [r2, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <UART_RxISR_16BIT+0x32>
 80052f6:	f7ff ffad 	bl	8005254 <UART_RxISR_16BIT.part.3>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052fa:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052fc:	2208      	movs	r2, #8
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	430a      	orrs	r2, r1
 8005302:	619a      	str	r2, [r3, #24]
}
 8005304:	e7f9      	b.n	80052fa <UART_RxISR_16BIT+0x32>

08005306 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005306:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8005308:	b510      	push	{r4, lr}
 800530a:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800530c:	2a22      	cmp	r2, #34	; 0x22
 800530e:	d115      	bne.n	800533c <UART_RxISR_8BIT+0x36>
  uint16_t uhMask = huart->Mask;
 8005310:	0002      	movs	r2, r0
 8005312:	325c      	adds	r2, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005316:	8812      	ldrh	r2, [r2, #0]
 8005318:	4013      	ands	r3, r2
 800531a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800531c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800531e:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8005320:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005322:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005324:	3301      	adds	r3, #1
 8005326:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005328:	8813      	ldrh	r3, [r2, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	b29b      	uxth	r3, r3
 800532e:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 8005330:	8813      	ldrh	r3, [r2, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <UART_RxISR_8BIT+0x34>
 8005336:	f7ff ff8d 	bl	8005254 <UART_RxISR_16BIT.part.3>
}
 800533a:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800533c:	2208      	movs	r2, #8
 800533e:	6999      	ldr	r1, [r3, #24]
 8005340:	430a      	orrs	r2, r1
 8005342:	619a      	str	r2, [r3, #24]
}
 8005344:	e7f9      	b.n	800533a <UART_RxISR_8BIT+0x34>
	...

08005348 <UART_SetConfig>:
{
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	6925      	ldr	r5, [r4, #16]
 800534e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005350:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005352:	432a      	orrs	r2, r5
 8005354:	6965      	ldr	r5, [r4, #20]
 8005356:	69c1      	ldr	r1, [r0, #28]
 8005358:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	4d68      	ldr	r5, [pc, #416]	; (8005500 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	4028      	ands	r0, r5
 8005362:	4302      	orrs	r2, r0
 8005364:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	4866      	ldr	r0, [pc, #408]	; (8005504 <UART_SetConfig+0x1bc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536a:	4d67      	ldr	r5, [pc, #412]	; (8005508 <UART_SetConfig+0x1c0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800536c:	4002      	ands	r2, r0
 800536e:	68e0      	ldr	r0, [r4, #12]
 8005370:	4302      	orrs	r2, r0
 8005372:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005374:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005376:	42ab      	cmp	r3, r5
 8005378:	d001      	beq.n	800537e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800537a:	6a22      	ldr	r2, [r4, #32]
 800537c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	4e62      	ldr	r6, [pc, #392]	; (800550c <UART_SetConfig+0x1c4>)
 8005382:	4032      	ands	r2, r6
 8005384:	4302      	orrs	r2, r0
 8005386:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005388:	4a61      	ldr	r2, [pc, #388]	; (8005510 <UART_SetConfig+0x1c8>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d113      	bne.n	80053b6 <UART_SetConfig+0x6e>
 800538e:	200c      	movs	r0, #12
 8005390:	4b60      	ldr	r3, [pc, #384]	; (8005514 <UART_SetConfig+0x1cc>)
 8005392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005394:	4002      	ands	r2, r0
 8005396:	4860      	ldr	r0, [pc, #384]	; (8005518 <UART_SetConfig+0x1d0>)
 8005398:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800539a:	2280      	movs	r2, #128	; 0x80
 800539c:	0212      	lsls	r2, r2, #8
 800539e:	4291      	cmp	r1, r2
 80053a0:	d000      	beq.n	80053a4 <UART_SetConfig+0x5c>
 80053a2:	e07c      	b.n	800549e <UART_SetConfig+0x156>
    switch (clocksource)
 80053a4:	2808      	cmp	r0, #8
 80053a6:	d815      	bhi.n	80053d4 <UART_SetConfig+0x8c>
 80053a8:	f7fa feb8 	bl	800011c <__gnu_thumb1_case_uqi>
 80053ac:	1456534e 	.word	0x1456534e
 80053b0:	14141473 	.word	0x14141473
 80053b4:	76          	.byte	0x76
 80053b5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b6:	42ab      	cmp	r3, r5
 80053b8:	d000      	beq.n	80053bc <UART_SetConfig+0x74>
 80053ba:	e099      	b.n	80054f0 <UART_SetConfig+0x1a8>
 80053bc:	21c0      	movs	r1, #192	; 0xc0
 80053be:	2080      	movs	r0, #128	; 0x80
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <UART_SetConfig+0x1cc>)
 80053c2:	0109      	lsls	r1, r1, #4
 80053c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80053c6:	00c0      	lsls	r0, r0, #3
 80053c8:	400b      	ands	r3, r1
 80053ca:	4283      	cmp	r3, r0
 80053cc:	d039      	beq.n	8005442 <UART_SetConfig+0xfa>
 80053ce:	d803      	bhi.n	80053d8 <UART_SetConfig+0x90>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_SetConfig+0xa2>
        ret = HAL_ERROR;
 80053d4:	2001      	movs	r0, #1
 80053d6:	e00d      	b.n	80053f4 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d8:	2080      	movs	r0, #128	; 0x80
 80053da:	0100      	lsls	r0, r0, #4
 80053dc:	4283      	cmp	r3, r0
 80053de:	d00d      	beq.n	80053fc <UART_SetConfig+0xb4>
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d1f7      	bne.n	80053d4 <UART_SetConfig+0x8c>
        pclk = (uint32_t) LSE_VALUE;
 80053e4:	2080      	movs	r0, #128	; 0x80
 80053e6:	0200      	lsls	r0, r0, #8
 80053e8:	e00f      	b.n	800540a <UART_SetConfig+0xc2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ea:	f7ff fa79 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d10b      	bne.n	800540a <UART_SetConfig+0xc2>
 80053f2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80053f8:	66a3      	str	r3, [r4, #104]	; 0x68
}
 80053fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053fc:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 80053fe:	4b47      	ldr	r3, [pc, #284]	; (800551c <UART_SetConfig+0x1d4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005400:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8005402:	17c0      	asrs	r0, r0, #31
 8005404:	4018      	ands	r0, r3
 8005406:	4b46      	ldr	r3, [pc, #280]	; (8005520 <UART_SetConfig+0x1d8>)
 8005408:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800540a:	2203      	movs	r2, #3
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	435a      	muls	r2, r3
 8005410:	4282      	cmp	r2, r0
 8005412:	d8df      	bhi.n	80053d4 <UART_SetConfig+0x8c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005414:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005416:	4282      	cmp	r2, r0
 8005418:	d3dc      	bcc.n	80053d4 <UART_SetConfig+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800541a:	2700      	movs	r7, #0
 800541c:	0e02      	lsrs	r2, r0, #24
 800541e:	0201      	lsls	r1, r0, #8
 8005420:	085e      	lsrs	r6, r3, #1
 8005422:	1989      	adds	r1, r1, r6
 8005424:	417a      	adcs	r2, r7
 8005426:	0008      	movs	r0, r1
 8005428:	0011      	movs	r1, r2
 800542a:	001a      	movs	r2, r3
 800542c:	003b      	movs	r3, r7
 800542e:	f7fa ff83 	bl	8000338 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <UART_SetConfig+0x1dc>)
 8005434:	18c2      	adds	r2, r0, r3
 8005436:	4b3c      	ldr	r3, [pc, #240]	; (8005528 <UART_SetConfig+0x1e0>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005438:	429a      	cmp	r2, r3
 800543a:	d8cb      	bhi.n	80053d4 <UART_SetConfig+0x8c>
        huart->Instance->BRR = usartdiv;
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	60d8      	str	r0, [r3, #12]
 8005440:	e7d7      	b.n	80053f2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005442:	f7fe fedf 	bl	8004204 <HAL_RCC_GetSysClockFreq>
        break;
 8005446:	e7d2      	b.n	80053ee <UART_SetConfig+0xa6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005448:	f7ff fa4a 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800544c:	2800      	cmp	r0, #0
 800544e:	d10a      	bne.n	8005466 <UART_SetConfig+0x11e>
 8005450:	e7cf      	b.n	80053f2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005452:	f7ff fa55 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
        break;
 8005456:	e7f9      	b.n	800544c <UART_SetConfig+0x104>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005458:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800545a:	4b30      	ldr	r3, [pc, #192]	; (800551c <UART_SetConfig+0x1d4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800545c:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 800545e:	17c0      	asrs	r0, r0, #31
 8005460:	4018      	ands	r0, r3
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <UART_SetConfig+0x1d8>)
 8005464:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005466:	6863      	ldr	r3, [r4, #4]
 8005468:	0040      	lsls	r0, r0, #1
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	18c0      	adds	r0, r0, r3
 800546e:	6861      	ldr	r1, [r4, #4]
 8005470:	f7fa fe5e 	bl	8000130 <__udivsi3>
 8005474:	0403      	lsls	r3, r0, #16
 8005476:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005478:	492c      	ldr	r1, [pc, #176]	; (800552c <UART_SetConfig+0x1e4>)
 800547a:	3a10      	subs	r2, #16
 800547c:	428a      	cmp	r2, r1
 800547e:	d8a9      	bhi.n	80053d4 <UART_SetConfig+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005480:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005482:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005484:	4390      	bics	r0, r2
 8005486:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005488:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800548a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800548c:	4318      	orrs	r0, r3
 800548e:	60d0      	str	r0, [r2, #12]
 8005490:	e7af      	b.n	80053f2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8005492:	f7fe feb7 	bl	8004204 <HAL_RCC_GetSysClockFreq>
        break;
 8005496:	e7d9      	b.n	800544c <UART_SetConfig+0x104>
        pclk = (uint32_t) LSE_VALUE;
 8005498:	2080      	movs	r0, #128	; 0x80
 800549a:	0200      	lsls	r0, r0, #8
 800549c:	e7e3      	b.n	8005466 <UART_SetConfig+0x11e>
    switch (clocksource)
 800549e:	2808      	cmp	r0, #8
 80054a0:	d898      	bhi.n	80053d4 <UART_SetConfig+0x8c>
 80054a2:	f7fa fe31 	bl	8000108 <__gnu_thumb1_case_sqi>
 80054a6:	0a05      	.short	0x0a05
 80054a8:	971f970d 	.word	0x971f970d
 80054ac:	9797      	.short	0x9797
 80054ae:	22          	.byte	0x22
 80054af:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7ff fa16 	bl	80048e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d10a      	bne.n	80054ce <UART_SetConfig+0x186>
 80054b8:	e79b      	b.n	80053f2 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ba:	f7ff fa21 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
        break;
 80054be:	e7f9      	b.n	80054b4 <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c0:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 80054c2:	4b16      	ldr	r3, [pc, #88]	; (800551c <UART_SetConfig+0x1d4>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c4:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 80054c6:	17c0      	asrs	r0, r0, #31
 80054c8:	4018      	ands	r0, r3
 80054ca:	4b15      	ldr	r3, [pc, #84]	; (8005520 <UART_SetConfig+0x1d8>)
 80054cc:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	1818      	adds	r0, r3, r0
 80054d6:	f7fa fe2b 	bl	8000130 <__udivsi3>
 80054da:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054dc:	0002      	movs	r2, r0
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <UART_SetConfig+0x1e4>)
 80054e0:	3a10      	subs	r2, #16
 80054e2:	e7a9      	b.n	8005438 <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetSysClockFreq();
 80054e4:	f7fe fe8e 	bl	8004204 <HAL_RCC_GetSysClockFreq>
        break;
 80054e8:	e7e4      	b.n	80054b4 <UART_SetConfig+0x16c>
        pclk = (uint32_t) LSE_VALUE;
 80054ea:	2080      	movs	r0, #128	; 0x80
 80054ec:	0200      	lsls	r0, r0, #8
 80054ee:	e7ee      	b.n	80054ce <UART_SetConfig+0x186>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f0:	2380      	movs	r3, #128	; 0x80
        ret = HAL_ERROR;
 80054f2:	2001      	movs	r0, #1
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f4:	021b      	lsls	r3, r3, #8
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d100      	bne.n	80054fc <UART_SetConfig+0x1b4>
 80054fa:	e77b      	b.n	80053f4 <UART_SetConfig+0xac>
 80054fc:	e76a      	b.n	80053d4 <UART_SetConfig+0x8c>
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	efff69f3 	.word	0xefff69f3
 8005504:	ffffcfff 	.word	0xffffcfff
 8005508:	40004800 	.word	0x40004800
 800550c:	fffff4ff 	.word	0xfffff4ff
 8005510:	40004400 	.word	0x40004400
 8005514:	40021000 	.word	0x40021000
 8005518:	08006e1c 	.word	0x08006e1c
 800551c:	ff48e500 	.word	0xff48e500
 8005520:	00f42400 	.word	0x00f42400
 8005524:	fffffd00 	.word	0xfffffd00
 8005528:	000ffcff 	.word	0x000ffcff
 800552c:	0000ffef 	.word	0x0000ffef

08005530 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005530:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005532:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005534:	07da      	lsls	r2, r3, #31
 8005536:	d506      	bpl.n	8005546 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005538:	6801      	ldr	r1, [r0, #0]
 800553a:	4c28      	ldr	r4, [pc, #160]	; (80055dc <UART_AdvFeatureConfig+0xac>)
 800553c:	684a      	ldr	r2, [r1, #4]
 800553e:	4022      	ands	r2, r4
 8005540:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005542:	4322      	orrs	r2, r4
 8005544:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005546:	079a      	lsls	r2, r3, #30
 8005548:	d506      	bpl.n	8005558 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800554a:	6801      	ldr	r1, [r0, #0]
 800554c:	4c24      	ldr	r4, [pc, #144]	; (80055e0 <UART_AdvFeatureConfig+0xb0>)
 800554e:	684a      	ldr	r2, [r1, #4]
 8005550:	4022      	ands	r2, r4
 8005552:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005554:	4322      	orrs	r2, r4
 8005556:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	075a      	lsls	r2, r3, #29
 800555a:	d506      	bpl.n	800556a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800555c:	6801      	ldr	r1, [r0, #0]
 800555e:	4c21      	ldr	r4, [pc, #132]	; (80055e4 <UART_AdvFeatureConfig+0xb4>)
 8005560:	684a      	ldr	r2, [r1, #4]
 8005562:	4022      	ands	r2, r4
 8005564:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005566:	4322      	orrs	r2, r4
 8005568:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800556a:	071a      	lsls	r2, r3, #28
 800556c:	d506      	bpl.n	800557c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800556e:	6801      	ldr	r1, [r0, #0]
 8005570:	4c1d      	ldr	r4, [pc, #116]	; (80055e8 <UART_AdvFeatureConfig+0xb8>)
 8005572:	684a      	ldr	r2, [r1, #4]
 8005574:	4022      	ands	r2, r4
 8005576:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005578:	4322      	orrs	r2, r4
 800557a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800557c:	06da      	lsls	r2, r3, #27
 800557e:	d506      	bpl.n	800558e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005580:	6801      	ldr	r1, [r0, #0]
 8005582:	4c1a      	ldr	r4, [pc, #104]	; (80055ec <UART_AdvFeatureConfig+0xbc>)
 8005584:	688a      	ldr	r2, [r1, #8]
 8005586:	4022      	ands	r2, r4
 8005588:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800558a:	4322      	orrs	r2, r4
 800558c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800558e:	069a      	lsls	r2, r3, #26
 8005590:	d506      	bpl.n	80055a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005592:	6801      	ldr	r1, [r0, #0]
 8005594:	4c16      	ldr	r4, [pc, #88]	; (80055f0 <UART_AdvFeatureConfig+0xc0>)
 8005596:	688a      	ldr	r2, [r1, #8]
 8005598:	4022      	ands	r2, r4
 800559a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800559c:	4322      	orrs	r2, r4
 800559e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a0:	065a      	lsls	r2, r3, #25
 80055a2:	d510      	bpl.n	80055c6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	6801      	ldr	r1, [r0, #0]
 80055a6:	4d13      	ldr	r5, [pc, #76]	; (80055f4 <UART_AdvFeatureConfig+0xc4>)
 80055a8:	684a      	ldr	r2, [r1, #4]
 80055aa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80055ac:	402a      	ands	r2, r5
 80055ae:	4322      	orrs	r2, r4
 80055b0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b2:	2280      	movs	r2, #128	; 0x80
 80055b4:	0352      	lsls	r2, r2, #13
 80055b6:	4294      	cmp	r4, r2
 80055b8:	d105      	bne.n	80055c6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ba:	684a      	ldr	r2, [r1, #4]
 80055bc:	4c0e      	ldr	r4, [pc, #56]	; (80055f8 <UART_AdvFeatureConfig+0xc8>)
 80055be:	4022      	ands	r2, r4
 80055c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80055c2:	4322      	orrs	r2, r4
 80055c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	d506      	bpl.n	80055d8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ca:	6802      	ldr	r2, [r0, #0]
 80055cc:	490b      	ldr	r1, [pc, #44]	; (80055fc <UART_AdvFeatureConfig+0xcc>)
 80055ce:	6853      	ldr	r3, [r2, #4]
 80055d0:	400b      	ands	r3, r1
 80055d2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6053      	str	r3, [r2, #4]
}
 80055d8:	bd30      	pop	{r4, r5, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	fffdffff 	.word	0xfffdffff
 80055e0:	fffeffff 	.word	0xfffeffff
 80055e4:	fffbffff 	.word	0xfffbffff
 80055e8:	ffff7fff 	.word	0xffff7fff
 80055ec:	ffffefff 	.word	0xffffefff
 80055f0:	ffffdfff 	.word	0xffffdfff
 80055f4:	ffefffff 	.word	0xffefffff
 80055f8:	ff9fffff 	.word	0xff9fffff
 80055fc:	fff7ffff 	.word	0xfff7ffff

08005600 <UART_WaitOnFlagUntilTimeout>:
{
 8005600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005602:	2780      	movs	r7, #128	; 0x80
{
 8005604:	0004      	movs	r4, r0
 8005606:	000e      	movs	r6, r1
 8005608:	0015      	movs	r5, r2
 800560a:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800560c:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	69d3      	ldr	r3, [r2, #28]
 8005612:	4033      	ands	r3, r6
 8005614:	1b9b      	subs	r3, r3, r6
 8005616:	4259      	negs	r1, r3
 8005618:	414b      	adcs	r3, r1
 800561a:	42ab      	cmp	r3, r5
 800561c:	d001      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 800561e:	2000      	movs	r0, #0
 8005620:	e028      	b.n	8005674 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8005622:	9b08      	ldr	r3, [sp, #32]
 8005624:	3301      	adds	r3, #1
 8005626:	d0f3      	beq.n	8005610 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005628:	f7fe fad2 	bl	8003bd0 <HAL_GetTick>
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	9b08      	ldr	r3, [sp, #32]
 8005632:	4298      	cmp	r0, r3
 8005634:	d801      	bhi.n	800563a <UART_WaitOnFlagUntilTimeout+0x3a>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d11d      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563e:	2201      	movs	r2, #1
 8005640:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005644:	6821      	ldr	r1, [r4, #0]
 8005646:	4d1e      	ldr	r5, [pc, #120]	; (80056c0 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8005648:	680b      	ldr	r3, [r1, #0]
 800564a:	402b      	ands	r3, r5
 800564c:	600b      	str	r3, [r1, #0]
 800564e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005652:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005656:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	6821      	ldr	r1, [r4, #0]
 800565c:	688b      	ldr	r3, [r1, #8]
 800565e:	4393      	bics	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
 8005662:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005666:	2320      	movs	r3, #32
 8005668:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800566a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800566c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800566e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8005670:	3474      	adds	r4, #116	; 0x74
 8005672:	7023      	strb	r3, [r4, #0]
}
 8005674:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005676:	2104      	movs	r1, #4
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	420a      	tst	r2, r1
 800567e:	d0c6      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	423a      	tst	r2, r7
 8005684:	d0c3      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005686:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568c:	2201      	movs	r2, #1
 800568e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005692:	6821      	ldr	r1, [r4, #0]
 8005694:	4d0a      	ldr	r5, [pc, #40]	; (80056c0 <UART_WaitOnFlagUntilTimeout+0xc0>)
 8005696:	680b      	ldr	r3, [r1, #0]
 8005698:	402b      	ands	r3, r5
 800569a:	600b      	str	r3, [r1, #0]
 800569c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a8:	6821      	ldr	r1, [r4, #0]
 80056aa:	688b      	ldr	r3, [r1, #8]
 80056ac:	4393      	bics	r3, r2
 80056ae:	608b      	str	r3, [r1, #8]
 80056b0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80056b4:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b6:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80056b8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ba:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056bc:	67d3      	str	r3, [r2, #124]	; 0x7c
 80056be:	e7d5      	b.n	800566c <UART_WaitOnFlagUntilTimeout+0x6c>
 80056c0:	fffffe5f 	.word	0xfffffe5f

080056c4 <UART_CheckIdleState>:
{
 80056c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c6:	2600      	movs	r6, #0
{
 80056c8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ca:	1d03      	adds	r3, r0, #4
 80056cc:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80056ce:	f7fe fa7f 	bl	8003bd0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80056d4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	d416      	bmi.n	800570a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	075b      	lsls	r3, r3, #29
 80056e2:	d50a      	bpl.n	80056fa <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <UART_CheckIdleState+0x60>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	03c9      	lsls	r1, r1, #15
 80056ee:	002b      	movs	r3, r5
 80056f0:	0020      	movs	r0, r4
 80056f2:	f7ff ff85 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d112      	bne.n	8005720 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80056fa:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80056fe:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8005704:	3474      	adds	r4, #116	; 0x74
 8005706:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8005708:	e00b      	b.n	8005722 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800570a:	2180      	movs	r1, #128	; 0x80
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <UART_CheckIdleState+0x60>)
 800570e:	0032      	movs	r2, r6
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	0389      	lsls	r1, r1, #14
 8005714:	0003      	movs	r3, r0
 8005716:	0020      	movs	r0, r4
 8005718:	f7ff ff72 	bl	8005600 <UART_WaitOnFlagUntilTimeout>
 800571c:	2800      	cmp	r0, #0
 800571e:	d0dd      	beq.n	80056dc <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8005720:	2003      	movs	r0, #3
}
 8005722:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005724:	01ffffff 	.word	0x01ffffff

08005728 <HAL_UART_Init>:
{
 8005728:	b510      	push	{r4, lr}
 800572a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800572e:	2001      	movs	r0, #1
}
 8005730:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8005738:	0002      	movs	r2, r0
 800573a:	3274      	adds	r2, #116	; 0x74
 800573c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800573e:	f7fe f9a3 	bl	8003a88 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005742:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005744:	2101      	movs	r1, #1
 8005746:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005748:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800574a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800574c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800574e:	438b      	bics	r3, r1
 8005750:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005752:	f7ff fdf9 	bl	8005348 <UART_SetConfig>
 8005756:	2801      	cmp	r0, #1
 8005758:	d0e9      	beq.n	800572e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8005760:	0020      	movs	r0, r4
 8005762:	f7ff fee5 	bl	8005530 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4907      	ldr	r1, [pc, #28]	; (8005788 <HAL_UART_Init+0x60>)
 800576a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800576c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005770:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	438a      	bics	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800577a:	2201      	movs	r2, #1
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005782:	f7ff ff9f 	bl	80056c4 <UART_CheckIdleState>
 8005786:	e7d3      	b.n	8005730 <HAL_UART_Init+0x8>
 8005788:	ffffb7ff 	.word	0xffffb7ff

0800578c <UART_Start_Receive_IT>:
{
 800578c:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 800578e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005790:	0001      	movs	r1, r0
{
 8005792:	0003      	movs	r3, r0
  huart->RxXferSize  = Size;
 8005794:	3158      	adds	r1, #88	; 0x58
 8005796:	800a      	strh	r2, [r1, #0]
  huart->RxXferCount = Size;
 8005798:	804a      	strh	r2, [r1, #2]
  huart->RxISR       = NULL;
 800579a:	2000      	movs	r0, #0
  UART_MASK_COMPUTATION(huart);
 800579c:	2480      	movs	r4, #128	; 0x80
 800579e:	001a      	movs	r2, r3
 80057a0:	6899      	ldr	r1, [r3, #8]
  huart->RxISR       = NULL;
 80057a2:	6658      	str	r0, [r3, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80057a4:	0164      	lsls	r4, r4, #5
 80057a6:	325c      	adds	r2, #92	; 0x5c
 80057a8:	42a1      	cmp	r1, r4
 80057aa:	d132      	bne.n	8005812 <UART_Start_Receive_IT+0x86>
 80057ac:	6919      	ldr	r1, [r3, #16]
 80057ae:	4281      	cmp	r1, r0
 80057b0:	d12d      	bne.n	800580e <UART_Start_Receive_IT+0x82>
 80057b2:	4922      	ldr	r1, [pc, #136]	; (800583c <UART_Start_Receive_IT+0xb0>)
 80057b4:	8011      	strh	r1, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	2100      	movs	r1, #0
 80057b8:	1d1a      	adds	r2, r3, #4
 80057ba:	67d1      	str	r1, [r2, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057bc:	2222      	movs	r2, #34	; 0x22
 80057be:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c4:	3a21      	subs	r2, #33	; 0x21
 80057c6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	6819      	ldr	r1, [r3, #0]
 80057cc:	688c      	ldr	r4, [r1, #8]
 80057ce:	4322      	orrs	r2, r4
 80057d0:	608a      	str	r2, [r1, #8]
 80057d2:	f380 8810 	msr	PRIMASK, r0
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	6899      	ldr	r1, [r3, #8]
 80057da:	0152      	lsls	r2, r2, #5
 80057dc:	4291      	cmp	r1, r2
 80057de:	d12a      	bne.n	8005836 <UART_Start_Receive_IT+0xaa>
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d127      	bne.n	8005836 <UART_Start_Receive_IT+0xaa>
    huart->RxISR = UART_RxISR_16BIT;
 80057e6:	4a16      	ldr	r2, [pc, #88]	; (8005840 <UART_Start_Receive_IT+0xb4>)
    huart->RxISR = UART_RxISR_8BIT;
 80057e8:	665a      	str	r2, [r3, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80057ea:	001a      	movs	r2, r3
 80057ec:	2000      	movs	r0, #0
 80057ee:	3274      	adds	r2, #116	; 0x74
 80057f0:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f6:	2201      	movs	r2, #1
 80057f8:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	2390      	movs	r3, #144	; 0x90
 8005800:	6814      	ldr	r4, [r2, #0]
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4323      	orrs	r3, r4
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	f381 8810 	msr	PRIMASK, r1
}
 800580c:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 800580e:	21ff      	movs	r1, #255	; 0xff
 8005810:	e7d0      	b.n	80057b4 <UART_Start_Receive_IT+0x28>
 8005812:	2900      	cmp	r1, #0
 8005814:	d104      	bne.n	8005820 <UART_Start_Receive_IT+0x94>
 8005816:	6919      	ldr	r1, [r3, #16]
 8005818:	2900      	cmp	r1, #0
 800581a:	d0f8      	beq.n	800580e <UART_Start_Receive_IT+0x82>
 800581c:	217f      	movs	r1, #127	; 0x7f
 800581e:	e7c9      	b.n	80057b4 <UART_Start_Receive_IT+0x28>
 8005820:	2480      	movs	r4, #128	; 0x80
 8005822:	0564      	lsls	r4, r4, #21
 8005824:	42a1      	cmp	r1, r4
 8005826:	d104      	bne.n	8005832 <UART_Start_Receive_IT+0xa6>
 8005828:	6919      	ldr	r1, [r3, #16]
 800582a:	2900      	cmp	r1, #0
 800582c:	d0f6      	beq.n	800581c <UART_Start_Receive_IT+0x90>
 800582e:	213f      	movs	r1, #63	; 0x3f
 8005830:	e7c0      	b.n	80057b4 <UART_Start_Receive_IT+0x28>
 8005832:	8010      	strh	r0, [r2, #0]
 8005834:	e7bf      	b.n	80057b6 <UART_Start_Receive_IT+0x2a>
    huart->RxISR = UART_RxISR_8BIT;
 8005836:	4a03      	ldr	r2, [pc, #12]	; (8005844 <UART_Start_Receive_IT+0xb8>)
 8005838:	e7d6      	b.n	80057e8 <UART_Start_Receive_IT+0x5c>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	000001ff 	.word	0x000001ff
 8005840:	080052c9 	.word	0x080052c9
 8005844:	08005307 	.word	0x08005307

08005848 <HAL_UART_Receive_IT>:
{
 8005848:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800584a:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 800584c:	0003      	movs	r3, r0
    return HAL_BUSY;
 800584e:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005850:	2c20      	cmp	r4, #32
 8005852:	d12e      	bne.n	80058b2 <HAL_UART_Receive_IT+0x6a>
      return HAL_ERROR;
 8005854:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005856:	2900      	cmp	r1, #0
 8005858:	d02b      	beq.n	80058b2 <HAL_UART_Receive_IT+0x6a>
 800585a:	2a00      	cmp	r2, #0
 800585c:	d029      	beq.n	80058b2 <HAL_UART_Receive_IT+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585e:	2480      	movs	r4, #128	; 0x80
 8005860:	689d      	ldr	r5, [r3, #8]
 8005862:	0164      	lsls	r4, r4, #5
 8005864:	42a5      	cmp	r5, r4
 8005866:	d104      	bne.n	8005872 <HAL_UART_Receive_IT+0x2a>
 8005868:	691c      	ldr	r4, [r3, #16]
 800586a:	2c00      	cmp	r4, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800586e:	4201      	tst	r1, r0
 8005870:	d11f      	bne.n	80058b2 <HAL_UART_Receive_IT+0x6a>
    __HAL_LOCK(huart);
 8005872:	001c      	movs	r4, r3
 8005874:	3474      	adds	r4, #116	; 0x74
 8005876:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8005878:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800587a:	2d01      	cmp	r5, #1
 800587c:	d019      	beq.n	80058b2 <HAL_UART_Receive_IT+0x6a>
 800587e:	3801      	subs	r0, #1
 8005880:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005882:	2400      	movs	r4, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005884:	4d0b      	ldr	r5, [pc, #44]	; (80058b4 <HAL_UART_Receive_IT+0x6c>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005886:	661c      	str	r4, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005888:	681c      	ldr	r4, [r3, #0]
 800588a:	42ac      	cmp	r4, r5
 800588c:	d00e      	beq.n	80058ac <HAL_UART_Receive_IT+0x64>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800588e:	6864      	ldr	r4, [r4, #4]
 8005890:	0224      	lsls	r4, r4, #8
 8005892:	d50b      	bpl.n	80058ac <HAL_UART_Receive_IT+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005894:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005898:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800589c:	2080      	movs	r0, #128	; 0x80
 800589e:	681c      	ldr	r4, [r3, #0]
 80058a0:	04c0      	lsls	r0, r0, #19
 80058a2:	6826      	ldr	r6, [r4, #0]
 80058a4:	4330      	orrs	r0, r6
 80058a6:	6020      	str	r0, [r4, #0]
 80058a8:	f385 8810 	msr	PRIMASK, r5
    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff ff6d 	bl	800578c <UART_Start_Receive_IT>
}
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	40004800 	.word	0x40004800

080058b8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058b8:	4770      	bx	lr

080058ba <atoi>:
 80058ba:	b510      	push	{r4, lr}
 80058bc:	220a      	movs	r2, #10
 80058be:	2100      	movs	r1, #0
 80058c0:	f000 f9a2 	bl	8005c08 <strtol>
 80058c4:	bd10      	pop	{r4, pc}
	...

080058c8 <__errno>:
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <__errno+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	4770      	bx	lr
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	2000001c 	.word	0x2000001c

080058d4 <__libc_init_array>:
 80058d4:	b570      	push	{r4, r5, r6, lr}
 80058d6:	2600      	movs	r6, #0
 80058d8:	4d0c      	ldr	r5, [pc, #48]	; (800590c <__libc_init_array+0x38>)
 80058da:	4c0d      	ldr	r4, [pc, #52]	; (8005910 <__libc_init_array+0x3c>)
 80058dc:	1b64      	subs	r4, r4, r5
 80058de:	10a4      	asrs	r4, r4, #2
 80058e0:	42a6      	cmp	r6, r4
 80058e2:	d109      	bne.n	80058f8 <__libc_init_array+0x24>
 80058e4:	2600      	movs	r6, #0
 80058e6:	f001 fa0d 	bl	8006d04 <_init>
 80058ea:	4d0a      	ldr	r5, [pc, #40]	; (8005914 <__libc_init_array+0x40>)
 80058ec:	4c0a      	ldr	r4, [pc, #40]	; (8005918 <__libc_init_array+0x44>)
 80058ee:	1b64      	subs	r4, r4, r5
 80058f0:	10a4      	asrs	r4, r4, #2
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d105      	bne.n	8005902 <__libc_init_array+0x2e>
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	00b3      	lsls	r3, r6, #2
 80058fa:	58eb      	ldr	r3, [r5, r3]
 80058fc:	4798      	blx	r3
 80058fe:	3601      	adds	r6, #1
 8005900:	e7ee      	b.n	80058e0 <__libc_init_array+0xc>
 8005902:	00b3      	lsls	r3, r6, #2
 8005904:	58eb      	ldr	r3, [r5, r3]
 8005906:	4798      	blx	r3
 8005908:	3601      	adds	r6, #1
 800590a:	e7f2      	b.n	80058f2 <__libc_init_array+0x1e>
 800590c:	08006f80 	.word	0x08006f80
 8005910:	08006f80 	.word	0x08006f80
 8005914:	08006f80 	.word	0x08006f80
 8005918:	08006f84 	.word	0x08006f84

0800591c <malloc>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4b03      	ldr	r3, [pc, #12]	; (800592c <malloc+0x10>)
 8005920:	0001      	movs	r1, r0
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	f000 f86a 	bl	80059fc <_malloc_r>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	2000001c 	.word	0x2000001c

08005930 <free>:
 8005930:	b510      	push	{r4, lr}
 8005932:	4b03      	ldr	r3, [pc, #12]	; (8005940 <free+0x10>)
 8005934:	0001      	movs	r1, r0
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	f000 f816 	bl	8005968 <_free_r>
 800593c:	bd10      	pop	{r4, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	2000001c 	.word	0x2000001c

08005944 <memcpy>:
 8005944:	2300      	movs	r3, #0
 8005946:	b510      	push	{r4, lr}
 8005948:	429a      	cmp	r2, r3
 800594a:	d100      	bne.n	800594e <memcpy+0xa>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	5ccc      	ldrb	r4, [r1, r3]
 8005950:	54c4      	strb	r4, [r0, r3]
 8005952:	3301      	adds	r3, #1
 8005954:	e7f8      	b.n	8005948 <memcpy+0x4>

08005956 <memset>:
 8005956:	0003      	movs	r3, r0
 8005958:	1812      	adds	r2, r2, r0
 800595a:	4293      	cmp	r3, r2
 800595c:	d100      	bne.n	8005960 <memset+0xa>
 800595e:	4770      	bx	lr
 8005960:	7019      	strb	r1, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	e7f9      	b.n	800595a <memset+0x4>
	...

08005968 <_free_r>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	0005      	movs	r5, r0
 800596c:	2900      	cmp	r1, #0
 800596e:	d010      	beq.n	8005992 <_free_r+0x2a>
 8005970:	1f0c      	subs	r4, r1, #4
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	da00      	bge.n	800597a <_free_r+0x12>
 8005978:	18e4      	adds	r4, r4, r3
 800597a:	0028      	movs	r0, r5
 800597c:	f000 f96d 	bl	8005c5a <__malloc_lock>
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <_free_r+0x90>)
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <_free_r+0x2c>
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	6014      	str	r4, [r2, #0]
 800598c:	0028      	movs	r0, r5
 800598e:	f000 f965 	bl	8005c5c <__malloc_unlock>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	42a3      	cmp	r3, r4
 8005996:	d909      	bls.n	80059ac <_free_r+0x44>
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	1860      	adds	r0, r4, r1
 800599c:	4283      	cmp	r3, r0
 800599e:	d1f3      	bne.n	8005988 <_free_r+0x20>
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	1841      	adds	r1, r0, r1
 80059a6:	6021      	str	r1, [r4, #0]
 80059a8:	e7ee      	b.n	8005988 <_free_r+0x20>
 80059aa:	0013      	movs	r3, r2
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d001      	beq.n	80059b6 <_free_r+0x4e>
 80059b2:	42a2      	cmp	r2, r4
 80059b4:	d9f9      	bls.n	80059aa <_free_r+0x42>
 80059b6:	6819      	ldr	r1, [r3, #0]
 80059b8:	1858      	adds	r0, r3, r1
 80059ba:	42a0      	cmp	r0, r4
 80059bc:	d10b      	bne.n	80059d6 <_free_r+0x6e>
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1809      	adds	r1, r1, r0
 80059c2:	1858      	adds	r0, r3, r1
 80059c4:	6019      	str	r1, [r3, #0]
 80059c6:	4282      	cmp	r2, r0
 80059c8:	d1e0      	bne.n	800598c <_free_r+0x24>
 80059ca:	6810      	ldr	r0, [r2, #0]
 80059cc:	6852      	ldr	r2, [r2, #4]
 80059ce:	1841      	adds	r1, r0, r1
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	e7da      	b.n	800598c <_free_r+0x24>
 80059d6:	42a0      	cmp	r0, r4
 80059d8:	d902      	bls.n	80059e0 <_free_r+0x78>
 80059da:	230c      	movs	r3, #12
 80059dc:	602b      	str	r3, [r5, #0]
 80059de:	e7d5      	b.n	800598c <_free_r+0x24>
 80059e0:	6821      	ldr	r1, [r4, #0]
 80059e2:	1860      	adds	r0, r4, r1
 80059e4:	4282      	cmp	r2, r0
 80059e6:	d103      	bne.n	80059f0 <_free_r+0x88>
 80059e8:	6810      	ldr	r0, [r2, #0]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	1841      	adds	r1, r0, r1
 80059ee:	6021      	str	r1, [r4, #0]
 80059f0:	6062      	str	r2, [r4, #4]
 80059f2:	605c      	str	r4, [r3, #4]
 80059f4:	e7ca      	b.n	800598c <_free_r+0x24>
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	20000230 	.word	0x20000230

080059fc <_malloc_r>:
 80059fc:	2303      	movs	r3, #3
 80059fe:	b570      	push	{r4, r5, r6, lr}
 8005a00:	1ccd      	adds	r5, r1, #3
 8005a02:	439d      	bics	r5, r3
 8005a04:	3508      	adds	r5, #8
 8005a06:	0006      	movs	r6, r0
 8005a08:	2d0c      	cmp	r5, #12
 8005a0a:	d21e      	bcs.n	8005a4a <_malloc_r+0x4e>
 8005a0c:	250c      	movs	r5, #12
 8005a0e:	42a9      	cmp	r1, r5
 8005a10:	d81d      	bhi.n	8005a4e <_malloc_r+0x52>
 8005a12:	0030      	movs	r0, r6
 8005a14:	f000 f921 	bl	8005c5a <__malloc_lock>
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <_malloc_r+0xb4>)
 8005a1a:	6814      	ldr	r4, [r2, #0]
 8005a1c:	0021      	movs	r1, r4
 8005a1e:	2900      	cmp	r1, #0
 8005a20:	d119      	bne.n	8005a56 <_malloc_r+0x5a>
 8005a22:	4c24      	ldr	r4, [pc, #144]	; (8005ab4 <_malloc_r+0xb8>)
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <_malloc_r+0x36>
 8005a2a:	0030      	movs	r0, r6
 8005a2c:	f000 f844 	bl	8005ab8 <_sbrk_r>
 8005a30:	6020      	str	r0, [r4, #0]
 8005a32:	0029      	movs	r1, r5
 8005a34:	0030      	movs	r0, r6
 8005a36:	f000 f83f 	bl	8005ab8 <_sbrk_r>
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	d12b      	bne.n	8005a96 <_malloc_r+0x9a>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	0030      	movs	r0, r6
 8005a42:	6033      	str	r3, [r6, #0]
 8005a44:	f000 f90a 	bl	8005c5c <__malloc_unlock>
 8005a48:	e003      	b.n	8005a52 <_malloc_r+0x56>
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	dadf      	bge.n	8005a0e <_malloc_r+0x12>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	2000      	movs	r0, #0
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
 8005a56:	680b      	ldr	r3, [r1, #0]
 8005a58:	1b5b      	subs	r3, r3, r5
 8005a5a:	d419      	bmi.n	8005a90 <_malloc_r+0x94>
 8005a5c:	2b0b      	cmp	r3, #11
 8005a5e:	d903      	bls.n	8005a68 <_malloc_r+0x6c>
 8005a60:	600b      	str	r3, [r1, #0]
 8005a62:	18cc      	adds	r4, r1, r3
 8005a64:	6025      	str	r5, [r4, #0]
 8005a66:	e003      	b.n	8005a70 <_malloc_r+0x74>
 8005a68:	684b      	ldr	r3, [r1, #4]
 8005a6a:	428c      	cmp	r4, r1
 8005a6c:	d10d      	bne.n	8005a8a <_malloc_r+0x8e>
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	0030      	movs	r0, r6
 8005a72:	f000 f8f3 	bl	8005c5c <__malloc_unlock>
 8005a76:	0020      	movs	r0, r4
 8005a78:	2207      	movs	r2, #7
 8005a7a:	300b      	adds	r0, #11
 8005a7c:	1d23      	adds	r3, r4, #4
 8005a7e:	4390      	bics	r0, r2
 8005a80:	1ac3      	subs	r3, r0, r3
 8005a82:	d0e7      	beq.n	8005a54 <_malloc_r+0x58>
 8005a84:	425a      	negs	r2, r3
 8005a86:	50e2      	str	r2, [r4, r3]
 8005a88:	e7e4      	b.n	8005a54 <_malloc_r+0x58>
 8005a8a:	6063      	str	r3, [r4, #4]
 8005a8c:	000c      	movs	r4, r1
 8005a8e:	e7ef      	b.n	8005a70 <_malloc_r+0x74>
 8005a90:	000c      	movs	r4, r1
 8005a92:	6849      	ldr	r1, [r1, #4]
 8005a94:	e7c3      	b.n	8005a1e <_malloc_r+0x22>
 8005a96:	2303      	movs	r3, #3
 8005a98:	1cc4      	adds	r4, r0, #3
 8005a9a:	439c      	bics	r4, r3
 8005a9c:	42a0      	cmp	r0, r4
 8005a9e:	d0e1      	beq.n	8005a64 <_malloc_r+0x68>
 8005aa0:	1a21      	subs	r1, r4, r0
 8005aa2:	0030      	movs	r0, r6
 8005aa4:	f000 f808 	bl	8005ab8 <_sbrk_r>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d1db      	bne.n	8005a64 <_malloc_r+0x68>
 8005aac:	e7c7      	b.n	8005a3e <_malloc_r+0x42>
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	20000230 	.word	0x20000230
 8005ab4:	20000234 	.word	0x20000234

08005ab8 <_sbrk_r>:
 8005ab8:	2300      	movs	r3, #0
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	4c06      	ldr	r4, [pc, #24]	; (8005ad8 <_sbrk_r+0x20>)
 8005abe:	0005      	movs	r5, r0
 8005ac0:	0008      	movs	r0, r1
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	f7fd fe40 	bl	8003748 <_sbrk>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d103      	bne.n	8005ad4 <_sbrk_r+0x1c>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d000      	beq.n	8005ad4 <_sbrk_r+0x1c>
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	200003dc 	.word	0x200003dc

08005adc <strncpy>:
 8005adc:	b530      	push	{r4, r5, lr}
 8005ade:	0005      	movs	r5, r0
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d100      	bne.n	8005ae6 <strncpy+0xa>
 8005ae4:	bd30      	pop	{r4, r5, pc}
 8005ae6:	780c      	ldrb	r4, [r1, #0]
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	1c6b      	adds	r3, r5, #1
 8005aec:	702c      	strb	r4, [r5, #0]
 8005aee:	3101      	adds	r1, #1
 8005af0:	2c00      	cmp	r4, #0
 8005af2:	d105      	bne.n	8005b00 <strncpy+0x24>
 8005af4:	189a      	adds	r2, r3, r2
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d0f4      	beq.n	8005ae4 <strncpy+0x8>
 8005afa:	701c      	strb	r4, [r3, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e7fa      	b.n	8005af6 <strncpy+0x1a>
 8005b00:	001d      	movs	r5, r3
 8005b02:	e7ed      	b.n	8005ae0 <strncpy+0x4>

08005b04 <_strtol_l.isra.0>:
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	001f      	movs	r7, r3
 8005b08:	000e      	movs	r6, r1
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	9005      	str	r0, [sp, #20]
 8005b0e:	9101      	str	r1, [sp, #4]
 8005b10:	9202      	str	r2, [sp, #8]
 8005b12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b14:	7834      	ldrb	r4, [r6, #0]
 8005b16:	f000 f88b 	bl	8005c30 <__locale_ctype_ptr_l>
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	1900      	adds	r0, r0, r4
 8005b1e:	7843      	ldrb	r3, [r0, #1]
 8005b20:	1c75      	adds	r5, r6, #1
 8005b22:	4013      	ands	r3, r2
 8005b24:	d136      	bne.n	8005b94 <_strtol_l.isra.0+0x90>
 8005b26:	2c2d      	cmp	r4, #45	; 0x2d
 8005b28:	d136      	bne.n	8005b98 <_strtol_l.isra.0+0x94>
 8005b2a:	1cb5      	adds	r5, r6, #2
 8005b2c:	7874      	ldrb	r4, [r6, #1]
 8005b2e:	2601      	movs	r6, #1
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	d062      	beq.n	8005bfa <_strtol_l.isra.0+0xf6>
 8005b34:	2f10      	cmp	r7, #16
 8005b36:	d109      	bne.n	8005b4c <_strtol_l.isra.0+0x48>
 8005b38:	2c30      	cmp	r4, #48	; 0x30
 8005b3a:	d107      	bne.n	8005b4c <_strtol_l.isra.0+0x48>
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	782b      	ldrb	r3, [r5, #0]
 8005b40:	4393      	bics	r3, r2
 8005b42:	2b58      	cmp	r3, #88	; 0x58
 8005b44:	d154      	bne.n	8005bf0 <_strtol_l.isra.0+0xec>
 8005b46:	2710      	movs	r7, #16
 8005b48:	786c      	ldrb	r4, [r5, #1]
 8005b4a:	3502      	adds	r5, #2
 8005b4c:	4b2d      	ldr	r3, [pc, #180]	; (8005c04 <_strtol_l.isra.0+0x100>)
 8005b4e:	0039      	movs	r1, r7
 8005b50:	18f3      	adds	r3, r6, r3
 8005b52:	0018      	movs	r0, r3
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	f7fa fb71 	bl	800023c <__aeabi_uidivmod>
 8005b5a:	9104      	str	r1, [sp, #16]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	2300      	movs	r3, #0
 8005b60:	4249      	negs	r1, r1
 8005b62:	0002      	movs	r2, r0
 8005b64:	468c      	mov	ip, r1
 8005b66:	0018      	movs	r0, r3
 8005b68:	0021      	movs	r1, r4
 8005b6a:	3930      	subs	r1, #48	; 0x30
 8005b6c:	2909      	cmp	r1, #9
 8005b6e:	d81a      	bhi.n	8005ba6 <_strtol_l.isra.0+0xa2>
 8005b70:	000c      	movs	r4, r1
 8005b72:	42a7      	cmp	r7, r4
 8005b74:	dd23      	ble.n	8005bbe <_strtol_l.isra.0+0xba>
 8005b76:	1c59      	adds	r1, r3, #1
 8005b78:	d009      	beq.n	8005b8e <_strtol_l.isra.0+0x8a>
 8005b7a:	4663      	mov	r3, ip
 8005b7c:	4282      	cmp	r2, r0
 8005b7e:	d306      	bcc.n	8005b8e <_strtol_l.isra.0+0x8a>
 8005b80:	d102      	bne.n	8005b88 <_strtol_l.isra.0+0x84>
 8005b82:	9904      	ldr	r1, [sp, #16]
 8005b84:	42a1      	cmp	r1, r4
 8005b86:	db02      	blt.n	8005b8e <_strtol_l.isra.0+0x8a>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4378      	muls	r0, r7
 8005b8c:	1820      	adds	r0, r4, r0
 8005b8e:	782c      	ldrb	r4, [r5, #0]
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7e9      	b.n	8005b68 <_strtol_l.isra.0+0x64>
 8005b94:	002e      	movs	r6, r5
 8005b96:	e7bc      	b.n	8005b12 <_strtol_l.isra.0+0xe>
 8005b98:	2c2b      	cmp	r4, #43	; 0x2b
 8005b9a:	d001      	beq.n	8005ba0 <_strtol_l.isra.0+0x9c>
 8005b9c:	001e      	movs	r6, r3
 8005b9e:	e7c7      	b.n	8005b30 <_strtol_l.isra.0+0x2c>
 8005ba0:	1cb5      	adds	r5, r6, #2
 8005ba2:	7874      	ldrb	r4, [r6, #1]
 8005ba4:	e7fa      	b.n	8005b9c <_strtol_l.isra.0+0x98>
 8005ba6:	0021      	movs	r1, r4
 8005ba8:	3941      	subs	r1, #65	; 0x41
 8005baa:	2919      	cmp	r1, #25
 8005bac:	d801      	bhi.n	8005bb2 <_strtol_l.isra.0+0xae>
 8005bae:	3c37      	subs	r4, #55	; 0x37
 8005bb0:	e7df      	b.n	8005b72 <_strtol_l.isra.0+0x6e>
 8005bb2:	0021      	movs	r1, r4
 8005bb4:	3961      	subs	r1, #97	; 0x61
 8005bb6:	2919      	cmp	r1, #25
 8005bb8:	d801      	bhi.n	8005bbe <_strtol_l.isra.0+0xba>
 8005bba:	3c57      	subs	r4, #87	; 0x57
 8005bbc:	e7d9      	b.n	8005b72 <_strtol_l.isra.0+0x6e>
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	d108      	bne.n	8005bd4 <_strtol_l.isra.0+0xd0>
 8005bc2:	9a05      	ldr	r2, [sp, #20]
 8005bc4:	3323      	adds	r3, #35	; 0x23
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	9b02      	ldr	r3, [sp, #8]
 8005bca:	9803      	ldr	r0, [sp, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <_strtol_l.isra.0+0xe0>
 8005bd0:	b007      	add	sp, #28
 8005bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd4:	2e00      	cmp	r6, #0
 8005bd6:	d000      	beq.n	8005bda <_strtol_l.isra.0+0xd6>
 8005bd8:	4240      	negs	r0, r0
 8005bda:	9a02      	ldr	r2, [sp, #8]
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d0f7      	beq.n	8005bd0 <_strtol_l.isra.0+0xcc>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <_strtol_l.isra.0+0xe4>
 8005be4:	1e6b      	subs	r3, r5, #1
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	9b02      	ldr	r3, [sp, #8]
 8005bea:	9a01      	ldr	r2, [sp, #4]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e7ef      	b.n	8005bd0 <_strtol_l.isra.0+0xcc>
 8005bf0:	2430      	movs	r4, #48	; 0x30
 8005bf2:	2f00      	cmp	r7, #0
 8005bf4:	d1aa      	bne.n	8005b4c <_strtol_l.isra.0+0x48>
 8005bf6:	2708      	movs	r7, #8
 8005bf8:	e7a8      	b.n	8005b4c <_strtol_l.isra.0+0x48>
 8005bfa:	2c30      	cmp	r4, #48	; 0x30
 8005bfc:	d09e      	beq.n	8005b3c <_strtol_l.isra.0+0x38>
 8005bfe:	270a      	movs	r7, #10
 8005c00:	e7a4      	b.n	8005b4c <_strtol_l.isra.0+0x48>
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	7fffffff 	.word	0x7fffffff

08005c08 <strtol>:
 8005c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c0a:	0013      	movs	r3, r2
 8005c0c:	4a06      	ldr	r2, [pc, #24]	; (8005c28 <strtol+0x20>)
 8005c0e:	0005      	movs	r5, r0
 8005c10:	6810      	ldr	r0, [r2, #0]
 8005c12:	6a04      	ldr	r4, [r0, #32]
 8005c14:	2c00      	cmp	r4, #0
 8005c16:	d100      	bne.n	8005c1a <strtol+0x12>
 8005c18:	4c04      	ldr	r4, [pc, #16]	; (8005c2c <strtol+0x24>)
 8005c1a:	000a      	movs	r2, r1
 8005c1c:	9400      	str	r4, [sp, #0]
 8005c1e:	0029      	movs	r1, r5
 8005c20:	f7ff ff70 	bl	8005b04 <_strtol_l.isra.0>
 8005c24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	2000001c 	.word	0x2000001c
 8005c2c:	20000080 	.word	0x20000080

08005c30 <__locale_ctype_ptr_l>:
 8005c30:	30ec      	adds	r0, #236	; 0xec
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	4770      	bx	lr

08005c36 <__ascii_mbtowc>:
 8005c36:	b082      	sub	sp, #8
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	d100      	bne.n	8005c3e <__ascii_mbtowc+0x8>
 8005c3c:	a901      	add	r1, sp, #4
 8005c3e:	1e10      	subs	r0, r2, #0
 8005c40:	d006      	beq.n	8005c50 <__ascii_mbtowc+0x1a>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <__ascii_mbtowc+0x1e>
 8005c46:	7813      	ldrb	r3, [r2, #0]
 8005c48:	600b      	str	r3, [r1, #0]
 8005c4a:	7810      	ldrb	r0, [r2, #0]
 8005c4c:	1e43      	subs	r3, r0, #1
 8005c4e:	4198      	sbcs	r0, r3
 8005c50:	b002      	add	sp, #8
 8005c52:	4770      	bx	lr
 8005c54:	2002      	movs	r0, #2
 8005c56:	4240      	negs	r0, r0
 8005c58:	e7fa      	b.n	8005c50 <__ascii_mbtowc+0x1a>

08005c5a <__malloc_lock>:
 8005c5a:	4770      	bx	lr

08005c5c <__malloc_unlock>:
 8005c5c:	4770      	bx	lr

08005c5e <__ascii_wctomb>:
 8005c5e:	1e0b      	subs	r3, r1, #0
 8005c60:	d004      	beq.n	8005c6c <__ascii_wctomb+0xe>
 8005c62:	2aff      	cmp	r2, #255	; 0xff
 8005c64:	d904      	bls.n	8005c70 <__ascii_wctomb+0x12>
 8005c66:	238a      	movs	r3, #138	; 0x8a
 8005c68:	6003      	str	r3, [r0, #0]
 8005c6a:	3b8b      	subs	r3, #139	; 0x8b
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	4770      	bx	lr
 8005c70:	700a      	strb	r2, [r1, #0]
 8005c72:	2301      	movs	r3, #1
 8005c74:	e7fa      	b.n	8005c6c <__ascii_wctomb+0xe>
	...

08005c78 <pow>:
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	2400      	movs	r4, #0
 8005c7c:	b091      	sub	sp, #68	; 0x44
 8005c7e:	001f      	movs	r7, r3
 8005c80:	9000      	str	r0, [sp, #0]
 8005c82:	9101      	str	r1, [sp, #4]
 8005c84:	0016      	movs	r6, r2
 8005c86:	f000 f98d 	bl	8005fa4 <__ieee754_pow>
 8005c8a:	4bbe      	ldr	r3, [pc, #760]	; (8005f84 <pow+0x30c>)
 8005c8c:	9002      	str	r0, [sp, #8]
 8005c8e:	9103      	str	r1, [sp, #12]
 8005c90:	571c      	ldrsb	r4, [r3, r4]
 8005c92:	1c63      	adds	r3, r4, #1
 8005c94:	d100      	bne.n	8005c98 <pow+0x20>
 8005c96:	e0d4      	b.n	8005e42 <pow+0x1ca>
 8005c98:	0032      	movs	r2, r6
 8005c9a:	003b      	movs	r3, r7
 8005c9c:	0030      	movs	r0, r6
 8005c9e:	0039      	movs	r1, r7
 8005ca0:	f7fc ff4e 	bl	8002b40 <__aeabi_dcmpun>
 8005ca4:	1e05      	subs	r5, r0, #0
 8005ca6:	d000      	beq.n	8005caa <pow+0x32>
 8005ca8:	e0cb      	b.n	8005e42 <pow+0x1ca>
 8005caa:	9a00      	ldr	r2, [sp, #0]
 8005cac:	9b01      	ldr	r3, [sp, #4]
 8005cae:	0010      	movs	r0, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	f7fc ff45 	bl	8002b40 <__aeabi_dcmpun>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	9005      	str	r0, [sp, #20]
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d01e      	beq.n	8005cfc <pow+0x84>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	0030      	movs	r0, r6
 8005cc2:	0039      	movs	r1, r7
 8005cc4:	f7fa fad0 	bl	8000268 <__aeabi_dcmpeq>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d100      	bne.n	8005cce <pow+0x56>
 8005ccc:	e0b9      	b.n	8005e42 <pow+0x1ca>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	9306      	str	r3, [sp, #24]
 8005cd2:	4bad      	ldr	r3, [pc, #692]	; (8005f88 <pow+0x310>)
 8005cd4:	950e      	str	r5, [sp, #56]	; 0x38
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	9a00      	ldr	r2, [sp, #0]
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	9208      	str	r2, [sp, #32]
 8005cde:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	4baa      	ldr	r3, [pc, #680]	; (8005f8c <pow+0x314>)
 8005ce4:	960a      	str	r6, [sp, #40]	; 0x28
 8005ce6:	970b      	str	r7, [sp, #44]	; 0x2c
 8005ce8:	920c      	str	r2, [sp, #48]	; 0x30
 8005cea:	930d      	str	r3, [sp, #52]	; 0x34
 8005cec:	2c02      	cmp	r4, #2
 8005cee:	d033      	beq.n	8005d58 <pow+0xe0>
 8005cf0:	a806      	add	r0, sp, #24
 8005cf2:	f000 ff0b 	bl	8006b0c <matherr>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d125      	bne.n	8005d46 <pow+0xce>
 8005cfa:	e059      	b.n	8005db0 <pow+0x138>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	9800      	ldr	r0, [sp, #0]
 8005d00:	9901      	ldr	r1, [sp, #4]
 8005d02:	f7fa fab1 	bl	8000268 <__aeabi_dcmpeq>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d057      	beq.n	8005dba <pow+0x142>
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	0030      	movs	r0, r6
 8005d10:	0039      	movs	r1, r7
 8005d12:	f7fa faa9 	bl	8000268 <__aeabi_dcmpeq>
 8005d16:	1e05      	subs	r5, r0, #0
 8005d18:	d021      	beq.n	8005d5e <pow+0xe6>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	9306      	str	r3, [sp, #24]
 8005d1e:	4b9a      	ldr	r3, [pc, #616]	; (8005f88 <pow+0x310>)
 8005d20:	960a      	str	r6, [sp, #40]	; 0x28
 8005d22:	970b      	str	r7, [sp, #44]	; 0x2c
 8005d24:	9307      	str	r3, [sp, #28]
 8005d26:	9b05      	ldr	r3, [sp, #20]
 8005d28:	930e      	str	r3, [sp, #56]	; 0x38
 8005d2a:	9a00      	ldr	r2, [sp, #0]
 8005d2c:	9b01      	ldr	r3, [sp, #4]
 8005d2e:	9208      	str	r2, [sp, #32]
 8005d30:	9309      	str	r3, [sp, #36]	; 0x24
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	920c      	str	r2, [sp, #48]	; 0x30
 8005d38:	930d      	str	r3, [sp, #52]	; 0x34
 8005d3a:	2c00      	cmp	r4, #0
 8005d3c:	d0d8      	beq.n	8005cf0 <pow+0x78>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4b92      	ldr	r3, [pc, #584]	; (8005f8c <pow+0x314>)
 8005d42:	920c      	str	r2, [sp, #48]	; 0x30
 8005d44:	930d      	str	r3, [sp, #52]	; 0x34
 8005d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <pow+0xe0>
 8005d4e:	f7ff fdbb 	bl	80058c8 <__errno>
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	6003      	str	r3, [r0, #0]
 8005d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d5a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005d5c:	e06f      	b.n	8005e3e <pow+0x1c6>
 8005d5e:	0030      	movs	r0, r6
 8005d60:	0039      	movs	r1, r7
 8005d62:	f000 fecb 	bl	8006afc <finite>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d06b      	beq.n	8005e42 <pow+0x1ca>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	0030      	movs	r0, r6
 8005d70:	0039      	movs	r1, r7
 8005d72:	f7fa fa7f 	bl	8000274 <__aeabi_dcmplt>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d063      	beq.n	8005e42 <pow+0x1ca>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9306      	str	r3, [sp, #24]
 8005d7e:	4b82      	ldr	r3, [pc, #520]	; (8005f88 <pow+0x310>)
 8005d80:	950e      	str	r5, [sp, #56]	; 0x38
 8005d82:	9307      	str	r3, [sp, #28]
 8005d84:	9b00      	ldr	r3, [sp, #0]
 8005d86:	9c01      	ldr	r4, [sp, #4]
 8005d88:	9308      	str	r3, [sp, #32]
 8005d8a:	9409      	str	r4, [sp, #36]	; 0x24
 8005d8c:	4b7d      	ldr	r3, [pc, #500]	; (8005f84 <pow+0x30c>)
 8005d8e:	960a      	str	r6, [sp, #40]	; 0x28
 8005d90:	970b      	str	r7, [sp, #44]	; 0x2c
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	b25b      	sxtb	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d104      	bne.n	8005da4 <pow+0x12c>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2400      	movs	r4, #0
 8005d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005da0:	940d      	str	r4, [sp, #52]	; 0x34
 8005da2:	e7a5      	b.n	8005cf0 <pow+0x78>
 8005da4:	2000      	movs	r0, #0
 8005da6:	497a      	ldr	r1, [pc, #488]	; (8005f90 <pow+0x318>)
 8005da8:	900c      	str	r0, [sp, #48]	; 0x30
 8005daa:	910d      	str	r1, [sp, #52]	; 0x34
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d19f      	bne.n	8005cf0 <pow+0x78>
 8005db0:	f7ff fd8a 	bl	80058c8 <__errno>
 8005db4:	2321      	movs	r3, #33	; 0x21
 8005db6:	6003      	str	r3, [r0, #0]
 8005db8:	e7c5      	b.n	8005d46 <pow+0xce>
 8005dba:	9802      	ldr	r0, [sp, #8]
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	f000 fe9d 	bl	8006afc <finite>
 8005dc2:	9005      	str	r0, [sp, #20]
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d000      	beq.n	8005dca <pow+0x152>
 8005dc8:	e0a5      	b.n	8005f16 <pow+0x29e>
 8005dca:	9800      	ldr	r0, [sp, #0]
 8005dcc:	9901      	ldr	r1, [sp, #4]
 8005dce:	f000 fe95 	bl	8006afc <finite>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d100      	bne.n	8005dd8 <pow+0x160>
 8005dd6:	e09e      	b.n	8005f16 <pow+0x29e>
 8005dd8:	0030      	movs	r0, r6
 8005dda:	0039      	movs	r1, r7
 8005ddc:	f000 fe8e 	bl	8006afc <finite>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d100      	bne.n	8005de6 <pow+0x16e>
 8005de4:	e097      	b.n	8005f16 <pow+0x29e>
 8005de6:	2500      	movs	r5, #0
 8005de8:	4b66      	ldr	r3, [pc, #408]	; (8005f84 <pow+0x30c>)
 8005dea:	ac06      	add	r4, sp, #24
 8005dec:	575d      	ldrsb	r5, [r3, r5]
 8005dee:	9a02      	ldr	r2, [sp, #8]
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	0019      	movs	r1, r3
 8005df4:	0010      	movs	r0, r2
 8005df6:	f7fc fea3 	bl	8002b40 <__aeabi_dcmpun>
 8005dfa:	4b63      	ldr	r3, [pc, #396]	; (8005f88 <pow+0x310>)
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d031      	beq.n	8005e64 <pow+0x1ec>
 8005e00:	2201      	movs	r2, #1
 8005e02:	6063      	str	r3, [r4, #4]
 8005e04:	9b05      	ldr	r3, [sp, #20]
 8005e06:	9206      	str	r2, [sp, #24]
 8005e08:	6223      	str	r3, [r4, #32]
 8005e0a:	6126      	str	r6, [r4, #16]
 8005e0c:	6167      	str	r7, [r4, #20]
 8005e0e:	9a00      	ldr	r2, [sp, #0]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	60a2      	str	r2, [r4, #8]
 8005e14:	60e3      	str	r3, [r4, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	d115      	bne.n	8005e4a <pow+0x1d2>
 8005e1e:	61a2      	str	r2, [r4, #24]
 8005e20:	61e3      	str	r3, [r4, #28]
 8005e22:	0020      	movs	r0, r4
 8005e24:	f000 fe72 	bl	8006b0c <matherr>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d016      	beq.n	8005e5a <pow+0x1e2>
 8005e2c:	6a23      	ldr	r3, [r4, #32]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <pow+0x1c2>
 8005e32:	f7ff fd49 	bl	80058c8 <__errno>
 8005e36:	6a23      	ldr	r3, [r4, #32]
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	69a3      	ldr	r3, [r4, #24]
 8005e3c:	69e4      	ldr	r4, [r4, #28]
 8005e3e:	9302      	str	r3, [sp, #8]
 8005e40:	9403      	str	r4, [sp, #12]
 8005e42:	9802      	ldr	r0, [sp, #8]
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	b011      	add	sp, #68	; 0x44
 8005e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e4a:	0010      	movs	r0, r2
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	f7fb fcb3 	bl	80017b8 <__aeabi_ddiv>
 8005e52:	61a0      	str	r0, [r4, #24]
 8005e54:	61e1      	str	r1, [r4, #28]
 8005e56:	2d02      	cmp	r5, #2
 8005e58:	d1e3      	bne.n	8005e22 <pow+0x1aa>
 8005e5a:	f7ff fd35 	bl	80058c8 <__errno>
 8005e5e:	2321      	movs	r3, #33	; 0x21
 8005e60:	6003      	str	r3, [r0, #0]
 8005e62:	e7e3      	b.n	8005e2c <pow+0x1b4>
 8005e64:	2203      	movs	r2, #3
 8005e66:	6126      	str	r6, [r4, #16]
 8005e68:	6167      	str	r7, [r4, #20]
 8005e6a:	9206      	str	r2, [sp, #24]
 8005e6c:	6063      	str	r3, [r4, #4]
 8005e6e:	6220      	str	r0, [r4, #32]
 8005e70:	9a00      	ldr	r2, [sp, #0]
 8005e72:	9b01      	ldr	r3, [sp, #4]
 8005e74:	0030      	movs	r0, r6
 8005e76:	60a2      	str	r2, [r4, #8]
 8005e78:	60e3      	str	r3, [r4, #12]
 8005e7a:	0039      	movs	r1, r7
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b45      	ldr	r3, [pc, #276]	; (8005f94 <pow+0x31c>)
 8005e80:	f7fc f8a4 	bl	8001fcc <__aeabi_dmul>
 8005e84:	0006      	movs	r6, r0
 8005e86:	000f      	movs	r7, r1
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	d124      	bne.n	8005ed6 <pow+0x25e>
 8005e8c:	9800      	ldr	r0, [sp, #0]
 8005e8e:	9901      	ldr	r1, [sp, #4]
 8005e90:	22e0      	movs	r2, #224	; 0xe0
 8005e92:	4b41      	ldr	r3, [pc, #260]	; (8005f98 <pow+0x320>)
 8005e94:	0612      	lsls	r2, r2, #24
 8005e96:	61a2      	str	r2, [r4, #24]
 8005e98:	61e3      	str	r3, [r4, #28]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f7fa f9e9 	bl	8000274 <__aeabi_dcmplt>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d030      	beq.n	8005f08 <pow+0x290>
 8005ea6:	0030      	movs	r0, r6
 8005ea8:	0039      	movs	r1, r7
 8005eaa:	f000 fe37 	bl	8006b1c <rint>
 8005eae:	0032      	movs	r2, r6
 8005eb0:	003b      	movs	r3, r7
 8005eb2:	f7fa f9d9 	bl	8000268 <__aeabi_dcmpeq>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d104      	bne.n	8005ec4 <pow+0x24c>
 8005eba:	22e0      	movs	r2, #224	; 0xe0
 8005ebc:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <pow+0x324>)
 8005ebe:	0612      	lsls	r2, r2, #24
 8005ec0:	61a2      	str	r2, [r4, #24]
 8005ec2:	61e3      	str	r3, [r4, #28]
 8005ec4:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <pow+0x30c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b25b      	sxtb	r3, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d11c      	bne.n	8005f08 <pow+0x290>
 8005ece:	f7ff fcfb 	bl	80058c8 <__errno>
 8005ed2:	2322      	movs	r3, #34	; 0x22
 8005ed4:	e7c4      	b.n	8005e60 <pow+0x1e8>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	9800      	ldr	r0, [sp, #0]
 8005eda:	9901      	ldr	r1, [sp, #4]
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <pow+0x328>)
 8005ede:	61a2      	str	r2, [r4, #24]
 8005ee0:	61e3      	str	r3, [r4, #28]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7fa f9c5 	bl	8000274 <__aeabi_dcmplt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d0ea      	beq.n	8005ec4 <pow+0x24c>
 8005eee:	0030      	movs	r0, r6
 8005ef0:	0039      	movs	r1, r7
 8005ef2:	f000 fe13 	bl	8006b1c <rint>
 8005ef6:	0032      	movs	r2, r6
 8005ef8:	003b      	movs	r3, r7
 8005efa:	f7fa f9b5 	bl	8000268 <__aeabi_dcmpeq>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1e0      	bne.n	8005ec4 <pow+0x24c>
 8005f02:	2200      	movs	r2, #0
 8005f04:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <pow+0x318>)
 8005f06:	e7db      	b.n	8005ec0 <pow+0x248>
 8005f08:	0020      	movs	r0, r4
 8005f0a:	f000 fdff 	bl	8006b0c <matherr>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d000      	beq.n	8005f14 <pow+0x29c>
 8005f12:	e78b      	b.n	8005e2c <pow+0x1b4>
 8005f14:	e7db      	b.n	8005ece <pow+0x256>
 8005f16:	2200      	movs	r2, #0
 8005f18:	9802      	ldr	r0, [sp, #8]
 8005f1a:	9903      	ldr	r1, [sp, #12]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f7fa f9a3 	bl	8000268 <__aeabi_dcmpeq>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d100      	bne.n	8005f28 <pow+0x2b0>
 8005f26:	e78c      	b.n	8005e42 <pow+0x1ca>
 8005f28:	9800      	ldr	r0, [sp, #0]
 8005f2a:	9901      	ldr	r1, [sp, #4]
 8005f2c:	f000 fde6 	bl	8006afc <finite>
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d100      	bne.n	8005f36 <pow+0x2be>
 8005f34:	e785      	b.n	8005e42 <pow+0x1ca>
 8005f36:	0030      	movs	r0, r6
 8005f38:	0039      	movs	r1, r7
 8005f3a:	f000 fddf 	bl	8006afc <finite>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d100      	bne.n	8005f44 <pow+0x2cc>
 8005f42:	e77e      	b.n	8005e42 <pow+0x1ca>
 8005f44:	2304      	movs	r3, #4
 8005f46:	9306      	str	r3, [sp, #24]
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <pow+0x310>)
 8005f4a:	960a      	str	r6, [sp, #40]	; 0x28
 8005f4c:	970b      	str	r7, [sp, #44]	; 0x2c
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	2300      	movs	r3, #0
 8005f52:	930e      	str	r3, [sp, #56]	; 0x38
 8005f54:	9b00      	ldr	r3, [sp, #0]
 8005f56:	9c01      	ldr	r4, [sp, #4]
 8005f58:	9308      	str	r3, [sp, #32]
 8005f5a:	9409      	str	r4, [sp, #36]	; 0x24
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2400      	movs	r4, #0
 8005f60:	930c      	str	r3, [sp, #48]	; 0x30
 8005f62:	940d      	str	r4, [sp, #52]	; 0x34
 8005f64:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <pow+0x30c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d103      	bne.n	8005f76 <pow+0x2fe>
 8005f6e:	f7ff fcab 	bl	80058c8 <__errno>
 8005f72:	2322      	movs	r3, #34	; 0x22
 8005f74:	e71f      	b.n	8005db6 <pow+0x13e>
 8005f76:	a806      	add	r0, sp, #24
 8005f78:	f000 fdc8 	bl	8006b0c <matherr>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d000      	beq.n	8005f82 <pow+0x30a>
 8005f80:	e6e1      	b.n	8005d46 <pow+0xce>
 8005f82:	e7f4      	b.n	8005f6e <pow+0x2f6>
 8005f84:	200001ec 	.word	0x200001ec
 8005f88:	08006f34 	.word	0x08006f34
 8005f8c:	3ff00000 	.word	0x3ff00000
 8005f90:	fff00000 	.word	0xfff00000
 8005f94:	3fe00000 	.word	0x3fe00000
 8005f98:	47efffff 	.word	0x47efffff
 8005f9c:	c7efffff 	.word	0xc7efffff
 8005fa0:	7ff00000 	.word	0x7ff00000

08005fa4 <__ieee754_pow>:
 8005fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa6:	b095      	sub	sp, #84	; 0x54
 8005fa8:	9202      	str	r2, [sp, #8]
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	9b03      	ldr	r3, [sp, #12]
 8005fae:	000e      	movs	r6, r1
 8005fb0:	9902      	ldr	r1, [sp, #8]
 8005fb2:	005d      	lsls	r5, r3, #1
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	000b      	movs	r3, r1
 8005fb8:	086d      	lsrs	r5, r5, #1
 8005fba:	0007      	movs	r7, r0
 8005fbc:	432b      	orrs	r3, r5
 8005fbe:	d101      	bne.n	8005fc4 <__ieee754_pow+0x20>
 8005fc0:	f000 fcad 	bl	800691e <__ieee754_pow+0x97a>
 8005fc4:	4b7e      	ldr	r3, [pc, #504]	; (80061c0 <__ieee754_pow+0x21c>)
 8005fc6:	0074      	lsls	r4, r6, #1
 8005fc8:	9608      	str	r6, [sp, #32]
 8005fca:	9000      	str	r0, [sp, #0]
 8005fcc:	0864      	lsrs	r4, r4, #1
 8005fce:	469c      	mov	ip, r3
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	dc0b      	bgt.n	8005fec <__ieee754_pow+0x48>
 8005fd4:	d104      	bne.n	8005fe0 <__ieee754_pow+0x3c>
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d108      	bne.n	8005fec <__ieee754_pow+0x48>
 8005fda:	42a5      	cmp	r5, r4
 8005fdc:	dc0c      	bgt.n	8005ff8 <__ieee754_pow+0x54>
 8005fde:	e001      	b.n	8005fe4 <__ieee754_pow+0x40>
 8005fe0:	429d      	cmp	r5, r3
 8005fe2:	dc03      	bgt.n	8005fec <__ieee754_pow+0x48>
 8005fe4:	4565      	cmp	r5, ip
 8005fe6:	d10d      	bne.n	8006004 <__ieee754_pow+0x60>
 8005fe8:	2900      	cmp	r1, #0
 8005fea:	d00b      	beq.n	8006004 <__ieee754_pow+0x60>
 8005fec:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <__ieee754_pow+0x220>)
 8005fee:	18e4      	adds	r4, r4, r3
 8005ff0:	4327      	orrs	r7, r4
 8005ff2:	d101      	bne.n	8005ff8 <__ieee754_pow+0x54>
 8005ff4:	f000 fc93 	bl	800691e <__ieee754_pow+0x97a>
 8005ff8:	4873      	ldr	r0, [pc, #460]	; (80061c8 <__ieee754_pow+0x224>)
 8005ffa:	f000 fd89 	bl	8006b10 <nan>
 8005ffe:	9000      	str	r0, [sp, #0]
 8006000:	9101      	str	r1, [sp, #4]
 8006002:	e061      	b.n	80060c8 <__ieee754_pow+0x124>
 8006004:	2300      	movs	r3, #0
 8006006:	9306      	str	r3, [sp, #24]
 8006008:	2e00      	cmp	r6, #0
 800600a:	da17      	bge.n	800603c <__ieee754_pow+0x98>
 800600c:	4a6f      	ldr	r2, [pc, #444]	; (80061cc <__ieee754_pow+0x228>)
 800600e:	4295      	cmp	r5, r2
 8006010:	dc4d      	bgt.n	80060ae <__ieee754_pow+0x10a>
 8006012:	4a6f      	ldr	r2, [pc, #444]	; (80061d0 <__ieee754_pow+0x22c>)
 8006014:	4295      	cmp	r5, r2
 8006016:	dd11      	ble.n	800603c <__ieee754_pow+0x98>
 8006018:	4b6e      	ldr	r3, [pc, #440]	; (80061d4 <__ieee754_pow+0x230>)
 800601a:	152a      	asrs	r2, r5, #20
 800601c:	18d2      	adds	r2, r2, r3
 800601e:	2a14      	cmp	r2, #20
 8006020:	dd25      	ble.n	800606e <__ieee754_pow+0xca>
 8006022:	2034      	movs	r0, #52	; 0x34
 8006024:	1a82      	subs	r2, r0, r2
 8006026:	9802      	ldr	r0, [sp, #8]
 8006028:	40d0      	lsrs	r0, r2
 800602a:	0003      	movs	r3, r0
 800602c:	4093      	lsls	r3, r2
 800602e:	428b      	cmp	r3, r1
 8006030:	d104      	bne.n	800603c <__ieee754_pow+0x98>
 8006032:	2201      	movs	r2, #1
 8006034:	4010      	ands	r0, r2
 8006036:	1892      	adds	r2, r2, r2
 8006038:	1a13      	subs	r3, r2, r0
 800603a:	9306      	str	r3, [sp, #24]
 800603c:	2900      	cmp	r1, #0
 800603e:	d15e      	bne.n	80060fe <__ieee754_pow+0x15a>
 8006040:	4565      	cmp	r5, ip
 8006042:	d123      	bne.n	800608c <__ieee754_pow+0xe8>
 8006044:	4b5f      	ldr	r3, [pc, #380]	; (80061c4 <__ieee754_pow+0x220>)
 8006046:	18e3      	adds	r3, r4, r3
 8006048:	431f      	orrs	r7, r3
 800604a:	d101      	bne.n	8006050 <__ieee754_pow+0xac>
 800604c:	f000 fc67 	bl	800691e <__ieee754_pow+0x97a>
 8006050:	4b5f      	ldr	r3, [pc, #380]	; (80061d0 <__ieee754_pow+0x22c>)
 8006052:	429c      	cmp	r4, r3
 8006054:	dd2d      	ble.n	80060b2 <__ieee754_pow+0x10e>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	9c03      	ldr	r4, [sp, #12]
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	9401      	str	r4, [sp, #4]
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da31      	bge.n	80060c8 <__ieee754_pow+0x124>
 8006064:	2300      	movs	r3, #0
 8006066:	2400      	movs	r4, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	9401      	str	r4, [sp, #4]
 800606c:	e02c      	b.n	80060c8 <__ieee754_pow+0x124>
 800606e:	2900      	cmp	r1, #0
 8006070:	d145      	bne.n	80060fe <__ieee754_pow+0x15a>
 8006072:	2314      	movs	r3, #20
 8006074:	1a9a      	subs	r2, r3, r2
 8006076:	002b      	movs	r3, r5
 8006078:	4113      	asrs	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	4091      	lsls	r1, r2
 800607e:	42a9      	cmp	r1, r5
 8006080:	d104      	bne.n	800608c <__ieee754_pow+0xe8>
 8006082:	2201      	movs	r2, #1
 8006084:	4013      	ands	r3, r2
 8006086:	1892      	adds	r2, r2, r2
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	9306      	str	r3, [sp, #24]
 800608c:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <__ieee754_pow+0x234>)
 800608e:	429d      	cmp	r5, r3
 8006090:	d11e      	bne.n	80060d0 <__ieee754_pow+0x12c>
 8006092:	0038      	movs	r0, r7
 8006094:	0031      	movs	r1, r6
 8006096:	9b04      	ldr	r3, [sp, #16]
 8006098:	9000      	str	r0, [sp, #0]
 800609a:	9101      	str	r1, [sp, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da13      	bge.n	80060c8 <__ieee754_pow+0x124>
 80060a0:	003a      	movs	r2, r7
 80060a2:	0033      	movs	r3, r6
 80060a4:	2000      	movs	r0, #0
 80060a6:	494c      	ldr	r1, [pc, #304]	; (80061d8 <__ieee754_pow+0x234>)
 80060a8:	f7fb fb86 	bl	80017b8 <__aeabi_ddiv>
 80060ac:	e7a7      	b.n	8005ffe <__ieee754_pow+0x5a>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e7c3      	b.n	800603a <__ieee754_pow+0x96>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	dad5      	bge.n	8006064 <__ieee754_pow+0xc0>
 80060b8:	2280      	movs	r2, #128	; 0x80
 80060ba:	0612      	lsls	r2, r2, #24
 80060bc:	4694      	mov	ip, r2
 80060be:	9b02      	ldr	r3, [sp, #8]
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	9b03      	ldr	r3, [sp, #12]
 80060c4:	4463      	add	r3, ip
 80060c6:	9301      	str	r3, [sp, #4]
 80060c8:	9800      	ldr	r0, [sp, #0]
 80060ca:	9901      	ldr	r1, [sp, #4]
 80060cc:	b015      	add	sp, #84	; 0x54
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	9a04      	ldr	r2, [sp, #16]
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d106      	bne.n	80060e8 <__ieee754_pow+0x144>
 80060da:	003a      	movs	r2, r7
 80060dc:	0033      	movs	r3, r6
 80060de:	0038      	movs	r0, r7
 80060e0:	0031      	movs	r1, r6
 80060e2:	f7fb ff73 	bl	8001fcc <__aeabi_dmul>
 80060e6:	e78a      	b.n	8005ffe <__ieee754_pow+0x5a>
 80060e8:	4b3c      	ldr	r3, [pc, #240]	; (80061dc <__ieee754_pow+0x238>)
 80060ea:	9a04      	ldr	r2, [sp, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d106      	bne.n	80060fe <__ieee754_pow+0x15a>
 80060f0:	2e00      	cmp	r6, #0
 80060f2:	db04      	blt.n	80060fe <__ieee754_pow+0x15a>
 80060f4:	0038      	movs	r0, r7
 80060f6:	0031      	movs	r1, r6
 80060f8:	f000 fc4a 	bl	8006990 <__ieee754_sqrt>
 80060fc:	e77f      	b.n	8005ffe <__ieee754_pow+0x5a>
 80060fe:	0038      	movs	r0, r7
 8006100:	0031      	movs	r1, r6
 8006102:	f000 fcf7 	bl	8006af4 <fabs>
 8006106:	9000      	str	r0, [sp, #0]
 8006108:	9101      	str	r1, [sp, #4]
 800610a:	2f00      	cmp	r7, #0
 800610c:	d12e      	bne.n	800616c <__ieee754_pow+0x1c8>
 800610e:	2c00      	cmp	r4, #0
 8006110:	d004      	beq.n	800611c <__ieee754_pow+0x178>
 8006112:	4a31      	ldr	r2, [pc, #196]	; (80061d8 <__ieee754_pow+0x234>)
 8006114:	00b3      	lsls	r3, r6, #2
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	4293      	cmp	r3, r2
 800611a:	d127      	bne.n	800616c <__ieee754_pow+0x1c8>
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	da07      	bge.n	8006132 <__ieee754_pow+0x18e>
 8006122:	9a00      	ldr	r2, [sp, #0]
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	2000      	movs	r0, #0
 8006128:	492b      	ldr	r1, [pc, #172]	; (80061d8 <__ieee754_pow+0x234>)
 800612a:	f7fb fb45 	bl	80017b8 <__aeabi_ddiv>
 800612e:	9000      	str	r0, [sp, #0]
 8006130:	9101      	str	r1, [sp, #4]
 8006132:	9b08      	ldr	r3, [sp, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dac7      	bge.n	80060c8 <__ieee754_pow+0x124>
 8006138:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <__ieee754_pow+0x220>)
 800613a:	18e4      	adds	r4, r4, r3
 800613c:	9b06      	ldr	r3, [sp, #24]
 800613e:	431c      	orrs	r4, r3
 8006140:	d108      	bne.n	8006154 <__ieee754_pow+0x1b0>
 8006142:	9a00      	ldr	r2, [sp, #0]
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	0010      	movs	r0, r2
 8006148:	0019      	movs	r1, r3
 800614a:	f7fc f9b1 	bl	80024b0 <__aeabi_dsub>
 800614e:	0002      	movs	r2, r0
 8006150:	000b      	movs	r3, r1
 8006152:	e7a9      	b.n	80060a8 <__ieee754_pow+0x104>
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d1b6      	bne.n	80060c8 <__ieee754_pow+0x124>
 800615a:	9800      	ldr	r0, [sp, #0]
 800615c:	2180      	movs	r1, #128	; 0x80
 800615e:	0002      	movs	r2, r0
 8006160:	9801      	ldr	r0, [sp, #4]
 8006162:	0609      	lsls	r1, r1, #24
 8006164:	1843      	adds	r3, r0, r1
 8006166:	9200      	str	r2, [sp, #0]
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	e7ad      	b.n	80060c8 <__ieee754_pow+0x124>
 800616c:	0ff3      	lsrs	r3, r6, #31
 800616e:	3b01      	subs	r3, #1
 8006170:	9310      	str	r3, [sp, #64]	; 0x40
 8006172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006174:	9b06      	ldr	r3, [sp, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	d104      	bne.n	8006184 <__ieee754_pow+0x1e0>
 800617a:	003a      	movs	r2, r7
 800617c:	0033      	movs	r3, r6
 800617e:	0038      	movs	r0, r7
 8006180:	0031      	movs	r1, r6
 8006182:	e7e2      	b.n	800614a <__ieee754_pow+0x1a6>
 8006184:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <__ieee754_pow+0x23c>)
 8006186:	429d      	cmp	r5, r3
 8006188:	dc00      	bgt.n	800618c <__ieee754_pow+0x1e8>
 800618a:	e0f7      	b.n	800637c <__ieee754_pow+0x3d8>
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <__ieee754_pow+0x240>)
 800618e:	429d      	cmp	r5, r3
 8006190:	dd0b      	ble.n	80061aa <__ieee754_pow+0x206>
 8006192:	4b0f      	ldr	r3, [pc, #60]	; (80061d0 <__ieee754_pow+0x22c>)
 8006194:	429c      	cmp	r4, r3
 8006196:	dc0e      	bgt.n	80061b6 <__ieee754_pow+0x212>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	db00      	blt.n	80061a0 <__ieee754_pow+0x1fc>
 800619e:	e761      	b.n	8006064 <__ieee754_pow+0xc0>
 80061a0:	4a11      	ldr	r2, [pc, #68]	; (80061e8 <__ieee754_pow+0x244>)
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <__ieee754_pow+0x248>)
 80061a4:	0010      	movs	r0, r2
 80061a6:	0019      	movs	r1, r3
 80061a8:	e79b      	b.n	80060e2 <__ieee754_pow+0x13e>
 80061aa:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <__ieee754_pow+0x24c>)
 80061ac:	429c      	cmp	r4, r3
 80061ae:	ddf3      	ble.n	8006198 <__ieee754_pow+0x1f4>
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <__ieee754_pow+0x234>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	dd1e      	ble.n	80061f4 <__ieee754_pow+0x250>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dcf1      	bgt.n	80061a0 <__ieee754_pow+0x1fc>
 80061bc:	e752      	b.n	8006064 <__ieee754_pow+0xc0>
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	7ff00000 	.word	0x7ff00000
 80061c4:	c0100000 	.word	0xc0100000
 80061c8:	08006e32 	.word	0x08006e32
 80061cc:	433fffff 	.word	0x433fffff
 80061d0:	3fefffff 	.word	0x3fefffff
 80061d4:	fffffc01 	.word	0xfffffc01
 80061d8:	3ff00000 	.word	0x3ff00000
 80061dc:	3fe00000 	.word	0x3fe00000
 80061e0:	41e00000 	.word	0x41e00000
 80061e4:	43f00000 	.word	0x43f00000
 80061e8:	8800759c 	.word	0x8800759c
 80061ec:	7e37e43c 	.word	0x7e37e43c
 80061f0:	3feffffe 	.word	0x3feffffe
 80061f4:	2200      	movs	r2, #0
 80061f6:	9800      	ldr	r0, [sp, #0]
 80061f8:	9901      	ldr	r1, [sp, #4]
 80061fa:	4b52      	ldr	r3, [pc, #328]	; (8006344 <__ieee754_pow+0x3a0>)
 80061fc:	f7fc f958 	bl	80024b0 <__aeabi_dsub>
 8006200:	22c0      	movs	r2, #192	; 0xc0
 8006202:	4b51      	ldr	r3, [pc, #324]	; (8006348 <__ieee754_pow+0x3a4>)
 8006204:	05d2      	lsls	r2, r2, #23
 8006206:	0006      	movs	r6, r0
 8006208:	000f      	movs	r7, r1
 800620a:	f7fb fedf 	bl	8001fcc <__aeabi_dmul>
 800620e:	4a4f      	ldr	r2, [pc, #316]	; (800634c <__ieee754_pow+0x3a8>)
 8006210:	9000      	str	r0, [sp, #0]
 8006212:	9101      	str	r1, [sp, #4]
 8006214:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <__ieee754_pow+0x3ac>)
 8006216:	0030      	movs	r0, r6
 8006218:	0039      	movs	r1, r7
 800621a:	f7fb fed7 	bl	8001fcc <__aeabi_dmul>
 800621e:	2200      	movs	r2, #0
 8006220:	9004      	str	r0, [sp, #16]
 8006222:	9105      	str	r1, [sp, #20]
 8006224:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <__ieee754_pow+0x3b0>)
 8006226:	0030      	movs	r0, r6
 8006228:	0039      	movs	r1, r7
 800622a:	f7fb fecf 	bl	8001fcc <__aeabi_dmul>
 800622e:	0002      	movs	r2, r0
 8006230:	000b      	movs	r3, r1
 8006232:	4849      	ldr	r0, [pc, #292]	; (8006358 <__ieee754_pow+0x3b4>)
 8006234:	4949      	ldr	r1, [pc, #292]	; (800635c <__ieee754_pow+0x3b8>)
 8006236:	f7fc f93b 	bl	80024b0 <__aeabi_dsub>
 800623a:	0032      	movs	r2, r6
 800623c:	003b      	movs	r3, r7
 800623e:	f7fb fec5 	bl	8001fcc <__aeabi_dmul>
 8006242:	0002      	movs	r2, r0
 8006244:	000b      	movs	r3, r1
 8006246:	2000      	movs	r0, #0
 8006248:	4945      	ldr	r1, [pc, #276]	; (8006360 <__ieee754_pow+0x3bc>)
 800624a:	f7fc f931 	bl	80024b0 <__aeabi_dsub>
 800624e:	0032      	movs	r2, r6
 8006250:	0004      	movs	r4, r0
 8006252:	000d      	movs	r5, r1
 8006254:	003b      	movs	r3, r7
 8006256:	0030      	movs	r0, r6
 8006258:	0039      	movs	r1, r7
 800625a:	f7fb feb7 	bl	8001fcc <__aeabi_dmul>
 800625e:	0002      	movs	r2, r0
 8006260:	000b      	movs	r3, r1
 8006262:	0020      	movs	r0, r4
 8006264:	0029      	movs	r1, r5
 8006266:	f7fb feb1 	bl	8001fcc <__aeabi_dmul>
 800626a:	4a3e      	ldr	r2, [pc, #248]	; (8006364 <__ieee754_pow+0x3c0>)
 800626c:	4b36      	ldr	r3, [pc, #216]	; (8006348 <__ieee754_pow+0x3a4>)
 800626e:	f7fb fead 	bl	8001fcc <__aeabi_dmul>
 8006272:	0002      	movs	r2, r0
 8006274:	000b      	movs	r3, r1
 8006276:	9804      	ldr	r0, [sp, #16]
 8006278:	9905      	ldr	r1, [sp, #20]
 800627a:	f7fc f919 	bl	80024b0 <__aeabi_dsub>
 800627e:	0002      	movs	r2, r0
 8006280:	000b      	movs	r3, r1
 8006282:	0004      	movs	r4, r0
 8006284:	000d      	movs	r5, r1
 8006286:	9800      	ldr	r0, [sp, #0]
 8006288:	9901      	ldr	r1, [sp, #4]
 800628a:	f7fa ff79 	bl	8001180 <__aeabi_dadd>
 800628e:	9a00      	ldr	r2, [sp, #0]
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	2000      	movs	r0, #0
 8006294:	9004      	str	r0, [sp, #16]
 8006296:	9105      	str	r1, [sp, #20]
 8006298:	f7fc f90a 	bl	80024b0 <__aeabi_dsub>
 800629c:	0002      	movs	r2, r0
 800629e:	000b      	movs	r3, r1
 80062a0:	0020      	movs	r0, r4
 80062a2:	0029      	movs	r1, r5
 80062a4:	f7fc f904 	bl	80024b0 <__aeabi_dsub>
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062ac:	3b01      	subs	r3, #1
 80062ae:	0006      	movs	r6, r0
 80062b0:	000f      	movs	r7, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d000      	beq.n	80062b8 <__ieee754_pow+0x314>
 80062b6:	e1de      	b.n	8006676 <__ieee754_pow+0x6d2>
 80062b8:	2300      	movs	r3, #0
 80062ba:	4c2b      	ldr	r4, [pc, #172]	; (8006368 <__ieee754_pow+0x3c4>)
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	9401      	str	r4, [sp, #4]
 80062c0:	9c02      	ldr	r4, [sp, #8]
 80062c2:	9d03      	ldr	r5, [sp, #12]
 80062c4:	9802      	ldr	r0, [sp, #8]
 80062c6:	9903      	ldr	r1, [sp, #12]
 80062c8:	2400      	movs	r4, #0
 80062ca:	002b      	movs	r3, r5
 80062cc:	0022      	movs	r2, r4
 80062ce:	f7fc f8ef 	bl	80024b0 <__aeabi_dsub>
 80062d2:	9a04      	ldr	r2, [sp, #16]
 80062d4:	9b05      	ldr	r3, [sp, #20]
 80062d6:	f7fb fe79 	bl	8001fcc <__aeabi_dmul>
 80062da:	9a02      	ldr	r2, [sp, #8]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	9006      	str	r0, [sp, #24]
 80062e0:	9107      	str	r1, [sp, #28]
 80062e2:	0030      	movs	r0, r6
 80062e4:	0039      	movs	r1, r7
 80062e6:	f7fb fe71 	bl	8001fcc <__aeabi_dmul>
 80062ea:	0002      	movs	r2, r0
 80062ec:	000b      	movs	r3, r1
 80062ee:	9806      	ldr	r0, [sp, #24]
 80062f0:	9907      	ldr	r1, [sp, #28]
 80062f2:	f7fa ff45 	bl	8001180 <__aeabi_dadd>
 80062f6:	0022      	movs	r2, r4
 80062f8:	002b      	movs	r3, r5
 80062fa:	9006      	str	r0, [sp, #24]
 80062fc:	9107      	str	r1, [sp, #28]
 80062fe:	9804      	ldr	r0, [sp, #16]
 8006300:	9905      	ldr	r1, [sp, #20]
 8006302:	f7fb fe63 	bl	8001fcc <__aeabi_dmul>
 8006306:	0006      	movs	r6, r0
 8006308:	000f      	movs	r7, r1
 800630a:	000b      	movs	r3, r1
 800630c:	0002      	movs	r2, r0
 800630e:	9806      	ldr	r0, [sp, #24]
 8006310:	9907      	ldr	r1, [sp, #28]
 8006312:	9604      	str	r6, [sp, #16]
 8006314:	9705      	str	r7, [sp, #20]
 8006316:	f7fa ff33 	bl	8001180 <__aeabi_dadd>
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <__ieee754_pow+0x3c8>)
 800631c:	0005      	movs	r5, r0
 800631e:	000c      	movs	r4, r1
 8006320:	9108      	str	r1, [sp, #32]
 8006322:	4299      	cmp	r1, r3
 8006324:	dc00      	bgt.n	8006328 <__ieee754_pow+0x384>
 8006326:	e2d8      	b.n	80068da <__ieee754_pow+0x936>
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <__ieee754_pow+0x3cc>)
 800632a:	18cb      	adds	r3, r1, r3
 800632c:	4303      	orrs	r3, r0
 800632e:	d100      	bne.n	8006332 <__ieee754_pow+0x38e>
 8006330:	e1da      	b.n	80066e8 <__ieee754_pow+0x744>
 8006332:	9800      	ldr	r0, [sp, #0]
 8006334:	9901      	ldr	r1, [sp, #4]
 8006336:	4a0f      	ldr	r2, [pc, #60]	; (8006374 <__ieee754_pow+0x3d0>)
 8006338:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <__ieee754_pow+0x3d4>)
 800633a:	f7fb fe47 	bl	8001fcc <__aeabi_dmul>
 800633e:	4a0d      	ldr	r2, [pc, #52]	; (8006374 <__ieee754_pow+0x3d0>)
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <__ieee754_pow+0x3d4>)
 8006342:	e6ce      	b.n	80060e2 <__ieee754_pow+0x13e>
 8006344:	3ff00000 	.word	0x3ff00000
 8006348:	3ff71547 	.word	0x3ff71547
 800634c:	f85ddf44 	.word	0xf85ddf44
 8006350:	3e54ae0b 	.word	0x3e54ae0b
 8006354:	3fd00000 	.word	0x3fd00000
 8006358:	55555555 	.word	0x55555555
 800635c:	3fd55555 	.word	0x3fd55555
 8006360:	3fe00000 	.word	0x3fe00000
 8006364:	652b82fe 	.word	0x652b82fe
 8006368:	bff00000 	.word	0xbff00000
 800636c:	408fffff 	.word	0x408fffff
 8006370:	bf700000 	.word	0xbf700000
 8006374:	8800759c 	.word	0x8800759c
 8006378:	7e37e43c 	.word	0x7e37e43c
 800637c:	4bbf      	ldr	r3, [pc, #764]	; (800667c <__ieee754_pow+0x6d8>)
 800637e:	2200      	movs	r2, #0
 8006380:	429c      	cmp	r4, r3
 8006382:	dc0a      	bgt.n	800639a <__ieee754_pow+0x3f6>
 8006384:	9800      	ldr	r0, [sp, #0]
 8006386:	9901      	ldr	r1, [sp, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	4bbd      	ldr	r3, [pc, #756]	; (8006680 <__ieee754_pow+0x6dc>)
 800638c:	f7fb fe1e 	bl	8001fcc <__aeabi_dmul>
 8006390:	2235      	movs	r2, #53	; 0x35
 8006392:	9000      	str	r0, [sp, #0]
 8006394:	9101      	str	r1, [sp, #4]
 8006396:	9c01      	ldr	r4, [sp, #4]
 8006398:	4252      	negs	r2, r2
 800639a:	49ba      	ldr	r1, [pc, #744]	; (8006684 <__ieee754_pow+0x6e0>)
 800639c:	1523      	asrs	r3, r4, #20
 800639e:	185b      	adds	r3, r3, r1
 80063a0:	189b      	adds	r3, r3, r2
 80063a2:	0324      	lsls	r4, r4, #12
 80063a4:	4db8      	ldr	r5, [pc, #736]	; (8006688 <__ieee754_pow+0x6e4>)
 80063a6:	4ab9      	ldr	r2, [pc, #740]	; (800668c <__ieee754_pow+0x6e8>)
 80063a8:	930d      	str	r3, [sp, #52]	; 0x34
 80063aa:	0b23      	lsrs	r3, r4, #12
 80063ac:	431d      	orrs	r5, r3
 80063ae:	2400      	movs	r4, #0
 80063b0:	4293      	cmp	r3, r2
 80063b2:	dd09      	ble.n	80063c8 <__ieee754_pow+0x424>
 80063b4:	4ab6      	ldr	r2, [pc, #728]	; (8006690 <__ieee754_pow+0x6ec>)
 80063b6:	3401      	adds	r4, #1
 80063b8:	4293      	cmp	r3, r2
 80063ba:	dd05      	ble.n	80063c8 <__ieee754_pow+0x424>
 80063bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063be:	191b      	adds	r3, r3, r4
 80063c0:	2400      	movs	r4, #0
 80063c2:	930d      	str	r3, [sp, #52]	; 0x34
 80063c4:	4bb3      	ldr	r3, [pc, #716]	; (8006694 <__ieee754_pow+0x6f0>)
 80063c6:	18ed      	adds	r5, r5, r3
 80063c8:	9800      	ldr	r0, [sp, #0]
 80063ca:	9901      	ldr	r1, [sp, #4]
 80063cc:	0029      	movs	r1, r5
 80063ce:	00e3      	lsls	r3, r4, #3
 80063d0:	9311      	str	r3, [sp, #68]	; 0x44
 80063d2:	4bb1      	ldr	r3, [pc, #708]	; (8006698 <__ieee754_pow+0x6f4>)
 80063d4:	00e2      	lsls	r2, r4, #3
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	900e      	str	r0, [sp, #56]	; 0x38
 80063de:	910f      	str	r1, [sp, #60]	; 0x3c
 80063e0:	920a      	str	r2, [sp, #40]	; 0x28
 80063e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e4:	f7fc f864 	bl	80024b0 <__aeabi_dsub>
 80063e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063ec:	0006      	movs	r6, r0
 80063ee:	000f      	movs	r7, r1
 80063f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f4:	f7fa fec4 	bl	8001180 <__aeabi_dadd>
 80063f8:	0002      	movs	r2, r0
 80063fa:	000b      	movs	r3, r1
 80063fc:	2000      	movs	r0, #0
 80063fe:	49a2      	ldr	r1, [pc, #648]	; (8006688 <__ieee754_pow+0x6e4>)
 8006400:	f7fb f9da 	bl	80017b8 <__aeabi_ddiv>
 8006404:	9012      	str	r0, [sp, #72]	; 0x48
 8006406:	9113      	str	r1, [sp, #76]	; 0x4c
 8006408:	0002      	movs	r2, r0
 800640a:	000b      	movs	r3, r1
 800640c:	0030      	movs	r0, r6
 800640e:	0039      	movs	r1, r7
 8006410:	f7fb fddc 	bl	8001fcc <__aeabi_dmul>
 8006414:	9008      	str	r0, [sp, #32]
 8006416:	9109      	str	r1, [sp, #36]	; 0x24
 8006418:	9a08      	ldr	r2, [sp, #32]
 800641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	9204      	str	r2, [sp, #16]
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	2300      	movs	r3, #0
 8006424:	0589      	lsls	r1, r1, #22
 8006426:	106d      	asrs	r5, r5, #1
 8006428:	430d      	orrs	r5, r1
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	9b05      	ldr	r3, [sp, #20]
 8006432:	9200      	str	r2, [sp, #0]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	0309      	lsls	r1, r1, #12
 800643a:	186d      	adds	r5, r5, r1
 800643c:	04a4      	lsls	r4, r4, #18
 800643e:	192b      	adds	r3, r5, r4
 8006440:	9800      	ldr	r0, [sp, #0]
 8006442:	9901      	ldr	r1, [sp, #4]
 8006444:	0014      	movs	r4, r2
 8006446:	001d      	movs	r5, r3
 8006448:	f7fb fdc0 	bl	8001fcc <__aeabi_dmul>
 800644c:	0002      	movs	r2, r0
 800644e:	000b      	movs	r3, r1
 8006450:	0030      	movs	r0, r6
 8006452:	0039      	movs	r1, r7
 8006454:	f7fc f82c 	bl	80024b0 <__aeabi_dsub>
 8006458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800645a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645c:	0006      	movs	r6, r0
 800645e:	000f      	movs	r7, r1
 8006460:	0020      	movs	r0, r4
 8006462:	0029      	movs	r1, r5
 8006464:	f7fc f824 	bl	80024b0 <__aeabi_dsub>
 8006468:	0002      	movs	r2, r0
 800646a:	000b      	movs	r3, r1
 800646c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800646e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006470:	f7fc f81e 	bl	80024b0 <__aeabi_dsub>
 8006474:	9a00      	ldr	r2, [sp, #0]
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	f7fb fda8 	bl	8001fcc <__aeabi_dmul>
 800647c:	0002      	movs	r2, r0
 800647e:	000b      	movs	r3, r1
 8006480:	0030      	movs	r0, r6
 8006482:	0039      	movs	r1, r7
 8006484:	f7fc f814 	bl	80024b0 <__aeabi_dsub>
 8006488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800648a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800648c:	f7fb fd9e 	bl	8001fcc <__aeabi_dmul>
 8006490:	9a08      	ldr	r2, [sp, #32]
 8006492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006494:	900a      	str	r0, [sp, #40]	; 0x28
 8006496:	910b      	str	r1, [sp, #44]	; 0x2c
 8006498:	0010      	movs	r0, r2
 800649a:	0019      	movs	r1, r3
 800649c:	f7fb fd96 	bl	8001fcc <__aeabi_dmul>
 80064a0:	0006      	movs	r6, r0
 80064a2:	000f      	movs	r7, r1
 80064a4:	4a7d      	ldr	r2, [pc, #500]	; (800669c <__ieee754_pow+0x6f8>)
 80064a6:	4b7e      	ldr	r3, [pc, #504]	; (80066a0 <__ieee754_pow+0x6fc>)
 80064a8:	f7fb fd90 	bl	8001fcc <__aeabi_dmul>
 80064ac:	4a7d      	ldr	r2, [pc, #500]	; (80066a4 <__ieee754_pow+0x700>)
 80064ae:	4b7e      	ldr	r3, [pc, #504]	; (80066a8 <__ieee754_pow+0x704>)
 80064b0:	f7fa fe66 	bl	8001180 <__aeabi_dadd>
 80064b4:	0032      	movs	r2, r6
 80064b6:	003b      	movs	r3, r7
 80064b8:	f7fb fd88 	bl	8001fcc <__aeabi_dmul>
 80064bc:	4a7b      	ldr	r2, [pc, #492]	; (80066ac <__ieee754_pow+0x708>)
 80064be:	4b7c      	ldr	r3, [pc, #496]	; (80066b0 <__ieee754_pow+0x70c>)
 80064c0:	f7fa fe5e 	bl	8001180 <__aeabi_dadd>
 80064c4:	0032      	movs	r2, r6
 80064c6:	003b      	movs	r3, r7
 80064c8:	f7fb fd80 	bl	8001fcc <__aeabi_dmul>
 80064cc:	4a79      	ldr	r2, [pc, #484]	; (80066b4 <__ieee754_pow+0x710>)
 80064ce:	4b7a      	ldr	r3, [pc, #488]	; (80066b8 <__ieee754_pow+0x714>)
 80064d0:	f7fa fe56 	bl	8001180 <__aeabi_dadd>
 80064d4:	0032      	movs	r2, r6
 80064d6:	003b      	movs	r3, r7
 80064d8:	f7fb fd78 	bl	8001fcc <__aeabi_dmul>
 80064dc:	4a77      	ldr	r2, [pc, #476]	; (80066bc <__ieee754_pow+0x718>)
 80064de:	4b78      	ldr	r3, [pc, #480]	; (80066c0 <__ieee754_pow+0x71c>)
 80064e0:	f7fa fe4e 	bl	8001180 <__aeabi_dadd>
 80064e4:	0032      	movs	r2, r6
 80064e6:	003b      	movs	r3, r7
 80064e8:	f7fb fd70 	bl	8001fcc <__aeabi_dmul>
 80064ec:	4a75      	ldr	r2, [pc, #468]	; (80066c4 <__ieee754_pow+0x720>)
 80064ee:	4b76      	ldr	r3, [pc, #472]	; (80066c8 <__ieee754_pow+0x724>)
 80064f0:	f7fa fe46 	bl	8001180 <__aeabi_dadd>
 80064f4:	0032      	movs	r2, r6
 80064f6:	0004      	movs	r4, r0
 80064f8:	000d      	movs	r5, r1
 80064fa:	003b      	movs	r3, r7
 80064fc:	0030      	movs	r0, r6
 80064fe:	0039      	movs	r1, r7
 8006500:	f7fb fd64 	bl	8001fcc <__aeabi_dmul>
 8006504:	0002      	movs	r2, r0
 8006506:	000b      	movs	r3, r1
 8006508:	0020      	movs	r0, r4
 800650a:	0029      	movs	r1, r5
 800650c:	f7fb fd5e 	bl	8001fcc <__aeabi_dmul>
 8006510:	9a00      	ldr	r2, [sp, #0]
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	0004      	movs	r4, r0
 8006516:	000d      	movs	r5, r1
 8006518:	9808      	ldr	r0, [sp, #32]
 800651a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800651c:	f7fa fe30 	bl	8001180 <__aeabi_dadd>
 8006520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006524:	f7fb fd52 	bl	8001fcc <__aeabi_dmul>
 8006528:	0022      	movs	r2, r4
 800652a:	002b      	movs	r3, r5
 800652c:	f7fa fe28 	bl	8001180 <__aeabi_dadd>
 8006530:	9a00      	ldr	r2, [sp, #0]
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	900e      	str	r0, [sp, #56]	; 0x38
 8006536:	910f      	str	r1, [sp, #60]	; 0x3c
 8006538:	0010      	movs	r0, r2
 800653a:	0019      	movs	r1, r3
 800653c:	f7fb fd46 	bl	8001fcc <__aeabi_dmul>
 8006540:	2200      	movs	r2, #0
 8006542:	4b62      	ldr	r3, [pc, #392]	; (80066cc <__ieee754_pow+0x728>)
 8006544:	0004      	movs	r4, r0
 8006546:	000d      	movs	r5, r1
 8006548:	f7fa fe1a 	bl	8001180 <__aeabi_dadd>
 800654c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800654e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006550:	f7fa fe16 	bl	8001180 <__aeabi_dadd>
 8006554:	9e04      	ldr	r6, [sp, #16]
 8006556:	000f      	movs	r7, r1
 8006558:	0032      	movs	r2, r6
 800655a:	000b      	movs	r3, r1
 800655c:	9800      	ldr	r0, [sp, #0]
 800655e:	9901      	ldr	r1, [sp, #4]
 8006560:	f7fb fd34 	bl	8001fcc <__aeabi_dmul>
 8006564:	2200      	movs	r2, #0
 8006566:	9000      	str	r0, [sp, #0]
 8006568:	9101      	str	r1, [sp, #4]
 800656a:	4b58      	ldr	r3, [pc, #352]	; (80066cc <__ieee754_pow+0x728>)
 800656c:	0030      	movs	r0, r6
 800656e:	0039      	movs	r1, r7
 8006570:	f7fb ff9e 	bl	80024b0 <__aeabi_dsub>
 8006574:	0022      	movs	r2, r4
 8006576:	002b      	movs	r3, r5
 8006578:	f7fb ff9a 	bl	80024b0 <__aeabi_dsub>
 800657c:	0002      	movs	r2, r0
 800657e:	000b      	movs	r3, r1
 8006580:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006582:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006584:	f7fb ff94 	bl	80024b0 <__aeabi_dsub>
 8006588:	9a08      	ldr	r2, [sp, #32]
 800658a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658c:	f7fb fd1e 	bl	8001fcc <__aeabi_dmul>
 8006590:	0032      	movs	r2, r6
 8006592:	0004      	movs	r4, r0
 8006594:	000d      	movs	r5, r1
 8006596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006598:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800659a:	003b      	movs	r3, r7
 800659c:	f7fb fd16 	bl	8001fcc <__aeabi_dmul>
 80065a0:	0002      	movs	r2, r0
 80065a2:	000b      	movs	r3, r1
 80065a4:	0020      	movs	r0, r4
 80065a6:	0029      	movs	r1, r5
 80065a8:	f7fa fdea 	bl	8001180 <__aeabi_dadd>
 80065ac:	0004      	movs	r4, r0
 80065ae:	000d      	movs	r5, r1
 80065b0:	0002      	movs	r2, r0
 80065b2:	000b      	movs	r3, r1
 80065b4:	9800      	ldr	r0, [sp, #0]
 80065b6:	9901      	ldr	r1, [sp, #4]
 80065b8:	f7fa fde2 	bl	8001180 <__aeabi_dadd>
 80065bc:	22e0      	movs	r2, #224	; 0xe0
 80065be:	9e04      	ldr	r6, [sp, #16]
 80065c0:	0612      	lsls	r2, r2, #24
 80065c2:	4b43      	ldr	r3, [pc, #268]	; (80066d0 <__ieee754_pow+0x72c>)
 80065c4:	0030      	movs	r0, r6
 80065c6:	000f      	movs	r7, r1
 80065c8:	f7fb fd00 	bl	8001fcc <__aeabi_dmul>
 80065cc:	9008      	str	r0, [sp, #32]
 80065ce:	9109      	str	r1, [sp, #36]	; 0x24
 80065d0:	9a00      	ldr	r2, [sp, #0]
 80065d2:	9b01      	ldr	r3, [sp, #4]
 80065d4:	0030      	movs	r0, r6
 80065d6:	0039      	movs	r1, r7
 80065d8:	f7fb ff6a 	bl	80024b0 <__aeabi_dsub>
 80065dc:	0002      	movs	r2, r0
 80065de:	000b      	movs	r3, r1
 80065e0:	0020      	movs	r0, r4
 80065e2:	0029      	movs	r1, r5
 80065e4:	f7fb ff64 	bl	80024b0 <__aeabi_dsub>
 80065e8:	4a3a      	ldr	r2, [pc, #232]	; (80066d4 <__ieee754_pow+0x730>)
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <__ieee754_pow+0x72c>)
 80065ec:	f7fb fcee 	bl	8001fcc <__aeabi_dmul>
 80065f0:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <__ieee754_pow+0x734>)
 80065f2:	0004      	movs	r4, r0
 80065f4:	000d      	movs	r5, r1
 80065f6:	4b39      	ldr	r3, [pc, #228]	; (80066dc <__ieee754_pow+0x738>)
 80065f8:	0030      	movs	r0, r6
 80065fa:	0039      	movs	r1, r7
 80065fc:	f7fb fce6 	bl	8001fcc <__aeabi_dmul>
 8006600:	0002      	movs	r2, r0
 8006602:	000b      	movs	r3, r1
 8006604:	0020      	movs	r0, r4
 8006606:	0029      	movs	r1, r5
 8006608:	f7fa fdba 	bl	8001180 <__aeabi_dadd>
 800660c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800660e:	4b34      	ldr	r3, [pc, #208]	; (80066e0 <__ieee754_pow+0x73c>)
 8006610:	189b      	adds	r3, r3, r2
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f7fa fdb3 	bl	8001180 <__aeabi_dadd>
 800661a:	9000      	str	r0, [sp, #0]
 800661c:	9101      	str	r1, [sp, #4]
 800661e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006620:	f7fc faaa 	bl	8002b78 <__aeabi_i2d>
 8006624:	0004      	movs	r4, r0
 8006626:	000d      	movs	r5, r1
 8006628:	9808      	ldr	r0, [sp, #32]
 800662a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800662e:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <__ieee754_pow+0x740>)
 8006630:	189b      	adds	r3, r3, r2
 8006632:	681e      	ldr	r6, [r3, #0]
 8006634:	685f      	ldr	r7, [r3, #4]
 8006636:	9a00      	ldr	r2, [sp, #0]
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	f7fa fda1 	bl	8001180 <__aeabi_dadd>
 800663e:	0032      	movs	r2, r6
 8006640:	003b      	movs	r3, r7
 8006642:	f7fa fd9d 	bl	8001180 <__aeabi_dadd>
 8006646:	0022      	movs	r2, r4
 8006648:	002b      	movs	r3, r5
 800664a:	f7fa fd99 	bl	8001180 <__aeabi_dadd>
 800664e:	9804      	ldr	r0, [sp, #16]
 8006650:	0022      	movs	r2, r4
 8006652:	002b      	movs	r3, r5
 8006654:	9004      	str	r0, [sp, #16]
 8006656:	9105      	str	r1, [sp, #20]
 8006658:	f7fb ff2a 	bl	80024b0 <__aeabi_dsub>
 800665c:	0032      	movs	r2, r6
 800665e:	003b      	movs	r3, r7
 8006660:	f7fb ff26 	bl	80024b0 <__aeabi_dsub>
 8006664:	9a08      	ldr	r2, [sp, #32]
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	f7fb ff22 	bl	80024b0 <__aeabi_dsub>
 800666c:	0002      	movs	r2, r0
 800666e:	000b      	movs	r3, r1
 8006670:	9800      	ldr	r0, [sp, #0]
 8006672:	9901      	ldr	r1, [sp, #4]
 8006674:	e616      	b.n	80062a4 <__ieee754_pow+0x300>
 8006676:	2300      	movs	r3, #0
 8006678:	4c03      	ldr	r4, [pc, #12]	; (8006688 <__ieee754_pow+0x6e4>)
 800667a:	e61f      	b.n	80062bc <__ieee754_pow+0x318>
 800667c:	000fffff 	.word	0x000fffff
 8006680:	43400000 	.word	0x43400000
 8006684:	fffffc01 	.word	0xfffffc01
 8006688:	3ff00000 	.word	0x3ff00000
 800668c:	0003988e 	.word	0x0003988e
 8006690:	000bb679 	.word	0x000bb679
 8006694:	fff00000 	.word	0xfff00000
 8006698:	08006f38 	.word	0x08006f38
 800669c:	4a454eef 	.word	0x4a454eef
 80066a0:	3fca7e28 	.word	0x3fca7e28
 80066a4:	93c9db65 	.word	0x93c9db65
 80066a8:	3fcd864a 	.word	0x3fcd864a
 80066ac:	a91d4101 	.word	0xa91d4101
 80066b0:	3fd17460 	.word	0x3fd17460
 80066b4:	518f264d 	.word	0x518f264d
 80066b8:	3fd55555 	.word	0x3fd55555
 80066bc:	db6fabff 	.word	0xdb6fabff
 80066c0:	3fdb6db6 	.word	0x3fdb6db6
 80066c4:	33333303 	.word	0x33333303
 80066c8:	3fe33333 	.word	0x3fe33333
 80066cc:	40080000 	.word	0x40080000
 80066d0:	3feec709 	.word	0x3feec709
 80066d4:	dc3a03fd 	.word	0xdc3a03fd
 80066d8:	145b01f5 	.word	0x145b01f5
 80066dc:	be3e2fe0 	.word	0xbe3e2fe0
 80066e0:	08006f58 	.word	0x08006f58
 80066e4:	08006f48 	.word	0x08006f48
 80066e8:	4a8f      	ldr	r2, [pc, #572]	; (8006928 <__ieee754_pow+0x984>)
 80066ea:	4b90      	ldr	r3, [pc, #576]	; (800692c <__ieee754_pow+0x988>)
 80066ec:	9806      	ldr	r0, [sp, #24]
 80066ee:	9907      	ldr	r1, [sp, #28]
 80066f0:	f7fa fd46 	bl	8001180 <__aeabi_dadd>
 80066f4:	0032      	movs	r2, r6
 80066f6:	9002      	str	r0, [sp, #8]
 80066f8:	9103      	str	r1, [sp, #12]
 80066fa:	003b      	movs	r3, r7
 80066fc:	0028      	movs	r0, r5
 80066fe:	0021      	movs	r1, r4
 8006700:	f7fb fed6 	bl	80024b0 <__aeabi_dsub>
 8006704:	0002      	movs	r2, r0
 8006706:	000b      	movs	r3, r1
 8006708:	9802      	ldr	r0, [sp, #8]
 800670a:	9903      	ldr	r1, [sp, #12]
 800670c:	f7f9 fdc6 	bl	800029c <__aeabi_dcmpgt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d000      	beq.n	8006716 <__ieee754_pow+0x772>
 8006714:	e60d      	b.n	8006332 <__ieee754_pow+0x38e>
 8006716:	2100      	movs	r1, #0
 8006718:	4a85      	ldr	r2, [pc, #532]	; (8006930 <__ieee754_pow+0x98c>)
 800671a:	0063      	lsls	r3, r4, #1
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	9102      	str	r1, [sp, #8]
 8006720:	4293      	cmp	r3, r2
 8006722:	dd25      	ble.n	8006770 <__ieee754_pow+0x7cc>
 8006724:	4a83      	ldr	r2, [pc, #524]	; (8006934 <__ieee754_pow+0x990>)
 8006726:	151b      	asrs	r3, r3, #20
 8006728:	189b      	adds	r3, r3, r2
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	0352      	lsls	r2, r2, #13
 800672e:	4694      	mov	ip, r2
 8006730:	411a      	asrs	r2, r3
 8006732:	1914      	adds	r4, r2, r4
 8006734:	0060      	lsls	r0, r4, #1
 8006736:	4b80      	ldr	r3, [pc, #512]	; (8006938 <__ieee754_pow+0x994>)
 8006738:	0d40      	lsrs	r0, r0, #21
 800673a:	4d80      	ldr	r5, [pc, #512]	; (800693c <__ieee754_pow+0x998>)
 800673c:	18c0      	adds	r0, r0, r3
 800673e:	4105      	asrs	r5, r0
 8006740:	0021      	movs	r1, r4
 8006742:	43a9      	bics	r1, r5
 8006744:	000b      	movs	r3, r1
 8006746:	4661      	mov	r1, ip
 8006748:	0324      	lsls	r4, r4, #12
 800674a:	0b24      	lsrs	r4, r4, #12
 800674c:	4321      	orrs	r1, r4
 800674e:	2414      	movs	r4, #20
 8006750:	1a20      	subs	r0, r4, r0
 8006752:	4101      	asrs	r1, r0
 8006754:	9102      	str	r1, [sp, #8]
 8006756:	9908      	ldr	r1, [sp, #32]
 8006758:	2200      	movs	r2, #0
 800675a:	2900      	cmp	r1, #0
 800675c:	da02      	bge.n	8006764 <__ieee754_pow+0x7c0>
 800675e:	9902      	ldr	r1, [sp, #8]
 8006760:	4249      	negs	r1, r1
 8006762:	9102      	str	r1, [sp, #8]
 8006764:	0030      	movs	r0, r6
 8006766:	0039      	movs	r1, r7
 8006768:	f7fb fea2 	bl	80024b0 <__aeabi_dsub>
 800676c:	9004      	str	r0, [sp, #16]
 800676e:	9105      	str	r1, [sp, #20]
 8006770:	9a06      	ldr	r2, [sp, #24]
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	9804      	ldr	r0, [sp, #16]
 8006776:	9905      	ldr	r1, [sp, #20]
 8006778:	2600      	movs	r6, #0
 800677a:	f7fa fd01 	bl	8001180 <__aeabi_dadd>
 800677e:	2200      	movs	r2, #0
 8006780:	4b6f      	ldr	r3, [pc, #444]	; (8006940 <__ieee754_pow+0x99c>)
 8006782:	0030      	movs	r0, r6
 8006784:	000f      	movs	r7, r1
 8006786:	f7fb fc21 	bl	8001fcc <__aeabi_dmul>
 800678a:	9a04      	ldr	r2, [sp, #16]
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	9008      	str	r0, [sp, #32]
 8006790:	9109      	str	r1, [sp, #36]	; 0x24
 8006792:	0030      	movs	r0, r6
 8006794:	0039      	movs	r1, r7
 8006796:	f7fb fe8b 	bl	80024b0 <__aeabi_dsub>
 800679a:	0002      	movs	r2, r0
 800679c:	000b      	movs	r3, r1
 800679e:	9806      	ldr	r0, [sp, #24]
 80067a0:	9907      	ldr	r1, [sp, #28]
 80067a2:	f7fb fe85 	bl	80024b0 <__aeabi_dsub>
 80067a6:	4a67      	ldr	r2, [pc, #412]	; (8006944 <__ieee754_pow+0x9a0>)
 80067a8:	4b67      	ldr	r3, [pc, #412]	; (8006948 <__ieee754_pow+0x9a4>)
 80067aa:	f7fb fc0f 	bl	8001fcc <__aeabi_dmul>
 80067ae:	4a67      	ldr	r2, [pc, #412]	; (800694c <__ieee754_pow+0x9a8>)
 80067b0:	0004      	movs	r4, r0
 80067b2:	000d      	movs	r5, r1
 80067b4:	4b66      	ldr	r3, [pc, #408]	; (8006950 <__ieee754_pow+0x9ac>)
 80067b6:	0030      	movs	r0, r6
 80067b8:	0039      	movs	r1, r7
 80067ba:	f7fb fc07 	bl	8001fcc <__aeabi_dmul>
 80067be:	0002      	movs	r2, r0
 80067c0:	000b      	movs	r3, r1
 80067c2:	0020      	movs	r0, r4
 80067c4:	0029      	movs	r1, r5
 80067c6:	f7fa fcdb 	bl	8001180 <__aeabi_dadd>
 80067ca:	0004      	movs	r4, r0
 80067cc:	000d      	movs	r5, r1
 80067ce:	0002      	movs	r2, r0
 80067d0:	000b      	movs	r3, r1
 80067d2:	9808      	ldr	r0, [sp, #32]
 80067d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067d6:	f7fa fcd3 	bl	8001180 <__aeabi_dadd>
 80067da:	9a08      	ldr	r2, [sp, #32]
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	0006      	movs	r6, r0
 80067e0:	000f      	movs	r7, r1
 80067e2:	f7fb fe65 	bl	80024b0 <__aeabi_dsub>
 80067e6:	0002      	movs	r2, r0
 80067e8:	000b      	movs	r3, r1
 80067ea:	0020      	movs	r0, r4
 80067ec:	0029      	movs	r1, r5
 80067ee:	f7fb fe5f 	bl	80024b0 <__aeabi_dsub>
 80067f2:	0032      	movs	r2, r6
 80067f4:	9004      	str	r0, [sp, #16]
 80067f6:	9105      	str	r1, [sp, #20]
 80067f8:	003b      	movs	r3, r7
 80067fa:	0030      	movs	r0, r6
 80067fc:	0039      	movs	r1, r7
 80067fe:	f7fb fbe5 	bl	8001fcc <__aeabi_dmul>
 8006802:	0004      	movs	r4, r0
 8006804:	000d      	movs	r5, r1
 8006806:	4a53      	ldr	r2, [pc, #332]	; (8006954 <__ieee754_pow+0x9b0>)
 8006808:	4b53      	ldr	r3, [pc, #332]	; (8006958 <__ieee754_pow+0x9b4>)
 800680a:	f7fb fbdf 	bl	8001fcc <__aeabi_dmul>
 800680e:	4a53      	ldr	r2, [pc, #332]	; (800695c <__ieee754_pow+0x9b8>)
 8006810:	4b53      	ldr	r3, [pc, #332]	; (8006960 <__ieee754_pow+0x9bc>)
 8006812:	f7fb fe4d 	bl	80024b0 <__aeabi_dsub>
 8006816:	0022      	movs	r2, r4
 8006818:	002b      	movs	r3, r5
 800681a:	f7fb fbd7 	bl	8001fcc <__aeabi_dmul>
 800681e:	4a51      	ldr	r2, [pc, #324]	; (8006964 <__ieee754_pow+0x9c0>)
 8006820:	4b51      	ldr	r3, [pc, #324]	; (8006968 <__ieee754_pow+0x9c4>)
 8006822:	f7fa fcad 	bl	8001180 <__aeabi_dadd>
 8006826:	0022      	movs	r2, r4
 8006828:	002b      	movs	r3, r5
 800682a:	f7fb fbcf 	bl	8001fcc <__aeabi_dmul>
 800682e:	4a4f      	ldr	r2, [pc, #316]	; (800696c <__ieee754_pow+0x9c8>)
 8006830:	4b4f      	ldr	r3, [pc, #316]	; (8006970 <__ieee754_pow+0x9cc>)
 8006832:	f7fb fe3d 	bl	80024b0 <__aeabi_dsub>
 8006836:	0022      	movs	r2, r4
 8006838:	002b      	movs	r3, r5
 800683a:	f7fb fbc7 	bl	8001fcc <__aeabi_dmul>
 800683e:	4a4d      	ldr	r2, [pc, #308]	; (8006974 <__ieee754_pow+0x9d0>)
 8006840:	4b4d      	ldr	r3, [pc, #308]	; (8006978 <__ieee754_pow+0x9d4>)
 8006842:	f7fa fc9d 	bl	8001180 <__aeabi_dadd>
 8006846:	0022      	movs	r2, r4
 8006848:	002b      	movs	r3, r5
 800684a:	f7fb fbbf 	bl	8001fcc <__aeabi_dmul>
 800684e:	0002      	movs	r2, r0
 8006850:	000b      	movs	r3, r1
 8006852:	0030      	movs	r0, r6
 8006854:	0039      	movs	r1, r7
 8006856:	f7fb fe2b 	bl	80024b0 <__aeabi_dsub>
 800685a:	0004      	movs	r4, r0
 800685c:	000d      	movs	r5, r1
 800685e:	0002      	movs	r2, r0
 8006860:	000b      	movs	r3, r1
 8006862:	0030      	movs	r0, r6
 8006864:	0039      	movs	r1, r7
 8006866:	f7fb fbb1 	bl	8001fcc <__aeabi_dmul>
 800686a:	2380      	movs	r3, #128	; 0x80
 800686c:	9006      	str	r0, [sp, #24]
 800686e:	9107      	str	r1, [sp, #28]
 8006870:	2200      	movs	r2, #0
 8006872:	05db      	lsls	r3, r3, #23
 8006874:	0020      	movs	r0, r4
 8006876:	0029      	movs	r1, r5
 8006878:	f7fb fe1a 	bl	80024b0 <__aeabi_dsub>
 800687c:	0002      	movs	r2, r0
 800687e:	000b      	movs	r3, r1
 8006880:	9806      	ldr	r0, [sp, #24]
 8006882:	9907      	ldr	r1, [sp, #28]
 8006884:	f7fa ff98 	bl	80017b8 <__aeabi_ddiv>
 8006888:	9a04      	ldr	r2, [sp, #16]
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	0004      	movs	r4, r0
 800688e:	000d      	movs	r5, r1
 8006890:	0030      	movs	r0, r6
 8006892:	0039      	movs	r1, r7
 8006894:	f7fb fb9a 	bl	8001fcc <__aeabi_dmul>
 8006898:	9a04      	ldr	r2, [sp, #16]
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	f7fa fc70 	bl	8001180 <__aeabi_dadd>
 80068a0:	0002      	movs	r2, r0
 80068a2:	000b      	movs	r3, r1
 80068a4:	0020      	movs	r0, r4
 80068a6:	0029      	movs	r1, r5
 80068a8:	f7fb fe02 	bl	80024b0 <__aeabi_dsub>
 80068ac:	0032      	movs	r2, r6
 80068ae:	003b      	movs	r3, r7
 80068b0:	f7fb fdfe 	bl	80024b0 <__aeabi_dsub>
 80068b4:	0002      	movs	r2, r0
 80068b6:	000b      	movs	r3, r1
 80068b8:	2000      	movs	r0, #0
 80068ba:	4930      	ldr	r1, [pc, #192]	; (800697c <__ieee754_pow+0x9d8>)
 80068bc:	f7fb fdf8 	bl	80024b0 <__aeabi_dsub>
 80068c0:	9b02      	ldr	r3, [sp, #8]
 80068c2:	051b      	lsls	r3, r3, #20
 80068c4:	185b      	adds	r3, r3, r1
 80068c6:	151a      	asrs	r2, r3, #20
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	dc26      	bgt.n	800691a <__ieee754_pow+0x976>
 80068cc:	9a02      	ldr	r2, [sp, #8]
 80068ce:	f000 f9ad 	bl	8006c2c <scalbn>
 80068d2:	9a00      	ldr	r2, [sp, #0]
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	f7ff fc04 	bl	80060e2 <__ieee754_pow+0x13e>
 80068da:	4a29      	ldr	r2, [pc, #164]	; (8006980 <__ieee754_pow+0x9dc>)
 80068dc:	004b      	lsls	r3, r1, #1
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	4293      	cmp	r3, r2
 80068e2:	dc00      	bgt.n	80068e6 <__ieee754_pow+0x942>
 80068e4:	e717      	b.n	8006716 <__ieee754_pow+0x772>
 80068e6:	4b27      	ldr	r3, [pc, #156]	; (8006984 <__ieee754_pow+0x9e0>)
 80068e8:	18cb      	adds	r3, r1, r3
 80068ea:	4303      	orrs	r3, r0
 80068ec:	d009      	beq.n	8006902 <__ieee754_pow+0x95e>
 80068ee:	9800      	ldr	r0, [sp, #0]
 80068f0:	9901      	ldr	r1, [sp, #4]
 80068f2:	4a25      	ldr	r2, [pc, #148]	; (8006988 <__ieee754_pow+0x9e4>)
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <__ieee754_pow+0x9e8>)
 80068f6:	f7fb fb69 	bl	8001fcc <__aeabi_dmul>
 80068fa:	4a23      	ldr	r2, [pc, #140]	; (8006988 <__ieee754_pow+0x9e4>)
 80068fc:	4b23      	ldr	r3, [pc, #140]	; (800698c <__ieee754_pow+0x9e8>)
 80068fe:	f7ff fbf0 	bl	80060e2 <__ieee754_pow+0x13e>
 8006902:	0032      	movs	r2, r6
 8006904:	003b      	movs	r3, r7
 8006906:	f7fb fdd3 	bl	80024b0 <__aeabi_dsub>
 800690a:	9a06      	ldr	r2, [sp, #24]
 800690c:	9b07      	ldr	r3, [sp, #28]
 800690e:	f7f9 fccf 	bl	80002b0 <__aeabi_dcmpge>
 8006912:	2800      	cmp	r0, #0
 8006914:	d100      	bne.n	8006918 <__ieee754_pow+0x974>
 8006916:	e6fe      	b.n	8006716 <__ieee754_pow+0x772>
 8006918:	e7e9      	b.n	80068ee <__ieee754_pow+0x94a>
 800691a:	0019      	movs	r1, r3
 800691c:	e7d9      	b.n	80068d2 <__ieee754_pow+0x92e>
 800691e:	2300      	movs	r3, #0
 8006920:	4c16      	ldr	r4, [pc, #88]	; (800697c <__ieee754_pow+0x9d8>)
 8006922:	f7ff fba1 	bl	8006068 <__ieee754_pow+0xc4>
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	652b82fe 	.word	0x652b82fe
 800692c:	3c971547 	.word	0x3c971547
 8006930:	3fe00000 	.word	0x3fe00000
 8006934:	fffffc02 	.word	0xfffffc02
 8006938:	fffffc01 	.word	0xfffffc01
 800693c:	000fffff 	.word	0x000fffff
 8006940:	3fe62e43 	.word	0x3fe62e43
 8006944:	fefa39ef 	.word	0xfefa39ef
 8006948:	3fe62e42 	.word	0x3fe62e42
 800694c:	0ca86c39 	.word	0x0ca86c39
 8006950:	be205c61 	.word	0xbe205c61
 8006954:	72bea4d0 	.word	0x72bea4d0
 8006958:	3e663769 	.word	0x3e663769
 800695c:	c5d26bf1 	.word	0xc5d26bf1
 8006960:	3ebbbd41 	.word	0x3ebbbd41
 8006964:	af25de2c 	.word	0xaf25de2c
 8006968:	3f11566a 	.word	0x3f11566a
 800696c:	16bebd93 	.word	0x16bebd93
 8006970:	3f66c16c 	.word	0x3f66c16c
 8006974:	5555553e 	.word	0x5555553e
 8006978:	3fc55555 	.word	0x3fc55555
 800697c:	3ff00000 	.word	0x3ff00000
 8006980:	4090cbff 	.word	0x4090cbff
 8006984:	3f6f3400 	.word	0x3f6f3400
 8006988:	c2f8f359 	.word	0xc2f8f359
 800698c:	01a56e1f 	.word	0x01a56e1f

08006990 <__ieee754_sqrt>:
 8006990:	4b55      	ldr	r3, [pc, #340]	; (8006ae8 <__ieee754_sqrt+0x158>)
 8006992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006994:	001a      	movs	r2, r3
 8006996:	0005      	movs	r5, r0
 8006998:	000c      	movs	r4, r1
 800699a:	400a      	ands	r2, r1
 800699c:	429a      	cmp	r2, r3
 800699e:	d10f      	bne.n	80069c0 <__ieee754_sqrt+0x30>
 80069a0:	0002      	movs	r2, r0
 80069a2:	000b      	movs	r3, r1
 80069a4:	f7fb fb12 	bl	8001fcc <__aeabi_dmul>
 80069a8:	0002      	movs	r2, r0
 80069aa:	000b      	movs	r3, r1
 80069ac:	0028      	movs	r0, r5
 80069ae:	0021      	movs	r1, r4
 80069b0:	f7fa fbe6 	bl	8001180 <__aeabi_dadd>
 80069b4:	0005      	movs	r5, r0
 80069b6:	000c      	movs	r4, r1
 80069b8:	0028      	movs	r0, r5
 80069ba:	0021      	movs	r1, r4
 80069bc:	b003      	add	sp, #12
 80069be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c0:	0002      	movs	r2, r0
 80069c2:	2900      	cmp	r1, #0
 80069c4:	dc10      	bgt.n	80069e8 <__ieee754_sqrt+0x58>
 80069c6:	004b      	lsls	r3, r1, #1
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	4303      	orrs	r3, r0
 80069cc:	d0f4      	beq.n	80069b8 <__ieee754_sqrt+0x28>
 80069ce:	2000      	movs	r0, #0
 80069d0:	4281      	cmp	r1, r0
 80069d2:	d100      	bne.n	80069d6 <__ieee754_sqrt+0x46>
 80069d4:	e07f      	b.n	8006ad6 <__ieee754_sqrt+0x146>
 80069d6:	000b      	movs	r3, r1
 80069d8:	0028      	movs	r0, r5
 80069da:	f7fb fd69 	bl	80024b0 <__aeabi_dsub>
 80069de:	0002      	movs	r2, r0
 80069e0:	000b      	movs	r3, r1
 80069e2:	f7fa fee9 	bl	80017b8 <__aeabi_ddiv>
 80069e6:	e7e5      	b.n	80069b4 <__ieee754_sqrt+0x24>
 80069e8:	1508      	asrs	r0, r1, #20
 80069ea:	d074      	beq.n	8006ad6 <__ieee754_sqrt+0x146>
 80069ec:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <__ieee754_sqrt+0x15c>)
 80069ee:	0309      	lsls	r1, r1, #12
 80069f0:	18c0      	adds	r0, r0, r3
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	0b09      	lsrs	r1, r1, #12
 80069f6:	035b      	lsls	r3, r3, #13
 80069f8:	4319      	orrs	r1, r3
 80069fa:	07c3      	lsls	r3, r0, #31
 80069fc:	d503      	bpl.n	8006a06 <__ieee754_sqrt+0x76>
 80069fe:	0fd3      	lsrs	r3, r2, #31
 8006a00:	0049      	lsls	r1, r1, #1
 8006a02:	18c9      	adds	r1, r1, r3
 8006a04:	0052      	lsls	r2, r2, #1
 8006a06:	2400      	movs	r4, #0
 8006a08:	1043      	asrs	r3, r0, #1
 8006a0a:	0049      	lsls	r1, r1, #1
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	2580      	movs	r5, #128	; 0x80
 8006a10:	0fd3      	lsrs	r3, r2, #31
 8006a12:	18cb      	adds	r3, r1, r3
 8006a14:	0020      	movs	r0, r4
 8006a16:	2116      	movs	r1, #22
 8006a18:	0052      	lsls	r2, r2, #1
 8006a1a:	03ad      	lsls	r5, r5, #14
 8006a1c:	1946      	adds	r6, r0, r5
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	dc02      	bgt.n	8006a28 <__ieee754_sqrt+0x98>
 8006a22:	1970      	adds	r0, r6, r5
 8006a24:	1b9b      	subs	r3, r3, r6
 8006a26:	1964      	adds	r4, r4, r5
 8006a28:	0fd6      	lsrs	r6, r2, #31
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	3901      	subs	r1, #1
 8006a2e:	199b      	adds	r3, r3, r6
 8006a30:	0052      	lsls	r2, r2, #1
 8006a32:	086d      	lsrs	r5, r5, #1
 8006a34:	2900      	cmp	r1, #0
 8006a36:	d1f1      	bne.n	8006a1c <__ieee754_sqrt+0x8c>
 8006a38:	2520      	movs	r5, #32
 8006a3a:	2680      	movs	r6, #128	; 0x80
 8006a3c:	46ac      	mov	ip, r5
 8006a3e:	9100      	str	r1, [sp, #0]
 8006a40:	0636      	lsls	r6, r6, #24
 8006a42:	9d00      	ldr	r5, [sp, #0]
 8006a44:	1977      	adds	r7, r6, r5
 8006a46:	4283      	cmp	r3, r0
 8006a48:	dc02      	bgt.n	8006a50 <__ieee754_sqrt+0xc0>
 8006a4a:	d112      	bne.n	8006a72 <__ieee754_sqrt+0xe2>
 8006a4c:	4297      	cmp	r7, r2
 8006a4e:	d810      	bhi.n	8006a72 <__ieee754_sqrt+0xe2>
 8006a50:	19bd      	adds	r5, r7, r6
 8006a52:	9500      	str	r5, [sp, #0]
 8006a54:	0005      	movs	r5, r0
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	da03      	bge.n	8006a62 <__ieee754_sqrt+0xd2>
 8006a5a:	9d00      	ldr	r5, [sp, #0]
 8006a5c:	43ed      	mvns	r5, r5
 8006a5e:	0fed      	lsrs	r5, r5, #31
 8006a60:	1945      	adds	r5, r0, r5
 8006a62:	1a1b      	subs	r3, r3, r0
 8006a64:	42ba      	cmp	r2, r7
 8006a66:	4180      	sbcs	r0, r0
 8006a68:	4240      	negs	r0, r0
 8006a6a:	1a1b      	subs	r3, r3, r0
 8006a6c:	0028      	movs	r0, r5
 8006a6e:	1bd2      	subs	r2, r2, r7
 8006a70:	1989      	adds	r1, r1, r6
 8006a72:	0fd5      	lsrs	r5, r2, #31
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	18eb      	adds	r3, r5, r3
 8006a78:	2501      	movs	r5, #1
 8006a7a:	426d      	negs	r5, r5
 8006a7c:	44ac      	add	ip, r5
 8006a7e:	4665      	mov	r5, ip
 8006a80:	0052      	lsls	r2, r2, #1
 8006a82:	0876      	lsrs	r6, r6, #1
 8006a84:	2d00      	cmp	r5, #0
 8006a86:	d1dc      	bne.n	8006a42 <__ieee754_sqrt+0xb2>
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <__ieee754_sqrt+0x104>
 8006a8c:	1c4b      	adds	r3, r1, #1
 8006a8e:	d127      	bne.n	8006ae0 <__ieee754_sqrt+0x150>
 8006a90:	4661      	mov	r1, ip
 8006a92:	3401      	adds	r4, #1
 8006a94:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <__ieee754_sqrt+0x160>)
 8006a96:	1060      	asrs	r0, r4, #1
 8006a98:	18c0      	adds	r0, r0, r3
 8006a9a:	0849      	lsrs	r1, r1, #1
 8006a9c:	07e3      	lsls	r3, r4, #31
 8006a9e:	d502      	bpl.n	8006aa6 <__ieee754_sqrt+0x116>
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	061b      	lsls	r3, r3, #24
 8006aa4:	4319      	orrs	r1, r3
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	000d      	movs	r5, r1
 8006aaa:	051c      	lsls	r4, r3, #20
 8006aac:	1823      	adds	r3, r4, r0
 8006aae:	001c      	movs	r4, r3
 8006ab0:	e782      	b.n	80069b8 <__ieee754_sqrt+0x28>
 8006ab2:	0ad1      	lsrs	r1, r2, #11
 8006ab4:	3b15      	subs	r3, #21
 8006ab6:	0552      	lsls	r2, r2, #21
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d0fa      	beq.n	8006ab2 <__ieee754_sqrt+0x122>
 8006abc:	2480      	movs	r4, #128	; 0x80
 8006abe:	0364      	lsls	r4, r4, #13
 8006ac0:	4221      	tst	r1, r4
 8006ac2:	d00a      	beq.n	8006ada <__ieee754_sqrt+0x14a>
 8006ac4:	2420      	movs	r4, #32
 8006ac6:	0016      	movs	r6, r2
 8006ac8:	1a24      	subs	r4, r4, r0
 8006aca:	40e6      	lsrs	r6, r4
 8006acc:	1e45      	subs	r5, r0, #1
 8006ace:	4082      	lsls	r2, r0
 8006ad0:	4331      	orrs	r1, r6
 8006ad2:	1b58      	subs	r0, r3, r5
 8006ad4:	e78a      	b.n	80069ec <__ieee754_sqrt+0x5c>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e7ee      	b.n	8006ab8 <__ieee754_sqrt+0x128>
 8006ada:	0049      	lsls	r1, r1, #1
 8006adc:	3001      	adds	r0, #1
 8006ade:	e7ef      	b.n	8006ac0 <__ieee754_sqrt+0x130>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	3101      	adds	r1, #1
 8006ae4:	4399      	bics	r1, r3
 8006ae6:	e7d5      	b.n	8006a94 <__ieee754_sqrt+0x104>
 8006ae8:	7ff00000 	.word	0x7ff00000
 8006aec:	fffffc01 	.word	0xfffffc01
 8006af0:	3fe00000 	.word	0x3fe00000

08006af4 <fabs>:
 8006af4:	0049      	lsls	r1, r1, #1
 8006af6:	084b      	lsrs	r3, r1, #1
 8006af8:	0019      	movs	r1, r3
 8006afa:	4770      	bx	lr

08006afc <finite>:
 8006afc:	0048      	lsls	r0, r1, #1
 8006afe:	4b02      	ldr	r3, [pc, #8]	; (8006b08 <finite+0xc>)
 8006b00:	0840      	lsrs	r0, r0, #1
 8006b02:	18c0      	adds	r0, r0, r3
 8006b04:	0fc0      	lsrs	r0, r0, #31
 8006b06:	4770      	bx	lr
 8006b08:	80100000 	.word	0x80100000

08006b0c <matherr>:
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4770      	bx	lr

08006b10 <nan>:
 8006b10:	2000      	movs	r0, #0
 8006b12:	4901      	ldr	r1, [pc, #4]	; (8006b18 <nan+0x8>)
 8006b14:	4770      	bx	lr
 8006b16:	46c0      	nop			; (mov r8, r8)
 8006b18:	7ff80000 	.word	0x7ff80000

08006b1c <rint>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	004a      	lsls	r2, r1, #1
 8006b20:	4e3e      	ldr	r6, [pc, #248]	; (8006c1c <rint+0x100>)
 8006b22:	0d52      	lsrs	r2, r2, #21
 8006b24:	b085      	sub	sp, #20
 8006b26:	1996      	adds	r6, r2, r6
 8006b28:	000d      	movs	r5, r1
 8006b2a:	9101      	str	r1, [sp, #4]
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	0fcc      	lsrs	r4, r1, #31
 8006b30:	2e13      	cmp	r6, #19
 8006b32:	dc57      	bgt.n	8006be4 <rint+0xc8>
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	da2a      	bge.n	8006b8e <rint+0x72>
 8006b38:	004a      	lsls	r2, r1, #1
 8006b3a:	0852      	lsrs	r2, r2, #1
 8006b3c:	4302      	orrs	r2, r0
 8006b3e:	d024      	beq.n	8006b8a <rint+0x6e>
 8006b40:	030a      	lsls	r2, r1, #12
 8006b42:	0b12      	lsrs	r2, r2, #12
 8006b44:	4302      	orrs	r2, r0
 8006b46:	4253      	negs	r3, r2
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	2280      	movs	r2, #128	; 0x80
 8006b4c:	0c4d      	lsrs	r5, r1, #17
 8006b4e:	0312      	lsls	r2, r2, #12
 8006b50:	0b1b      	lsrs	r3, r3, #12
 8006b52:	4013      	ands	r3, r2
 8006b54:	046d      	lsls	r5, r5, #17
 8006b56:	432b      	orrs	r3, r5
 8006b58:	0019      	movs	r1, r3
 8006b5a:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <rint+0x104>)
 8006b5c:	00e2      	lsls	r2, r4, #3
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	681e      	ldr	r6, [r3, #0]
 8006b62:	685f      	ldr	r7, [r3, #4]
 8006b64:	0002      	movs	r2, r0
 8006b66:	000b      	movs	r3, r1
 8006b68:	0030      	movs	r0, r6
 8006b6a:	0039      	movs	r1, r7
 8006b6c:	f7fa fb08 	bl	8001180 <__aeabi_dadd>
 8006b70:	9002      	str	r0, [sp, #8]
 8006b72:	9103      	str	r1, [sp, #12]
 8006b74:	9802      	ldr	r0, [sp, #8]
 8006b76:	9903      	ldr	r1, [sp, #12]
 8006b78:	003b      	movs	r3, r7
 8006b7a:	0032      	movs	r2, r6
 8006b7c:	f7fb fc98 	bl	80024b0 <__aeabi_dsub>
 8006b80:	004b      	lsls	r3, r1, #1
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	07e4      	lsls	r4, r4, #31
 8006b86:	4323      	orrs	r3, r4
 8006b88:	0019      	movs	r1, r3
 8006b8a:	b005      	add	sp, #20
 8006b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8e:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <rint+0x108>)
 8006b90:	4132      	asrs	r2, r6
 8006b92:	0017      	movs	r7, r2
 8006b94:	400f      	ands	r7, r1
 8006b96:	4307      	orrs	r7, r0
 8006b98:	d0f7      	beq.n	8006b8a <rint+0x6e>
 8006b9a:	0852      	lsrs	r2, r2, #1
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	4029      	ands	r1, r5
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	d00a      	beq.n	8006bba <rint+0x9e>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2e13      	cmp	r6, #19
 8006ba8:	d101      	bne.n	8006bae <rint+0x92>
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	061b      	lsls	r3, r3, #24
 8006bae:	2780      	movs	r7, #128	; 0x80
 8006bb0:	02ff      	lsls	r7, r7, #11
 8006bb2:	4137      	asrs	r7, r6
 8006bb4:	4395      	bics	r5, r2
 8006bb6:	432f      	orrs	r7, r5
 8006bb8:	9701      	str	r7, [sp, #4]
 8006bba:	9901      	ldr	r1, [sp, #4]
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	000b      	movs	r3, r1
 8006bc0:	4917      	ldr	r1, [pc, #92]	; (8006c20 <rint+0x104>)
 8006bc2:	00e4      	lsls	r4, r4, #3
 8006bc4:	190c      	adds	r4, r1, r4
 8006bc6:	6865      	ldr	r5, [r4, #4]
 8006bc8:	6824      	ldr	r4, [r4, #0]
 8006bca:	0020      	movs	r0, r4
 8006bcc:	0029      	movs	r1, r5
 8006bce:	f7fa fad7 	bl	8001180 <__aeabi_dadd>
 8006bd2:	9002      	str	r0, [sp, #8]
 8006bd4:	9103      	str	r1, [sp, #12]
 8006bd6:	9802      	ldr	r0, [sp, #8]
 8006bd8:	9903      	ldr	r1, [sp, #12]
 8006bda:	0022      	movs	r2, r4
 8006bdc:	002b      	movs	r3, r5
 8006bde:	f7fb fc67 	bl	80024b0 <__aeabi_dsub>
 8006be2:	e7d2      	b.n	8006b8a <rint+0x6e>
 8006be4:	2e33      	cmp	r6, #51	; 0x33
 8006be6:	dd08      	ble.n	8006bfa <rint+0xde>
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	429e      	cmp	r6, r3
 8006bee:	d1cc      	bne.n	8006b8a <rint+0x6e>
 8006bf0:	0002      	movs	r2, r0
 8006bf2:	000b      	movs	r3, r1
 8006bf4:	f7fa fac4 	bl	8001180 <__aeabi_dadd>
 8006bf8:	e7c7      	b.n	8006b8a <rint+0x6e>
 8006bfa:	2601      	movs	r6, #1
 8006bfc:	4d0a      	ldr	r5, [pc, #40]	; (8006c28 <rint+0x10c>)
 8006bfe:	4276      	negs	r6, r6
 8006c00:	1952      	adds	r2, r2, r5
 8006c02:	40d6      	lsrs	r6, r2
 8006c04:	4206      	tst	r6, r0
 8006c06:	d0c0      	beq.n	8006b8a <rint+0x6e>
 8006c08:	0876      	lsrs	r6, r6, #1
 8006c0a:	4206      	tst	r6, r0
 8006c0c:	d0d5      	beq.n	8006bba <rint+0x9e>
 8006c0e:	2180      	movs	r1, #128	; 0x80
 8006c10:	05c9      	lsls	r1, r1, #23
 8006c12:	4111      	asrs	r1, r2
 8006c14:	43b3      	bics	r3, r6
 8006c16:	430b      	orrs	r3, r1
 8006c18:	e7cf      	b.n	8006bba <rint+0x9e>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	fffffc01 	.word	0xfffffc01
 8006c20:	08006f68 	.word	0x08006f68
 8006c24:	000fffff 	.word	0x000fffff
 8006c28:	fffffbed 	.word	0xfffffbed

08006c2c <scalbn>:
 8006c2c:	004b      	lsls	r3, r1, #1
 8006c2e:	b570      	push	{r4, r5, r6, lr}
 8006c30:	0d5b      	lsrs	r3, r3, #21
 8006c32:	0014      	movs	r4, r2
 8006c34:	000a      	movs	r2, r1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10d      	bne.n	8006c56 <scalbn+0x2a>
 8006c3a:	004b      	lsls	r3, r1, #1
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	4303      	orrs	r3, r0
 8006c40:	d010      	beq.n	8006c64 <scalbn+0x38>
 8006c42:	4b21      	ldr	r3, [pc, #132]	; (8006cc8 <scalbn+0x9c>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	f7fb f9c1 	bl	8001fcc <__aeabi_dmul>
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <scalbn+0xa0>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	da0a      	bge.n	8006c66 <scalbn+0x3a>
 8006c50:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <scalbn+0xa4>)
 8006c52:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <scalbn+0xa8>)
 8006c54:	e017      	b.n	8006c86 <scalbn+0x5a>
 8006c56:	4d20      	ldr	r5, [pc, #128]	; (8006cd8 <scalbn+0xac>)
 8006c58:	42ab      	cmp	r3, r5
 8006c5a:	d108      	bne.n	8006c6e <scalbn+0x42>
 8006c5c:	0002      	movs	r2, r0
 8006c5e:	000b      	movs	r3, r1
 8006c60:	f7fa fa8e 	bl	8001180 <__aeabi_dadd>
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	000a      	movs	r2, r1
 8006c68:	004b      	lsls	r3, r1, #1
 8006c6a:	0d5b      	lsrs	r3, r3, #21
 8006c6c:	3b36      	subs	r3, #54	; 0x36
 8006c6e:	4d1b      	ldr	r5, [pc, #108]	; (8006cdc <scalbn+0xb0>)
 8006c70:	18e3      	adds	r3, r4, r3
 8006c72:	42ab      	cmp	r3, r5
 8006c74:	dd0a      	ble.n	8006c8c <scalbn+0x60>
 8006c76:	0002      	movs	r2, r0
 8006c78:	000b      	movs	r3, r1
 8006c7a:	4819      	ldr	r0, [pc, #100]	; (8006ce0 <scalbn+0xb4>)
 8006c7c:	4919      	ldr	r1, [pc, #100]	; (8006ce4 <scalbn+0xb8>)
 8006c7e:	f000 f839 	bl	8006cf4 <copysign>
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <scalbn+0xb4>)
 8006c84:	4b17      	ldr	r3, [pc, #92]	; (8006ce4 <scalbn+0xb8>)
 8006c86:	f7fb f9a1 	bl	8001fcc <__aeabi_dmul>
 8006c8a:	e7eb      	b.n	8006c64 <scalbn+0x38>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dd05      	ble.n	8006c9c <scalbn+0x70>
 8006c90:	4c15      	ldr	r4, [pc, #84]	; (8006ce8 <scalbn+0xbc>)
 8006c92:	051b      	lsls	r3, r3, #20
 8006c94:	4022      	ands	r2, r4
 8006c96:	431a      	orrs	r2, r3
 8006c98:	0011      	movs	r1, r2
 8006c9a:	e7e3      	b.n	8006c64 <scalbn+0x38>
 8006c9c:	001d      	movs	r5, r3
 8006c9e:	3535      	adds	r5, #53	; 0x35
 8006ca0:	da09      	bge.n	8006cb6 <scalbn+0x8a>
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <scalbn+0xc0>)
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	429c      	cmp	r4, r3
 8006ca8:	dce6      	bgt.n	8006c78 <scalbn+0x4c>
 8006caa:	000b      	movs	r3, r1
 8006cac:	4808      	ldr	r0, [pc, #32]	; (8006cd0 <scalbn+0xa4>)
 8006cae:	4909      	ldr	r1, [pc, #36]	; (8006cd4 <scalbn+0xa8>)
 8006cb0:	f000 f820 	bl	8006cf4 <copysign>
 8006cb4:	e7cc      	b.n	8006c50 <scalbn+0x24>
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	; (8006ce8 <scalbn+0xbc>)
 8006cb8:	3336      	adds	r3, #54	; 0x36
 8006cba:	4022      	ands	r2, r4
 8006cbc:	051b      	lsls	r3, r3, #20
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <scalbn+0xc4>)
 8006cc6:	e7de      	b.n	8006c86 <scalbn+0x5a>
 8006cc8:	43500000 	.word	0x43500000
 8006ccc:	ffff3cb0 	.word	0xffff3cb0
 8006cd0:	c2f8f359 	.word	0xc2f8f359
 8006cd4:	01a56e1f 	.word	0x01a56e1f
 8006cd8:	000007ff 	.word	0x000007ff
 8006cdc:	000007fe 	.word	0x000007fe
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	7e37e43c 	.word	0x7e37e43c
 8006ce8:	800fffff 	.word	0x800fffff
 8006cec:	0000c350 	.word	0x0000c350
 8006cf0:	3c900000 	.word	0x3c900000

08006cf4 <copysign>:
 8006cf4:	b530      	push	{r4, r5, lr}
 8006cf6:	004a      	lsls	r2, r1, #1
 8006cf8:	0fdb      	lsrs	r3, r3, #31
 8006cfa:	07db      	lsls	r3, r3, #31
 8006cfc:	0852      	lsrs	r2, r2, #1
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	0011      	movs	r1, r2
 8006d02:	bd30      	pop	{r4, r5, pc}

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
