
STM32L041C6Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004134  08004134  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800413c  0800413c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  2000000c  08004150  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004150  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f264  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002233  00000000  00000000  0002f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  00032218  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011f93  00000000  00000000  00032e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cadc  00000000  00000000  00044deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006cd42  00000000  00000000  000518c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec4  00000000  00000000  000be684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040b0 	.word	0x080040b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080040b0 	.word	0x080040b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 fdff 	bl	80040a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b29      	ldr	r3, [pc, #164]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b26      	ldr	r3, [pc, #152]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004c0:	2102      	movs	r1, #2
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <MX_GPIO_Init+0xbc>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	2202      	movs	r2, #2
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 80004d2:	491e      	ldr	r1, [pc, #120]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_GPIO_Init+0xc4>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 ffad 	bl	8001438 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80004de:	23c8      	movs	r3, #200	; 0xc8
 80004e0:	0159      	lsls	r1, r3, #5
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 ffa5 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <MX_GPIO_Init+0xc0>)
 80004f4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000508:	000c      	movs	r4, r1
 800050a:	187b      	adds	r3, r7, r1
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <MX_GPIO_Init+0xc4>)
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f000 fe23 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000516:	0021      	movs	r1, r4
 8000518:	187b      	adds	r3, r7, r1
 800051a:	22c8      	movs	r2, #200	; 0xc8
 800051c:	0152      	lsls	r2, r2, #5
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	187a      	adds	r2, r7, r1
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	0011      	movs	r1, r2
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fe0e 	bl	800115c <HAL_GPIO_Init>

}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b009      	add	sp, #36	; 0x24
 8000546:	bd90      	pop	{r4, r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	00000f04 	.word	0x00000f04
 8000550:	50000400 	.word	0x50000400

08000554 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000558:	4b10      	ldr	r3, [pc, #64]	; (800059c <MX_LPTIM1_Init+0x48>)
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <MX_LPTIM1_Init+0x4c>)
 800055c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_LPTIM1_Init+0x48>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV64;
 8000564:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_LPTIM1_Init+0x48>)
 8000566:	22c0      	movs	r2, #192	; 0xc0
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_LPTIM1_Init+0x48>)
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <MX_LPTIM1_Init+0x50>)
 8000570:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_LPTIM1_Init+0x48>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_LPTIM1_Init+0x48>)
 800057a:	2200      	movs	r2, #0
 800057c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_LPTIM1_Init+0x48>)
 8000580:	2200      	movs	r2, #0
 8000582:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_LPTIM1_Init+0x48>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 ff74 	bl	8001474 <HAL_LPTIM_Init>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8000590:	f000 f901 	bl	8000796 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	20000028 	.word	0x20000028
 80005a0:	40007c00 	.word	0x40007c00
 80005a4:	0000ffff 	.word	0x0000ffff

080005a8 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <HAL_LPTIM_MspInit+0x38>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d10e      	bne.n	80005d8 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_LPTIM_MspInit+0x3c>)
 80005bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <HAL_LPTIM_MspInit+0x3c>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0609      	lsls	r1, r1, #24
 80005c4:	430a      	orrs	r2, r1
 80005c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	200d      	movs	r0, #13
 80005ce:	f000 fd0b 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80005d2:	200d      	movs	r0, #13
 80005d4:	f000 fd1d 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40007c00 	.word	0x40007c00
 80005e4:	40021000 	.word	0x40021000

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fbe0 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f83c 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f7ff ff4a 	bl	800048c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005f8:	f000 f91c 	bl	8000834 <MX_TIM2_Init>
  MX_TIM21_Init();
 80005fc:	f000 f998 	bl	8000930 <MX_TIM21_Init>
  MX_TIM22_Init();
 8000600:	f000 fa00 	bl	8000a04 <MX_TIM22_Init>
  MX_USART2_UART_Init();
 8000604:	f000 fb2e 	bl	8000c64 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8000608:	f7ff ffa4 	bl	8000554 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, sizeof(rx_data));
 800060c:	4914      	ldr	r1, [pc, #80]	; (8000660 <main+0x78>)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <main+0x7c>)
 8000610:	2204      	movs	r2, #4
 8000612:	0018      	movs	r0, r3
 8000614:	f002 fb0c 	bl	8002c30 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	0119      	lsls	r1, r3, #4
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2201      	movs	r2, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f000 ff08 	bl	8001438 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <main+0x80>)
 800062a:	210c      	movs	r1, #12
 800062c:	0018      	movs	r0, r3
 800062e:	f001 ff8f 	bl	8002550 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 200);
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0x80>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	22c8      	movs	r2, #200	; 0xc8
 8000638:	641a      	str	r2, [r3, #64]	; 0x40


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0159      	lsls	r1, r3, #5
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fef7 	bl	8001438 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <main+0x80>)
 800064c:	2108      	movs	r1, #8
 800064e:	0018      	movs	r0, r3
 8000650:	f001 ff7e 	bl	8002550 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <main+0x80>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x74>
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000058 	.word	0x20000058
 8000664:	2000011c 	.word	0x2000011c
 8000668:	2000009c 	.word	0x2000009c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b099      	sub	sp, #100	; 0x64
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	242c      	movs	r4, #44	; 0x2c
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	2334      	movs	r3, #52	; 0x34
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f003 fd0f 	bl	80040a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000682:	2318      	movs	r3, #24
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 fd07 	bl	80040a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000692:	003b      	movs	r3, r7
 8000694:	0018      	movs	r0, r3
 8000696:	2318      	movs	r3, #24
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 fd00 	bl	80040a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <SystemClock_Config+0xec>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <SystemClock_Config+0xf0>)
 80006a6:	401a      	ands	r2, r3
 80006a8:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <SystemClock_Config+0xec>)
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	0109      	lsls	r1, r1, #4
 80006ae:	430a      	orrs	r2, r1
 80006b0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006b2:	0021      	movs	r1, r4
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	220a      	movs	r2, #10
 80006b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2210      	movs	r2, #16
 80006c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2202      	movs	r2, #2
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	02d2      	lsls	r2, r2, #11
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f828 	bl	8001740 <HAL_RCC_OscConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f84f 	bl	8000796 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	2118      	movs	r1, #24
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	220f      	movs	r2, #15
 80006fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2203      	movs	r2, #3
 8000704:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2101      	movs	r1, #1
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fb8f 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000726:	f000 f836 	bl	8000796 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 800072a:	003b      	movs	r3, r7
 800072c:	2282      	movs	r2, #130	; 0x82
 800072e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000730:	003b      	movs	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8000736:	003b      	movs	r3, r7
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	02d2      	lsls	r2, r2, #11
 800073c:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073e:	003b      	movs	r3, r7
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fd9d 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800074a:	f000 f824 	bl	8000796 <Error_Handler>
  }
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	b019      	add	sp, #100	; 0x64
 8000754:	bd90      	pop	{r4, r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	40007000 	.word	0x40007000
 800075c:	ffffe7ff 	.word	0xffffe7ff

08000760 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, rx_data, sizeof(rx_data));
 8000768:	4904      	ldr	r1, [pc, #16]	; (800077c <HAL_UART_RxCpltCallback+0x1c>)
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_UART_RxCpltCallback+0x20>)
 800076c:	2204      	movs	r2, #4
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fa5e 	bl	8002c30 <HAL_UART_Receive_IT>
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000058 	.word	0x20000058
 8000780:	2000011c 	.word	0x2000011c

08000784 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	__NOP();
 800078c:	46c0      	nop			; (mov r8, r8)
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}

08000796 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x6>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_MspInit+0x24>)
 80007a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_MspInit+0x24>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	430a      	orrs	r2, r1
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_MspInit+0x24>)
 80007b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_MspInit+0x24>)
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	0549      	lsls	r1, r1, #21
 80007ba:	430a      	orrs	r2, r1
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 fb34 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <LPTIM1_IRQHandler+0x14>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fec4 	bl	800158c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000028 	.word	0x20000028

08000810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <USART2_IRQHandler+0x14>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fa70 	bl	8002cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	2000011c 	.word	0x2000011c

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	2310      	movs	r3, #16
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	2308      	movs	r3, #8
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f003 fc2b 	bl	80040a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084a:	003b      	movs	r3, r7
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f003 fc24 	bl	80040a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000858:	4b34      	ldr	r3, [pc, #208]	; (800092c <MX_TIM2_Init+0xf8>)
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	05d2      	lsls	r2, r2, #23
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_TIM2_Init+0xf8>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000866:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_TIM2_Init+0xf8>)
 8000868:	2220      	movs	r2, #32
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_TIM2_Init+0xf8>)
 800086e:	22fa      	movs	r2, #250	; 0xfa
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_TIM2_Init+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_TIM2_Init+0xf8>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_TIM2_Init+0xf8>)
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fe24 	bl	80024d0 <HAL_TIM_PWM_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800088c:	f7ff ff83 	bl	8000796 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2110      	movs	r1, #16
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM2_Init+0xf8>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 f917 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008ae:	f7ff ff72 	bl	8000796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2260      	movs	r2, #96	; 0x60
 80008b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008b8:	003b      	movs	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	003b      	movs	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	0039      	movs	r1, r7
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_TIM2_Init+0xf8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fec9 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80008da:	f7ff ff5c 	bl	8000796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008de:	0039      	movs	r1, r7
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_TIM2_Init+0xf8>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 febf 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80008ee:	f7ff ff52 	bl	8000796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f2:	0039      	movs	r1, r7
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_TIM2_Init+0xf8>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 feb5 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000902:	f7ff ff48 	bl	8000796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000906:	0039      	movs	r1, r7
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_TIM2_Init+0xf8>)
 800090a:	220c      	movs	r2, #12
 800090c:	0018      	movs	r0, r3
 800090e:	f001 feab 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000916:	f7ff ff3e 	bl	8000796 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <MX_TIM2_Init+0xf8>)
 800091c:	0018      	movs	r0, r3
 800091e:	f000 f90d 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b006      	add	sp, #24
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000009c 	.word	0x2000009c

08000930 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	2310      	movs	r3, #16
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	0018      	movs	r0, r3
 800093c:	2308      	movs	r3, #8
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f003 fbad 	bl	80040a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	2310      	movs	r3, #16
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f003 fba6 	bl	80040a0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_TIM21_Init+0xcc>)
 8000956:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <MX_TIM21_Init+0xd0>)
 8000958:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_TIM21_Init+0xcc>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_TIM21_Init+0xcc>)
 8000962:	2220      	movs	r2, #32
 8000964:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 4000;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_TIM21_Init+0xcc>)
 8000968:	22fa      	movs	r2, #250	; 0xfa
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_TIM21_Init+0xcc>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_TIM21_Init+0xcc>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_TIM21_Init+0xcc>)
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fda7 	bl	80024d0 <HAL_TIM_PWM_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM21_Init+0x5a>
  {
    Error_Handler();
 8000986:	f7ff ff06 	bl	8000796 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2110      	movs	r1, #16
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000998:	187a      	adds	r2, r7, r1
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_TIM21_Init+0xcc>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f002 f89a 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM21_Init+0x7c>
  {
    Error_Handler();
 80009a8:	f7ff fef5 	bl	8000796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2260      	movs	r2, #96	; 0x60
 80009b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009b2:	003b      	movs	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b8:	003b      	movs	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009be:	003b      	movs	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c4:	0039      	movs	r1, r7
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_TIM21_Init+0xcc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fe4c 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80009d4:	f7ff fedf 	bl	8000796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009d8:	0039      	movs	r1, r7
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_TIM21_Init+0xcc>)
 80009dc:	2204      	movs	r2, #4
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fe42 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM21_Init+0xbc>
  {
    Error_Handler();
 80009e8:	f7ff fed5 	bl	8000796 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <MX_TIM21_Init+0xcc>)
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 f8a4 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b006      	add	sp, #24
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000dc 	.word	0x200000dc
 8000a00:	40010800 	.word	0x40010800

08000a04 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	2308      	movs	r3, #8
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 fb43 	bl	80040a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2310      	movs	r3, #16
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fb3c 	bl	80040a0 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <MX_TIM22_Init+0xd0>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 4000;
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a3c:	22fa      	movs	r2, #250	; 0xfa
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fd3d 	bl	80024d0 <HAL_TIM_PWM_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM22_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f7ff fe9c 	bl	8000796 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2110      	movs	r1, #16
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000a6c:	187a      	adds	r2, r7, r1
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 f830 	bl	8002ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM22_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f7ff fe8b 	bl	8000796 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2260      	movs	r2, #96	; 0x60
 8000a84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	0039      	movs	r1, r7
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fde2 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 8000aa8:	f7ff fe75 	bl	8000796 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aac:	0039      	movs	r1, r7
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fdd8 	bl	8002668 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM22_Init+0xbc>
  {
    Error_Handler();
 8000abc:	f7ff fe6b 	bl	8000796 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <MX_TIM22_Init+0xcc>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f83a 	bl	8000b3c <HAL_TIM_MspPostInit>

}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b006      	add	sp, #24
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000005c 	.word	0x2000005c
 8000ad4:	40011400 	.word	0x40011400

08000ad8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d106      	bne.n	8000afa <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	430a      	orrs	r2, r1
 8000af6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000af8:	e016      	b.n	8000b28 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM21)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <HAL_TIM_PWM_MspInit+0x5c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d106      	bne.n	8000b12 <HAL_TIM_PWM_MspInit+0x3a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b10:	e00a      	b.n	8000b28 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM22)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_TIM_PWM_MspInit+0x60>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d105      	bne.n	8000b28 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_TIM_PWM_MspInit+0x58>)
 8000b22:	2120      	movs	r1, #32
 8000b24:	430a      	orrs	r2, r1
 8000b26:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40011400 	.word	0x40011400

08000b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	2314      	movs	r3, #20
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f003 faa6 	bl	80040a0 <memset>
  if(timHandle->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d123      	bne.n	8000ba8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6c:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	2201      	movs	r2, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b78:	2114      	movs	r1, #20
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	220f      	movs	r2, #15
 8000b7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2202      	movs	r2, #2
 8000b84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	2202      	movs	r2, #2
 8000b96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	187a      	adds	r2, r7, r1
 8000b9a:	23a0      	movs	r3, #160	; 0xa0
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fadb 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8000ba6:	e050      	b.n	8000c4a <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM21)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a2a      	ldr	r2, [pc, #168]	; (8000c58 <HAL_TIM_MspPostInit+0x11c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d123      	bne.n	8000bfa <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb6:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000bb8:	2102      	movs	r1, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000bca:	2114      	movs	r1, #20
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	22c0      	movs	r2, #192	; 0xc0
 8000bd0:	01d2      	lsls	r2, r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2205      	movs	r2, #5
 8000bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <HAL_TIM_MspPostInit+0x120>)
 8000bf0:	0019      	movs	r1, r3
 8000bf2:	0010      	movs	r0, r2
 8000bf4:	f000 fab2 	bl	800115c <HAL_GPIO_Init>
}
 8000bf8:	e027      	b.n	8000c4a <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM22)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <HAL_TIM_MspPostInit+0x124>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d122      	bne.n	8000c4a <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_TIM_MspPostInit+0x118>)
 8000c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1c:	2114      	movs	r1, #20
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	22c0      	movs	r2, #192	; 0xc0
 8000c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2202      	movs	r2, #2
 8000c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2205      	movs	r2, #5
 8000c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	187a      	adds	r2, r7, r1
 8000c3e:	23a0      	movs	r3, #160	; 0xa0
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 fa89 	bl	800115c <HAL_GPIO_Init>
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b00a      	add	sp, #40	; 0x28
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010800 	.word	0x40010800
 8000c5c:	50000400 	.word	0x50000400
 8000c60:	40011400 	.word	0x40011400

08000c64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MX_USART2_UART_Init+0x5c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c70:	2296      	movs	r2, #150	; 0x96
 8000c72:	0192      	lsls	r2, r2, #6
 8000c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <MX_USART2_UART_Init+0x58>)
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 ff6d 	bl	8002b88 <HAL_UART_Init>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f7ff fd70 	bl	8000796 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000011c 	.word	0x2000011c
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	230c      	movs	r3, #12
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	2314      	movs	r3, #20
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f003 f9e2 	bl	80040a0 <memset>
  if(uartHandle->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_UART_MspInit+0x90>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d132      	bne.n	8000d4c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0289      	lsls	r1, r1, #10
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_UART_MspInit+0x94>)
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	2201      	movs	r2, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0c:	210c      	movs	r1, #12
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	22c0      	movs	r2, #192	; 0xc0
 8000d12:	00d2      	lsls	r2, r2, #3
 8000d14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2202      	movs	r2, #2
 8000d1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	187b      	adds	r3, r7, r1
 8000d24:	2203      	movs	r2, #3
 8000d26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	187a      	adds	r2, r7, r1
 8000d30:	23a0      	movs	r3, #160	; 0xa0
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fa10 	bl	800115c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	201c      	movs	r0, #28
 8000d42:	f000 f951 	bl	8000fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d46:	201c      	movs	r0, #28
 8000d48:	f000 f963 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b008      	add	sp, #32
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40004400 	.word	0x40004400
 8000d58:	40021000 	.word	0x40021000

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d86:	f7ff fd4f 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f003 f965 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc2b 	bl	80005e8 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
   ldr   r0, =_estack
 8000d94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000da0:	08004144 	.word	0x08004144
  ldr r2, =_sbss
 8000da4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000da8:	200001a4 	.word	0x200001a4

08000dac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_COMP_IRQHandler>
	...

08000db0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x3c>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Init+0x3c>)
 8000dc2:	2140      	movs	r1, #64	; 0x40
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f811 	bl	8000df0 <HAL_InitTick>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e001      	b.n	8000dde <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dda:	f7ff fce1 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_InitTick+0x5c>)
 8000dfa:	681c      	ldr	r4, [r3, #0]
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_InitTick+0x60>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	0019      	movs	r1, r3
 8000e02:	23fa      	movs	r3, #250	; 0xfa
 8000e04:	0098      	lsls	r0, r3, #2
 8000e06:	f7ff f97f 	bl	8000108 <__udivsi3>
 8000e0a:	0003      	movs	r3, r0
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	0020      	movs	r0, r4
 8000e10:	f7ff f97a 	bl	8000108 <__udivsi3>
 8000e14:	0003      	movs	r3, r0
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f90b 	bl	8001032 <HAL_SYSTICK_Config>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e00f      	b.n	8000e44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d80b      	bhi.n	8000e42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 f8d8 	bl	8000fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_InitTick+0x64>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b003      	add	sp, #12
 8000e4a:	bd90      	pop	{r4, r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	001a      	movs	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	18d2      	adds	r2, r2, r3
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000008 	.word	0x20000008
 8000e78:	200001a0 	.word	0x200001a0

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	200001a0 	.word	0x200001a0

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	0002      	movs	r2, r0
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea2:	d809      	bhi.n	8000eb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	231f      	movs	r3, #31
 8000eac:	401a      	ands	r2, r3
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_EnableIRQ+0x30>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4091      	lsls	r1, r2
 8000eb4:	000a      	movs	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
  }
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed8:	d828      	bhi.n	8000f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eda:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <__NVIC_SetPriority+0xd4>)
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	33c0      	adds	r3, #192	; 0xc0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	589b      	ldr	r3, [r3, r2]
 8000eea:	1dfa      	adds	r2, r7, #7
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	401a      	ands	r2, r3
 8000f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	22ff      	movs	r2, #255	; 0xff
 8000f08:	401a      	ands	r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2303      	movs	r3, #3
 8000f12:	4003      	ands	r3, r0
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f18:	481f      	ldr	r0, [pc, #124]	; (8000f98 <__NVIC_SetPriority+0xd4>)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	430a      	orrs	r2, r1
 8000f24:	33c0      	adds	r3, #192	; 0xc0
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f2a:	e031      	b.n	8000f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <__NVIC_SetPriority+0xd8>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0019      	movs	r1, r3
 8000f34:	230f      	movs	r3, #15
 8000f36:	400b      	ands	r3, r1
 8000f38:	3b08      	subs	r3, #8
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3306      	adds	r3, #6
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	3304      	adds	r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	1dfa      	adds	r2, r7, #7
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	400a      	ands	r2, r1
 8000f50:	00d2      	lsls	r2, r2, #3
 8000f52:	21ff      	movs	r1, #255	; 0xff
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	43d2      	mvns	r2, r2
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	22ff      	movs	r2, #255	; 0xff
 8000f64:	401a      	ands	r2, r3
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	4003      	ands	r3, r0
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	001c      	movs	r4, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	4023      	ands	r3, r4
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	430a      	orrs	r2, r1
 8000f86:	3306      	adds	r3, #6
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	18c3      	adds	r3, r0, r3
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b003      	add	sp, #12
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	e000e100 	.word	0xe000e100
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <SysTick_Config+0x40>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d901      	bls.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e010      	b.n	8000fd8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <SysTick_Config+0x44>)
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	3a01      	subs	r2, #1
 8000fbc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	425b      	negs	r3, r3
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff ff7d 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SysTick_Config+0x44>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x44>)
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	00ffffff 	.word	0x00ffffff
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b004      	add	sp, #16
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	0002      	movs	r2, r0
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b25b      	sxtb	r3, r3
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ff33 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff ffaf 	bl	8000fa0 <SysTick_Config>
 8001042:	0003      	movs	r3, r0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2225      	movs	r2, #37	; 0x25
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2224      	movs	r2, #36	; 0x24
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e024      	b.n	80010c4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	210e      	movs	r1, #14
 8001086:	438a      	bics	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	221c      	movs	r2, #28
 80010a0:	401a      	ands	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2101      	movs	r1, #1
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2225      	movs	r2, #37	; 0x25
 80010b2:	2101      	movs	r1, #1
 80010b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2224      	movs	r2, #36	; 0x24
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]

    return status;
 80010be:	230f      	movs	r3, #15
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b004      	add	sp, #16
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2225      	movs	r2, #37	; 0x25
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d007      	beq.n	80010f8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2204      	movs	r2, #4
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010ee:	230f      	movs	r3, #15
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e02a      	b.n	800114e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	210e      	movs	r1, #14
 8001104:	438a      	bics	r2, r1
 8001106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	221c      	movs	r2, #28
 800111e:	401a      	ands	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	2101      	movs	r1, #1
 8001126:	4091      	lsls	r1, r2
 8001128:	000a      	movs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2225      	movs	r2, #37	; 0x25
 8001130:	2101      	movs	r1, #1
 8001132:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001140:	2b00      	cmp	r3, #0
 8001142:	d004      	beq.n	800114e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	0010      	movs	r0, r2
 800114c:	4798      	blx	r3
    }
  }
  return status;
 800114e:	230f      	movs	r3, #15
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b004      	add	sp, #16
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001172:	e149      	b.n	8001408 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <HAL_GPIO_Init+0x30>
 800118a:	e13a      	b.n	8001402 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2203      	movs	r2, #3
 800119e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	43da      	mvns	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	409a      	lsls	r2, r3
 80011c6:	0013      	movs	r3, r2
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	2201      	movs	r2, #1
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2203      	movs	r2, #3
 800120c:	4013      	ands	r3, r2
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	43da      	mvns	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2203      	movs	r2, #3
 8001248:	4013      	ands	r3, r2
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	0092      	lsls	r2, r2, #2
 8001258:	58d3      	ldr	r3, [r2, r3]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2207      	movs	r2, #7
 8001260:	4013      	ands	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2107      	movs	r1, #7
 800127a:	400b      	ands	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	401a      	ands	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	23c0      	movs	r3, #192	; 0xc0
 80012d0:	029b      	lsls	r3, r3, #10
 80012d2:	4013      	ands	r3, r2
 80012d4:	d100      	bne.n	80012d8 <HAL_GPIO_Init+0x17c>
 80012d6:	e094      	b.n	8001402 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_GPIO_Init+0x2c4>)
 80012da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x2c4>)
 80012de:	2101      	movs	r1, #1
 80012e0:	430a      	orrs	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	589b      	ldr	r3, [r3, r2]
 80012f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2203      	movs	r2, #3
 80012f6:	4013      	ands	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	409a      	lsls	r2, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	429a      	cmp	r2, r3
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1de>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a44      	ldr	r2, [pc, #272]	; (8001428 <HAL_GPIO_Init+0x2cc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1da>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a43      	ldr	r2, [pc, #268]	; (800142c <HAL_GPIO_Init+0x2d0>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1d6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a42      	ldr	r2, [pc, #264]	; (8001430 <HAL_GPIO_Init+0x2d4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1d2>
 800132a:	2305      	movs	r3, #5
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x1e0>
 800132e:	2306      	movs	r3, #6
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x1e0>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x1e0>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x1e0>
 800133a:	2300      	movs	r3, #0
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	2103      	movs	r1, #3
 8001340:	400a      	ands	r2, r1
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	; (8001424 <HAL_GPIO_Init+0x2c8>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135a:	4b36      	ldr	r3, [pc, #216]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	4013      	ands	r3, r2
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43da      	mvns	r2, r3
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	029b      	lsls	r3, r3, #10
 800139c:	4013      	ands	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	035b      	lsls	r3, r3, #13
 80013c6:	4013      	ands	r3, r2
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43da      	mvns	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	039b      	lsls	r3, r3, #14
 80013f0:	4013      	ands	r3, r2
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <HAL_GPIO_Init+0x2d8>)
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	40da      	lsrs	r2, r3
 8001410:	1e13      	subs	r3, r2, #0
 8001412:	d000      	beq.n	8001416 <HAL_GPIO_Init+0x2ba>
 8001414:	e6ae      	b.n	8001174 <HAL_GPIO_Init+0x18>
  }
}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b006      	add	sp, #24
 800141c:	bd80      	pop	{r7, pc}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	50000400 	.word	0x50000400
 800142c:	50000800 	.word	0x50000800
 8001430:	50001c00 	.word	0x50001c00
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	0008      	movs	r0, r1
 8001442:	0011      	movs	r1, r2
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	1c7b      	adds	r3, r7, #1
 800144c:	1c0a      	adds	r2, r1, #0
 800144e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	1c7b      	adds	r3, r7, #1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001458:	1cbb      	adds	r3, r7, #2
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001462:	1cbb      	adds	r3, r7, #2
 8001464:	881a      	ldrh	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e078      	b.n	8001578 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	222e      	movs	r2, #46	; 0x2e
 800148a:	5c9b      	ldrb	r3, [r3, r2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d107      	bne.n	80014a2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	222d      	movs	r2, #45	; 0x2d
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff f883 	bl	80005a8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	222e      	movs	r2, #46	; 0x2e
 80014a6:	2102      	movs	r1, #2
 80014a8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	041b      	lsls	r3, r3, #16
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d103      	bne.n	80014ce <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	221e      	movs	r2, #30
 80014ca:	4393      	bics	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	4a2b      	ldr	r2, [pc, #172]	; (8001580 <HAL_LPTIM_Init+0x10c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_LPTIM_Init+0x110>)
 80014dc:	4013      	ands	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_LPTIM_Init+0x114>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80014f0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80014f6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80014fc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001502:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d107      	bne.n	8001522 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800151a:	4313      	orrs	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d005      	beq.n	8001536 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	429a      	cmp	r2, r3
 8001534:	d107      	bne.n	8001546 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800153e:	4313      	orrs	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_LPTIM_Init+0x10c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00a      	beq.n	8001566 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001558:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800155e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	222e      	movs	r2, #46	; 0x2e
 8001572:	2101      	movs	r1, #1
 8001574:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0000ffff 	.word	0x0000ffff
 8001584:	ffff1f3f 	.word	0xffff1f3f
 8001588:	ff19f1fe 	.word	0xff19f1fe

0800158c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10e      	bne.n	80015c0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d107      	bne.n	80015c0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f888 	bl	80016d0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d10e      	bne.n	80015ec <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d107      	bne.n	80015ec <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2202      	movs	r2, #2
 80015e2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	0018      	movs	r0, r3
 80015e8:	f000 f87a 	bl	80016e0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d10e      	bne.n	8001618 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2204      	movs	r2, #4
 8001602:	4013      	ands	r3, r2
 8001604:	2b04      	cmp	r3, #4
 8001606:	d107      	bne.n	8001618 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2204      	movs	r2, #4
 800160e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f86c 	bl	80016f0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2208      	movs	r2, #8
 8001620:	4013      	ands	r3, r2
 8001622:	2b08      	cmp	r3, #8
 8001624:	d10e      	bne.n	8001644 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2208      	movs	r2, #8
 800162e:	4013      	ands	r3, r2
 8001630:	2b08      	cmp	r3, #8
 8001632:	d107      	bne.n	8001644 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2208      	movs	r2, #8
 800163a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	0018      	movs	r0, r3
 8001640:	f000 f85e 	bl	8001700 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2210      	movs	r2, #16
 800164c:	4013      	ands	r3, r2
 800164e:	2b10      	cmp	r3, #16
 8001650:	d10e      	bne.n	8001670 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2210      	movs	r2, #16
 800165a:	4013      	ands	r3, r2
 800165c:	2b10      	cmp	r3, #16
 800165e:	d107      	bne.n	8001670 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2210      	movs	r2, #16
 8001666:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f850 	bl	8001710 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2220      	movs	r2, #32
 8001678:	4013      	ands	r3, r2
 800167a:	2b20      	cmp	r3, #32
 800167c:	d10e      	bne.n	800169c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2220      	movs	r2, #32
 8001686:	4013      	ands	r3, r2
 8001688:	2b20      	cmp	r3, #32
 800168a:	d107      	bne.n	800169c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2220      	movs	r2, #32
 8001692:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0018      	movs	r0, r3
 8001698:	f000 f842 	bl	8001720 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2240      	movs	r2, #64	; 0x40
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b40      	cmp	r3, #64	; 0x40
 80016a8:	d10e      	bne.n	80016c8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2240      	movs	r2, #64	; 0x40
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d107      	bne.n	80016c8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 f834 	bl	8001730 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b002      	add	sp, #8
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80016f8:	46c0      	nop			; (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	b002      	add	sp, #8
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	f000 fb70 	bl	8001e34 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001754:	4bc9      	ldr	r3, [pc, #804]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	220c      	movs	r2, #12
 800175a:	4013      	ands	r3, r2
 800175c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800175e:	4bc7      	ldr	r3, [pc, #796]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	d100      	bne.n	8001776 <HAL_RCC_OscConfig+0x36>
 8001774:	e07d      	b.n	8001872 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2b08      	cmp	r3, #8
 800177a:	d007      	beq.n	800178c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x68>
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	025b      	lsls	r3, r3, #9
 8001788:	429a      	cmp	r2, r3
 800178a:	d10d      	bne.n	80017a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4bbb      	ldr	r3, [pc, #748]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x5a>
 8001798:	e06a      	b.n	8001870 <HAL_RCC_OscConfig+0x130>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d166      	bne.n	8001870 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f000 fb46 	bl	8001e34 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x84>
 80017b4:	4bb1      	ldr	r3, [pc, #708]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4bb0      	ldr	r3, [pc, #704]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0249      	lsls	r1, r1, #9
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e027      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	23a0      	movs	r3, #160	; 0xa0
 80017ca:	02db      	lsls	r3, r3, #11
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0xae>
 80017d0:	4baa      	ldr	r3, [pc, #680]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4ba9      	ldr	r3, [pc, #676]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	02c9      	lsls	r1, r1, #11
 80017da:	430a      	orrs	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	4ba7      	ldr	r3, [pc, #668]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4ba6      	ldr	r3, [pc, #664]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017e4:	2180      	movs	r1, #128	; 0x80
 80017e6:	0249      	lsls	r1, r1, #9
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e012      	b.n	8001814 <HAL_RCC_OscConfig+0xd4>
 80017ee:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4ba2      	ldr	r3, [pc, #648]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017f4:	49a2      	ldr	r1, [pc, #648]	; (8001a80 <HAL_RCC_OscConfig+0x340>)
 80017f6:	400a      	ands	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4ba0      	ldr	r3, [pc, #640]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	025b      	lsls	r3, r3, #9
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4b9c      	ldr	r3, [pc, #624]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b9b      	ldr	r3, [pc, #620]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800180e:	499d      	ldr	r1, [pc, #628]	; (8001a84 <HAL_RCC_OscConfig+0x344>)
 8001810:	400a      	ands	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d014      	beq.n	8001846 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb2e 	bl	8000e7c <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001826:	f7ff fb29 	bl	8000e7c <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2fd      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0xe6>
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb19 	bl	8000e7c <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb14 	bl	8000e7c <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2e8      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001862:	4b86      	ldr	r3, [pc, #536]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	029b      	lsls	r3, r3, #10
 800186a:	4013      	ands	r3, r2
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x110>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x13e>
 800187c:	e09a      	b.n	80019b4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	2220      	movs	r2, #32
 8001888:	4013      	ands	r3, r2
 800188a:	d009      	beq.n	80018a0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b7a      	ldr	r3, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001892:	2120      	movs	r1, #32
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	2220      	movs	r2, #32
 800189c:	4393      	bics	r3, r2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d13f      	bne.n	800192c <HAL_RCC_OscConfig+0x1ec>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d13c      	bne.n	800192c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4013      	ands	r3, r2
 80018ba:	d004      	beq.n	80018c6 <HAL_RCC_OscConfig+0x186>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e2b6      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a6f      	ldr	r2, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x348>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	021a      	lsls	r2, r3, #8
 80018d6:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2209      	movs	r2, #9
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 fbef 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80018f2:	0001      	movs	r1, r0
 80018f4:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	220f      	movs	r2, #15
 80018fc:	4013      	ands	r3, r2
 80018fe:	4a63      	ldr	r2, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0x34c>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	000a      	movs	r2, r1
 8001904:	40da      	lsrs	r2, r3
 8001906:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x350>)
 8001908:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800190a:	4b62      	ldr	r3, [pc, #392]	; (8001a94 <HAL_RCC_OscConfig+0x354>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2513      	movs	r5, #19
 8001910:	197c      	adds	r4, r7, r5
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fa6c 	bl	8000df0 <HAL_InitTick>
 8001918:	0003      	movs	r3, r0
 800191a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800191c:	197b      	adds	r3, r7, r5
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d047      	beq.n	80019b4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001924:	2313      	movs	r3, #19
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	e283      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	2b00      	cmp	r3, #0
 8001930:	d027      	beq.n	8001982 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2209      	movs	r2, #9
 8001938:	4393      	bics	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa9a 	bl	8000e7c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff fa95 	bl	8000e7c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e269      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001960:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2204      	movs	r2, #4
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_RCC_OscConfig+0x348>)
 8001970:	4013      	ands	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	021a      	lsls	r2, r3, #8
 800197a:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e018      	b.n	80019b4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001988:	2101      	movs	r1, #1
 800198a:	438a      	bics	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fa75 	bl	8000e7c <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fa70 	bl	8000e7c <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e244      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f1      	bne.n	8001998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCC_OscConfig+0x280>
 80019be:	e0a2      	b.n	8001b06 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d141      	bne.n	8001a4a <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x29e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e22a      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x358>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	0a19      	lsrs	r1, r3, #8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	061a      	lsls	r2, r3, #24
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	0212      	lsls	r2, r2, #8
 8001a12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	210f      	movs	r1, #15
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	491b      	ldr	r1, [pc, #108]	; (8001a8c <HAL_RCC_OscConfig+0x34c>)
 8001a20:	5ccb      	ldrb	r3, [r1, r3]
 8001a22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_RCC_OscConfig+0x350>)
 8001a26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_RCC_OscConfig+0x354>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2513      	movs	r5, #19
 8001a2e:	197c      	adds	r4, r7, r5
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff f9dd 	bl	8000df0 <HAL_InitTick>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d061      	beq.n	8001b06 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001a42:	2313      	movs	r3, #19
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	e1f4      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03f      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_OscConfig+0x33c>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0049      	lsls	r1, r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fa0c 	bl	8000e7c <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fa07 	bl	8000e7c <HAL_GetTick>
 8001a6e:	0002      	movs	r2, r0
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d911      	bls.n	8001a9c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1db      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	fffeffff 	.word	0xfffeffff
 8001a84:	fffbffff 	.word	0xfffbffff
 8001a88:	ffffe0ff 	.word	0xffffe0ff
 8001a8c:	080040c8 	.word	0x080040c8
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000004 	.word	0x20000004
 8001a98:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a9c:	4bca      	ldr	r3, [pc, #808]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0e0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa8:	4bc7      	ldr	r3, [pc, #796]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4ac7      	ldr	r2, [pc, #796]	; (8001dcc <HAL_RCC_OscConfig+0x68c>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	4bc4      	ldr	r3, [pc, #784]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abc:	4bc2      	ldr	r3, [pc, #776]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	0a19      	lsrs	r1, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	061a      	lsls	r2, r3, #24
 8001aca:	4bbf      	ldr	r3, [pc, #764]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	e019      	b.n	8001b06 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ad2:	4bbd      	ldr	r3, [pc, #756]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4bbc      	ldr	r3, [pc, #752]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ad8:	49bd      	ldr	r1, [pc, #756]	; (8001dd0 <HAL_RCC_OscConfig+0x690>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9cd 	bl	8000e7c <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae8:	f7ff f9c8 	bl	8000e7c <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e19c      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001afa:	4bb3      	ldr	r3, [pc, #716]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d036      	beq.n	8001b7e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d019      	beq.n	8001b4c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b18:	4bab      	ldr	r3, [pc, #684]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1c:	4baa      	ldr	r3, [pc, #680]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff f9aa 	bl	8000e7c <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f9a5 	bl	8000e7c <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e179      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b40:	4ba1      	ldr	r3, [pc, #644]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b44:	2202      	movs	r2, #2
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0f1      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3ee>
 8001b4a:	e018      	b.n	8001b7e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b50:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b58:	f7ff f990 	bl	8000e7c <HAL_GetTick>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f98b 	bl	8000e7c <HAL_GetTick>
 8001b66:	0002      	movs	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e15f      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b74:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f1      	bne.n	8001b62 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0x44a>
 8001b88:	e0af      	b.n	8001cea <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2323      	movs	r3, #35	; 0x23
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4b8d      	ldr	r3, [pc, #564]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	055b      	lsls	r3, r3, #21
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b8a      	ldr	r3, [pc, #552]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0549      	lsls	r1, r1, #21
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001bac:	2323      	movs	r3, #35	; 0x23
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b87      	ldr	r3, [pc, #540]	; (8001dd4 <HAL_RCC_OscConfig+0x694>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d11a      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc0:	4b84      	ldr	r3, [pc, #528]	; (8001dd4 <HAL_RCC_OscConfig+0x694>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b83      	ldr	r3, [pc, #524]	; (8001dd4 <HAL_RCC_OscConfig+0x694>)
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	0049      	lsls	r1, r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bce:	f7ff f955 	bl	8000e7c <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd8:	f7ff f950 	bl	8000e7c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e124      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <HAL_RCC_OscConfig+0x694>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_OscConfig+0x4d2>
 8001c02:	4b71      	ldr	r3, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0049      	lsls	r1, r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c10:	e031      	b.n	8001c76 <HAL_RCC_OscConfig+0x536>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4f4>
 8001c1a:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c20:	496b      	ldr	r1, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x690>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	651a      	str	r2, [r3, #80]	; 0x50
 8001c26:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	496a      	ldr	r1, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x698>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50
 8001c32:	e020      	b.n	8001c76 <HAL_RCC_OscConfig+0x536>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	23a0      	movs	r3, #160	; 0xa0
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10e      	bne.n	8001c5e <HAL_RCC_OscConfig+0x51e>
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c44:	4b60      	ldr	r3, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c46:	2180      	movs	r1, #128	; 0x80
 8001c48:	00c9      	lsls	r1, r1, #3
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0049      	lsls	r1, r1, #1
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c5c:	e00b      	b.n	8001c76 <HAL_RCC_OscConfig+0x536>
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c62:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c64:	495a      	ldr	r1, [pc, #360]	; (8001dd0 <HAL_RCC_OscConfig+0x690>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	651a      	str	r2, [r3, #80]	; 0x50
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c6e:	4b56      	ldr	r3, [pc, #344]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c70:	4959      	ldr	r1, [pc, #356]	; (8001dd8 <HAL_RCC_OscConfig+0x698>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d015      	beq.n	8001caa <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f8fd 	bl	8000e7c <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c86:	e009      	b.n	8001c9c <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff f8f8 	bl	8000e7c <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <HAL_RCC_OscConfig+0x69c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0cb      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c9c:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x548>
 8001ca8:	e014      	b.n	8001cd4 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f8e7 	bl	8000e7c <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f8e2 	bl	8000e7c <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a47      	ldr	r2, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x69c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0b5      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001cca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d1ef      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd4:	2323      	movs	r3, #35	; 0x23
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001ce4:	493e      	ldr	r1, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x6a0>)
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5b4>
 8001cf2:	e09e      	b.n	8001e32 <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x5bc>
 8001cfa:	e077      	b.n	8001dec <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d145      	bne.n	8001d90 <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d0a:	4936      	ldr	r1, [pc, #216]	; (8001de4 <HAL_RCC_OscConfig+0x6a4>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8b4 	bl	8000e7c <HAL_GetTick>
 8001d14:	0003      	movs	r3, r0
 8001d16:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7ff f8af 	bl	8000e7c <HAL_GetTick>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e083      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	049b      	lsls	r3, r3, #18
 8001d34:	4013      	ands	r3, r2
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x6a8>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	431a      	orrs	r2, r3
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	0449      	lsls	r1, r1, #17
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f889 	bl	8000e7c <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f884 	bl	8000e7c <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e058      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	049b      	lsls	r3, r3, #18
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x630>
 8001d8e:	e050      	b.n	8001e32 <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001d96:	4913      	ldr	r1, [pc, #76]	; (8001de4 <HAL_RCC_OscConfig+0x6a4>)
 8001d98:	400a      	ands	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f86e 	bl	8000e7c <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff f869 	bl	8000e7c <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e03d      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x688>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	049b      	lsls	r3, r3, #18
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x666>
 8001dc4:	e035      	b.n	8001e32 <HAL_RCC_OscConfig+0x6f2>
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	ffff1fff 	.word	0xffff1fff
 8001dd0:	fffffeff 	.word	0xfffffeff
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	fffffbff 	.word	0xfffffbff
 8001ddc:	00001388 	.word	0x00001388
 8001de0:	efffffff 	.word	0xefffffff
 8001de4:	feffffff 	.word	0xfeffffff
 8001de8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_OscConfig+0x6fc>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	401a      	ands	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d10f      	bne.n	8001e2e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	23f0      	movs	r3, #240	; 0xf0
 8001e12:	039b      	lsls	r3, r3, #14
 8001e14:	401a      	ands	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	401a      	ands	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b00a      	add	sp, #40	; 0x28
 8001e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3c:	40021000 	.word	0x40021000

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e129      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b96      	ldr	r3, [pc, #600]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d91e      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	4393      	bics	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e74:	f7ff f802 	bl	8000e7c <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7e:	f7fe fffd 	bl	8000e7c <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e10a      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	22f0      	movs	r2, #240	; 0xf0
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_ClockConfig+0x8a>
 8001ec8:	e089      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed2:	4b79      	ldr	r3, [pc, #484]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d120      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e2      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eea:	4b73      	ldr	r3, [pc, #460]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	049b      	lsls	r3, r3, #18
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d114      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0d6      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0cb      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f10:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0c3      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f20:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe ffa2 	bl	8000e7c <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f44:	e009      	b.n	8001f5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f46:	f7fe ff99 	bl	8000e7c <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e0a6      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5a:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	220c      	movs	r2, #12
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d1ef      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x106>
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d111      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7fe ff83 	bl	8000e7c <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e090      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f86:	4b4c      	ldr	r3, [pc, #304]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d1ef      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x132>
 8001f92:	e024      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f9c:	e009      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9e:	f7fe ff6d 	bl	8000e7c <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e07a      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d1ef      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x15e>
 8001fbe:	e00e      	b.n	8001fde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe ff5c 	bl	8000e7c <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	4a3a      	ldr	r2, [pc, #232]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e069      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d21e      	bcs.n	800202a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ffe:	f7fe ff3d 	bl	8000e7c <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	e009      	b.n	800201c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002008:	f7fe ff38 	bl	8000e7c <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_RCC_ClockConfig+0x274>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e045      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_ClockConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4013      	ands	r3, r2
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d1ee      	bne.n	8002008 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_RCC_ClockConfig+0x27c>)
 800203a:	4013      	ands	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	4013      	ands	r3, r2
 8002050:	d00a      	beq.n	8002068 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_RCC_ClockConfig+0x280>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	00da      	lsls	r2, r3, #3
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002068:	f000 f832 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800206c:	0001      	movs	r1, r0
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_RCC_ClockConfig+0x284>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	000a      	movs	r2, r1
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_ClockConfig+0x288>)
 8002082:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <HAL_RCC_ClockConfig+0x28c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	250b      	movs	r5, #11
 800208a:	197c      	adds	r4, r7, r5
 800208c:	0018      	movs	r0, r3
 800208e:	f7fe feaf 	bl	8000df0 <HAL_InitTick>
 8002092:	0003      	movs	r3, r0
 8002094:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002096:	197b      	adds	r3, r7, r5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 800209e:	230b      	movs	r3, #11
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bdb0      	pop	{r4, r5, r7, pc}
 80020b0:	40022000 	.word	0x40022000
 80020b4:	00001388 	.word	0x00001388
 80020b8:	40021000 	.word	0x40021000
 80020bc:	fffff8ff 	.word	0xfffff8ff
 80020c0:	ffffc7ff 	.word	0xffffc7ff
 80020c4:	080040c8 	.word	0x080040c8
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	b08f      	sub	sp, #60	; 0x3c
 80020d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020de:	230c      	movs	r3, #12
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d00f      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d010      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x3c>
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d000      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x20>
 80020ee:	e073      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2210      	movs	r2, #16
 80020f6:	4013      	ands	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020fa:	4b42      	ldr	r3, [pc, #264]	; (8002204 <HAL_RCC_GetSysClockFreq+0x134>)
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020fe:	e079      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8002100:	4b41      	ldr	r3, [pc, #260]	; (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002104:	e076      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800210a:	e073      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	0c9a      	lsrs	r2, r3, #18
 8002110:	230f      	movs	r3, #15
 8002112:	401a      	ands	r2, r3
 8002114:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_GetSysClockFreq+0x140>)
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	0d9a      	lsrs	r2, r3, #22
 800211e:	2303      	movs	r3, #3
 8002120:	4013      	ands	r3, r2
 8002122:	3301      	adds	r3, #1
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	025b      	lsls	r3, r3, #9
 800212e:	4013      	ands	r3, r2
 8002130:	d019      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	4a34      	ldr	r2, [pc, #208]	; (800220c <HAL_RCC_GetSysClockFreq+0x13c>)
 800213c:	2300      	movs	r3, #0
 800213e:	69b8      	ldr	r0, [r7, #24]
 8002140:	69f9      	ldr	r1, [r7, #28]
 8002142:	f7fe f88d 	bl	8000260 <__aeabi_lmul>
 8002146:	0003      	movs	r3, r0
 8002148:	000c      	movs	r4, r1
 800214a:	0018      	movs	r0, r3
 800214c:	0021      	movs	r1, r4
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f7fe f861 	bl	8000220 <__aeabi_uldivmod>
 800215e:	0003      	movs	r3, r0
 8002160:	000c      	movs	r4, r1
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
 8002164:	e035      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2210      	movs	r2, #16
 800216c:	4013      	ands	r3, r2
 800216e:	d019      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <HAL_RCC_GetSysClockFreq+0x134>)
 800217a:	2300      	movs	r3, #0
 800217c:	68b8      	ldr	r0, [r7, #8]
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	f7fe f86e 	bl	8000260 <__aeabi_lmul>
 8002184:	0003      	movs	r3, r0
 8002186:	000c      	movs	r4, r1
 8002188:	0018      	movs	r0, r3
 800218a:	0021      	movs	r1, r4
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f7fe f842 	bl	8000220 <__aeabi_uldivmod>
 800219c:	0003      	movs	r3, r0
 800219e:	000c      	movs	r4, r1
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
 80021a2:	e016      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	0018      	movs	r0, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	0019      	movs	r1, r3
 80021ac:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_RCC_GetSysClockFreq+0x138>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	f7fe f856 	bl	8000260 <__aeabi_lmul>
 80021b4:	0003      	movs	r3, r0
 80021b6:	000c      	movs	r4, r1
 80021b8:	0018      	movs	r0, r3
 80021ba:	0021      	movs	r1, r4
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	001d      	movs	r5, r3
 80021c0:	2300      	movs	r3, #0
 80021c2:	001e      	movs	r6, r3
 80021c4:	002a      	movs	r2, r5
 80021c6:	0033      	movs	r3, r6
 80021c8:	f7fe f82a 	bl	8000220 <__aeabi_uldivmod>
 80021cc:	0003      	movs	r3, r0
 80021ce:	000c      	movs	r4, r1
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021d6:	e00d      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_GetSysClockFreq+0x130>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0b5b      	lsrs	r3, r3, #13
 80021de:	2207      	movs	r2, #7
 80021e0:	4013      	ands	r3, r2
 80021e2:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	3301      	adds	r3, #1
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	0212      	lsls	r2, r2, #8
 80021ec:	409a      	lsls	r2, r3
 80021ee:	0013      	movs	r3, r2
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b00f      	add	sp, #60	; 0x3c
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40021000 	.word	0x40021000
 8002204:	003d0900 	.word	0x003d0900
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200
 8002210:	080040e0 	.word	0x080040e0

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b02      	ldr	r3, [pc, #8]	; (8002224 <HAL_RCC_GetHCLKFreq+0x10>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000000 	.word	0x20000000

08002228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800222c:	f7ff fff2 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002230:	0001      	movs	r1, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	40d9      	lsrs	r1, r3
 8002242:	000b      	movs	r3, r1
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	080040d8 	.word	0x080040d8

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffdc 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800225c:	0001      	movs	r1, r0
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	0adb      	lsrs	r3, r3, #11
 8002264:	2207      	movs	r2, #7
 8002266:	4013      	ands	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_GetPCLK2Freq+0x28>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	40d9      	lsrs	r1, r3
 800226e:	000b      	movs	r3, r1
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	40021000 	.word	0x40021000
 800227c:	080040d8 	.word	0x080040d8

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002288:	2317      	movs	r3, #23
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2220      	movs	r2, #32
 8002296:	4013      	ands	r3, r2
 8002298:	d100      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800229a:	e0c3      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229c:	4b82      	ldr	r3, [pc, #520]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800229e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	055b      	lsls	r3, r3, #21
 80022a4:	4013      	ands	r3, r2
 80022a6:	d10a      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a8:	4b7f      	ldr	r3, [pc, #508]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ac:	4b7e      	ldr	r3, [pc, #504]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022ae:	2180      	movs	r1, #128	; 0x80
 80022b0:	0549      	lsls	r1, r1, #21
 80022b2:	430a      	orrs	r2, r1
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80022b6:	2317      	movs	r3, #23
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b7b      	ldr	r3, [pc, #492]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	d11a      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b78      	ldr	r3, [pc, #480]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0049      	lsls	r1, r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fdd0 	bl	8000e7c <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe fdcb 	bl	8000e7c <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b64      	cmp	r3, #100	; 0x64
 80022ee:	d901      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0d4      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002300:	4b69      	ldr	r3, [pc, #420]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	039b      	lsls	r3, r3, #14
 8002308:	4013      	ands	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	039b      	lsls	r3, r3, #14
 8002314:	4013      	ands	r3, r2
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d013      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	23c0      	movs	r3, #192	; 0xc0
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	401a      	ands	r2, r3
 8002326:	23c0      	movs	r3, #192	; 0xc0
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	429a      	cmp	r2, r3
 800232c:	d10a      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	401a      	ands	r2, r3
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	029b      	lsls	r3, r3, #10
 800233c:	429a      	cmp	r2, r3
 800233e:	d101      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0ac      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002344:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002348:	23c0      	movs	r3, #192	; 0xc0
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03b      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	4013      	ands	r3, r2
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	429a      	cmp	r2, r3
 8002364:	d033      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2220      	movs	r2, #32
 800236c:	4013      	ands	r3, r2
 800236e:	d02e      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002370:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	4a4e      	ldr	r2, [pc, #312]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800237a:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800237c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800237e:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0309      	lsls	r1, r1, #12
 8002384:	430a      	orrs	r2, r1
 8002386:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800238a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800238e:	4949      	ldr	r1, [pc, #292]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002390:	400a      	ands	r2, r1
 8002392:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002394:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d014      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd6a 	bl	8000e7c <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ac:	e009      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fd65 	bl	8000e7c <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e06d      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023c6:	2380      	movs	r3, #128	; 0x80
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d0ef      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	029b      	lsls	r3, r3, #10
 80023d6:	401a      	ands	r2, r3
 80023d8:	23c0      	movs	r3, #192	; 0xc0
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10c      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a35      	ldr	r2, [pc, #212]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	23c0      	movs	r3, #192	; 0xc0
 80023f0:	039b      	lsls	r3, r3, #14
 80023f2:	401a      	ands	r2, r3
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80023fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	23c0      	movs	r3, #192	; 0xc0
 8002404:	029b      	lsls	r3, r3, #10
 8002406:	401a      	ands	r2, r3
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800240a:	430a      	orrs	r2, r1
 800240c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240e:	2317      	movs	r3, #23
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800241a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800241e:	4928      	ldr	r1, [pc, #160]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002420:	400a      	ands	r2, r1
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2202      	movs	r2, #2
 800242a:	4013      	ands	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	220c      	movs	r2, #12
 8002434:	4393      	bics	r3, r2
 8002436:	0019      	movs	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800243e:	430a      	orrs	r2, r1
 8002440:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	4013      	ands	r3, r2
 800244a:	d009      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800245c:	430a      	orrs	r2, r1
 800245e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2208      	movs	r2, #8
 8002466:	4013      	ands	r3, r2
 8002468:	d009      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002470:	4013      	ands	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800247a:	430a      	orrs	r2, r1
 800247c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	4013      	ands	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002498:	430a      	orrs	r2, r1
 800249a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b006      	add	sp, #24
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40007000 	.word	0x40007000
 80024b0:	fffcffff 	.word	0xfffcffff
 80024b4:	fff7ffff 	.word	0xfff7ffff
 80024b8:	00001388 	.word	0x00001388
 80024bc:	ffcfffff 	.word	0xffcfffff
 80024c0:	efffffff 	.word	0xefffffff
 80024c4:	fffff3ff 	.word	0xfffff3ff
 80024c8:	ffffcfff 	.word	0xffffcfff
 80024cc:	fff3ffff 	.word	0xfff3ffff

080024d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e032      	b.n	8002548 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2239      	movs	r2, #57	; 0x39
 80024e6:	5c9b      	ldrb	r3, [r3, r2]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0018      	movs	r0, r3
 80024fa:	f7fe faed 	bl	8000ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2239      	movs	r2, #57	; 0x39
 8002502:	2102      	movs	r1, #2
 8002504:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	0019      	movs	r1, r3
 8002510:	0010      	movs	r0, r2
 8002512:	f000 f965 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	223e      	movs	r2, #62	; 0x3e
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	223a      	movs	r2, #58	; 0x3a
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	223b      	movs	r2, #59	; 0x3b
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	223c      	movs	r2, #60	; 0x3c
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	223d      	movs	r2, #61	; 0x3d
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2239      	movs	r2, #57	; 0x39
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <HAL_TIM_PWM_Start+0x22>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	223a      	movs	r2, #58	; 0x3a
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	4193      	sbcs	r3, r2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	e01f      	b.n	80025b2 <HAL_TIM_PWM_Start+0x62>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d108      	bne.n	800258a <HAL_TIM_PWM_Start+0x3a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223b      	movs	r2, #59	; 0x3b
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	4193      	sbcs	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e013      	b.n	80025b2 <HAL_TIM_PWM_Start+0x62>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d108      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x52>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	223c      	movs	r2, #60	; 0x3c
 8002594:	5c9b      	ldrb	r3, [r3, r2]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	4193      	sbcs	r3, r2
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e007      	b.n	80025b2 <HAL_TIM_PWM_Start+0x62>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	223d      	movs	r2, #61	; 0x3d
 80025a6:	5c9b      	ldrb	r3, [r3, r2]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	1e5a      	subs	r2, r3, #1
 80025ae:	4193      	sbcs	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e04d      	b.n	8002656 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <HAL_TIM_PWM_Start+0x7a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	223a      	movs	r2, #58	; 0x3a
 80025c4:	2102      	movs	r1, #2
 80025c6:	5499      	strb	r1, [r3, r2]
 80025c8:	e013      	b.n	80025f2 <HAL_TIM_PWM_Start+0xa2>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d104      	bne.n	80025da <HAL_TIM_PWM_Start+0x8a>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	223b      	movs	r2, #59	; 0x3b
 80025d4:	2102      	movs	r1, #2
 80025d6:	5499      	strb	r1, [r3, r2]
 80025d8:	e00b      	b.n	80025f2 <HAL_TIM_PWM_Start+0xa2>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d104      	bne.n	80025ea <HAL_TIM_PWM_Start+0x9a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	223c      	movs	r2, #60	; 0x3c
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]
 80025e8:	e003      	b.n	80025f2 <HAL_TIM_PWM_Start+0xa2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223d      	movs	r2, #61	; 0x3d
 80025ee:	2102      	movs	r1, #2
 80025f0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6839      	ldr	r1, [r7, #0]
 80025f8:	2201      	movs	r2, #1
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fa48 	bl	8002a90 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	05db      	lsls	r3, r3, #23
 8002608:	429a      	cmp	r2, r3
 800260a:	d009      	beq.n	8002620 <HAL_TIM_PWM_Start+0xd0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <HAL_TIM_PWM_Start+0x110>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <HAL_TIM_PWM_Start+0xd0>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_TIM_PWM_Start+0x114>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2207      	movs	r2, #7
 8002628:	4013      	ands	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b06      	cmp	r3, #6
 8002630:	d010      	beq.n	8002654 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	e007      	b.n	8002654 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2101      	movs	r1, #1
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40010800 	.word	0x40010800
 8002664:	40011400 	.word	0x40011400

08002668 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2317      	movs	r3, #23
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2238      	movs	r2, #56	; 0x38
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002686:	2302      	movs	r3, #2
 8002688:	e0a3      	b.n	80027d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2238      	movs	r2, #56	; 0x38
 800268e:	2101      	movs	r1, #1
 8002690:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d029      	beq.n	80026ec <HAL_TIM_PWM_ConfigChannel+0x84>
 8002698:	d802      	bhi.n	80026a0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_TIM_PWM_ConfigChannel+0x42>
 800269e:	e08c      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x152>
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d046      	beq.n	8002732 <HAL_TIM_PWM_ConfigChannel+0xca>
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d065      	beq.n	8002774 <HAL_TIM_PWM_ConfigChannel+0x10c>
 80026a8:	e087      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	0011      	movs	r1, r2
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f8e8 	bl	8002888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2108      	movs	r1, #8
 80026c4:	430a      	orrs	r2, r1
 80026c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2104      	movs	r1, #4
 80026d4:	438a      	bics	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	619a      	str	r2, [r3, #24]
      break;
 80026ea:	e06b      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f903 	bl	8002900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	0109      	lsls	r1, r1, #4
 8002708:	430a      	orrs	r2, r1
 800270a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4931      	ldr	r1, [pc, #196]	; (80027dc <HAL_TIM_PWM_ConfigChannel+0x174>)
 8002718:	400a      	ands	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6999      	ldr	r1, [r3, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	021a      	lsls	r2, r3, #8
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	619a      	str	r2, [r3, #24]
      break;
 8002730:	e048      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f922 	bl	8002984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2108      	movs	r1, #8
 800274c:	430a      	orrs	r2, r1
 800274e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2104      	movs	r1, #4
 800275c:	438a      	bics	r2, r1
 800275e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69d9      	ldr	r1, [r3, #28]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	61da      	str	r2, [r3, #28]
      break;
 8002772:	e027      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	0011      	movs	r1, r2
 800277c:	0018      	movs	r0, r3
 800277e:	f000 f941 	bl	8002a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0109      	lsls	r1, r1, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	490f      	ldr	r1, [pc, #60]	; (80027dc <HAL_TIM_PWM_ConfigChannel+0x174>)
 80027a0:	400a      	ands	r2, r1
 80027a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69d9      	ldr	r1, [r3, #28]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	021a      	lsls	r2, r3, #8
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
      break;
 80027b8:	e004      	b.n	80027c4 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 80027ba:	2317      	movs	r3, #23
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
      break;
 80027c2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2238      	movs	r2, #56	; 0x38
 80027c8:	2100      	movs	r1, #0
 80027ca:	5499      	strb	r1, [r3, r2]

  return status;
 80027cc:	2317      	movs	r3, #23
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b006      	add	sp, #24
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	fffffbff 	.word	0xfffffbff

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0x2a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1f      	ldr	r2, [pc, #124]	; (800287c <TIM_Base_SetConfig+0x9c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0x2a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <TIM_Base_SetConfig+0xa0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2270      	movs	r2, #112	; 0x70
 800280e:	4393      	bics	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	05db      	lsls	r3, r3, #23
 8002822:	429a      	cmp	r2, r3
 8002824:	d007      	beq.n	8002836 <TIM_Base_SetConfig+0x56>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_Base_SetConfig+0x9c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <TIM_Base_SetConfig+0x56>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <TIM_Base_SetConfig+0xa0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a12      	ldr	r2, [pc, #72]	; (8002884 <TIM_Base_SetConfig+0xa4>)
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	4393      	bics	r3, r2
 800284e:	001a      	movs	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	615a      	str	r2, [r3, #20]
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40010800 	.word	0x40010800
 8002880:	40011400 	.word	0x40011400
 8002884:	fffffcff 	.word	0xfffffcff

08002888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2201      	movs	r2, #1
 8002898:	4393      	bics	r3, r2
 800289a:	001a      	movs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2270      	movs	r2, #112	; 0x70
 80028b6:	4393      	bics	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2203      	movs	r2, #3
 80028be:	4393      	bics	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4393      	bics	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b006      	add	sp, #24
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	2210      	movs	r2, #16
 8002910:	4393      	bics	r3, r2
 8002912:	001a      	movs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a13      	ldr	r2, [pc, #76]	; (800297c <TIM_OC2_SetConfig+0x7c>)
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a12      	ldr	r2, [pc, #72]	; (8002980 <TIM_OC2_SetConfig+0x80>)
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	021b      	lsls	r3, r3, #8
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2220      	movs	r2, #32
 800294a:	4393      	bics	r3, r2
 800294c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b006      	add	sp, #24
 800297a:	bd80      	pop	{r7, pc}
 800297c:	ffff8fff 	.word	0xffff8fff
 8002980:	fffffcff 	.word	0xfffffcff

08002984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <TIM_OC3_SetConfig+0x78>)
 8002994:	401a      	ands	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2270      	movs	r2, #112	; 0x70
 80029b0:	4393      	bics	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2203      	movs	r2, #3
 80029b8:	4393      	bics	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <TIM_OC3_SetConfig+0x7c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	021b      	lsls	r3, r3, #8
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	fffffeff 	.word	0xfffffeff
 8002a00:	fffffdff 	.word	0xfffffdff

08002a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <TIM_OC4_SetConfig+0x7c>)
 8002a14:	401a      	ands	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <TIM_OC4_SetConfig+0x80>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <TIM_OC4_SetConfig+0x84>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <TIM_OC4_SetConfig+0x88>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	621a      	str	r2, [r3, #32]
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b006      	add	sp, #24
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	ffffefff 	.word	0xffffefff
 8002a84:	ffff8fff 	.word	0xffff8fff
 8002a88:	fffffcff 	.word	0xfffffcff
 8002a8c:	ffffdfff 	.word	0xffffdfff

08002a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	221f      	movs	r2, #31
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	43d2      	mvns	r2, r2
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1a      	ldr	r2, [r3, #32]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	211f      	movs	r1, #31
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4099      	lsls	r1, r3
 8002ac6:	000b      	movs	r3, r1
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2238      	movs	r2, #56	; 0x38
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e042      	b.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2238      	movs	r2, #56	; 0x38
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2239      	movs	r2, #57	; 0x39
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2270      	movs	r2, #112	; 0x70
 8002b14:	4393      	bics	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	05db      	lsls	r3, r3, #23
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d009      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0f      	ldr	r2, [pc, #60]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	4393      	bics	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2239      	movs	r2, #57	; 0x39
 8002b68:	2101      	movs	r1, #1
 8002b6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2238      	movs	r2, #56	; 0x38
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	40010800 	.word	0x40010800
 8002b84:	40011400 	.word	0x40011400

08002b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e044      	b.n	8002c24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d107      	bne.n	8002bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2274      	movs	r2, #116	; 0x74
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7fe f889 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2224      	movs	r2, #36	; 0x24
 8002bb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	438a      	bics	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fb7c 	bl	80032c8 <UART_SetConfig>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e024      	b.n	8002c24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 fdd1 	bl	800378c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	490d      	ldr	r1, [pc, #52]	; (8002c2c <HAL_UART_Init+0xa4>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	212a      	movs	r1, #42	; 0x2a
 8002c06:	438a      	bics	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 fe69 	bl	80038f4 <UART_CheckIdleState>
 8002c22:	0003      	movs	r3, r0
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	ffffb7ff 	.word	0xffffb7ff

08002c30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	1dbb      	adds	r3, r7, #6
 8002c3c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d153      	bne.n	8002cee <HAL_UART_Receive_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_UART_Receive_IT+0x24>
 8002c4c:	1dbb      	adds	r3, r7, #6
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04b      	b.n	8002cf0 <HAL_UART_Receive_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	015b      	lsls	r3, r3, #5
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d109      	bne.n	8002c78 <HAL_UART_Receive_IT+0x48>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d001      	beq.n	8002c78 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e03b      	b.n	8002cf0 <HAL_UART_Receive_IT+0xc0>
      }
    }

    __HAL_LOCK(huart);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2274      	movs	r2, #116	; 0x74
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_UART_Receive_IT+0x56>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e034      	b.n	8002cf0 <HAL_UART_Receive_IT+0xc0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2274      	movs	r2, #116	; 0x74
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_UART_Receive_IT+0xc8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01e      	beq.n	8002cdc <HAL_UART_Receive_IT+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d017      	beq.n	8002cdc <HAL_UART_Receive_IT+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cac:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f383 8810 	msr	PRIMASK, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	04c9      	lsls	r1, r1, #19
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f000 ff0b 	bl	8003b00 <UART_Start_Receive_IT>
 8002cea:	0003      	movs	r3, r0
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_Receive_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b008      	add	sp, #32
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40004800 	.word	0x40004800

08002cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b0aa      	sub	sp, #168	; 0xa8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	22a4      	movs	r2, #164	; 0xa4
 8002d0c:	18b9      	adds	r1, r7, r2
 8002d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	21a0      	movs	r1, #160	; 0xa0
 8002d18:	1879      	adds	r1, r7, r1
 8002d1a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	219c      	movs	r1, #156	; 0x9c
 8002d24:	1879      	adds	r1, r7, r1
 8002d26:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d28:	18bb      	adds	r3, r7, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a99      	ldr	r2, [pc, #612]	; (8002f94 <HAL_UART_IRQHandler+0x298>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2298      	movs	r2, #152	; 0x98
 8002d32:	18b9      	adds	r1, r7, r2
 8002d34:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 8002d36:	18bb      	adds	r3, r7, r2
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d3e:	23a4      	movs	r3, #164	; 0xa4
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2220      	movs	r2, #32
 8002d46:	4013      	ands	r3, r2
 8002d48:	d010      	beq.n	8002d6c <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d4a:	23a0      	movs	r3, #160	; 0xa0
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2220      	movs	r2, #32
 8002d52:	4013      	ands	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d100      	bne.n	8002d60 <HAL_UART_IRQHandler+0x64>
 8002d5e:	e28e      	b.n	800327e <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	0010      	movs	r0, r2
 8002d68:	4798      	blx	r3
      }
      return;
 8002d6a:	e288      	b.n	800327e <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d6c:	2398      	movs	r3, #152	; 0x98
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d100      	bne.n	8002d78 <HAL_UART_IRQHandler+0x7c>
 8002d76:	e113      	b.n	8002fa0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d78:	239c      	movs	r3, #156	; 0x9c
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	d106      	bne.n	8002d92 <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d84:	23a0      	movs	r3, #160	; 0xa0
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a83      	ldr	r2, [pc, #524]	; (8002f98 <HAL_UART_IRQHandler+0x29c>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d100      	bne.n	8002d92 <HAL_UART_IRQHandler+0x96>
 8002d90:	e106      	b.n	8002fa0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d92:	23a4      	movs	r3, #164	; 0xa4
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d012      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xc8>
 8002d9e:	23a0      	movs	r3, #160	; 0xa0
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	589b      	ldr	r3, [r3, r2]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc4:	23a4      	movs	r3, #164	; 0xa4
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d011      	beq.n	8002df4 <HAL_UART_IRQHandler+0xf8>
 8002dd0:	239c      	movs	r3, #156	; 0x9c
 8002dd2:	18fb      	adds	r3, r7, r3
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2202      	movs	r2, #2
 8002de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	589b      	ldr	r3, [r3, r2]
 8002dea:	2204      	movs	r2, #4
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df4:	23a4      	movs	r3, #164	; 0xa4
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d011      	beq.n	8002e24 <HAL_UART_IRQHandler+0x128>
 8002e00:	239c      	movs	r3, #156	; 0x9c
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d00b      	beq.n	8002e24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2204      	movs	r2, #4
 8002e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	589b      	ldr	r3, [r3, r2]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e24:	23a4      	movs	r3, #164	; 0xa4
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d017      	beq.n	8002e60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e30:	23a0      	movs	r3, #160	; 0xa0
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d105      	bne.n	8002e48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e3c:	239c      	movs	r3, #156	; 0x9c
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e46:	d00b      	beq.n	8002e60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	589b      	ldr	r3, [r3, r2]
 8002e56:	2208      	movs	r2, #8
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e60:	23a4      	movs	r3, #164	; 0xa4
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_UART_IRQHandler+0x19a>
 8002e6e:	23a0      	movs	r3, #160	; 0xa0
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	04db      	lsls	r3, r3, #19
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d00c      	beq.n	8002e96 <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	589b      	ldr	r3, [r3, r2]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2280      	movs	r2, #128	; 0x80
 8002e9a:	589b      	ldr	r3, [r3, r2]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x1a6>
 8002ea0:	e1ef      	b.n	8003282 <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ea2:	23a4      	movs	r3, #164	; 0xa4
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eae:	23a0      	movs	r3, #160	; 0xa0
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d008      	beq.n	8002ecc <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	0010      	movs	r0, r2
 8002eca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	589b      	ldr	r3, [r3, r2]
 8002ed2:	2294      	movs	r2, #148	; 0x94
 8002ed4:	18ba      	adds	r2, r7, r2
 8002ed6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d005      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ee6:	2394      	movs	r3, #148	; 0x94
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2228      	movs	r2, #40	; 0x28
 8002eee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ef0:	d045      	beq.n	8002f7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 feaf 	bl	8003c58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d135      	bne.n	8002f74 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f10:	2090      	movs	r0, #144	; 0x90
 8002f12:	183a      	adds	r2, r7, r0
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1c:	f383 8810 	msr	PRIMASK, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2140      	movs	r1, #64	; 0x40
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	183b      	adds	r3, r7, r0
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f38:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <HAL_UART_IRQHandler+0x2a0>)
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fe f8bb 	bl	80010cc <HAL_DMA_Abort_IT>
 8002f56:	1e03      	subs	r3, r0, #0
 8002f58:	d01a      	beq.n	8002f90 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	0018      	movs	r0, r3
 8002f66:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e012      	b.n	8002f90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 f997 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f72:	e00d      	b.n	8002f90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	0018      	movs	r0, r3
 8002f78:	f000 f992 	bl	80032a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	e008      	b.n	8002f90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f98d 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f8e:	e178      	b.n	8003282 <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	46c0      	nop			; (mov r8, r8)
    return;
 8002f92:	e176      	b.n	8003282 <HAL_UART_IRQHandler+0x586>
 8002f94:	0000080f 	.word	0x0000080f
 8002f98:	04000120 	.word	0x04000120
 8002f9c:	08003d11 	.word	0x08003d11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d000      	beq.n	8002faa <HAL_UART_IRQHandler+0x2ae>
 8002fa8:	e129      	b.n	80031fe <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002faa:	23a4      	movs	r3, #164	; 0xa4
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d100      	bne.n	8002fb8 <HAL_UART_IRQHandler+0x2bc>
 8002fb6:	e122      	b.n	80031fe <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fb8:	23a0      	movs	r3, #160	; 0xa0
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x2ca>
 8002fc4:	e11b      	b.n	80031fe <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2210      	movs	r2, #16
 8002fcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2240      	movs	r2, #64	; 0x40
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d000      	beq.n	8002fde <HAL_UART_IRQHandler+0x2e2>
 8002fdc:	e097      	b.n	800310e <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	217e      	movs	r1, #126	; 0x7e
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d100      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x2fa>
 8002ff4:	e147      	b.n	8003286 <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2258      	movs	r2, #88	; 0x58
 8002ffa:	5a9b      	ldrh	r3, [r3, r2]
 8002ffc:	227e      	movs	r2, #126	; 0x7e
 8002ffe:	18ba      	adds	r2, r7, r2
 8003000:	8812      	ldrh	r2, [r2, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d300      	bcc.n	8003008 <HAL_UART_IRQHandler+0x30c>
 8003006:	e13e      	b.n	8003286 <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	227e      	movs	r2, #126	; 0x7e
 800300c:	18ba      	adds	r2, r7, r2
 800300e:	215a      	movs	r1, #90	; 0x5a
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2220      	movs	r2, #32
 800301e:	4013      	ands	r3, r2
 8003020:	d166      	bne.n	80030f0 <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302a:	67bb      	str	r3, [r7, #120]	; 0x78
 800302c:	2301      	movs	r3, #1
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	f383 8810 	msr	PRIMASK, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4995      	ldr	r1, [pc, #596]	; (8003298 <HAL_UART_IRQHandler+0x59c>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	677b      	str	r3, [r7, #116]	; 0x74
 800305a:	2301      	movs	r3, #1
 800305c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	f383 8810 	msr	PRIMASK, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	438a      	bics	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800307e:	f3ef 8310 	mrs	r3, PRIMASK
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003084:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	673b      	str	r3, [r7, #112]	; 0x70
 8003088:	2301      	movs	r3, #1
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	f383 8810 	msr	PRIMASK, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	438a      	bics	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a4:	653b      	str	r3, [r7, #80]	; 0x50
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80030be:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c2:	2301      	movs	r3, #1
 80030c4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	f383 8810 	msr	PRIMASK, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2110      	movs	r1, #16
 80030d8:	438a      	bics	r2, r1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e2:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7fd ffae 	bl	800104c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2258      	movs	r2, #88	; 0x58
 80030f4:	5a9a      	ldrh	r2, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	215a      	movs	r1, #90	; 0x5a
 80030fa:	5a5b      	ldrh	r3, [r3, r1]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0011      	movs	r1, r2
 8003106:	0018      	movs	r0, r3
 8003108:	f000 f8d2 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800310c:	e0bb      	b.n	8003286 <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2258      	movs	r2, #88	; 0x58
 8003112:	5a99      	ldrh	r1, [r3, r2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	225a      	movs	r2, #90	; 0x5a
 8003118:	5a9b      	ldrh	r3, [r3, r2]
 800311a:	b29a      	uxth	r2, r3
 800311c:	238e      	movs	r3, #142	; 0x8e
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	1a8a      	subs	r2, r1, r2
 8003122:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	225a      	movs	r2, #90	; 0x5a
 8003128:	5a9b      	ldrh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d100      	bne.n	8003132 <HAL_UART_IRQHandler+0x436>
 8003130:	e0ab      	b.n	800328a <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 8003132:	238e      	movs	r3, #142	; 0x8e
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <HAL_UART_IRQHandler+0x442>
 800313c:	e0a5      	b.n	800328a <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	60fb      	str	r3, [r7, #12]
  return(result);
 8003144:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003146:	2088      	movs	r0, #136	; 0x88
 8003148:	183a      	adds	r2, r7, r0
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	2301      	movs	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f383 8810 	msr	PRIMASK, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	494e      	ldr	r1, [pc, #312]	; (800329c <HAL_UART_IRQHandler+0x5a0>)
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	183b      	adds	r3, r7, r0
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	61bb      	str	r3, [r7, #24]
  return(result);
 8003178:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317a:	2084      	movs	r0, #132	; 0x84
 800317c:	183a      	adds	r2, r7, r0
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	2301      	movs	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f383 8810 	msr	PRIMASK, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	438a      	bics	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	183b      	adds	r3, r7, r0
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	623b      	str	r3, [r7, #32]
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2220      	movs	r2, #32
 80031aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c0:	2080      	movs	r0, #128	; 0x80
 80031c2:	183a      	adds	r2, r7, r0
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	2301      	movs	r3, #1
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	f383 8810 	msr	PRIMASK, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2110      	movs	r1, #16
 80031dc:	438a      	bics	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	183b      	adds	r3, r7, r0
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ec:	238e      	movs	r3, #142	; 0x8e
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f85a 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fc:	e045      	b.n	800328a <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031fe:	23a4      	movs	r3, #164	; 0xa4
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	035b      	lsls	r3, r3, #13
 8003208:	4013      	ands	r3, r2
 800320a:	d010      	beq.n	800322e <HAL_UART_IRQHandler+0x532>
 800320c:	239c      	movs	r3, #156	; 0x9c
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	03db      	lsls	r3, r3, #15
 8003216:	4013      	ands	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	0352      	lsls	r2, r2, #13
 8003222:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 ff0e 	bl	8004048 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800322c:	e030      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800322e:	23a4      	movs	r3, #164	; 0xa4
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2280      	movs	r2, #128	; 0x80
 8003236:	4013      	ands	r3, r2
 8003238:	d00f      	beq.n	800325a <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800323a:	23a0      	movs	r3, #160	; 0xa0
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	4013      	ands	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01f      	beq.n	800328e <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	0010      	movs	r0, r2
 8003256:	4798      	blx	r3
    }
    return;
 8003258:	e019      	b.n	800328e <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800325a:	23a4      	movs	r3, #164	; 0xa4
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	4013      	ands	r3, r2
 8003264:	d014      	beq.n	8003290 <HAL_UART_IRQHandler+0x594>
 8003266:	23a0      	movs	r3, #160	; 0xa0
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	4013      	ands	r3, r2
 8003270:	d00e      	beq.n	8003290 <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f000 fd62 	bl	8003d3e <UART_EndTransmit_IT>
    return;
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	e008      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
      return;
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	e006      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
    return;
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	e004      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
      return;
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	e002      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
      return;
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	e000      	b.n	8003290 <HAL_UART_IRQHandler+0x594>
    return;
 800328e:	46c0      	nop			; (mov r8, r8)
  }

}
 8003290:	46bd      	mov	sp, r7
 8003292:	b02a      	add	sp, #168	; 0xa8
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	fffffeff 	.word	0xfffffeff
 800329c:	fffffedf 	.word	0xfffffedf

080032a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	000a      	movs	r2, r1
 80032ba:	1cbb      	adds	r3, r7, #2
 80032bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b08e      	sub	sp, #56	; 0x38
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d0:	231a      	movs	r3, #26
 80032d2:	2218      	movs	r2, #24
 80032d4:	4694      	mov	ip, r2
 80032d6:	44bc      	add	ip, r7
 80032d8:	4463      	add	r3, ip
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4aba      	ldr	r2, [pc, #744]	; (80035e8 <UART_SetConfig+0x320>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4ab6      	ldr	r2, [pc, #728]	; (80035ec <UART_SetConfig+0x324>)
 8003314:	4013      	ands	r3, r2
 8003316:	0019      	movs	r1, r3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4ab0      	ldr	r2, [pc, #704]	; (80035f0 <UART_SetConfig+0x328>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800333a:	4313      	orrs	r3, r2
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4aab      	ldr	r2, [pc, #684]	; (80035f4 <UART_SetConfig+0x32c>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4aa7      	ldr	r2, [pc, #668]	; (80035f8 <UART_SetConfig+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d137      	bne.n	80033ce <UART_SetConfig+0x106>
 800335e:	4ba7      	ldr	r3, [pc, #668]	; (80035fc <UART_SetConfig+0x334>)
 8003360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003362:	220c      	movs	r2, #12
 8003364:	4013      	ands	r3, r2
 8003366:	2b04      	cmp	r3, #4
 8003368:	d018      	beq.n	800339c <UART_SetConfig+0xd4>
 800336a:	d802      	bhi.n	8003372 <UART_SetConfig+0xaa>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <UART_SetConfig+0xb4>
 8003370:	e024      	b.n	80033bc <UART_SetConfig+0xf4>
 8003372:	2b08      	cmp	r3, #8
 8003374:	d00a      	beq.n	800338c <UART_SetConfig+0xc4>
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d018      	beq.n	80033ac <UART_SetConfig+0xe4>
 800337a:	e01f      	b.n	80033bc <UART_SetConfig+0xf4>
 800337c:	231b      	movs	r3, #27
 800337e:	2218      	movs	r2, #24
 8003380:	4694      	mov	ip, r2
 8003382:	44bc      	add	ip, r7
 8003384:	4463      	add	r3, ip
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e06e      	b.n	800346a <UART_SetConfig+0x1a2>
 800338c:	231b      	movs	r3, #27
 800338e:	2218      	movs	r2, #24
 8003390:	4694      	mov	ip, r2
 8003392:	44bc      	add	ip, r7
 8003394:	4463      	add	r3, ip
 8003396:	2202      	movs	r2, #2
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e066      	b.n	800346a <UART_SetConfig+0x1a2>
 800339c:	231b      	movs	r3, #27
 800339e:	2218      	movs	r2, #24
 80033a0:	4694      	mov	ip, r2
 80033a2:	44bc      	add	ip, r7
 80033a4:	4463      	add	r3, ip
 80033a6:	2204      	movs	r2, #4
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e05e      	b.n	800346a <UART_SetConfig+0x1a2>
 80033ac:	231b      	movs	r3, #27
 80033ae:	2218      	movs	r2, #24
 80033b0:	4694      	mov	ip, r2
 80033b2:	44bc      	add	ip, r7
 80033b4:	4463      	add	r3, ip
 80033b6:	2208      	movs	r2, #8
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e056      	b.n	800346a <UART_SetConfig+0x1a2>
 80033bc:	231b      	movs	r3, #27
 80033be:	2218      	movs	r2, #24
 80033c0:	4694      	mov	ip, r2
 80033c2:	44bc      	add	ip, r7
 80033c4:	4463      	add	r3, ip
 80033c6:	2210      	movs	r2, #16
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	e04d      	b.n	800346a <UART_SetConfig+0x1a2>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <UART_SetConfig+0x328>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d141      	bne.n	800345c <UART_SetConfig+0x194>
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <UART_SetConfig+0x334>)
 80033da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033dc:	23c0      	movs	r3, #192	; 0xc0
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	00d2      	lsls	r2, r2, #3
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <UART_SetConfig+0x162>
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	00d2      	lsls	r2, r2, #3
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d802      	bhi.n	80033f8 <UART_SetConfig+0x130>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <UART_SetConfig+0x142>
 80033f6:	e028      	b.n	800344a <UART_SetConfig+0x182>
 80033f8:	2280      	movs	r2, #128	; 0x80
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00c      	beq.n	800341a <UART_SetConfig+0x152>
 8003400:	22c0      	movs	r2, #192	; 0xc0
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	4293      	cmp	r3, r2
 8003406:	d018      	beq.n	800343a <UART_SetConfig+0x172>
 8003408:	e01f      	b.n	800344a <UART_SetConfig+0x182>
 800340a:	231b      	movs	r3, #27
 800340c:	2218      	movs	r2, #24
 800340e:	4694      	mov	ip, r2
 8003410:	44bc      	add	ip, r7
 8003412:	4463      	add	r3, ip
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e027      	b.n	800346a <UART_SetConfig+0x1a2>
 800341a:	231b      	movs	r3, #27
 800341c:	2218      	movs	r2, #24
 800341e:	4694      	mov	ip, r2
 8003420:	44bc      	add	ip, r7
 8003422:	4463      	add	r3, ip
 8003424:	2202      	movs	r2, #2
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	e01f      	b.n	800346a <UART_SetConfig+0x1a2>
 800342a:	231b      	movs	r3, #27
 800342c:	2218      	movs	r2, #24
 800342e:	4694      	mov	ip, r2
 8003430:	44bc      	add	ip, r7
 8003432:	4463      	add	r3, ip
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e017      	b.n	800346a <UART_SetConfig+0x1a2>
 800343a:	231b      	movs	r3, #27
 800343c:	2218      	movs	r2, #24
 800343e:	4694      	mov	ip, r2
 8003440:	44bc      	add	ip, r7
 8003442:	4463      	add	r3, ip
 8003444:	2208      	movs	r2, #8
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e00f      	b.n	800346a <UART_SetConfig+0x1a2>
 800344a:	231b      	movs	r3, #27
 800344c:	2218      	movs	r2, #24
 800344e:	4694      	mov	ip, r2
 8003450:	44bc      	add	ip, r7
 8003452:	4463      	add	r3, ip
 8003454:	2210      	movs	r2, #16
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	e006      	b.n	800346a <UART_SetConfig+0x1a2>
 800345c:	231b      	movs	r3, #27
 800345e:	2218      	movs	r2, #24
 8003460:	4694      	mov	ip, r2
 8003462:	44bc      	add	ip, r7
 8003464:	4463      	add	r3, ip
 8003466:	2210      	movs	r2, #16
 8003468:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a60      	ldr	r2, [pc, #384]	; (80035f0 <UART_SetConfig+0x328>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d000      	beq.n	8003476 <UART_SetConfig+0x1ae>
 8003474:	e085      	b.n	8003582 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003476:	231b      	movs	r3, #27
 8003478:	2218      	movs	r2, #24
 800347a:	4694      	mov	ip, r2
 800347c:	44bc      	add	ip, r7
 800347e:	4463      	add	r3, ip
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d00d      	beq.n	80034a2 <UART_SetConfig+0x1da>
 8003486:	dc02      	bgt.n	800348e <UART_SetConfig+0x1c6>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0x1d0>
 800348c:	e01d      	b.n	80034ca <UART_SetConfig+0x202>
 800348e:	2b04      	cmp	r3, #4
 8003490:	d012      	beq.n	80034b8 <UART_SetConfig+0x1f0>
 8003492:	2b08      	cmp	r3, #8
 8003494:	d015      	beq.n	80034c2 <UART_SetConfig+0x1fa>
 8003496:	e018      	b.n	80034ca <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7fe fec6 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 800349c:	0003      	movs	r3, r0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034a0:	e01d      	b.n	80034de <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a2:	4b56      	ldr	r3, [pc, #344]	; (80035fc <UART_SetConfig+0x334>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	4013      	ands	r3, r2
 80034aa:	d002      	beq.n	80034b2 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034ac:	4b54      	ldr	r3, [pc, #336]	; (8003600 <UART_SetConfig+0x338>)
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034b0:	e015      	b.n	80034de <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 80034b2:	4b54      	ldr	r3, [pc, #336]	; (8003604 <UART_SetConfig+0x33c>)
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034b6:	e012      	b.n	80034de <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034b8:	f7fe fe0a 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80034bc:	0003      	movs	r3, r0
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80034ce:	231a      	movs	r3, #26
 80034d0:	2218      	movs	r2, #24
 80034d2:	4694      	mov	ip, r2
 80034d4:	44bc      	add	ip, r7
 80034d6:	4463      	add	r3, ip
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
        break;
 80034dc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d100      	bne.n	80034e6 <UART_SetConfig+0x21e>
 80034e4:	e138      	b.n	8003758 <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	0013      	movs	r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d305      	bcc.n	8003502 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	429a      	cmp	r2, r3
 8003500:	d907      	bls.n	8003512 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 8003502:	231a      	movs	r3, #26
 8003504:	2218      	movs	r2, #24
 8003506:	4694      	mov	ip, r2
 8003508:	44bc      	add	ip, r7
 800350a:	4463      	add	r3, ip
 800350c:	2201      	movs	r2, #1
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e122      	b.n	8003758 <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	6939      	ldr	r1, [r7, #16]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	000b      	movs	r3, r1
 8003520:	0e1b      	lsrs	r3, r3, #24
 8003522:	0010      	movs	r0, r2
 8003524:	0205      	lsls	r5, r0, #8
 8003526:	431d      	orrs	r5, r3
 8003528:	000b      	movs	r3, r1
 800352a:	021c      	lsls	r4, r3, #8
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68b8      	ldr	r0, [r7, #8]
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	1900      	adds	r0, r0, r4
 800353e:	4169      	adcs	r1, r5
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f7fc fe67 	bl	8000220 <__aeabi_uldivmod>
 8003552:	0003      	movs	r3, r0
 8003554:	000c      	movs	r4, r1
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <UART_SetConfig+0x340>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d908      	bls.n	8003572 <UART_SetConfig+0x2aa>
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <UART_SetConfig+0x344>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d804      	bhi.n	8003572 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800356e:	60da      	str	r2, [r3, #12]
 8003570:	e0f2      	b.n	8003758 <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8003572:	231a      	movs	r3, #26
 8003574:	2218      	movs	r2, #24
 8003576:	4694      	mov	ip, r2
 8003578:	44bc      	add	ip, r7
 800357a:	4463      	add	r3, ip
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e0ea      	b.n	8003758 <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	429a      	cmp	r2, r3
 800358c:	d000      	beq.n	8003590 <UART_SetConfig+0x2c8>
 800358e:	e08a      	b.n	80036a6 <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8003590:	231b      	movs	r3, #27
 8003592:	2218      	movs	r2, #24
 8003594:	4694      	mov	ip, r2
 8003596:	44bc      	add	ip, r7
 8003598:	4463      	add	r3, ip
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d839      	bhi.n	8003614 <UART_SetConfig+0x34c>
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <UART_SetConfig+0x348>)
 80035a4:	18d3      	adds	r3, r2, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035aa:	f7fe fe3d 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 80035ae:	0003      	movs	r3, r0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b2:	e039      	b.n	8003628 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b4:	f7fe fe4e 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 80035b8:	0003      	movs	r3, r0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035bc:	e034      	b.n	8003628 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <UART_SetConfig+0x334>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	4013      	ands	r3, r2
 80035c6:	d002      	beq.n	80035ce <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <UART_SetConfig+0x338>)
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035cc:	e02c      	b.n	8003628 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <UART_SetConfig+0x33c>)
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d2:	e029      	b.n	8003628 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d4:	f7fe fd7c 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80035d8:	0003      	movs	r3, r0
 80035da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035dc:	e024      	b.n	8003628 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035e4:	e020      	b.n	8003628 <UART_SetConfig+0x360>
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	ffffcfff 	.word	0xffffcfff
 80035f0:	40004800 	.word	0x40004800
 80035f4:	fffff4ff 	.word	0xfffff4ff
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40021000 	.word	0x40021000
 8003600:	003d0900 	.word	0x003d0900
 8003604:	00f42400 	.word	0x00f42400
 8003608:	000002ff 	.word	0x000002ff
 800360c:	000fffff 	.word	0x000fffff
 8003610:	080040ec 	.word	0x080040ec
      default:
        pclk = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003618:	231a      	movs	r3, #26
 800361a:	2218      	movs	r2, #24
 800361c:	4694      	mov	ip, r2
 800361e:	44bc      	add	ip, r7
 8003620:	4463      	add	r3, ip
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
        break;
 8003626:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	2b00      	cmp	r3, #0
 800362c:	d100      	bne.n	8003630 <UART_SetConfig+0x368>
 800362e:	e093      	b.n	8003758 <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	005a      	lsls	r2, r3, #1
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	18d2      	adds	r2, r2, r3
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0019      	movs	r1, r3
 8003642:	0010      	movs	r0, r2
 8003644:	f7fc fd60 	bl	8000108 <__udivsi3>
 8003648:	0003      	movs	r3, r0
 800364a:	b29b      	uxth	r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2b0f      	cmp	r3, #15
 8003652:	d920      	bls.n	8003696 <UART_SetConfig+0x3ce>
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	4a48      	ldr	r2, [pc, #288]	; (8003778 <UART_SetConfig+0x4b0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d81c      	bhi.n	8003696 <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	b29a      	uxth	r2, r3
 8003660:	200e      	movs	r0, #14
 8003662:	2418      	movs	r4, #24
 8003664:	193b      	adds	r3, r7, r4
 8003666:	181b      	adds	r3, r3, r0
 8003668:	210f      	movs	r1, #15
 800366a:	438a      	bics	r2, r1
 800366c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	2207      	movs	r2, #7
 8003676:	4013      	ands	r3, r2
 8003678:	b299      	uxth	r1, r3
 800367a:	193b      	adds	r3, r7, r4
 800367c:	181b      	adds	r3, r3, r0
 800367e:	193a      	adds	r2, r7, r4
 8003680:	1812      	adds	r2, r2, r0
 8003682:	8812      	ldrh	r2, [r2, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	193a      	adds	r2, r7, r4
 800368e:	1812      	adds	r2, r2, r0
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	e060      	b.n	8003758 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 8003696:	231a      	movs	r3, #26
 8003698:	2218      	movs	r2, #24
 800369a:	4694      	mov	ip, r2
 800369c:	44bc      	add	ip, r7
 800369e:	4463      	add	r3, ip
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e058      	b.n	8003758 <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036a6:	231b      	movs	r3, #27
 80036a8:	2218      	movs	r2, #24
 80036aa:	4694      	mov	ip, r2
 80036ac:	44bc      	add	ip, r7
 80036ae:	4463      	add	r3, ip
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d822      	bhi.n	80036fc <UART_SetConfig+0x434>
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	4b30      	ldr	r3, [pc, #192]	; (800377c <UART_SetConfig+0x4b4>)
 80036ba:	18d3      	adds	r3, r2, r3
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7fe fdb2 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 80036c4:	0003      	movs	r3, r0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036c8:	e022      	b.n	8003710 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ca:	f7fe fdc3 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 80036ce:	0003      	movs	r3, r0
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036d2:	e01d      	b.n	8003710 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <UART_SetConfig+0x4b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	4013      	ands	r3, r2
 80036dc:	d002      	beq.n	80036e4 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036de:	4b29      	ldr	r3, [pc, #164]	; (8003784 <UART_SetConfig+0x4bc>)
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036e2:	e015      	b.n	8003710 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <UART_SetConfig+0x4c0>)
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036e8:	e012      	b.n	8003710 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe fcf1 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036f2:	e00d      	b.n	8003710 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80036fa:	e009      	b.n	8003710 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003700:	231a      	movs	r3, #26
 8003702:	2218      	movs	r2, #24
 8003704:	4694      	mov	ip, r2
 8003706:	44bc      	add	ip, r7
 8003708:	4463      	add	r3, ip
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
        break;
 800370e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085a      	lsrs	r2, r3, #1
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	18d2      	adds	r2, r2, r3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	0019      	movs	r1, r3
 8003726:	0010      	movs	r0, r2
 8003728:	f7fc fcee 	bl	8000108 <__udivsi3>
 800372c:	0003      	movs	r3, r0
 800372e:	b29b      	uxth	r3, r3
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d908      	bls.n	800374a <UART_SetConfig+0x482>
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <UART_SetConfig+0x4b0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d804      	bhi.n	800374a <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003746:	60da      	str	r2, [r3, #12]
 8003748:	e006      	b.n	8003758 <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 800374a:	231a      	movs	r3, #26
 800374c:	2218      	movs	r2, #24
 800374e:	4694      	mov	ip, r2
 8003750:	44bc      	add	ip, r7
 8003752:	4463      	add	r3, ip
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2200      	movs	r2, #0
 800375c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2200      	movs	r2, #0
 8003762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003764:	231a      	movs	r3, #26
 8003766:	2218      	movs	r2, #24
 8003768:	4694      	mov	ip, r2
 800376a:	44bc      	add	ip, r7
 800376c:	4463      	add	r3, ip
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b00e      	add	sp, #56	; 0x38
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	0000ffff 	.word	0x0000ffff
 800377c:	08004110 	.word	0x08004110
 8003780:	40021000 	.word	0x40021000
 8003784:	003d0900 	.word	0x003d0900
 8003788:	00f42400 	.word	0x00f42400

0800378c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	d00b      	beq.n	80037b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4a4a      	ldr	r2, [pc, #296]	; (80038d0 <UART_AdvFeatureConfig+0x144>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	0019      	movs	r1, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d00b      	beq.n	80037d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a43      	ldr	r2, [pc, #268]	; (80038d4 <UART_AdvFeatureConfig+0x148>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2204      	movs	r2, #4
 80037de:	4013      	ands	r3, r2
 80037e0:	d00b      	beq.n	80037fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a3b      	ldr	r2, [pc, #236]	; (80038d8 <UART_AdvFeatureConfig+0x14c>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2208      	movs	r2, #8
 8003800:	4013      	ands	r3, r2
 8003802:	d00b      	beq.n	800381c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a34      	ldr	r2, [pc, #208]	; (80038dc <UART_AdvFeatureConfig+0x150>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2210      	movs	r2, #16
 8003822:	4013      	ands	r3, r2
 8003824:	d00b      	beq.n	800383e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4a2c      	ldr	r2, [pc, #176]	; (80038e0 <UART_AdvFeatureConfig+0x154>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	d00b      	beq.n	8003860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <UART_AdvFeatureConfig+0x158>)
 8003850:	4013      	ands	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	4013      	ands	r3, r2
 8003868:	d01d      	beq.n	80038a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <UART_AdvFeatureConfig+0x15c>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	035b      	lsls	r3, r3, #13
 800388a:	429a      	cmp	r2, r3
 800388c:	d10b      	bne.n	80038a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a15      	ldr	r2, [pc, #84]	; (80038ec <UART_AdvFeatureConfig+0x160>)
 8003896:	4013      	ands	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	4013      	ands	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <UART_AdvFeatureConfig+0x164>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }
}
 80038c8:	46c0      	nop			; (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	fffdffff 	.word	0xfffdffff
 80038d4:	fffeffff 	.word	0xfffeffff
 80038d8:	fffbffff 	.word	0xfffbffff
 80038dc:	ffff7fff 	.word	0xffff7fff
 80038e0:	ffffefff 	.word	0xffffefff
 80038e4:	ffffdfff 	.word	0xffffdfff
 80038e8:	ffefffff 	.word	0xffefffff
 80038ec:	ff9fffff 	.word	0xff9fffff
 80038f0:	fff7ffff 	.word	0xfff7ffff

080038f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	2100      	movs	r1, #0
 8003902:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003904:	f7fd faba 	bl	8000e7c <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2208      	movs	r2, #8
 8003914:	4013      	ands	r3, r2
 8003916:	2b08      	cmp	r3, #8
 8003918:	d10d      	bne.n	8003936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	0399      	lsls	r1, r3, #14
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <UART_CheckIdleState+0x90>)
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	0013      	movs	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	f000 f82d 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d001      	beq.n	8003936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e022      	b.n	800397c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2204      	movs	r2, #4
 800393e:	4013      	ands	r3, r2
 8003940:	2b04      	cmp	r3, #4
 8003942:	d10d      	bne.n	8003960 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	03d9      	lsls	r1, r3, #15
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <UART_CheckIdleState+0x90>)
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	0013      	movs	r3, r2
 8003952:	2200      	movs	r2, #0
 8003954:	f000 f818 	bl	8003988 <UART_WaitOnFlagUntilTimeout>
 8003958:	1e03      	subs	r3, r0, #0
 800395a:	d001      	beq.n	8003960 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e00d      	b.n	800397c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2274      	movs	r2, #116	; 0x74
 8003976:	2100      	movs	r1, #0
 8003978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b004      	add	sp, #16
 8003982:	bd80      	pop	{r7, pc}
 8003984:	01ffffff 	.word	0x01ffffff

08003988 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	; 0x50
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	1dfb      	adds	r3, r7, #7
 8003996:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003998:	e09b      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800399c:	3301      	adds	r3, #1
 800399e:	d100      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80039a0:	e097      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fd fa6b 	bl	8000e7c <HAL_GetTick>
 80039a6:	0002      	movs	r2, r0
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d139      	bne.n	8003a2c <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b8:	f3ef 8310 	mrs	r3, PRIMASK
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	647b      	str	r3, [r7, #68]	; 0x44
 80039c2:	2301      	movs	r3, #1
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	f383 8810 	msr	PRIMASK, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4949      	ldr	r1, [pc, #292]	; (8003afc <UART_WaitOnFlagUntilTimeout+0x174>)
 80039d8:	400a      	ands	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039de:	633b      	str	r3, [r7, #48]	; 0x30
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	643b      	str	r3, [r7, #64]	; 0x40
 80039f0:	2301      	movs	r3, #1
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f6:	f383 8810 	msr	PRIMASK, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2101      	movs	r1, #1
 8003a06:	438a      	bics	r2, r1
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2274      	movs	r2, #116	; 0x74
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e063      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2204      	movs	r2, #4
 8003a34:	4013      	ands	r3, r2
 8003a36:	d04c      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	401a      	ands	r2, r3
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d142      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a56:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a5c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a60:	2301      	movs	r3, #1
 8003a62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f383 8810 	msr	PRIMASK, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4921      	ldr	r1, [pc, #132]	; (8003afc <UART_WaitOnFlagUntilTimeout+0x174>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a84:	f3ef 8310 	mrs	r3, PRIMASK
 8003a88:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a8a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a8e:	2301      	movs	r3, #1
 8003a90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f383 8810 	msr	PRIMASK, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	2120      	movs	r1, #32
 8003ac4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2274      	movs	r2, #116	; 0x74
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e010      	b.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4013      	ands	r3, r2
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	425a      	negs	r2, r3
 8003ae2:	4153      	adcs	r3, r2
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d100      	bne.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x16a>
 8003af0:	e753      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b014      	add	sp, #80	; 0x50
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffffe5f 	.word	0xfffffe5f

08003b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1dba      	adds	r2, r7, #6
 8003b18:	2158      	movs	r1, #88	; 0x58
 8003b1a:	8812      	ldrh	r2, [r2, #0]
 8003b1c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1dba      	adds	r2, r7, #6
 8003b22:	215a      	movs	r1, #90	; 0x5a
 8003b24:	8812      	ldrh	r2, [r2, #0]
 8003b26:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d10d      	bne.n	8003b56 <UART_Start_Receive_IT+0x56>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <UART_Start_Receive_IT+0x4c>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	225c      	movs	r2, #92	; 0x5c
 8003b46:	4941      	ldr	r1, [pc, #260]	; (8003c4c <UART_Start_Receive_IT+0x14c>)
 8003b48:	5299      	strh	r1, [r3, r2]
 8003b4a:	e02e      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	225c      	movs	r2, #92	; 0x5c
 8003b50:	21ff      	movs	r1, #255	; 0xff
 8003b52:	5299      	strh	r1, [r3, r2]
 8003b54:	e029      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <UART_Start_Receive_IT+0x7a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <UART_Start_Receive_IT+0x70>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	225c      	movs	r2, #92	; 0x5c
 8003b6a:	21ff      	movs	r1, #255	; 0xff
 8003b6c:	5299      	strh	r1, [r3, r2]
 8003b6e:	e01c      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	225c      	movs	r2, #92	; 0x5c
 8003b74:	217f      	movs	r1, #127	; 0x7f
 8003b76:	5299      	strh	r1, [r3, r2]
 8003b78:	e017      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	055b      	lsls	r3, r3, #21
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10d      	bne.n	8003ba2 <UART_Start_Receive_IT+0xa2>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <UART_Start_Receive_IT+0x98>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	225c      	movs	r2, #92	; 0x5c
 8003b92:	217f      	movs	r1, #127	; 0x7f
 8003b94:	5299      	strh	r1, [r3, r2]
 8003b96:	e008      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	225c      	movs	r2, #92	; 0x5c
 8003b9c:	213f      	movs	r1, #63	; 0x3f
 8003b9e:	5299      	strh	r1, [r3, r2]
 8003ba0:	e003      	b.n	8003baa <UART_Start_Receive_IT+0xaa>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	225c      	movs	r2, #92	; 0x5c
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2280      	movs	r2, #128	; 0x80
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2222      	movs	r2, #34	; 0x22
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bbe:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	015b      	lsls	r3, r3, #5
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <UART_Start_Receive_IT+0x102>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	; (8003c50 <UART_Start_Receive_IT+0x150>)
 8003bfe:	665a      	str	r2, [r3, #100]	; 0x64
 8003c00:	e002      	b.n	8003c08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <UART_Start_Receive_IT+0x154>)
 8003c06:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2274      	movs	r2, #116	; 0x74
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	613b      	str	r3, [r7, #16]
  return(result);
 8003c16:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f383 8810 	msr	PRIMASK, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2190      	movs	r1, #144	; 0x90
 8003c30:	0049      	lsls	r1, r1, #1
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b00c      	add	sp, #48	; 0x30
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	000001ff 	.word	0x000001ff
 8003c50:	08003eed 	.word	0x08003eed
 8003c54:	08003d91 	.word	0x08003d91

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	; 0x38
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	617b      	str	r3, [r7, #20]
  return(result);
 8003c66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f383 8810 	msr	PRIMASK, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4923      	ldr	r1, [pc, #140]	; (8003d0c <UART_EndRxTransfer+0xb4>)
 8003c80:	400a      	ands	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	623b      	str	r3, [r7, #32]
  return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c96:	633b      	str	r3, [r7, #48]	; 0x30
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f383 8810 	msr	PRIMASK, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	438a      	bics	r2, r1
 8003cb0:	609a      	str	r2, [r3, #8]
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d116      	bne.n	8003cf2 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	2301      	movs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b00e      	add	sp, #56	; 0x38
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	fffffedf 	.word	0xfffffedf

08003d10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	225a      	movs	r2, #90	; 0x5a
 8003d22:	2100      	movs	r1, #0
 8003d24:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2252      	movs	r2, #82	; 0x52
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fab5 	bl	80032a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	2301      	movs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f383 8810 	msr	PRIMASK, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	438a      	bics	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7fc fcfe 	bl	8000784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b006      	add	sp, #24
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b090      	sub	sp, #64	; 0x40
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d98:	233e      	movs	r3, #62	; 0x3e
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	215c      	movs	r1, #92	; 0x5c
 8003da0:	5a52      	ldrh	r2, [r2, r1]
 8003da2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da8:	2b22      	cmp	r3, #34	; 0x22
 8003daa:	d000      	beq.n	8003dae <UART_RxISR_8BIT+0x1e>
 8003dac:	e090      	b.n	8003ed0 <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db4:	213c      	movs	r1, #60	; 0x3c
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	233e      	movs	r3, #62	; 0x3e
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b2d9      	uxtb	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	400a      	ands	r2, r1
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	225a      	movs	r2, #90	; 0x5a
 8003de0:	5a9b      	ldrh	r3, [r3, r2]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b299      	uxth	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	225a      	movs	r2, #90	; 0x5a
 8003dec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	225a      	movs	r2, #90	; 0x5a
 8003df2:	5a9b      	ldrh	r3, [r3, r2]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d172      	bne.n	8003ee0 <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e00:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e04:	2301      	movs	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f383 8810 	msr	PRIMASK, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4933      	ldr	r1, [pc, #204]	; (8003ee8 <UART_RxISR_8BIT+0x158>)
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
 8003e32:	2301      	movs	r3, #1
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	f383 8810 	msr	PRIMASK, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d12d      	bne.n	8003ec6 <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e70:	f3ef 8310 	mrs	r3, PRIMASK
 8003e74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e76:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f383 8810 	msr	PRIMASK, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2110      	movs	r1, #16
 8003e90:	438a      	bics	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2210      	movs	r2, #16
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d103      	bne.n	8003eb4 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2258      	movs	r2, #88	; 0x58
 8003eb8:	5a9a      	ldrh	r2, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff f9f6 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ec4:	e00c      	b.n	8003ee0 <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fc fc49 	bl	8000760 <HAL_UART_RxCpltCallback>
}
 8003ece:	e007      	b.n	8003ee0 <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2108      	movs	r1, #8
 8003edc:	430a      	orrs	r2, r1
 8003ede:	619a      	str	r2, [r3, #24]
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b010      	add	sp, #64	; 0x40
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	fffffedf 	.word	0xfffffedf

08003eec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	; 0x40
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ef4:	233e      	movs	r3, #62	; 0x3e
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	215c      	movs	r1, #92	; 0x5c
 8003efc:	5a52      	ldrh	r2, [r2, r1]
 8003efe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f04:	2b22      	cmp	r3, #34	; 0x22
 8003f06:	d000      	beq.n	8003f0a <UART_RxISR_16BIT+0x1e>
 8003f08:	e090      	b.n	800402c <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f10:	213c      	movs	r1, #60	; 0x3c
 8003f12:	187b      	adds	r3, r7, r1
 8003f14:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1a:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f1c:	187b      	adds	r3, r7, r1
 8003f1e:	223e      	movs	r2, #62	; 0x3e
 8003f20:	18ba      	adds	r2, r7, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	225a      	movs	r2, #90	; 0x5a
 8003f3c:	5a9b      	ldrh	r3, [r3, r2]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b299      	uxth	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	225a      	movs	r2, #90	; 0x5a
 8003f48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	225a      	movs	r2, #90	; 0x5a
 8003f4e:	5a9b      	ldrh	r3, [r3, r2]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d172      	bne.n	800403c <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f56:	f3ef 8310 	mrs	r3, PRIMASK
 8003f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f5c:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f60:	2301      	movs	r3, #1
 8003f62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f383 8810 	msr	PRIMASK, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4933      	ldr	r1, [pc, #204]	; (8004044 <UART_RxISR_16BIT+0x158>)
 8003f76:	400a      	ands	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f84:	f3ef 8310 	mrs	r3, PRIMASK
 8003f88:	623b      	str	r3, [r7, #32]
  return(result);
 8003f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	2301      	movs	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f383 8810 	msr	PRIMASK, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d12d      	bne.n	8004022 <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2110      	movs	r1, #16
 8003fec:	438a      	bics	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	2b10      	cmp	r3, #16
 8004006:	d103      	bne.n	8004010 <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2258      	movs	r2, #88	; 0x58
 8004014:	5a9a      	ldrh	r2, [r3, r2]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0011      	movs	r1, r2
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff f948 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004020:	e00c      	b.n	800403c <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7fc fb9b 	bl	8000760 <HAL_UART_RxCpltCallback>
}
 800402a:	e007      	b.n	800403c <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2108      	movs	r1, #8
 8004038:	430a      	orrs	r2, r1
 800403a:	619a      	str	r2, [r3, #24]
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b010      	add	sp, #64	; 0x40
 8004042:	bd80      	pop	{r7, pc}
 8004044:	fffffedf 	.word	0xfffffedf

08004048 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	2600      	movs	r6, #0
 800405c:	4d0c      	ldr	r5, [pc, #48]	; (8004090 <__libc_init_array+0x38>)
 800405e:	4c0d      	ldr	r4, [pc, #52]	; (8004094 <__libc_init_array+0x3c>)
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	2600      	movs	r6, #0
 800406a:	f000 f821 	bl	80040b0 <_init>
 800406e:	4d0a      	ldr	r5, [pc, #40]	; (8004098 <__libc_init_array+0x40>)
 8004070:	4c0a      	ldr	r4, [pc, #40]	; (800409c <__libc_init_array+0x44>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	00b3      	lsls	r3, r6, #2
 800407e:	58eb      	ldr	r3, [r5, r3]
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	00b3      	lsls	r3, r6, #2
 8004088:	58eb      	ldr	r3, [r5, r3]
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	0800413c 	.word	0x0800413c
 8004094:	0800413c 	.word	0x0800413c
 8004098:	0800413c 	.word	0x0800413c
 800409c:	08004140 	.word	0x08004140

080040a0 <memset>:
 80040a0:	0003      	movs	r3, r0
 80040a2:	1812      	adds	r2, r2, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d100      	bne.n	80040aa <memset+0xa>
 80040a8:	4770      	bx	lr
 80040aa:	7019      	strb	r1, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	e7f9      	b.n	80040a4 <memset+0x4>

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
