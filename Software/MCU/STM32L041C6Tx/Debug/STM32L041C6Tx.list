
STM32L041C6Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000078  08006130  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08006130  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e29  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc4  00000000  00000000  00033ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00036b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  00037a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013785  00000000  00000000  000387e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f563  00000000  00000000  0004bf65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070a79  00000000  00000000  0005b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbf41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000362c  00000000  00000000  000cbfbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fb0 	.word	0x08005fb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005fb0 	.word	0x08005fb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb67 	bl	80008fc <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fae9 	bl	8000810 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb59 	bl	80008fc <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb4f 	bl	80008fc <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 faf7 	bl	8000860 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faed 	bl	8000860 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	1c08      	adds	r0, r1, #0
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	; (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f848 	bl	8000358 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4647      	mov	r7, r8
 80002da:	0415      	lsls	r5, r2, #16
 80002dc:	0c2d      	lsrs	r5, r5, #16
 80002de:	002e      	movs	r6, r5
 80002e0:	b580      	push	{r7, lr}
 80002e2:	0407      	lsls	r7, r0, #16
 80002e4:	0c14      	lsrs	r4, r2, #16
 80002e6:	0c3f      	lsrs	r7, r7, #16
 80002e8:	4699      	mov	r9, r3
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	437e      	muls	r6, r7
 80002ee:	435d      	muls	r5, r3
 80002f0:	4367      	muls	r7, r4
 80002f2:	4363      	muls	r3, r4
 80002f4:	197f      	adds	r7, r7, r5
 80002f6:	0c34      	lsrs	r4, r6, #16
 80002f8:	19e4      	adds	r4, r4, r7
 80002fa:	469c      	mov	ip, r3
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d903      	bls.n	8000308 <__aeabi_lmul+0x34>
 8000300:	2380      	movs	r3, #128	; 0x80
 8000302:	025b      	lsls	r3, r3, #9
 8000304:	4698      	mov	r8, r3
 8000306:	44c4      	add	ip, r8
 8000308:	464b      	mov	r3, r9
 800030a:	4343      	muls	r3, r0
 800030c:	4351      	muls	r1, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	0436      	lsls	r6, r6, #16
 8000312:	4465      	add	r5, ip
 8000314:	0c36      	lsrs	r6, r6, #16
 8000316:	0424      	lsls	r4, r4, #16
 8000318:	19a4      	adds	r4, r4, r6
 800031a:	195b      	adds	r3, r3, r5
 800031c:	1859      	adds	r1, r3, r1
 800031e:	0020      	movs	r0, r4
 8000320:	bc0c      	pop	{r2, r3}
 8000322:	4690      	mov	r8, r2
 8000324:	4699      	mov	r9, r3
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000328 <__aeabi_f2uiz>:
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	b510      	push	{r4, lr}
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	1c04      	adds	r4, r0, #0
 8000330:	f7ff ffa6 	bl	8000280 <__aeabi_fcmpge>
 8000334:	2800      	cmp	r0, #0
 8000336:	d103      	bne.n	8000340 <__aeabi_f2uiz+0x18>
 8000338:	1c20      	adds	r0, r4, #0
 800033a:	f000 fe25 	bl	8000f88 <__aeabi_f2iz>
 800033e:	bd10      	pop	{r4, pc}
 8000340:	219e      	movs	r1, #158	; 0x9e
 8000342:	1c20      	adds	r0, r4, #0
 8000344:	05c9      	lsls	r1, r1, #23
 8000346:	f000 fc5b 	bl	8000c00 <__aeabi_fsub>
 800034a:	f000 fe1d 	bl	8000f88 <__aeabi_f2iz>
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	061b      	lsls	r3, r3, #24
 8000352:	469c      	mov	ip, r3
 8000354:	4460      	add	r0, ip
 8000356:	e7f2      	b.n	800033e <__aeabi_f2uiz+0x16>

08000358 <__udivmoddi4>:
 8000358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800035a:	464f      	mov	r7, r9
 800035c:	4646      	mov	r6, r8
 800035e:	46d6      	mov	lr, sl
 8000360:	b5c0      	push	{r6, r7, lr}
 8000362:	0004      	movs	r4, r0
 8000364:	b082      	sub	sp, #8
 8000366:	000d      	movs	r5, r1
 8000368:	4691      	mov	r9, r2
 800036a:	4698      	mov	r8, r3
 800036c:	428b      	cmp	r3, r1
 800036e:	d82f      	bhi.n	80003d0 <__udivmoddi4+0x78>
 8000370:	d02c      	beq.n	80003cc <__udivmoddi4+0x74>
 8000372:	4641      	mov	r1, r8
 8000374:	4648      	mov	r0, r9
 8000376:	f000 fecf 	bl	8001118 <__clzdi2>
 800037a:	0029      	movs	r1, r5
 800037c:	0006      	movs	r6, r0
 800037e:	0020      	movs	r0, r4
 8000380:	f000 feca 	bl	8001118 <__clzdi2>
 8000384:	1a33      	subs	r3, r6, r0
 8000386:	469c      	mov	ip, r3
 8000388:	3b20      	subs	r3, #32
 800038a:	469a      	mov	sl, r3
 800038c:	d500      	bpl.n	8000390 <__udivmoddi4+0x38>
 800038e:	e076      	b.n	800047e <__udivmoddi4+0x126>
 8000390:	464b      	mov	r3, r9
 8000392:	4652      	mov	r2, sl
 8000394:	4093      	lsls	r3, r2
 8000396:	001f      	movs	r7, r3
 8000398:	464b      	mov	r3, r9
 800039a:	4662      	mov	r2, ip
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d828      	bhi.n	80003f6 <__udivmoddi4+0x9e>
 80003a4:	d025      	beq.n	80003f2 <__udivmoddi4+0x9a>
 80003a6:	4653      	mov	r3, sl
 80003a8:	1ba4      	subs	r4, r4, r6
 80003aa:	41bd      	sbcs	r5, r7
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	da00      	bge.n	80003b2 <__udivmoddi4+0x5a>
 80003b0:	e07b      	b.n	80004aa <__udivmoddi4+0x152>
 80003b2:	2200      	movs	r2, #0
 80003b4:	2300      	movs	r3, #0
 80003b6:	9200      	str	r2, [sp, #0]
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	2301      	movs	r3, #1
 80003bc:	4652      	mov	r2, sl
 80003be:	4093      	lsls	r3, r2
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	2301      	movs	r3, #1
 80003c4:	4662      	mov	r2, ip
 80003c6:	4093      	lsls	r3, r2
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	e018      	b.n	80003fe <__udivmoddi4+0xa6>
 80003cc:	4282      	cmp	r2, r0
 80003ce:	d9d0      	bls.n	8000372 <__udivmoddi4+0x1a>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <__udivmoddi4+0x8a>
 80003de:	601c      	str	r4, [r3, #0]
 80003e0:	605d      	str	r5, [r3, #4]
 80003e2:	9800      	ldr	r0, [sp, #0]
 80003e4:	9901      	ldr	r1, [sp, #4]
 80003e6:	b002      	add	sp, #8
 80003e8:	bc1c      	pop	{r2, r3, r4}
 80003ea:	4690      	mov	r8, r2
 80003ec:	4699      	mov	r9, r3
 80003ee:	46a2      	mov	sl, r4
 80003f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f2:	42a3      	cmp	r3, r4
 80003f4:	d9d7      	bls.n	80003a6 <__udivmoddi4+0x4e>
 80003f6:	2200      	movs	r2, #0
 80003f8:	2300      	movs	r3, #0
 80003fa:	9200      	str	r2, [sp, #0]
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	4663      	mov	r3, ip
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0e9      	beq.n	80003d8 <__udivmoddi4+0x80>
 8000404:	07fb      	lsls	r3, r7, #31
 8000406:	4698      	mov	r8, r3
 8000408:	4641      	mov	r1, r8
 800040a:	0872      	lsrs	r2, r6, #1
 800040c:	430a      	orrs	r2, r1
 800040e:	087b      	lsrs	r3, r7, #1
 8000410:	4666      	mov	r6, ip
 8000412:	e00e      	b.n	8000432 <__udivmoddi4+0xda>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d101      	bne.n	800041c <__udivmoddi4+0xc4>
 8000418:	42a2      	cmp	r2, r4
 800041a:	d80c      	bhi.n	8000436 <__udivmoddi4+0xde>
 800041c:	1aa4      	subs	r4, r4, r2
 800041e:	419d      	sbcs	r5, r3
 8000420:	2001      	movs	r0, #1
 8000422:	1924      	adds	r4, r4, r4
 8000424:	416d      	adcs	r5, r5
 8000426:	2100      	movs	r1, #0
 8000428:	3e01      	subs	r6, #1
 800042a:	1824      	adds	r4, r4, r0
 800042c:	414d      	adcs	r5, r1
 800042e:	2e00      	cmp	r6, #0
 8000430:	d006      	beq.n	8000440 <__udivmoddi4+0xe8>
 8000432:	42ab      	cmp	r3, r5
 8000434:	d9ee      	bls.n	8000414 <__udivmoddi4+0xbc>
 8000436:	3e01      	subs	r6, #1
 8000438:	1924      	adds	r4, r4, r4
 800043a:	416d      	adcs	r5, r5
 800043c:	2e00      	cmp	r6, #0
 800043e:	d1f8      	bne.n	8000432 <__udivmoddi4+0xda>
 8000440:	9800      	ldr	r0, [sp, #0]
 8000442:	9901      	ldr	r1, [sp, #4]
 8000444:	4653      	mov	r3, sl
 8000446:	1900      	adds	r0, r0, r4
 8000448:	4169      	adcs	r1, r5
 800044a:	2b00      	cmp	r3, #0
 800044c:	db23      	blt.n	8000496 <__udivmoddi4+0x13e>
 800044e:	002b      	movs	r3, r5
 8000450:	4652      	mov	r2, sl
 8000452:	40d3      	lsrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	4664      	mov	r4, ip
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	4653      	mov	r3, sl
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	db2d      	blt.n	80004c0 <__udivmoddi4+0x168>
 8000464:	0026      	movs	r6, r4
 8000466:	4657      	mov	r7, sl
 8000468:	40be      	lsls	r6, r7
 800046a:	0033      	movs	r3, r6
 800046c:	0026      	movs	r6, r4
 800046e:	4667      	mov	r7, ip
 8000470:	40be      	lsls	r6, r7
 8000472:	0032      	movs	r2, r6
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	4199      	sbcs	r1, r3
 8000478:	9000      	str	r0, [sp, #0]
 800047a:	9101      	str	r1, [sp, #4]
 800047c:	e7ac      	b.n	80003d8 <__udivmoddi4+0x80>
 800047e:	4662      	mov	r2, ip
 8000480:	2320      	movs	r3, #32
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	464a      	mov	r2, r9
 8000486:	40da      	lsrs	r2, r3
 8000488:	4661      	mov	r1, ip
 800048a:	0013      	movs	r3, r2
 800048c:	4642      	mov	r2, r8
 800048e:	408a      	lsls	r2, r1
 8000490:	0017      	movs	r7, r2
 8000492:	431f      	orrs	r7, r3
 8000494:	e780      	b.n	8000398 <__udivmoddi4+0x40>
 8000496:	4662      	mov	r2, ip
 8000498:	2320      	movs	r3, #32
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	002a      	movs	r2, r5
 800049e:	4666      	mov	r6, ip
 80004a0:	409a      	lsls	r2, r3
 80004a2:	0023      	movs	r3, r4
 80004a4:	40f3      	lsrs	r3, r6
 80004a6:	4313      	orrs	r3, r2
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0xfc>
 80004aa:	4662      	mov	r2, ip
 80004ac:	2320      	movs	r3, #32
 80004ae:	2100      	movs	r1, #0
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	2200      	movs	r2, #0
 80004b4:	9100      	str	r1, [sp, #0]
 80004b6:	9201      	str	r2, [sp, #4]
 80004b8:	2201      	movs	r2, #1
 80004ba:	40da      	lsrs	r2, r3
 80004bc:	9201      	str	r2, [sp, #4]
 80004be:	e780      	b.n	80003c2 <__udivmoddi4+0x6a>
 80004c0:	2320      	movs	r3, #32
 80004c2:	4662      	mov	r2, ip
 80004c4:	0026      	movs	r6, r4
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	40de      	lsrs	r6, r3
 80004ca:	002f      	movs	r7, r5
 80004cc:	46b0      	mov	r8, r6
 80004ce:	4666      	mov	r6, ip
 80004d0:	40b7      	lsls	r7, r6
 80004d2:	4646      	mov	r6, r8
 80004d4:	003b      	movs	r3, r7
 80004d6:	4333      	orrs	r3, r6
 80004d8:	e7c8      	b.n	800046c <__udivmoddi4+0x114>
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fadd>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	4647      	mov	r7, r8
 80004e0:	46ce      	mov	lr, r9
 80004e2:	0243      	lsls	r3, r0, #9
 80004e4:	0a5b      	lsrs	r3, r3, #9
 80004e6:	0044      	lsls	r4, r0, #1
 80004e8:	0fc2      	lsrs	r2, r0, #31
 80004ea:	469c      	mov	ip, r3
 80004ec:	0048      	lsls	r0, r1, #1
 80004ee:	00dd      	lsls	r5, r3, #3
 80004f0:	024b      	lsls	r3, r1, #9
 80004f2:	0e24      	lsrs	r4, r4, #24
 80004f4:	0a5b      	lsrs	r3, r3, #9
 80004f6:	0e00      	lsrs	r0, r0, #24
 80004f8:	b580      	push	{r7, lr}
 80004fa:	4698      	mov	r8, r3
 80004fc:	0026      	movs	r6, r4
 80004fe:	4691      	mov	r9, r2
 8000500:	0fc9      	lsrs	r1, r1, #31
 8000502:	00db      	lsls	r3, r3, #3
 8000504:	1a27      	subs	r7, r4, r0
 8000506:	428a      	cmp	r2, r1
 8000508:	d029      	beq.n	800055e <__aeabi_fadd+0x82>
 800050a:	2f00      	cmp	r7, #0
 800050c:	dd15      	ble.n	800053a <__aeabi_fadd+0x5e>
 800050e:	2800      	cmp	r0, #0
 8000510:	d14a      	bne.n	80005a8 <__aeabi_fadd+0xcc>
 8000512:	2b00      	cmp	r3, #0
 8000514:	d000      	beq.n	8000518 <__aeabi_fadd+0x3c>
 8000516:	e095      	b.n	8000644 <__aeabi_fadd+0x168>
 8000518:	08ed      	lsrs	r5, r5, #3
 800051a:	2cff      	cmp	r4, #255	; 0xff
 800051c:	d100      	bne.n	8000520 <__aeabi_fadd+0x44>
 800051e:	e088      	b.n	8000632 <__aeabi_fadd+0x156>
 8000520:	026b      	lsls	r3, r5, #9
 8000522:	0a5b      	lsrs	r3, r3, #9
 8000524:	b2e6      	uxtb	r6, r4
 8000526:	025b      	lsls	r3, r3, #9
 8000528:	05f6      	lsls	r6, r6, #23
 800052a:	0a58      	lsrs	r0, r3, #9
 800052c:	4330      	orrs	r0, r6
 800052e:	07d2      	lsls	r2, r2, #31
 8000530:	4310      	orrs	r0, r2
 8000532:	bc0c      	pop	{r2, r3}
 8000534:	4690      	mov	r8, r2
 8000536:	4699      	mov	r9, r3
 8000538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800053a:	2f00      	cmp	r7, #0
 800053c:	d000      	beq.n	8000540 <__aeabi_fadd+0x64>
 800053e:	e087      	b.n	8000650 <__aeabi_fadd+0x174>
 8000540:	1c60      	adds	r0, r4, #1
 8000542:	b2c0      	uxtb	r0, r0
 8000544:	2801      	cmp	r0, #1
 8000546:	dc00      	bgt.n	800054a <__aeabi_fadd+0x6e>
 8000548:	e0b6      	b.n	80006b8 <__aeabi_fadd+0x1dc>
 800054a:	1aee      	subs	r6, r5, r3
 800054c:	0172      	lsls	r2, r6, #5
 800054e:	d500      	bpl.n	8000552 <__aeabi_fadd+0x76>
 8000550:	e0c5      	b.n	80006de <__aeabi_fadd+0x202>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d13d      	bne.n	80005d2 <__aeabi_fadd+0xf6>
 8000556:	2200      	movs	r2, #0
 8000558:	2600      	movs	r6, #0
 800055a:	2300      	movs	r3, #0
 800055c:	e7e3      	b.n	8000526 <__aeabi_fadd+0x4a>
 800055e:	2f00      	cmp	r7, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_fadd+0x88>
 8000562:	e096      	b.n	8000692 <__aeabi_fadd+0x1b6>
 8000564:	2800      	cmp	r0, #0
 8000566:	d05d      	beq.n	8000624 <__aeabi_fadd+0x148>
 8000568:	2cff      	cmp	r4, #255	; 0xff
 800056a:	d060      	beq.n	800062e <__aeabi_fadd+0x152>
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	04d2      	lsls	r2, r2, #19
 8000570:	4313      	orrs	r3, r2
 8000572:	2f1b      	cmp	r7, #27
 8000574:	dd00      	ble.n	8000578 <__aeabi_fadd+0x9c>
 8000576:	e0ec      	b.n	8000752 <__aeabi_fadd+0x276>
 8000578:	2220      	movs	r2, #32
 800057a:	1bd2      	subs	r2, r2, r7
 800057c:	0018      	movs	r0, r3
 800057e:	4093      	lsls	r3, r2
 8000580:	40f8      	lsrs	r0, r7
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	4193      	sbcs	r3, r2
 8000586:	4303      	orrs	r3, r0
 8000588:	18ed      	adds	r5, r5, r3
 800058a:	016b      	lsls	r3, r5, #5
 800058c:	d57b      	bpl.n	8000686 <__aeabi_fadd+0x1aa>
 800058e:	3401      	adds	r4, #1
 8000590:	2cff      	cmp	r4, #255	; 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0xba>
 8000594:	e0b7      	b.n	8000706 <__aeabi_fadd+0x22a>
 8000596:	2201      	movs	r2, #1
 8000598:	2607      	movs	r6, #7
 800059a:	402a      	ands	r2, r5
 800059c:	086b      	lsrs	r3, r5, #1
 800059e:	4d9a      	ldr	r5, [pc, #616]	; (8000808 <__aeabi_fadd+0x32c>)
 80005a0:	401d      	ands	r5, r3
 80005a2:	4315      	orrs	r5, r2
 80005a4:	402e      	ands	r6, r5
 80005a6:	e029      	b.n	80005fc <__aeabi_fadd+0x120>
 80005a8:	2cff      	cmp	r4, #255	; 0xff
 80005aa:	d0b5      	beq.n	8000518 <__aeabi_fadd+0x3c>
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	04d2      	lsls	r2, r2, #19
 80005b0:	4313      	orrs	r3, r2
 80005b2:	2f1b      	cmp	r7, #27
 80005b4:	dd00      	ble.n	80005b8 <__aeabi_fadd+0xdc>
 80005b6:	e0b2      	b.n	800071e <__aeabi_fadd+0x242>
 80005b8:	2220      	movs	r2, #32
 80005ba:	1bd2      	subs	r2, r2, r7
 80005bc:	0019      	movs	r1, r3
 80005be:	4093      	lsls	r3, r2
 80005c0:	40f9      	lsrs	r1, r7
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	4193      	sbcs	r3, r2
 80005c6:	430b      	orrs	r3, r1
 80005c8:	1aed      	subs	r5, r5, r3
 80005ca:	016b      	lsls	r3, r5, #5
 80005cc:	d55b      	bpl.n	8000686 <__aeabi_fadd+0x1aa>
 80005ce:	01ad      	lsls	r5, r5, #6
 80005d0:	09ae      	lsrs	r6, r5, #6
 80005d2:	0030      	movs	r0, r6
 80005d4:	f000 fd82 	bl	80010dc <__clzsi2>
 80005d8:	3805      	subs	r0, #5
 80005da:	4086      	lsls	r6, r0
 80005dc:	4284      	cmp	r4, r0
 80005de:	dc65      	bgt.n	80006ac <__aeabi_fadd+0x1d0>
 80005e0:	1b04      	subs	r4, r0, r4
 80005e2:	0033      	movs	r3, r6
 80005e4:	2020      	movs	r0, #32
 80005e6:	3401      	adds	r4, #1
 80005e8:	40e3      	lsrs	r3, r4
 80005ea:	1b04      	subs	r4, r0, r4
 80005ec:	40a6      	lsls	r6, r4
 80005ee:	1e75      	subs	r5, r6, #1
 80005f0:	41ae      	sbcs	r6, r5
 80005f2:	4333      	orrs	r3, r6
 80005f4:	2607      	movs	r6, #7
 80005f6:	001d      	movs	r5, r3
 80005f8:	2400      	movs	r4, #0
 80005fa:	401e      	ands	r6, r3
 80005fc:	2201      	movs	r2, #1
 80005fe:	464b      	mov	r3, r9
 8000600:	401a      	ands	r2, r3
 8000602:	2e00      	cmp	r6, #0
 8000604:	d004      	beq.n	8000610 <__aeabi_fadd+0x134>
 8000606:	230f      	movs	r3, #15
 8000608:	402b      	ands	r3, r5
 800060a:	2b04      	cmp	r3, #4
 800060c:	d000      	beq.n	8000610 <__aeabi_fadd+0x134>
 800060e:	3504      	adds	r5, #4
 8000610:	016b      	lsls	r3, r5, #5
 8000612:	d400      	bmi.n	8000616 <__aeabi_fadd+0x13a>
 8000614:	e780      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000616:	3401      	adds	r4, #1
 8000618:	b2e6      	uxtb	r6, r4
 800061a:	2cff      	cmp	r4, #255	; 0xff
 800061c:	d12f      	bne.n	800067e <__aeabi_fadd+0x1a2>
 800061e:	26ff      	movs	r6, #255	; 0xff
 8000620:	2300      	movs	r3, #0
 8000622:	e780      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d152      	bne.n	80006ce <__aeabi_fadd+0x1f2>
 8000628:	2cff      	cmp	r4, #255	; 0xff
 800062a:	d000      	beq.n	800062e <__aeabi_fadd+0x152>
 800062c:	e774      	b.n	8000518 <__aeabi_fadd+0x3c>
 800062e:	000a      	movs	r2, r1
 8000630:	08ed      	lsrs	r5, r5, #3
 8000632:	2d00      	cmp	r5, #0
 8000634:	d0f3      	beq.n	800061e <__aeabi_fadd+0x142>
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	03db      	lsls	r3, r3, #15
 800063a:	432b      	orrs	r3, r5
 800063c:	025b      	lsls	r3, r3, #9
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	26ff      	movs	r6, #255	; 0xff
 8000642:	e770      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000644:	3f01      	subs	r7, #1
 8000646:	2f00      	cmp	r7, #0
 8000648:	d0be      	beq.n	80005c8 <__aeabi_fadd+0xec>
 800064a:	2cff      	cmp	r4, #255	; 0xff
 800064c:	d1b1      	bne.n	80005b2 <__aeabi_fadd+0xd6>
 800064e:	e763      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000650:	2c00      	cmp	r4, #0
 8000652:	d047      	beq.n	80006e4 <__aeabi_fadd+0x208>
 8000654:	28ff      	cmp	r0, #255	; 0xff
 8000656:	d069      	beq.n	800072c <__aeabi_fadd+0x250>
 8000658:	2480      	movs	r4, #128	; 0x80
 800065a:	04e4      	lsls	r4, r4, #19
 800065c:	427a      	negs	r2, r7
 800065e:	4325      	orrs	r5, r4
 8000660:	2a1b      	cmp	r2, #27
 8000662:	dd00      	ble.n	8000666 <__aeabi_fadd+0x18a>
 8000664:	e0c5      	b.n	80007f2 <__aeabi_fadd+0x316>
 8000666:	002c      	movs	r4, r5
 8000668:	2620      	movs	r6, #32
 800066a:	40d4      	lsrs	r4, r2
 800066c:	1ab2      	subs	r2, r6, r2
 800066e:	4095      	lsls	r5, r2
 8000670:	1e6a      	subs	r2, r5, #1
 8000672:	4195      	sbcs	r5, r2
 8000674:	4325      	orrs	r5, r4
 8000676:	1b5d      	subs	r5, r3, r5
 8000678:	0004      	movs	r4, r0
 800067a:	4689      	mov	r9, r1
 800067c:	e7a5      	b.n	80005ca <__aeabi_fadd+0xee>
 800067e:	01ab      	lsls	r3, r5, #6
 8000680:	0a5b      	lsrs	r3, r3, #9
 8000682:	e750      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000684:	2400      	movs	r4, #0
 8000686:	2201      	movs	r2, #1
 8000688:	464b      	mov	r3, r9
 800068a:	401a      	ands	r2, r3
 800068c:	076b      	lsls	r3, r5, #29
 800068e:	d1ba      	bne.n	8000606 <__aeabi_fadd+0x12a>
 8000690:	e742      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000692:	2f00      	cmp	r7, #0
 8000694:	d13b      	bne.n	800070e <__aeabi_fadd+0x232>
 8000696:	3401      	adds	r4, #1
 8000698:	b2e0      	uxtb	r0, r4
 800069a:	2801      	cmp	r0, #1
 800069c:	dd4a      	ble.n	8000734 <__aeabi_fadd+0x258>
 800069e:	2cff      	cmp	r4, #255	; 0xff
 80006a0:	d0bd      	beq.n	800061e <__aeabi_fadd+0x142>
 80006a2:	2607      	movs	r6, #7
 80006a4:	18ed      	adds	r5, r5, r3
 80006a6:	086d      	lsrs	r5, r5, #1
 80006a8:	402e      	ands	r6, r5
 80006aa:	e7a7      	b.n	80005fc <__aeabi_fadd+0x120>
 80006ac:	2307      	movs	r3, #7
 80006ae:	4d57      	ldr	r5, [pc, #348]	; (800080c <__aeabi_fadd+0x330>)
 80006b0:	1a24      	subs	r4, r4, r0
 80006b2:	4035      	ands	r5, r6
 80006b4:	401e      	ands	r6, r3
 80006b6:	e7a1      	b.n	80005fc <__aeabi_fadd+0x120>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d11b      	bne.n	80006f4 <__aeabi_fadd+0x218>
 80006bc:	2d00      	cmp	r5, #0
 80006be:	d16e      	bne.n	800079e <__aeabi_fadd+0x2c2>
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d100      	bne.n	80006c6 <__aeabi_fadd+0x1ea>
 80006c4:	e09a      	b.n	80007fc <__aeabi_fadd+0x320>
 80006c6:	000a      	movs	r2, r1
 80006c8:	001d      	movs	r5, r3
 80006ca:	003c      	movs	r4, r7
 80006cc:	e724      	b.n	8000518 <__aeabi_fadd+0x3c>
 80006ce:	3f01      	subs	r7, #1
 80006d0:	2f00      	cmp	r7, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x1fa>
 80006d4:	e758      	b.n	8000588 <__aeabi_fadd+0xac>
 80006d6:	2cff      	cmp	r4, #255	; 0xff
 80006d8:	d000      	beq.n	80006dc <__aeabi_fadd+0x200>
 80006da:	e74a      	b.n	8000572 <__aeabi_fadd+0x96>
 80006dc:	e7a7      	b.n	800062e <__aeabi_fadd+0x152>
 80006de:	1b5e      	subs	r6, r3, r5
 80006e0:	4689      	mov	r9, r1
 80006e2:	e776      	b.n	80005d2 <__aeabi_fadd+0xf6>
 80006e4:	2d00      	cmp	r5, #0
 80006e6:	d11c      	bne.n	8000722 <__aeabi_fadd+0x246>
 80006e8:	000a      	movs	r2, r1
 80006ea:	28ff      	cmp	r0, #255	; 0xff
 80006ec:	d01f      	beq.n	800072e <__aeabi_fadd+0x252>
 80006ee:	0004      	movs	r4, r0
 80006f0:	001d      	movs	r5, r3
 80006f2:	e711      	b.n	8000518 <__aeabi_fadd+0x3c>
 80006f4:	2d00      	cmp	r5, #0
 80006f6:	d15d      	bne.n	80007b4 <__aeabi_fadd+0x2d8>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d117      	bne.n	800072c <__aeabi_fadd+0x250>
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	2200      	movs	r2, #0
 8000700:	03db      	lsls	r3, r3, #15
 8000702:	26ff      	movs	r6, #255	; 0xff
 8000704:	e70f      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000706:	000a      	movs	r2, r1
 8000708:	26ff      	movs	r6, #255	; 0xff
 800070a:	2300      	movs	r3, #0
 800070c:	e70b      	b.n	8000526 <__aeabi_fadd+0x4a>
 800070e:	2c00      	cmp	r4, #0
 8000710:	d121      	bne.n	8000756 <__aeabi_fadd+0x27a>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d166      	bne.n	80007e4 <__aeabi_fadd+0x308>
 8000716:	28ff      	cmp	r0, #255	; 0xff
 8000718:	d1e9      	bne.n	80006ee <__aeabi_fadd+0x212>
 800071a:	001d      	movs	r5, r3
 800071c:	e787      	b.n	800062e <__aeabi_fadd+0x152>
 800071e:	2301      	movs	r3, #1
 8000720:	e752      	b.n	80005c8 <__aeabi_fadd+0xec>
 8000722:	1c7a      	adds	r2, r7, #1
 8000724:	d0a7      	beq.n	8000676 <__aeabi_fadd+0x19a>
 8000726:	43fa      	mvns	r2, r7
 8000728:	28ff      	cmp	r0, #255	; 0xff
 800072a:	d199      	bne.n	8000660 <__aeabi_fadd+0x184>
 800072c:	000a      	movs	r2, r1
 800072e:	001d      	movs	r5, r3
 8000730:	24ff      	movs	r4, #255	; 0xff
 8000732:	e6f1      	b.n	8000518 <__aeabi_fadd+0x3c>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d121      	bne.n	800077c <__aeabi_fadd+0x2a0>
 8000738:	2d00      	cmp	r5, #0
 800073a:	d04f      	beq.n	80007dc <__aeabi_fadd+0x300>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d04c      	beq.n	80007da <__aeabi_fadd+0x2fe>
 8000740:	18ed      	adds	r5, r5, r3
 8000742:	016b      	lsls	r3, r5, #5
 8000744:	d59e      	bpl.n	8000684 <__aeabi_fadd+0x1a8>
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <__aeabi_fadd+0x330>)
 8000748:	3607      	adds	r6, #7
 800074a:	402e      	ands	r6, r5
 800074c:	2401      	movs	r4, #1
 800074e:	401d      	ands	r5, r3
 8000750:	e754      	b.n	80005fc <__aeabi_fadd+0x120>
 8000752:	2301      	movs	r3, #1
 8000754:	e718      	b.n	8000588 <__aeabi_fadd+0xac>
 8000756:	28ff      	cmp	r0, #255	; 0xff
 8000758:	d0df      	beq.n	800071a <__aeabi_fadd+0x23e>
 800075a:	2480      	movs	r4, #128	; 0x80
 800075c:	04e4      	lsls	r4, r4, #19
 800075e:	427f      	negs	r7, r7
 8000760:	4325      	orrs	r5, r4
 8000762:	2f1b      	cmp	r7, #27
 8000764:	dc4d      	bgt.n	8000802 <__aeabi_fadd+0x326>
 8000766:	2620      	movs	r6, #32
 8000768:	1bf6      	subs	r6, r6, r7
 800076a:	002c      	movs	r4, r5
 800076c:	40b5      	lsls	r5, r6
 800076e:	40fc      	lsrs	r4, r7
 8000770:	1e6a      	subs	r2, r5, #1
 8000772:	4195      	sbcs	r5, r2
 8000774:	4325      	orrs	r5, r4
 8000776:	18ed      	adds	r5, r5, r3
 8000778:	0004      	movs	r4, r0
 800077a:	e706      	b.n	800058a <__aeabi_fadd+0xae>
 800077c:	2d00      	cmp	r5, #0
 800077e:	d0cc      	beq.n	800071a <__aeabi_fadd+0x23e>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x2aa>
 8000784:	e753      	b.n	800062e <__aeabi_fadd+0x152>
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4660      	mov	r0, ip
 800078a:	03c9      	lsls	r1, r1, #15
 800078c:	4208      	tst	r0, r1
 800078e:	d003      	beq.n	8000798 <__aeabi_fadd+0x2bc>
 8000790:	4640      	mov	r0, r8
 8000792:	4208      	tst	r0, r1
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2bc>
 8000796:	001d      	movs	r5, r3
 8000798:	2101      	movs	r1, #1
 800079a:	4011      	ands	r1, r2
 800079c:	e747      	b.n	800062e <__aeabi_fadd+0x152>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x2c8>
 80007a2:	e6b9      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007a4:	1aea      	subs	r2, r5, r3
 80007a6:	0150      	lsls	r0, r2, #5
 80007a8:	d525      	bpl.n	80007f6 <__aeabi_fadd+0x31a>
 80007aa:	2607      	movs	r6, #7
 80007ac:	1b5d      	subs	r5, r3, r5
 80007ae:	402e      	ands	r6, r5
 80007b0:	4689      	mov	r9, r1
 80007b2:	e723      	b.n	80005fc <__aeabi_fadd+0x120>
 80007b4:	24ff      	movs	r4, #255	; 0xff
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x2e0>
 80007ba:	e6ad      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007bc:	2280      	movs	r2, #128	; 0x80
 80007be:	4660      	mov	r0, ip
 80007c0:	03d2      	lsls	r2, r2, #15
 80007c2:	4210      	tst	r0, r2
 80007c4:	d004      	beq.n	80007d0 <__aeabi_fadd+0x2f4>
 80007c6:	4640      	mov	r0, r8
 80007c8:	4210      	tst	r0, r2
 80007ca:	d101      	bne.n	80007d0 <__aeabi_fadd+0x2f4>
 80007cc:	001d      	movs	r5, r3
 80007ce:	4689      	mov	r9, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	464b      	mov	r3, r9
 80007d4:	24ff      	movs	r4, #255	; 0xff
 80007d6:	401a      	ands	r2, r3
 80007d8:	e69e      	b.n	8000518 <__aeabi_fadd+0x3c>
 80007da:	002b      	movs	r3, r5
 80007dc:	08dd      	lsrs	r5, r3, #3
 80007de:	000a      	movs	r2, r1
 80007e0:	2400      	movs	r4, #0
 80007e2:	e69d      	b.n	8000520 <__aeabi_fadd+0x44>
 80007e4:	1c7a      	adds	r2, r7, #1
 80007e6:	d0c6      	beq.n	8000776 <__aeabi_fadd+0x29a>
 80007e8:	43ff      	mvns	r7, r7
 80007ea:	28ff      	cmp	r0, #255	; 0xff
 80007ec:	d1b9      	bne.n	8000762 <__aeabi_fadd+0x286>
 80007ee:	001d      	movs	r5, r3
 80007f0:	e71d      	b.n	800062e <__aeabi_fadd+0x152>
 80007f2:	2501      	movs	r5, #1
 80007f4:	e73f      	b.n	8000676 <__aeabi_fadd+0x19a>
 80007f6:	1e15      	subs	r5, r2, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_fadd+0x320>
 80007fa:	e744      	b.n	8000686 <__aeabi_fadd+0x1aa>
 80007fc:	2200      	movs	r2, #0
 80007fe:	2300      	movs	r3, #0
 8000800:	e691      	b.n	8000526 <__aeabi_fadd+0x4a>
 8000802:	2501      	movs	r5, #1
 8000804:	e7b7      	b.n	8000776 <__aeabi_fadd+0x29a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	7dffffff 	.word	0x7dffffff
 800080c:	fbffffff 	.word	0xfbffffff

08000810 <__eqsf2>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	0042      	lsls	r2, r0, #1
 8000814:	024e      	lsls	r6, r1, #9
 8000816:	004c      	lsls	r4, r1, #1
 8000818:	0245      	lsls	r5, r0, #9
 800081a:	0a6d      	lsrs	r5, r5, #9
 800081c:	0e12      	lsrs	r2, r2, #24
 800081e:	0fc3      	lsrs	r3, r0, #31
 8000820:	0a76      	lsrs	r6, r6, #9
 8000822:	0e24      	lsrs	r4, r4, #24
 8000824:	0fc9      	lsrs	r1, r1, #31
 8000826:	2aff      	cmp	r2, #255	; 0xff
 8000828:	d00f      	beq.n	800084a <__eqsf2+0x3a>
 800082a:	2cff      	cmp	r4, #255	; 0xff
 800082c:	d011      	beq.n	8000852 <__eqsf2+0x42>
 800082e:	2001      	movs	r0, #1
 8000830:	42a2      	cmp	r2, r4
 8000832:	d000      	beq.n	8000836 <__eqsf2+0x26>
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	42b5      	cmp	r5, r6
 8000838:	d1fc      	bne.n	8000834 <__eqsf2+0x24>
 800083a:	428b      	cmp	r3, r1
 800083c:	d00d      	beq.n	800085a <__eqsf2+0x4a>
 800083e:	2a00      	cmp	r2, #0
 8000840:	d1f8      	bne.n	8000834 <__eqsf2+0x24>
 8000842:	0028      	movs	r0, r5
 8000844:	1e45      	subs	r5, r0, #1
 8000846:	41a8      	sbcs	r0, r5
 8000848:	e7f4      	b.n	8000834 <__eqsf2+0x24>
 800084a:	2001      	movs	r0, #1
 800084c:	2d00      	cmp	r5, #0
 800084e:	d1f1      	bne.n	8000834 <__eqsf2+0x24>
 8000850:	e7eb      	b.n	800082a <__eqsf2+0x1a>
 8000852:	2001      	movs	r0, #1
 8000854:	2e00      	cmp	r6, #0
 8000856:	d1ed      	bne.n	8000834 <__eqsf2+0x24>
 8000858:	e7e9      	b.n	800082e <__eqsf2+0x1e>
 800085a:	2000      	movs	r0, #0
 800085c:	e7ea      	b.n	8000834 <__eqsf2+0x24>
 800085e:	46c0      	nop			; (mov r8, r8)

08000860 <__gesf2>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	004a      	lsls	r2, r1, #1
 8000864:	024e      	lsls	r6, r1, #9
 8000866:	0245      	lsls	r5, r0, #9
 8000868:	0044      	lsls	r4, r0, #1
 800086a:	0a6d      	lsrs	r5, r5, #9
 800086c:	0e24      	lsrs	r4, r4, #24
 800086e:	0fc3      	lsrs	r3, r0, #31
 8000870:	0a76      	lsrs	r6, r6, #9
 8000872:	0e12      	lsrs	r2, r2, #24
 8000874:	0fc9      	lsrs	r1, r1, #31
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d015      	beq.n	80008a6 <__gesf2+0x46>
 800087a:	2aff      	cmp	r2, #255	; 0xff
 800087c:	d00e      	beq.n	800089c <__gesf2+0x3c>
 800087e:	2c00      	cmp	r4, #0
 8000880:	d115      	bne.n	80008ae <__gesf2+0x4e>
 8000882:	2a00      	cmp	r2, #0
 8000884:	d101      	bne.n	800088a <__gesf2+0x2a>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d01c      	beq.n	80008c4 <__gesf2+0x64>
 800088a:	2d00      	cmp	r5, #0
 800088c:	d014      	beq.n	80008b8 <__gesf2+0x58>
 800088e:	428b      	cmp	r3, r1
 8000890:	d027      	beq.n	80008e2 <__gesf2+0x82>
 8000892:	2002      	movs	r0, #2
 8000894:	3b01      	subs	r3, #1
 8000896:	4018      	ands	r0, r3
 8000898:	3801      	subs	r0, #1
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	2e00      	cmp	r6, #0
 800089e:	d0ee      	beq.n	800087e <__gesf2+0x1e>
 80008a0:	2002      	movs	r0, #2
 80008a2:	4240      	negs	r0, r0
 80008a4:	e7f9      	b.n	800089a <__gesf2+0x3a>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	d1fa      	bne.n	80008a0 <__gesf2+0x40>
 80008aa:	2aff      	cmp	r2, #255	; 0xff
 80008ac:	d00e      	beq.n	80008cc <__gesf2+0x6c>
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d10e      	bne.n	80008d0 <__gesf2+0x70>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d0ed      	beq.n	8000892 <__gesf2+0x32>
 80008b6:	e00b      	b.n	80008d0 <__gesf2+0x70>
 80008b8:	2301      	movs	r3, #1
 80008ba:	3901      	subs	r1, #1
 80008bc:	4399      	bics	r1, r3
 80008be:	0008      	movs	r0, r1
 80008c0:	3001      	adds	r0, #1
 80008c2:	e7ea      	b.n	800089a <__gesf2+0x3a>
 80008c4:	2000      	movs	r0, #0
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d0e7      	beq.n	800089a <__gesf2+0x3a>
 80008ca:	e7e2      	b.n	8000892 <__gesf2+0x32>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d1e7      	bne.n	80008a0 <__gesf2+0x40>
 80008d0:	428b      	cmp	r3, r1
 80008d2:	d1de      	bne.n	8000892 <__gesf2+0x32>
 80008d4:	4294      	cmp	r4, r2
 80008d6:	dd05      	ble.n	80008e4 <__gesf2+0x84>
 80008d8:	2102      	movs	r1, #2
 80008da:	1e58      	subs	r0, r3, #1
 80008dc:	4008      	ands	r0, r1
 80008de:	3801      	subs	r0, #1
 80008e0:	e7db      	b.n	800089a <__gesf2+0x3a>
 80008e2:	2400      	movs	r4, #0
 80008e4:	42a2      	cmp	r2, r4
 80008e6:	dc04      	bgt.n	80008f2 <__gesf2+0x92>
 80008e8:	42b5      	cmp	r5, r6
 80008ea:	d8d2      	bhi.n	8000892 <__gesf2+0x32>
 80008ec:	2000      	movs	r0, #0
 80008ee:	42b5      	cmp	r5, r6
 80008f0:	d2d3      	bcs.n	800089a <__gesf2+0x3a>
 80008f2:	1e58      	subs	r0, r3, #1
 80008f4:	2301      	movs	r3, #1
 80008f6:	4398      	bics	r0, r3
 80008f8:	3001      	adds	r0, #1
 80008fa:	e7ce      	b.n	800089a <__gesf2+0x3a>

080008fc <__lesf2>:
 80008fc:	b530      	push	{r4, r5, lr}
 80008fe:	0042      	lsls	r2, r0, #1
 8000900:	0244      	lsls	r4, r0, #9
 8000902:	024d      	lsls	r5, r1, #9
 8000904:	0fc3      	lsrs	r3, r0, #31
 8000906:	0048      	lsls	r0, r1, #1
 8000908:	0a64      	lsrs	r4, r4, #9
 800090a:	0e12      	lsrs	r2, r2, #24
 800090c:	0a6d      	lsrs	r5, r5, #9
 800090e:	0e00      	lsrs	r0, r0, #24
 8000910:	0fc9      	lsrs	r1, r1, #31
 8000912:	2aff      	cmp	r2, #255	; 0xff
 8000914:	d012      	beq.n	800093c <__lesf2+0x40>
 8000916:	28ff      	cmp	r0, #255	; 0xff
 8000918:	d00c      	beq.n	8000934 <__lesf2+0x38>
 800091a:	2a00      	cmp	r2, #0
 800091c:	d112      	bne.n	8000944 <__lesf2+0x48>
 800091e:	2800      	cmp	r0, #0
 8000920:	d119      	bne.n	8000956 <__lesf2+0x5a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d117      	bne.n	8000956 <__lesf2+0x5a>
 8000926:	2c00      	cmp	r4, #0
 8000928:	d02b      	beq.n	8000982 <__lesf2+0x86>
 800092a:	2002      	movs	r0, #2
 800092c:	3b01      	subs	r3, #1
 800092e:	4018      	ands	r0, r3
 8000930:	3801      	subs	r0, #1
 8000932:	e026      	b.n	8000982 <__lesf2+0x86>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d0f0      	beq.n	800091a <__lesf2+0x1e>
 8000938:	2002      	movs	r0, #2
 800093a:	e022      	b.n	8000982 <__lesf2+0x86>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d1fb      	bne.n	8000938 <__lesf2+0x3c>
 8000940:	28ff      	cmp	r0, #255	; 0xff
 8000942:	d01f      	beq.n	8000984 <__lesf2+0x88>
 8000944:	2800      	cmp	r0, #0
 8000946:	d11f      	bne.n	8000988 <__lesf2+0x8c>
 8000948:	2d00      	cmp	r5, #0
 800094a:	d11d      	bne.n	8000988 <__lesf2+0x8c>
 800094c:	2002      	movs	r0, #2
 800094e:	3b01      	subs	r3, #1
 8000950:	4018      	ands	r0, r3
 8000952:	3801      	subs	r0, #1
 8000954:	e015      	b.n	8000982 <__lesf2+0x86>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d00e      	beq.n	8000978 <__lesf2+0x7c>
 800095a:	428b      	cmp	r3, r1
 800095c:	d1e5      	bne.n	800092a <__lesf2+0x2e>
 800095e:	2200      	movs	r2, #0
 8000960:	4290      	cmp	r0, r2
 8000962:	dc04      	bgt.n	800096e <__lesf2+0x72>
 8000964:	42ac      	cmp	r4, r5
 8000966:	d8e0      	bhi.n	800092a <__lesf2+0x2e>
 8000968:	2000      	movs	r0, #0
 800096a:	42ac      	cmp	r4, r5
 800096c:	d209      	bcs.n	8000982 <__lesf2+0x86>
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	2301      	movs	r3, #1
 8000972:	4398      	bics	r0, r3
 8000974:	3001      	adds	r0, #1
 8000976:	e004      	b.n	8000982 <__lesf2+0x86>
 8000978:	2301      	movs	r3, #1
 800097a:	3901      	subs	r1, #1
 800097c:	4399      	bics	r1, r3
 800097e:	0008      	movs	r0, r1
 8000980:	3001      	adds	r0, #1
 8000982:	bd30      	pop	{r4, r5, pc}
 8000984:	2d00      	cmp	r5, #0
 8000986:	d1d7      	bne.n	8000938 <__lesf2+0x3c>
 8000988:	428b      	cmp	r3, r1
 800098a:	d1ce      	bne.n	800092a <__lesf2+0x2e>
 800098c:	4282      	cmp	r2, r0
 800098e:	dde7      	ble.n	8000960 <__lesf2+0x64>
 8000990:	2102      	movs	r1, #2
 8000992:	1e58      	subs	r0, r3, #1
 8000994:	4008      	ands	r0, r1
 8000996:	3801      	subs	r0, #1
 8000998:	e7f3      	b.n	8000982 <__lesf2+0x86>
 800099a:	46c0      	nop			; (mov r8, r8)

0800099c <__aeabi_fmul>:
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	464e      	mov	r6, r9
 80009a0:	4657      	mov	r7, sl
 80009a2:	4645      	mov	r5, r8
 80009a4:	46de      	mov	lr, fp
 80009a6:	b5e0      	push	{r5, r6, r7, lr}
 80009a8:	0243      	lsls	r3, r0, #9
 80009aa:	0a5b      	lsrs	r3, r3, #9
 80009ac:	0045      	lsls	r5, r0, #1
 80009ae:	b083      	sub	sp, #12
 80009b0:	1c0f      	adds	r7, r1, #0
 80009b2:	4699      	mov	r9, r3
 80009b4:	0e2d      	lsrs	r5, r5, #24
 80009b6:	0fc6      	lsrs	r6, r0, #31
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d057      	beq.n	8000a6c <__aeabi_fmul+0xd0>
 80009bc:	2dff      	cmp	r5, #255	; 0xff
 80009be:	d024      	beq.n	8000a0a <__aeabi_fmul+0x6e>
 80009c0:	2080      	movs	r0, #128	; 0x80
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	04c0      	lsls	r0, r0, #19
 80009c6:	4318      	orrs	r0, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	4681      	mov	r9, r0
 80009cc:	469a      	mov	sl, r3
 80009ce:	469b      	mov	fp, r3
 80009d0:	3d7f      	subs	r5, #127	; 0x7f
 80009d2:	027c      	lsls	r4, r7, #9
 80009d4:	007a      	lsls	r2, r7, #1
 80009d6:	0ffb      	lsrs	r3, r7, #31
 80009d8:	0a64      	lsrs	r4, r4, #9
 80009da:	0e12      	lsrs	r2, r2, #24
 80009dc:	4698      	mov	r8, r3
 80009de:	d023      	beq.n	8000a28 <__aeabi_fmul+0x8c>
 80009e0:	2aff      	cmp	r2, #255	; 0xff
 80009e2:	d04b      	beq.n	8000a7c <__aeabi_fmul+0xe0>
 80009e4:	00e3      	lsls	r3, r4, #3
 80009e6:	2480      	movs	r4, #128	; 0x80
 80009e8:	2000      	movs	r0, #0
 80009ea:	04e4      	lsls	r4, r4, #19
 80009ec:	3a7f      	subs	r2, #127	; 0x7f
 80009ee:	431c      	orrs	r4, r3
 80009f0:	18ad      	adds	r5, r5, r2
 80009f2:	1c6b      	adds	r3, r5, #1
 80009f4:	4647      	mov	r7, r8
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4653      	mov	r3, sl
 80009fa:	4077      	eors	r7, r6
 80009fc:	003a      	movs	r2, r7
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d848      	bhi.n	8000a94 <__aeabi_fmul+0xf8>
 8000a02:	497d      	ldr	r1, [pc, #500]	; (8000bf8 <__aeabi_fmul+0x25c>)
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	58cb      	ldr	r3, [r1, r3]
 8000a08:	469f      	mov	pc, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_fmul+0x74>
 8000a0e:	e085      	b.n	8000b1c <__aeabi_fmul+0x180>
 8000a10:	3308      	adds	r3, #8
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b06      	subs	r3, #6
 8000a16:	469b      	mov	fp, r3
 8000a18:	027c      	lsls	r4, r7, #9
 8000a1a:	007a      	lsls	r2, r7, #1
 8000a1c:	0ffb      	lsrs	r3, r7, #31
 8000a1e:	25ff      	movs	r5, #255	; 0xff
 8000a20:	0a64      	lsrs	r4, r4, #9
 8000a22:	0e12      	lsrs	r2, r2, #24
 8000a24:	4698      	mov	r8, r3
 8000a26:	d1db      	bne.n	80009e0 <__aeabi_fmul+0x44>
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_fmul+0x92>
 8000a2c:	e090      	b.n	8000b50 <__aeabi_fmul+0x1b4>
 8000a2e:	4652      	mov	r2, sl
 8000a30:	2301      	movs	r3, #1
 8000a32:	431a      	orrs	r2, r3
 8000a34:	4692      	mov	sl, r2
 8000a36:	2001      	movs	r0, #1
 8000a38:	e7db      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000a3a:	464c      	mov	r4, r9
 8000a3c:	4658      	mov	r0, fp
 8000a3e:	0017      	movs	r7, r2
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d024      	beq.n	8000a8e <__aeabi_fmul+0xf2>
 8000a44:	2803      	cmp	r0, #3
 8000a46:	d100      	bne.n	8000a4a <__aeabi_fmul+0xae>
 8000a48:	e0cf      	b.n	8000bea <__aeabi_fmul+0x24e>
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2801      	cmp	r0, #1
 8000a50:	d14d      	bne.n	8000aee <__aeabi_fmul+0x152>
 8000a52:	0258      	lsls	r0, r3, #9
 8000a54:	05d2      	lsls	r2, r2, #23
 8000a56:	0a40      	lsrs	r0, r0, #9
 8000a58:	07ff      	lsls	r7, r7, #31
 8000a5a:	4310      	orrs	r0, r2
 8000a5c:	4338      	orrs	r0, r7
 8000a5e:	b003      	add	sp, #12
 8000a60:	bc3c      	pop	{r2, r3, r4, r5}
 8000a62:	4690      	mov	r8, r2
 8000a64:	4699      	mov	r9, r3
 8000a66:	46a2      	mov	sl, r4
 8000a68:	46ab      	mov	fp, r5
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d15b      	bne.n	8000b28 <__aeabi_fmul+0x18c>
 8000a70:	2304      	movs	r3, #4
 8000a72:	469a      	mov	sl, r3
 8000a74:	3b03      	subs	r3, #3
 8000a76:	2500      	movs	r5, #0
 8000a78:	469b      	mov	fp, r3
 8000a7a:	e7aa      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000a7c:	35ff      	adds	r5, #255	; 0xff
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d160      	bne.n	8000b44 <__aeabi_fmul+0x1a8>
 8000a82:	4652      	mov	r2, sl
 8000a84:	2302      	movs	r3, #2
 8000a86:	431a      	orrs	r2, r3
 8000a88:	4692      	mov	sl, r2
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	e7b1      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000a8e:	22ff      	movs	r2, #255	; 0xff
 8000a90:	2300      	movs	r3, #0
 8000a92:	e7de      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000a94:	464b      	mov	r3, r9
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	469c      	mov	ip, r3
 8000a9a:	464b      	mov	r3, r9
 8000a9c:	0426      	lsls	r6, r4, #16
 8000a9e:	0c36      	lsrs	r6, r6, #16
 8000aa0:	0418      	lsls	r0, r3, #16
 8000aa2:	4661      	mov	r1, ip
 8000aa4:	0033      	movs	r3, r6
 8000aa6:	0c22      	lsrs	r2, r4, #16
 8000aa8:	4664      	mov	r4, ip
 8000aaa:	0c00      	lsrs	r0, r0, #16
 8000aac:	4343      	muls	r3, r0
 8000aae:	434e      	muls	r6, r1
 8000ab0:	4350      	muls	r0, r2
 8000ab2:	4354      	muls	r4, r2
 8000ab4:	1980      	adds	r0, r0, r6
 8000ab6:	0c1a      	lsrs	r2, r3, #16
 8000ab8:	1812      	adds	r2, r2, r0
 8000aba:	4296      	cmp	r6, r2
 8000abc:	d903      	bls.n	8000ac6 <__aeabi_fmul+0x12a>
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	0249      	lsls	r1, r1, #9
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4464      	add	r4, ip
 8000ac6:	041b      	lsls	r3, r3, #16
 8000ac8:	0c1b      	lsrs	r3, r3, #16
 8000aca:	0410      	lsls	r0, r2, #16
 8000acc:	18c0      	adds	r0, r0, r3
 8000ace:	0183      	lsls	r3, r0, #6
 8000ad0:	1e5e      	subs	r6, r3, #1
 8000ad2:	41b3      	sbcs	r3, r6
 8000ad4:	0e80      	lsrs	r0, r0, #26
 8000ad6:	4318      	orrs	r0, r3
 8000ad8:	0c13      	lsrs	r3, r2, #16
 8000ada:	191b      	adds	r3, r3, r4
 8000adc:	019b      	lsls	r3, r3, #6
 8000ade:	4303      	orrs	r3, r0
 8000ae0:	001c      	movs	r4, r3
 8000ae2:	0123      	lsls	r3, r4, #4
 8000ae4:	d579      	bpl.n	8000bda <__aeabi_fmul+0x23e>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	0862      	lsrs	r2, r4, #1
 8000aea:	401c      	ands	r4, r3
 8000aec:	4314      	orrs	r4, r2
 8000aee:	9a01      	ldr	r2, [sp, #4]
 8000af0:	327f      	adds	r2, #127	; 0x7f
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	dd4d      	ble.n	8000b92 <__aeabi_fmul+0x1f6>
 8000af6:	0763      	lsls	r3, r4, #29
 8000af8:	d004      	beq.n	8000b04 <__aeabi_fmul+0x168>
 8000afa:	230f      	movs	r3, #15
 8000afc:	4023      	ands	r3, r4
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d000      	beq.n	8000b04 <__aeabi_fmul+0x168>
 8000b02:	3404      	adds	r4, #4
 8000b04:	0123      	lsls	r3, r4, #4
 8000b06:	d503      	bpl.n	8000b10 <__aeabi_fmul+0x174>
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <__aeabi_fmul+0x260>)
 8000b0a:	9a01      	ldr	r2, [sp, #4]
 8000b0c:	401c      	ands	r4, r3
 8000b0e:	3280      	adds	r2, #128	; 0x80
 8000b10:	2afe      	cmp	r2, #254	; 0xfe
 8000b12:	dcbc      	bgt.n	8000a8e <__aeabi_fmul+0xf2>
 8000b14:	01a3      	lsls	r3, r4, #6
 8000b16:	0a5b      	lsrs	r3, r3, #9
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	e79a      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	469a      	mov	sl, r3
 8000b20:	3b09      	subs	r3, #9
 8000b22:	25ff      	movs	r5, #255	; 0xff
 8000b24:	469b      	mov	fp, r3
 8000b26:	e754      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fad7 	bl	80010dc <__clzsi2>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1f43      	subs	r3, r0, #5
 8000b32:	2576      	movs	r5, #118	; 0x76
 8000b34:	409a      	lsls	r2, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	426d      	negs	r5, r5
 8000b3a:	4691      	mov	r9, r2
 8000b3c:	1a2d      	subs	r5, r5, r0
 8000b3e:	469a      	mov	sl, r3
 8000b40:	469b      	mov	fp, r3
 8000b42:	e746      	b.n	80009d2 <__aeabi_fmul+0x36>
 8000b44:	4652      	mov	r2, sl
 8000b46:	2303      	movs	r3, #3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4692      	mov	sl, r2
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e750      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000b50:	0020      	movs	r0, r4
 8000b52:	f000 fac3 	bl	80010dc <__clzsi2>
 8000b56:	1f43      	subs	r3, r0, #5
 8000b58:	1a2d      	subs	r5, r5, r0
 8000b5a:	409c      	lsls	r4, r3
 8000b5c:	3d76      	subs	r5, #118	; 0x76
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e747      	b.n	80009f2 <__aeabi_fmul+0x56>
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	2700      	movs	r7, #0
 8000b66:	03db      	lsls	r3, r3, #15
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	e772      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b6c:	4642      	mov	r2, r8
 8000b6e:	e766      	b.n	8000a3e <__aeabi_fmul+0xa2>
 8000b70:	464c      	mov	r4, r9
 8000b72:	0032      	movs	r2, r6
 8000b74:	4658      	mov	r0, fp
 8000b76:	e762      	b.n	8000a3e <__aeabi_fmul+0xa2>
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	464a      	mov	r2, r9
 8000b7c:	03db      	lsls	r3, r3, #15
 8000b7e:	421a      	tst	r2, r3
 8000b80:	d022      	beq.n	8000bc8 <__aeabi_fmul+0x22c>
 8000b82:	421c      	tst	r4, r3
 8000b84:	d120      	bne.n	8000bc8 <__aeabi_fmul+0x22c>
 8000b86:	4323      	orrs	r3, r4
 8000b88:	025b      	lsls	r3, r3, #9
 8000b8a:	0a5b      	lsrs	r3, r3, #9
 8000b8c:	4647      	mov	r7, r8
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	e75f      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000b92:	2301      	movs	r3, #1
 8000b94:	1a9a      	subs	r2, r3, r2
 8000b96:	2a1b      	cmp	r2, #27
 8000b98:	dc21      	bgt.n	8000bde <__aeabi_fmul+0x242>
 8000b9a:	0023      	movs	r3, r4
 8000b9c:	9901      	ldr	r1, [sp, #4]
 8000b9e:	40d3      	lsrs	r3, r2
 8000ba0:	319e      	adds	r1, #158	; 0x9e
 8000ba2:	408c      	lsls	r4, r1
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	1e5c      	subs	r4, r3, #1
 8000baa:	41a3      	sbcs	r3, r4
 8000bac:	4313      	orrs	r3, r2
 8000bae:	075a      	lsls	r2, r3, #29
 8000bb0:	d004      	beq.n	8000bbc <__aeabi_fmul+0x220>
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	2a04      	cmp	r2, #4
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_fmul+0x220>
 8000bba:	3304      	adds	r3, #4
 8000bbc:	015a      	lsls	r2, r3, #5
 8000bbe:	d411      	bmi.n	8000be4 <__aeabi_fmul+0x248>
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	0a5b      	lsrs	r3, r3, #9
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	e744      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	464a      	mov	r2, r9
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	025b      	lsls	r3, r3, #9
 8000bd2:	0a5b      	lsrs	r3, r3, #9
 8000bd4:	0037      	movs	r7, r6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	e73b      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bda:	9501      	str	r5, [sp, #4]
 8000bdc:	e787      	b.n	8000aee <__aeabi_fmul+0x152>
 8000bde:	2200      	movs	r2, #0
 8000be0:	2300      	movs	r3, #0
 8000be2:	e736      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000be4:	2201      	movs	r2, #1
 8000be6:	2300      	movs	r3, #0
 8000be8:	e733      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bea:	2380      	movs	r3, #128	; 0x80
 8000bec:	03db      	lsls	r3, r3, #15
 8000bee:	4323      	orrs	r3, r4
 8000bf0:	025b      	lsls	r3, r3, #9
 8000bf2:	0a5b      	lsrs	r3, r3, #9
 8000bf4:	22ff      	movs	r2, #255	; 0xff
 8000bf6:	e72c      	b.n	8000a52 <__aeabi_fmul+0xb6>
 8000bf8:	08005fc8 	.word	0x08005fc8
 8000bfc:	f7ffffff 	.word	0xf7ffffff

08000c00 <__aeabi_fsub>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	4647      	mov	r7, r8
 8000c04:	46ce      	mov	lr, r9
 8000c06:	0044      	lsls	r4, r0, #1
 8000c08:	0fc2      	lsrs	r2, r0, #31
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	0247      	lsls	r7, r0, #9
 8000c0e:	0248      	lsls	r0, r1, #9
 8000c10:	0a40      	lsrs	r0, r0, #9
 8000c12:	4684      	mov	ip, r0
 8000c14:	4666      	mov	r6, ip
 8000c16:	0048      	lsls	r0, r1, #1
 8000c18:	0a7f      	lsrs	r7, r7, #9
 8000c1a:	0e24      	lsrs	r4, r4, #24
 8000c1c:	00f6      	lsls	r6, r6, #3
 8000c1e:	0025      	movs	r5, r4
 8000c20:	4690      	mov	r8, r2
 8000c22:	00fb      	lsls	r3, r7, #3
 8000c24:	0e00      	lsrs	r0, r0, #24
 8000c26:	0fc9      	lsrs	r1, r1, #31
 8000c28:	46b1      	mov	r9, r6
 8000c2a:	28ff      	cmp	r0, #255	; 0xff
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x30>
 8000c2e:	e085      	b.n	8000d3c <__aeabi_fsub+0x13c>
 8000c30:	2601      	movs	r6, #1
 8000c32:	4071      	eors	r1, r6
 8000c34:	1a26      	subs	r6, r4, r0
 8000c36:	4291      	cmp	r1, r2
 8000c38:	d057      	beq.n	8000cea <__aeabi_fsub+0xea>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	dd43      	ble.n	8000cc6 <__aeabi_fsub+0xc6>
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_fsub+0x44>
 8000c42:	e07f      	b.n	8000d44 <__aeabi_fsub+0x144>
 8000c44:	4649      	mov	r1, r9
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fsub+0x4c>
 8000c4a:	e0aa      	b.n	8000da2 <__aeabi_fsub+0x1a2>
 8000c4c:	3e01      	subs	r6, #1
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d000      	beq.n	8000c54 <__aeabi_fsub+0x54>
 8000c52:	e0f7      	b.n	8000e44 <__aeabi_fsub+0x244>
 8000c54:	1a5b      	subs	r3, r3, r1
 8000c56:	015a      	lsls	r2, r3, #5
 8000c58:	d400      	bmi.n	8000c5c <__aeabi_fsub+0x5c>
 8000c5a:	e08b      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	099c      	lsrs	r4, r3, #6
 8000c60:	0020      	movs	r0, r4
 8000c62:	f000 fa3b 	bl	80010dc <__clzsi2>
 8000c66:	3805      	subs	r0, #5
 8000c68:	4084      	lsls	r4, r0
 8000c6a:	4285      	cmp	r5, r0
 8000c6c:	dd00      	ble.n	8000c70 <__aeabi_fsub+0x70>
 8000c6e:	e0d3      	b.n	8000e18 <__aeabi_fsub+0x218>
 8000c70:	1b45      	subs	r5, r0, r5
 8000c72:	0023      	movs	r3, r4
 8000c74:	2020      	movs	r0, #32
 8000c76:	3501      	adds	r5, #1
 8000c78:	40eb      	lsrs	r3, r5
 8000c7a:	1b45      	subs	r5, r0, r5
 8000c7c:	40ac      	lsls	r4, r5
 8000c7e:	1e62      	subs	r2, r4, #1
 8000c80:	4194      	sbcs	r4, r2
 8000c82:	4323      	orrs	r3, r4
 8000c84:	2407      	movs	r4, #7
 8000c86:	2500      	movs	r5, #0
 8000c88:	401c      	ands	r4, r3
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4641      	mov	r1, r8
 8000c8e:	400a      	ands	r2, r1
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d004      	beq.n	8000c9e <__aeabi_fsub+0x9e>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4019      	ands	r1, r3
 8000c98:	2904      	cmp	r1, #4
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fsub+0x9e>
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	0159      	lsls	r1, r3, #5
 8000ca0:	d400      	bmi.n	8000ca4 <__aeabi_fsub+0xa4>
 8000ca2:	e080      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	b2ec      	uxtb	r4, r5
 8000ca8:	2dff      	cmp	r5, #255	; 0xff
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0xae>
 8000cac:	e0a3      	b.n	8000df6 <__aeabi_fsub+0x1f6>
 8000cae:	24ff      	movs	r4, #255	; 0xff
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	05e4      	lsls	r4, r4, #23
 8000cb6:	0a58      	lsrs	r0, r3, #9
 8000cb8:	07d2      	lsls	r2, r2, #31
 8000cba:	4320      	orrs	r0, r4
 8000cbc:	4310      	orrs	r0, r2
 8000cbe:	bc0c      	pop	{r2, r3}
 8000cc0:	4690      	mov	r8, r2
 8000cc2:	4699      	mov	r9, r3
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d174      	bne.n	8000db4 <__aeabi_fsub+0x1b4>
 8000cca:	1c60      	adds	r0, r4, #1
 8000ccc:	b2c0      	uxtb	r0, r0
 8000cce:	2801      	cmp	r0, #1
 8000cd0:	dc00      	bgt.n	8000cd4 <__aeabi_fsub+0xd4>
 8000cd2:	e0a7      	b.n	8000e24 <__aeabi_fsub+0x224>
 8000cd4:	464a      	mov	r2, r9
 8000cd6:	1a9c      	subs	r4, r3, r2
 8000cd8:	0162      	lsls	r2, r4, #5
 8000cda:	d500      	bpl.n	8000cde <__aeabi_fsub+0xde>
 8000cdc:	e0b6      	b.n	8000e4c <__aeabi_fsub+0x24c>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1be      	bne.n	8000c60 <__aeabi_fsub+0x60>
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2400      	movs	r4, #0
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e7e3      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	dc00      	bgt.n	8000cf0 <__aeabi_fsub+0xf0>
 8000cee:	e085      	b.n	8000dfc <__aeabi_fsub+0x1fc>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d046      	beq.n	8000d82 <__aeabi_fsub+0x182>
 8000cf4:	2cff      	cmp	r4, #255	; 0xff
 8000cf6:	d049      	beq.n	8000d8c <__aeabi_fsub+0x18c>
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	04d2      	lsls	r2, r2, #19
 8000cfe:	4310      	orrs	r0, r2
 8000d00:	4681      	mov	r9, r0
 8000d02:	2201      	movs	r2, #1
 8000d04:	2e1b      	cmp	r6, #27
 8000d06:	dc09      	bgt.n	8000d1c <__aeabi_fsub+0x11c>
 8000d08:	2020      	movs	r0, #32
 8000d0a:	464c      	mov	r4, r9
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	4084      	lsls	r4, r0
 8000d10:	464a      	mov	r2, r9
 8000d12:	0020      	movs	r0, r4
 8000d14:	40f2      	lsrs	r2, r6
 8000d16:	1e44      	subs	r4, r0, #1
 8000d18:	41a0      	sbcs	r0, r4
 8000d1a:	4302      	orrs	r2, r0
 8000d1c:	189b      	adds	r3, r3, r2
 8000d1e:	015a      	lsls	r2, r3, #5
 8000d20:	d528      	bpl.n	8000d74 <__aeabi_fsub+0x174>
 8000d22:	3501      	adds	r5, #1
 8000d24:	2dff      	cmp	r5, #255	; 0xff
 8000d26:	d100      	bne.n	8000d2a <__aeabi_fsub+0x12a>
 8000d28:	e0a8      	b.n	8000e7c <__aeabi_fsub+0x27c>
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2407      	movs	r4, #7
 8000d2e:	4994      	ldr	r1, [pc, #592]	; (8000f80 <__aeabi_fsub+0x380>)
 8000d30:	401a      	ands	r2, r3
 8000d32:	085b      	lsrs	r3, r3, #1
 8000d34:	400b      	ands	r3, r1
 8000d36:	4313      	orrs	r3, r2
 8000d38:	401c      	ands	r4, r3
 8000d3a:	e7a6      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_fsub+0x142>
 8000d40:	e778      	b.n	8000c34 <__aeabi_fsub+0x34>
 8000d42:	e775      	b.n	8000c30 <__aeabi_fsub+0x30>
 8000d44:	2cff      	cmp	r4, #255	; 0xff
 8000d46:	d054      	beq.n	8000df2 <__aeabi_fsub+0x1f2>
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	4649      	mov	r1, r9
 8000d4c:	04d2      	lsls	r2, r2, #19
 8000d4e:	4311      	orrs	r1, r2
 8000d50:	4689      	mov	r9, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	2e1b      	cmp	r6, #27
 8000d56:	dc09      	bgt.n	8000d6c <__aeabi_fsub+0x16c>
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	1b89      	subs	r1, r1, r6
 8000d5e:	4088      	lsls	r0, r1
 8000d60:	464a      	mov	r2, r9
 8000d62:	0001      	movs	r1, r0
 8000d64:	40f2      	lsrs	r2, r6
 8000d66:	1e48      	subs	r0, r1, #1
 8000d68:	4181      	sbcs	r1, r0
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	015a      	lsls	r2, r3, #5
 8000d70:	d500      	bpl.n	8000d74 <__aeabi_fsub+0x174>
 8000d72:	e773      	b.n	8000c5c <__aeabi_fsub+0x5c>
 8000d74:	2201      	movs	r2, #1
 8000d76:	4641      	mov	r1, r8
 8000d78:	400a      	ands	r2, r1
 8000d7a:	0759      	lsls	r1, r3, #29
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_fsub+0x180>
 8000d7e:	e789      	b.n	8000c94 <__aeabi_fsub+0x94>
 8000d80:	e011      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000d82:	4648      	mov	r0, r9
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d158      	bne.n	8000e3a <__aeabi_fsub+0x23a>
 8000d88:	2cff      	cmp	r4, #255	; 0xff
 8000d8a:	d10c      	bne.n	8000da6 <__aeabi_fsub+0x1a6>
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_fsub+0x194>
 8000d92:	e78c      	b.n	8000cae <__aeabi_fsub+0xae>
 8000d94:	2080      	movs	r0, #128	; 0x80
 8000d96:	03c0      	lsls	r0, r0, #15
 8000d98:	4303      	orrs	r3, r0
 8000d9a:	025b      	lsls	r3, r3, #9
 8000d9c:	0a5b      	lsrs	r3, r3, #9
 8000d9e:	24ff      	movs	r4, #255	; 0xff
 8000da0:	e787      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000da2:	2cff      	cmp	r4, #255	; 0xff
 8000da4:	d025      	beq.n	8000df2 <__aeabi_fsub+0x1f2>
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d0f0      	beq.n	8000d8e <__aeabi_fsub+0x18e>
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	b2ec      	uxtb	r4, r5
 8000db2:	e77e      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d04d      	beq.n	8000e54 <__aeabi_fsub+0x254>
 8000db8:	28ff      	cmp	r0, #255	; 0xff
 8000dba:	d018      	beq.n	8000dee <__aeabi_fsub+0x1ee>
 8000dbc:	2480      	movs	r4, #128	; 0x80
 8000dbe:	04e4      	lsls	r4, r4, #19
 8000dc0:	4272      	negs	r2, r6
 8000dc2:	4323      	orrs	r3, r4
 8000dc4:	2a1b      	cmp	r2, #27
 8000dc6:	dd00      	ble.n	8000dca <__aeabi_fsub+0x1ca>
 8000dc8:	e0c4      	b.n	8000f54 <__aeabi_fsub+0x354>
 8000dca:	001c      	movs	r4, r3
 8000dcc:	2520      	movs	r5, #32
 8000dce:	40d4      	lsrs	r4, r2
 8000dd0:	1aaa      	subs	r2, r5, r2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	4193      	sbcs	r3, r2
 8000dd8:	4323      	orrs	r3, r4
 8000dda:	464a      	mov	r2, r9
 8000ddc:	0005      	movs	r5, r0
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	4688      	mov	r8, r1
 8000de2:	e738      	b.n	8000c56 <__aeabi_fsub+0x56>
 8000de4:	1c72      	adds	r2, r6, #1
 8000de6:	d0f8      	beq.n	8000dda <__aeabi_fsub+0x1da>
 8000de8:	43f2      	mvns	r2, r6
 8000dea:	28ff      	cmp	r0, #255	; 0xff
 8000dec:	d1ea      	bne.n	8000dc4 <__aeabi_fsub+0x1c4>
 8000dee:	000a      	movs	r2, r1
 8000df0:	464b      	mov	r3, r9
 8000df2:	25ff      	movs	r5, #255	; 0xff
 8000df4:	e7d7      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000df6:	019b      	lsls	r3, r3, #6
 8000df8:	0a5b      	lsrs	r3, r3, #9
 8000dfa:	e75a      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d141      	bne.n	8000e84 <__aeabi_fsub+0x284>
 8000e00:	1c65      	adds	r5, r4, #1
 8000e02:	b2e9      	uxtb	r1, r5
 8000e04:	2901      	cmp	r1, #1
 8000e06:	dd45      	ble.n	8000e94 <__aeabi_fsub+0x294>
 8000e08:	2dff      	cmp	r5, #255	; 0xff
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x20e>
 8000e0c:	e74f      	b.n	8000cae <__aeabi_fsub+0xae>
 8000e0e:	2407      	movs	r4, #7
 8000e10:	444b      	add	r3, r9
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	401c      	ands	r4, r3
 8000e16:	e738      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000e18:	2207      	movs	r2, #7
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	; (8000f84 <__aeabi_fsub+0x384>)
 8000e1c:	1a2d      	subs	r5, r5, r0
 8000e1e:	4023      	ands	r3, r4
 8000e20:	4014      	ands	r4, r2
 8000e22:	e732      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d11d      	bne.n	8000e64 <__aeabi_fsub+0x264>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d17a      	bne.n	8000f22 <__aeabi_fsub+0x322>
 8000e2c:	464b      	mov	r3, r9
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x234>
 8000e32:	e091      	b.n	8000f58 <__aeabi_fsub+0x358>
 8000e34:	000a      	movs	r2, r1
 8000e36:	2500      	movs	r5, #0
 8000e38:	e7b5      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e3a:	3e01      	subs	r6, #1
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d119      	bne.n	8000e74 <__aeabi_fsub+0x274>
 8000e40:	444b      	add	r3, r9
 8000e42:	e76c      	b.n	8000d1e <__aeabi_fsub+0x11e>
 8000e44:	2cff      	cmp	r4, #255	; 0xff
 8000e46:	d184      	bne.n	8000d52 <__aeabi_fsub+0x152>
 8000e48:	25ff      	movs	r5, #255	; 0xff
 8000e4a:	e7ac      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e4c:	464a      	mov	r2, r9
 8000e4e:	4688      	mov	r8, r1
 8000e50:	1ad4      	subs	r4, r2, r3
 8000e52:	e705      	b.n	8000c60 <__aeabi_fsub+0x60>
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1c5      	bne.n	8000de4 <__aeabi_fsub+0x1e4>
 8000e58:	000a      	movs	r2, r1
 8000e5a:	28ff      	cmp	r0, #255	; 0xff
 8000e5c:	d0c8      	beq.n	8000df0 <__aeabi_fsub+0x1f0>
 8000e5e:	0005      	movs	r5, r0
 8000e60:	464b      	mov	r3, r9
 8000e62:	e7a0      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d149      	bne.n	8000efc <__aeabi_fsub+0x2fc>
 8000e68:	464b      	mov	r3, r9
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d077      	beq.n	8000f5e <__aeabi_fsub+0x35e>
 8000e6e:	000a      	movs	r2, r1
 8000e70:	25ff      	movs	r5, #255	; 0xff
 8000e72:	e798      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000e74:	2cff      	cmp	r4, #255	; 0xff
 8000e76:	d000      	beq.n	8000e7a <__aeabi_fsub+0x27a>
 8000e78:	e743      	b.n	8000d02 <__aeabi_fsub+0x102>
 8000e7a:	e787      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	24ff      	movs	r4, #255	; 0xff
 8000e80:	2300      	movs	r3, #0
 8000e82:	e716      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000e84:	2c00      	cmp	r4, #0
 8000e86:	d115      	bne.n	8000eb4 <__aeabi_fsub+0x2b4>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d157      	bne.n	8000f3c <__aeabi_fsub+0x33c>
 8000e8c:	28ff      	cmp	r0, #255	; 0xff
 8000e8e:	d1e6      	bne.n	8000e5e <__aeabi_fsub+0x25e>
 8000e90:	464b      	mov	r3, r9
 8000e92:	e77b      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d120      	bne.n	8000eda <__aeabi_fsub+0x2da>
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d057      	beq.n	8000f4c <__aeabi_fsub+0x34c>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d053      	beq.n	8000f4a <__aeabi_fsub+0x34a>
 8000ea2:	444b      	add	r3, r9
 8000ea4:	015a      	lsls	r2, r3, #5
 8000ea6:	d568      	bpl.n	8000f7a <__aeabi_fsub+0x37a>
 8000ea8:	2407      	movs	r4, #7
 8000eaa:	4a36      	ldr	r2, [pc, #216]	; (8000f84 <__aeabi_fsub+0x384>)
 8000eac:	401c      	ands	r4, r3
 8000eae:	2501      	movs	r5, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	e6ea      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000eb4:	28ff      	cmp	r0, #255	; 0xff
 8000eb6:	d0eb      	beq.n	8000e90 <__aeabi_fsub+0x290>
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	04d2      	lsls	r2, r2, #19
 8000ebc:	4276      	negs	r6, r6
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	2e1b      	cmp	r6, #27
 8000ec2:	dc53      	bgt.n	8000f6c <__aeabi_fsub+0x36c>
 8000ec4:	2520      	movs	r5, #32
 8000ec6:	1bad      	subs	r5, r5, r6
 8000ec8:	001a      	movs	r2, r3
 8000eca:	40ab      	lsls	r3, r5
 8000ecc:	40f2      	lsrs	r2, r6
 8000ece:	1e5c      	subs	r4, r3, #1
 8000ed0:	41a3      	sbcs	r3, r4
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	444b      	add	r3, r9
 8000ed6:	0005      	movs	r5, r0
 8000ed8:	e721      	b.n	8000d1e <__aeabi_fsub+0x11e>
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0d8      	beq.n	8000e90 <__aeabi_fsub+0x290>
 8000ede:	4649      	mov	r1, r9
 8000ee0:	2900      	cmp	r1, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x2e6>
 8000ee4:	e752      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	03c9      	lsls	r1, r1, #15
 8000eea:	420f      	tst	r7, r1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x2f0>
 8000eee:	e74d      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	4208      	tst	r0, r1
 8000ef4:	d000      	beq.n	8000ef8 <__aeabi_fsub+0x2f8>
 8000ef6:	e749      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000ef8:	464b      	mov	r3, r9
 8000efa:	e747      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000efc:	4648      	mov	r0, r9
 8000efe:	25ff      	movs	r5, #255	; 0xff
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x306>
 8000f04:	e74f      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	03d2      	lsls	r2, r2, #15
 8000f0a:	4217      	tst	r7, r2
 8000f0c:	d004      	beq.n	8000f18 <__aeabi_fsub+0x318>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	4210      	tst	r0, r2
 8000f12:	d101      	bne.n	8000f18 <__aeabi_fsub+0x318>
 8000f14:	464b      	mov	r3, r9
 8000f16:	4688      	mov	r8, r1
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4641      	mov	r1, r8
 8000f1c:	25ff      	movs	r5, #255	; 0xff
 8000f1e:	400a      	ands	r2, r1
 8000f20:	e741      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f22:	4648      	mov	r0, r9
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d01f      	beq.n	8000f68 <__aeabi_fsub+0x368>
 8000f28:	1a1a      	subs	r2, r3, r0
 8000f2a:	0150      	lsls	r0, r2, #5
 8000f2c:	d520      	bpl.n	8000f70 <__aeabi_fsub+0x370>
 8000f2e:	464a      	mov	r2, r9
 8000f30:	2407      	movs	r4, #7
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	401c      	ands	r4, r3
 8000f36:	4688      	mov	r8, r1
 8000f38:	2500      	movs	r5, #0
 8000f3a:	e6a6      	b.n	8000c8a <__aeabi_fsub+0x8a>
 8000f3c:	1c74      	adds	r4, r6, #1
 8000f3e:	d0c9      	beq.n	8000ed4 <__aeabi_fsub+0x2d4>
 8000f40:	43f6      	mvns	r6, r6
 8000f42:	28ff      	cmp	r0, #255	; 0xff
 8000f44:	d1bc      	bne.n	8000ec0 <__aeabi_fsub+0x2c0>
 8000f46:	464b      	mov	r3, r9
 8000f48:	e720      	b.n	8000d8c <__aeabi_fsub+0x18c>
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	464b      	mov	r3, r9
 8000f4e:	2500      	movs	r5, #0
 8000f50:	08db      	lsrs	r3, r3, #3
 8000f52:	e72b      	b.n	8000dac <__aeabi_fsub+0x1ac>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e740      	b.n	8000dda <__aeabi_fsub+0x1da>
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e6a9      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	2200      	movs	r2, #0
 8000f62:	03db      	lsls	r3, r3, #15
 8000f64:	24ff      	movs	r4, #255	; 0xff
 8000f66:	e6a4      	b.n	8000cb2 <__aeabi_fsub+0xb2>
 8000f68:	2500      	movs	r5, #0
 8000f6a:	e71c      	b.n	8000da6 <__aeabi_fsub+0x1a6>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e7b1      	b.n	8000ed4 <__aeabi_fsub+0x2d4>
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	d0f1      	beq.n	8000f58 <__aeabi_fsub+0x358>
 8000f74:	0013      	movs	r3, r2
 8000f76:	2500      	movs	r5, #0
 8000f78:	e6fc      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e6fa      	b.n	8000d74 <__aeabi_fsub+0x174>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7dffffff 	.word	0x7dffffff
 8000f84:	fbffffff 	.word	0xfbffffff

08000f88 <__aeabi_f2iz>:
 8000f88:	0241      	lsls	r1, r0, #9
 8000f8a:	0042      	lsls	r2, r0, #1
 8000f8c:	0fc3      	lsrs	r3, r0, #31
 8000f8e:	0a49      	lsrs	r1, r1, #9
 8000f90:	0e12      	lsrs	r2, r2, #24
 8000f92:	2000      	movs	r0, #0
 8000f94:	2a7e      	cmp	r2, #126	; 0x7e
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000f98:	2a9d      	cmp	r2, #157	; 0x9d
 8000f9a:	d80c      	bhi.n	8000fb6 <__aeabi_f2iz+0x2e>
 8000f9c:	2080      	movs	r0, #128	; 0x80
 8000f9e:	0400      	lsls	r0, r0, #16
 8000fa0:	4301      	orrs	r1, r0
 8000fa2:	2a95      	cmp	r2, #149	; 0x95
 8000fa4:	dc0a      	bgt.n	8000fbc <__aeabi_f2iz+0x34>
 8000fa6:	2096      	movs	r0, #150	; 0x96
 8000fa8:	1a82      	subs	r2, r0, r2
 8000faa:	40d1      	lsrs	r1, r2
 8000fac:	4248      	negs	r0, r1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000fb2:	0008      	movs	r0, r1
 8000fb4:	4770      	bx	lr
 8000fb6:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <__aeabi_f2iz+0x3c>)
 8000fb8:	1898      	adds	r0, r3, r2
 8000fba:	e7fb      	b.n	8000fb4 <__aeabi_f2iz+0x2c>
 8000fbc:	3a96      	subs	r2, #150	; 0x96
 8000fbe:	4091      	lsls	r1, r2
 8000fc0:	e7f4      	b.n	8000fac <__aeabi_f2iz+0x24>
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	7fffffff 	.word	0x7fffffff

08000fc8 <__aeabi_i2f>:
 8000fc8:	b570      	push	{r4, r5, r6, lr}
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d03d      	beq.n	800104a <__aeabi_i2f+0x82>
 8000fce:	17c3      	asrs	r3, r0, #31
 8000fd0:	18c5      	adds	r5, r0, r3
 8000fd2:	405d      	eors	r5, r3
 8000fd4:	0fc4      	lsrs	r4, r0, #31
 8000fd6:	0028      	movs	r0, r5
 8000fd8:	f000 f880 	bl	80010dc <__clzsi2>
 8000fdc:	229e      	movs	r2, #158	; 0x9e
 8000fde:	1a12      	subs	r2, r2, r0
 8000fe0:	2a96      	cmp	r2, #150	; 0x96
 8000fe2:	dc07      	bgt.n	8000ff4 <__aeabi_i2f+0x2c>
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	2808      	cmp	r0, #8
 8000fe8:	dd33      	ble.n	8001052 <__aeabi_i2f+0x8a>
 8000fea:	3808      	subs	r0, #8
 8000fec:	4085      	lsls	r5, r0
 8000fee:	0268      	lsls	r0, r5, #9
 8000ff0:	0a40      	lsrs	r0, r0, #9
 8000ff2:	e023      	b.n	800103c <__aeabi_i2f+0x74>
 8000ff4:	2a99      	cmp	r2, #153	; 0x99
 8000ff6:	dd0b      	ble.n	8001010 <__aeabi_i2f+0x48>
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	0029      	movs	r1, r5
 8000ffc:	1a1b      	subs	r3, r3, r0
 8000ffe:	40d9      	lsrs	r1, r3
 8001000:	0003      	movs	r3, r0
 8001002:	331b      	adds	r3, #27
 8001004:	409d      	lsls	r5, r3
 8001006:	002b      	movs	r3, r5
 8001008:	1e5d      	subs	r5, r3, #1
 800100a:	41ab      	sbcs	r3, r5
 800100c:	4319      	orrs	r1, r3
 800100e:	000d      	movs	r5, r1
 8001010:	2805      	cmp	r0, #5
 8001012:	dd01      	ble.n	8001018 <__aeabi_i2f+0x50>
 8001014:	1f43      	subs	r3, r0, #5
 8001016:	409d      	lsls	r5, r3
 8001018:	002b      	movs	r3, r5
 800101a:	490f      	ldr	r1, [pc, #60]	; (8001058 <__aeabi_i2f+0x90>)
 800101c:	400b      	ands	r3, r1
 800101e:	076e      	lsls	r6, r5, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_i2f+0x6e>
 8001022:	260f      	movs	r6, #15
 8001024:	4035      	ands	r5, r6
 8001026:	2d04      	cmp	r5, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_i2f+0x6e>
 800102a:	3304      	adds	r3, #4
 800102c:	015d      	lsls	r5, r3, #5
 800102e:	d502      	bpl.n	8001036 <__aeabi_i2f+0x6e>
 8001030:	229f      	movs	r2, #159	; 0x9f
 8001032:	400b      	ands	r3, r1
 8001034:	1a12      	subs	r2, r2, r0
 8001036:	019b      	lsls	r3, r3, #6
 8001038:	0a58      	lsrs	r0, r3, #9
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	0240      	lsls	r0, r0, #9
 800103e:	05d2      	lsls	r2, r2, #23
 8001040:	0a40      	lsrs	r0, r0, #9
 8001042:	07e4      	lsls	r4, r4, #31
 8001044:	4310      	orrs	r0, r2
 8001046:	4320      	orrs	r0, r4
 8001048:	bd70      	pop	{r4, r5, r6, pc}
 800104a:	2400      	movs	r4, #0
 800104c:	2200      	movs	r2, #0
 800104e:	2000      	movs	r0, #0
 8001050:	e7f4      	b.n	800103c <__aeabi_i2f+0x74>
 8001052:	0268      	lsls	r0, r5, #9
 8001054:	0a40      	lsrs	r0, r0, #9
 8001056:	e7f1      	b.n	800103c <__aeabi_i2f+0x74>
 8001058:	fbffffff 	.word	0xfbffffff

0800105c <__aeabi_ui2f>:
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	1e04      	subs	r4, r0, #0
 8001060:	d034      	beq.n	80010cc <__aeabi_ui2f+0x70>
 8001062:	f000 f83b 	bl	80010dc <__clzsi2>
 8001066:	229e      	movs	r2, #158	; 0x9e
 8001068:	1a12      	subs	r2, r2, r0
 800106a:	2a96      	cmp	r2, #150	; 0x96
 800106c:	dc07      	bgt.n	800107e <__aeabi_ui2f+0x22>
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	2808      	cmp	r0, #8
 8001072:	dd2e      	ble.n	80010d2 <__aeabi_ui2f+0x76>
 8001074:	3808      	subs	r0, #8
 8001076:	4084      	lsls	r4, r0
 8001078:	0260      	lsls	r0, r4, #9
 800107a:	0a40      	lsrs	r0, r0, #9
 800107c:	e021      	b.n	80010c2 <__aeabi_ui2f+0x66>
 800107e:	2a99      	cmp	r2, #153	; 0x99
 8001080:	dd09      	ble.n	8001096 <__aeabi_ui2f+0x3a>
 8001082:	0003      	movs	r3, r0
 8001084:	0021      	movs	r1, r4
 8001086:	331b      	adds	r3, #27
 8001088:	4099      	lsls	r1, r3
 800108a:	1e4b      	subs	r3, r1, #1
 800108c:	4199      	sbcs	r1, r3
 800108e:	2305      	movs	r3, #5
 8001090:	1a1b      	subs	r3, r3, r0
 8001092:	40dc      	lsrs	r4, r3
 8001094:	430c      	orrs	r4, r1
 8001096:	2805      	cmp	r0, #5
 8001098:	dd01      	ble.n	800109e <__aeabi_ui2f+0x42>
 800109a:	1f43      	subs	r3, r0, #5
 800109c:	409c      	lsls	r4, r3
 800109e:	0023      	movs	r3, r4
 80010a0:	490d      	ldr	r1, [pc, #52]	; (80010d8 <__aeabi_ui2f+0x7c>)
 80010a2:	400b      	ands	r3, r1
 80010a4:	0765      	lsls	r5, r4, #29
 80010a6:	d009      	beq.n	80010bc <__aeabi_ui2f+0x60>
 80010a8:	250f      	movs	r5, #15
 80010aa:	402c      	ands	r4, r5
 80010ac:	2c04      	cmp	r4, #4
 80010ae:	d005      	beq.n	80010bc <__aeabi_ui2f+0x60>
 80010b0:	3304      	adds	r3, #4
 80010b2:	015c      	lsls	r4, r3, #5
 80010b4:	d502      	bpl.n	80010bc <__aeabi_ui2f+0x60>
 80010b6:	229f      	movs	r2, #159	; 0x9f
 80010b8:	400b      	ands	r3, r1
 80010ba:	1a12      	subs	r2, r2, r0
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	0a58      	lsrs	r0, r3, #9
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	0240      	lsls	r0, r0, #9
 80010c4:	05d2      	lsls	r2, r2, #23
 80010c6:	0a40      	lsrs	r0, r0, #9
 80010c8:	4310      	orrs	r0, r2
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	2200      	movs	r2, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	e7f7      	b.n	80010c2 <__aeabi_ui2f+0x66>
 80010d2:	0260      	lsls	r0, r4, #9
 80010d4:	0a40      	lsrs	r0, r0, #9
 80010d6:	e7f4      	b.n	80010c2 <__aeabi_ui2f+0x66>
 80010d8:	fbffffff 	.word	0xfbffffff

080010dc <__clzsi2>:
 80010dc:	211c      	movs	r1, #28
 80010de:	2301      	movs	r3, #1
 80010e0:	041b      	lsls	r3, r3, #16
 80010e2:	4298      	cmp	r0, r3
 80010e4:	d301      	bcc.n	80010ea <__clzsi2+0xe>
 80010e6:	0c00      	lsrs	r0, r0, #16
 80010e8:	3910      	subs	r1, #16
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	4298      	cmp	r0, r3
 80010ee:	d301      	bcc.n	80010f4 <__clzsi2+0x18>
 80010f0:	0a00      	lsrs	r0, r0, #8
 80010f2:	3908      	subs	r1, #8
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	4298      	cmp	r0, r3
 80010f8:	d301      	bcc.n	80010fe <__clzsi2+0x22>
 80010fa:	0900      	lsrs	r0, r0, #4
 80010fc:	3904      	subs	r1, #4
 80010fe:	a202      	add	r2, pc, #8	; (adr r2, 8001108 <__clzsi2+0x2c>)
 8001100:	5c10      	ldrb	r0, [r2, r0]
 8001102:	1840      	adds	r0, r0, r1
 8001104:	4770      	bx	lr
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	02020304 	.word	0x02020304
 800110c:	01010101 	.word	0x01010101
	...

08001118 <__clzdi2>:
 8001118:	b510      	push	{r4, lr}
 800111a:	2900      	cmp	r1, #0
 800111c:	d103      	bne.n	8001126 <__clzdi2+0xe>
 800111e:	f7ff ffdd 	bl	80010dc <__clzsi2>
 8001122:	3020      	adds	r0, #32
 8001124:	e002      	b.n	800112c <__clzdi2+0x14>
 8001126:	1c08      	adds	r0, r1, #0
 8001128:	f7ff ffd8 	bl	80010dc <__clzsi2>
 800112c:	bd10      	pop	{r4, pc}
 800112e:	46c0      	nop			; (mov r8, r8)

08001130 <pi_controller>:




uint16_t pi_controller(uint8_t process_variable)
{
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	0002      	movs	r2, r0
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	701a      	strb	r2, [r3, #0]

	static float error_integral = 0;
	uint16_t bias = min_pwm_val;
 800113c:	230c      	movs	r3, #12
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <pi_controller+0x15c>)
 8001142:	8812      	ldrh	r2, [r2, #0]
 8001144:	801a      	strh	r2, [r3, #0]
	float error = setpoint_humidity - process_variable;
 8001146:	4b52      	ldr	r3, [pc, #328]	; (8001290 <pi_controller+0x160>)
 8001148:	681c      	ldr	r4, [r3, #0]
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	f7ff ff3a 	bl	8000fc8 <__aeabi_i2f>
 8001154:	1c03      	adds	r3, r0, #0
 8001156:	1c19      	adds	r1, r3, #0
 8001158:	1c20      	adds	r0, r4, #0
 800115a:	f7ff fd51 	bl	8000c00 <__aeabi_fsub>
 800115e:	1c03      	adds	r3, r0, #0
 8001160:	60bb      	str	r3, [r7, #8]
	error_integral += error * pi_param.dt;
 8001162:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <pi_controller+0x164>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ff2e 	bl	8000fc8 <__aeabi_i2f>
 800116c:	1c03      	adds	r3, r0, #0
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	1c18      	adds	r0, r3, #0
 8001172:	f7ff fc13 	bl	800099c <__aeabi_fmul>
 8001176:	1c03      	adds	r3, r0, #0
 8001178:	1c1a      	adds	r2, r3, #0
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <pi_controller+0x168>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1c19      	adds	r1, r3, #0
 8001180:	1c10      	adds	r0, r2, #0
 8001182:	f7ff f9ab 	bl	80004dc <__aeabi_fadd>
 8001186:	1c03      	adds	r3, r0, #0
 8001188:	1c1a      	adds	r2, r3, #0
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <pi_controller+0x168>)
 800118c:	601a      	str	r2, [r3, #0]

	//Integralfehler begrenzen (Anti-Windup)
	if(error_integral > max_error_integral){
 800118e:	4b43      	ldr	r3, [pc, #268]	; (800129c <pi_controller+0x16c>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff ff18 	bl	8000fc8 <__aeabi_i2f>
 8001198:	1c02      	adds	r2, r0, #0
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <pi_controller+0x168>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c19      	adds	r1, r3, #0
 80011a0:	1c10      	adds	r0, r2, #0
 80011a2:	f7ff f84f 	bl	8000244 <__aeabi_fcmplt>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d008      	beq.n	80011bc <pi_controller+0x8c>
		error_integral = max_error_integral;
 80011aa:	4b3c      	ldr	r3, [pc, #240]	; (800129c <pi_controller+0x16c>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff54 	bl	800105c <__aeabi_ui2f>
 80011b4:	1c02      	adds	r2, r0, #0
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <pi_controller+0x168>)
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e015      	b.n	80011e8 <pi_controller+0xb8>
	}
	else if(error_integral < min_error_integral ){
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <pi_controller+0x170>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff01 	bl	8000fc8 <__aeabi_i2f>
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	4b33      	ldr	r3, [pc, #204]	; (8001298 <pi_controller+0x168>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c19      	adds	r1, r3, #0
 80011ce:	1c10      	adds	r0, r2, #0
 80011d0:	f7ff f84c 	bl	800026c <__aeabi_fcmpgt>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d007      	beq.n	80011e8 <pi_controller+0xb8>
		error_integral = min_error_integral;
 80011d8:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <pi_controller+0x170>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff3d 	bl	800105c <__aeabi_ui2f>
 80011e2:	1c02      	adds	r2, r0, #0
 80011e4:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <pi_controller+0x168>)
 80011e6:	601a      	str	r2, [r3, #0]
	}

	uint16_t pi_output = ((pi_param.kp * error) + (pi_param.ki * error_integral)) * (-1);
 80011e8:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <pi_controller+0x164>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff feeb 	bl	8000fc8 <__aeabi_i2f>
 80011f2:	1c03      	adds	r3, r0, #0
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	1c18      	adds	r0, r3, #0
 80011f8:	f7ff fbd0 	bl	800099c <__aeabi_fmul>
 80011fc:	1c03      	adds	r3, r0, #0
 80011fe:	1c1c      	adds	r4, r3, #0
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <pi_controller+0x164>)
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fedf 	bl	8000fc8 <__aeabi_i2f>
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <pi_controller+0x168>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c19      	adds	r1, r3, #0
 8001212:	1c10      	adds	r0, r2, #0
 8001214:	f7ff fbc2 	bl	800099c <__aeabi_fmul>
 8001218:	1c03      	adds	r3, r0, #0
 800121a:	1c19      	adds	r1, r3, #0
 800121c:	1c20      	adds	r0, r4, #0
 800121e:	f7ff f95d 	bl	80004dc <__aeabi_fadd>
 8001222:	1c03      	adds	r3, r0, #0
 8001224:	1c1a      	adds	r2, r3, #0
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	061b      	lsls	r3, r3, #24
 800122a:	4053      	eors	r3, r2
 800122c:	200e      	movs	r0, #14
 800122e:	0005      	movs	r5, r0
 8001230:	183c      	adds	r4, r7, r0
 8001232:	1c18      	adds	r0, r3, #0
 8001234:	f7ff f878 	bl	8000328 <__aeabi_f2uiz>
 8001238:	0003      	movs	r3, r0
 800123a:	8023      	strh	r3, [r4, #0]
	pi_output += bias;
 800123c:	0028      	movs	r0, r5
 800123e:	183b      	adds	r3, r7, r0
 8001240:	1839      	adds	r1, r7, r0
 8001242:	220c      	movs	r2, #12
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	8809      	ldrh	r1, [r1, #0]
 8001248:	8812      	ldrh	r2, [r2, #0]
 800124a:	188a      	adds	r2, r1, r2
 800124c:	801a      	strh	r2, [r3, #0]
	//Stellgröße (PWM) begrenzen
	if(pi_output > htim2.Init.Period){
 800124e:	183b      	adds	r3, r7, r0
 8001250:	881a      	ldrh	r2, [r3, #0]
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <pi_controller+0x174>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	429a      	cmp	r2, r3
 8001258:	d905      	bls.n	8001266 <pi_controller+0x136>
		pi_output = htim2.Init.Period;
 800125a:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <pi_controller+0x174>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	230e      	movs	r3, #14
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	801a      	strh	r2, [r3, #0]
 8001264:	e00b      	b.n	800127e <pi_controller+0x14e>
	}
	else if(pi_output < min_pwm_val){
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <pi_controller+0x15c>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	220e      	movs	r2, #14
 800126c:	18ba      	adds	r2, r7, r2
 800126e:	8812      	ldrh	r2, [r2, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d204      	bcs.n	800127e <pi_controller+0x14e>
		pi_output = min_pwm_val;
 8001274:	230e      	movs	r3, #14
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <pi_controller+0x15c>)
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	801a      	strh	r2, [r3, #0]
	}
	return pi_output;
 800127e:	230e      	movs	r3, #14
 8001280:	18fb      	adds	r3, r7, r3
 8001282:	881b      	ldrh	r3, [r3, #0]
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b004      	add	sp, #16
 800128a:	bdb0      	pop	{r4, r5, r7, pc}
 800128c:	0800600a 	.word	0x0800600a
 8001290:	0800600c 	.word	0x0800600c
 8001294:	20000000 	.word	0x20000000
 8001298:	20000094 	.word	0x20000094
 800129c:	08006010 	.word	0x08006010
 80012a0:	08006012 	.word	0x08006012
 80012a4:	20000168 	.word	0x20000168

080012a8 <adjust_pwm_value>:



void adjust_pwm_value(uint16_t new_duty){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dbb      	adds	r3, r7, #6
 80012b2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, new_duty);
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <adjust_pwm_value+0x34>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1dba      	adds	r2, r7, #6
 80012ba:	8812      	ldrh	r2, [r2, #0]
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, new_duty);
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <adjust_pwm_value+0x34>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1dba      	adds	r2, r7, #6
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, new_duty);
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <adjust_pwm_value+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	1dba      	adds	r2, r7, #6
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000168 	.word	0x20000168

080012e0 <start_timers>:

void start_timers(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <start_timers+0x6c>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f002 fe6f 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <start_timers+0x6c>)
 80012f0:	2104      	movs	r1, #4
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 fe6a 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <start_timers+0x6c>)
 80012fa:	2108      	movs	r1, #8
 80012fc:	0018      	movs	r0, r3
 80012fe:	f002 fe65 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <start_timers+0x6c>)
 8001304:	210c      	movs	r1, #12
 8001306:	0018      	movs	r0, r3
 8001308:	f002 fe60 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_1);
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <start_timers+0x70>)
 800130e:	2100      	movs	r1, #0
 8001310:	0018      	movs	r0, r3
 8001312:	f002 fe5b 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim21, TIM_CHANNEL_2);
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <start_timers+0x70>)
 8001318:	2104      	movs	r1, #4
 800131a:	0018      	movs	r0, r3
 800131c:	f002 fe56 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <start_timers+0x74>)
 8001322:	2100      	movs	r1, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f002 fe51 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <start_timers+0x74>)
 800132c:	2104      	movs	r1, #4
 800132e:	0018      	movs	r0, r3
 8001330:	f002 fe4c 	bl	8003fcc <HAL_TIM_PWM_Start>
	HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <start_timers+0x78>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	001a      	movs	r2, r3
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <start_timers+0x7c>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f001 fcbe 	bl	8002cc0 <HAL_LPTIM_Counter_Start_IT>

}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	20000168 	.word	0x20000168
 8001350:	200001a8 	.word	0x200001a8
 8001354:	20000128 	.word	0x20000128
 8001358:	08006008 	.word	0x08006008
 800135c:	200000f4 	.word	0x200000f4

08001360 <reset_all_pwm>:

void reset_all_pwm(void){
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af04      	add	r7, sp, #16
	set_pwm(0, 0, 0, 0, 0, 0, 0, 0);
 8001366:	2300      	movs	r3, #0
 8001368:	9303      	str	r3, [sp, #12]
 800136a:	2300      	movs	r3, #0
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f837 	bl	80013f0 <set_pwm>
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <stop_timers>:

void stop_timers(void){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <stop_timers+0x5c>)
 800138e:	2100      	movs	r1, #0
 8001390:	0018      	movs	r0, r3
 8001392:	f002 fea7 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <stop_timers+0x5c>)
 8001398:	2104      	movs	r1, #4
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fea2 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <stop_timers+0x5c>)
 80013a2:	2108      	movs	r1, #8
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 fe9d 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <stop_timers+0x5c>)
 80013ac:	210c      	movs	r1, #12
 80013ae:	0018      	movs	r0, r3
 80013b0:	f002 fe98 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_1);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <stop_timers+0x60>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f002 fe93 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim21, TIM_CHANNEL_2);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <stop_timers+0x60>)
 80013c0:	2104      	movs	r1, #4
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fe8e 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_1);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <stop_timers+0x64>)
 80013ca:	2100      	movs	r1, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f002 fe89 	bl	80040e4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim22, TIM_CHANNEL_2);
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <stop_timers+0x64>)
 80013d4:	2104      	movs	r1, #4
 80013d6:	0018      	movs	r0, r3
 80013d8:	f002 fe84 	bl	80040e4 <HAL_TIM_PWM_Stop>
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000168 	.word	0x20000168
 80013e8:	200001a8 	.word	0x200001a8
 80013ec:	20000128 	.word	0x20000128

080013f0 <set_pwm>:

void set_pwm(int TIM2_CH1, int TIM2_CH2, int TIM2_CH3, int TIM2_CH4, int TIM21_CH1, int TIM21_CH2, int TIM22_CH1, int TIM22_CH2){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH1);
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <set_pwm+0x58>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH2);
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <set_pwm+0x58>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH3);
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <set_pwm+0x58>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM2_CH4);
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <set_pwm+0x58>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH1);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <set_pwm+0x58>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM21_CH2);
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <set_pwm+0x58>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH1);
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <set_pwm+0x58>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a3a      	ldr	r2, [r7, #32]
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, TIM22_CH2);
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <set_pwm+0x58>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	20000168 	.word	0x20000168

0800144c <switch_direction>:

void switch_direction(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	reset_all_pwm();
 8001450:	f7ff ff86 	bl	8001360 <reset_all_pwm>
	HAL_Delay(1000);
 8001454:	23fa      	movs	r3, #250	; 0xfa
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	0018      	movs	r0, r3
 800145a:	f001 f877 	bl	800254c <HAL_Delay>
	toggle_all_gpio();
 800145e:	f000 f803 	bl	8001468 <toggle_all_gpio>

}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <toggle_all_gpio>:

void toggle_all_gpio(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	005a      	lsls	r2, r3, #1
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f001 fb7b 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	011a      	lsls	r2, r3, #4
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	0011      	movs	r1, r2
 8001486:	0018      	movs	r0, r3
 8001488:	f001 fb73 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_12);
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	23a0      	movs	r3, #160	; 0xa0
 8001492:	05db      	lsls	r3, r3, #23
 8001494:	0011      	movs	r1, r2
 8001496:	0018      	movs	r0, r3
 8001498:	f001 fb6b 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <toggle_all_gpio+0x74>)
 80014a2:	0019      	movs	r1, r3
 80014a4:	0010      	movs	r0, r2
 80014a6:	f001 fb64 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <toggle_all_gpio+0x74>)
 80014b0:	0019      	movs	r1, r3
 80014b2:	0010      	movs	r0, r2
 80014b4:	f001 fb5d 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <toggle_all_gpio+0x74>)
 80014be:	0019      	movs	r1, r3
 80014c0:	0010      	movs	r0, r2
 80014c2:	f001 fb56 	bl	8002b72 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <toggle_all_gpio+0x78>)
 80014cc:	0019      	movs	r1, r3
 80014ce:	0010      	movs	r0, r2
 80014d0:	f001 fb4f 	bl	8002b72 <HAL_GPIO_TogglePin>
	//einer fehlt wegen nucleo board
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	50000400 	.word	0x50000400
 80014e0:	50000800 	.word	0x50000800

080014e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	240c      	movs	r4, #12
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	0018      	movs	r0, r3
 80014f0:	2314      	movs	r3, #20
 80014f2:	001a      	movs	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	f004 fc97 	bl	8005e28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_GPIO_Init+0xbc>)
 80014fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001518:	2102      	movs	r1, #2
 800151a:	430a      	orrs	r2, r1
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <MX_GPIO_Init+0xbc>)
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 800152a:	491e      	ldr	r1, [pc, #120]	; (80015a4 <MX_GPIO_Init+0xc0>)
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_GPIO_Init+0xc4>)
 800152e:	2200      	movs	r2, #0
 8001530:	0018      	movs	r0, r3
 8001532:	f001 fb01 	bl	8002b38 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001536:	23c8      	movs	r3, #200	; 0xc8
 8001538:	0159      	lsls	r1, r3, #5
 800153a:	23a0      	movs	r3, #160	; 0xa0
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	2200      	movs	r2, #0
 8001540:	0018      	movs	r0, r3
 8001542:	f001 faf9 	bl	8002b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 PB11 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8
 8001546:	0021      	movs	r1, r4
 8001548:	187b      	adds	r3, r7, r1
 800154a:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <MX_GPIO_Init+0xc0>)
 800154c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2201      	movs	r2, #1
 8001552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	000c      	movs	r4, r1
 8001562:	187b      	adds	r3, r7, r1
 8001564:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <MX_GPIO_Init+0xc4>)
 8001566:	0019      	movs	r1, r3
 8001568:	0010      	movs	r0, r2
 800156a:	f001 f977 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800156e:	0021      	movs	r1, r4
 8001570:	187b      	adds	r3, r7, r1
 8001572:	22c8      	movs	r2, #200	; 0xc8
 8001574:	0152      	lsls	r2, r2, #5
 8001576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2201      	movs	r2, #1
 800157c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	187a      	adds	r2, r7, r1
 800158c:	23a0      	movs	r3, #160	; 0xa0
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f001 f962 	bl	800285c <HAL_GPIO_Init>

}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b009      	add	sp, #36	; 0x24
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	00000f04 	.word	0x00000f04
 80015a8:	50000400 	.word	0x50000400

080015ac <is_knx_controlbyte>:



uint8_t listen_group_address_counter = 0;

bool is_knx_controlbyte(uint8_t byte){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	0002      	movs	r2, r0
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	701a      	strb	r2, [r3, #0]
  return ((byte | 0b00101100) == 0b10111100 ); // Ignore repeat flag and priority flag
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	222c      	movs	r2, #44	; 0x2c
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3bbc      	subs	r3, #188	; 0xbc
 80015c4:	425a      	negs	r2, r3
 80015c6:	4153      	adcs	r3, r2
 80015c8:	b2db      	uxtb	r3, r3
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b002      	add	sp, #8
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <get_payload_length>:

uint8_t get_payload_length(uint8_t *address_buffer){
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  uint8_t length = (address_buffer[4] & 0b00001111) + 1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	220f      	movs	r2, #15
 80015e2:	4013      	ands	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	210f      	movs	r1, #15
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	3201      	adds	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
  return length;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}

080015fa <is_target_group>:

bool is_target_group(uint8_t *address_buffer){
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  return address_buffer[4] & 0b10000000; 	//Letztes bit von zielbyte auslesen, wenn 1 dann gruppenadresse
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	001a      	movs	r2, r3
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	4013      	ands	r3, r2
 800160e:	1e5a      	subs	r2, r3, #1
 8001610:	4193      	sbcs	r3, r2
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}

0800161c <get_target_maingroup>:

uint8_t get_target_maingroup(uint8_t *address_buffer){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((address_buffer[2] & 0b01111000) >> 3);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3302      	adds	r3, #2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	10db      	asrs	r3, r3, #3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	220f      	movs	r2, #15
 8001630:	4013      	ands	r3, r2
 8001632:	b2db      	uxtb	r3, r3
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <get_target_middlegroup>:

uint8_t get_target_middlegroup(uint8_t *address_buffer){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (address_buffer[2] & 0b00000111);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3302      	adds	r3, #2
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2207      	movs	r2, #7
 800164c:	4013      	ands	r3, r2
 800164e:	b2db      	uxtb	r3, r3
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}

08001658 <get_target_subgroup>:

uint8_t get_target_subgroup(uint8_t *address_buffer){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return address_buffer[3];
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	78db      	ldrb	r3, [r3, #3]
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <check_interest>:

bool check_interest(uint8_t *address_buffer){
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	uint8_t maingroup = get_target_maingroup(address_buffer);
 8001674:	230f      	movs	r3, #15
 8001676:	18fc      	adds	r4, r7, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff ffce 	bl	800161c <get_target_maingroup>
 8001680:	0003      	movs	r3, r0
 8001682:	7023      	strb	r3, [r4, #0]
	uint8_t middlegroup = get_target_middlegroup(address_buffer);
 8001684:	230e      	movs	r3, #14
 8001686:	18fc      	adds	r4, r7, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff ffd6 	bl	800163c <get_target_middlegroup>
 8001690:	0003      	movs	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
	uint8_t subgroup = get_target_subgroup(address_buffer);
 8001694:	230d      	movs	r3, #13
 8001696:	18fc      	adds	r4, r7, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ffdc 	bl	8001658 <get_target_subgroup>
 80016a0:	0003      	movs	r3, r0
 80016a2:	7023      	strb	r3, [r4, #0]
	bool interested = is_target_group(address_buffer) && is_listening_to_group_address(maingroup, middlegroup, subgroup); //&&main middle und subgroup mit am anfang im code initilaisierten listening adessen vergleichen
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff ffa7 	bl	80015fa <is_target_group>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d00f      	beq.n	80016d0 <check_interest+0x64>
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	7818      	ldrb	r0, [r3, #0]
 80016b6:	230e      	movs	r3, #14
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	230d      	movs	r3, #13
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	001a      	movs	r2, r3
 80016c4:	f000 f82c 	bl	8001720 <is_listening_to_group_address>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <check_interest+0x64>
 80016cc:	2201      	movs	r2, #1
 80016ce:	e000      	b.n	80016d2 <check_interest+0x66>
 80016d0:	2200      	movs	r2, #0
 80016d2:	200c      	movs	r0, #12
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	2101      	movs	r1, #1
 80016dc:	400a      	ands	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
	return interested;
 80016e0:	183b      	adds	r3, r7, r0
 80016e2:	781b      	ldrb	r3, [r3, #0]
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b005      	add	sp, #20
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <clear_flags>:

void clear_flags(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	flag_controlbyte_receive_started 	= FLAG_FALSE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <clear_flags+0x24>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	flag_address_receive_started 		= FLAG_FALSE;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <clear_flags+0x28>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
	flag_payload_receive_started 		= FLAG_FALSE;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <clear_flags+0x2c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	flag_checksum_receive_started		= FLAG_FALSE;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <clear_flags+0x30>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	20000099 	.word	0x20000099
 8001714:	2000009a 	.word	0x2000009a
 8001718:	2000009b 	.word	0x2000009b
 800171c:	2000009c 	.word	0x2000009c

08001720 <is_listening_to_group_address>:
	listen_group_addresses[listen_group_address_counter][1] = atoi(substring2);
	listen_group_addresses[listen_group_address_counter][2] = substring3;
	listen_group_address_counter++;
}

bool is_listening_to_group_address(int maingroup, int middlegroup, int subgroup){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < listen_group_address_counter; i++){
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e026      	b.n	8001780 <is_listening_to_group_address+0x60>
    if ((listen_group_addresses[i][0] == maingroup)
 8001732:	4919      	ldr	r1, [pc, #100]	; (8001798 <is_listening_to_group_address+0x78>)
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	0013      	movs	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	189b      	adds	r3, r3, r2
 800173c:	5c5b      	ldrb	r3, [r3, r1]
 800173e:	001a      	movs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4293      	cmp	r3, r2
 8001744:	d119      	bne.n	800177a <is_listening_to_group_address+0x5a>
         && (listen_group_addresses[i][1] == middlegroup)
 8001746:	4914      	ldr	r1, [pc, #80]	; (8001798 <is_listening_to_group_address+0x78>)
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	0013      	movs	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	189b      	adds	r3, r3, r2
 8001750:	18cb      	adds	r3, r1, r3
 8001752:	3301      	adds	r3, #1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	001a      	movs	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4293      	cmp	r3, r2
 800175c:	d10d      	bne.n	800177a <is_listening_to_group_address+0x5a>
         && (listen_group_addresses[i][2] == subgroup)){
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <is_listening_to_group_address+0x78>)
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	0013      	movs	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	189b      	adds	r3, r3, r2
 8001768:	18cb      	adds	r3, r1, r3
 800176a:	3302      	adds	r3, #2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	001a      	movs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <is_listening_to_group_address+0x5a>
      return true;
 8001776:	2301      	movs	r3, #1
 8001778:	e009      	b.n	800178e <is_listening_to_group_address+0x6e>
  for (int i = 0; i < listen_group_address_counter; i++){
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <is_listening_to_group_address+0x7c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	001a      	movs	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	4293      	cmp	r3, r2
 800178a:	dbd2      	blt.n	8001732 <is_listening_to_group_address+0x12>
    }
  }
  return false;
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b006      	add	sp, #24
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	200000c0 	.word	0x200000c0
 800179c:	200000a8 	.word	0x200000a8

080017a0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <MX_LPTIM1_Init+0x4c>)
 80017a8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017b2:	22e0      	movs	r2, #224	; 0xe0
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017ba:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <MX_LPTIM1_Init+0x50>)
 80017bc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <MX_LPTIM1_Init+0x48>)
 80017d2:	0018      	movs	r0, r3
 80017d4:	f001 f9e8 	bl	8002ba8 <HAL_LPTIM_Init>
 80017d8:	1e03      	subs	r3, r0, #0
 80017da:	d001      	beq.n	80017e0 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 80017dc:	f000 f8e4 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	200000f4 	.word	0x200000f4
 80017ec:	40007c00 	.word	0x40007c00
 80017f0:	0000ffff 	.word	0x0000ffff

080017f4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_LPTIM_MspInit+0x38>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_LPTIM_MspInit+0x3c>)
 8001808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_LPTIM_MspInit+0x3c>)
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0609      	lsls	r1, r1, #24
 8001810:	430a      	orrs	r2, r1
 8001812:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	200d      	movs	r0, #13
 800181a:	f000 ff65 	bl	80026e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800181e:	200d      	movs	r0, #13
 8001820:	f000 ff77 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40007c00 	.word	0x40007c00
 8001830:	40021000 	.word	0x40021000

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001838:	f000 fe18 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183c:	f000 f812 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001840:	f7ff fe50 	bl	80014e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001844:	f000 fb54 	bl	8001ef0 <MX_TIM2_Init>
  MX_TIM21_Init();
 8001848:	f000 fbd0 	bl	8001fec <MX_TIM21_Init>
  MX_TIM22_Init();
 800184c:	f000 fc38 	bl	80020c0 <MX_TIM22_Init>
  MX_USART2_UART_Init();
 8001850:	f000 fd66 	bl	8002320 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8001854:	f7ff ffa4 	bl	80017a0 <MX_LPTIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  statemachine_process();
 8001858:	f000 f8aa 	bl	80019b0 <statemachine_process>
	  extract_data();
 800185c:	f000 faa4 	bl	8001da8 <extract_data>
	  statemachine_process();
 8001860:	e7fa      	b.n	8001858 <main+0x24>
	...

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b099      	sub	sp, #100	; 0x64
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	242c      	movs	r4, #44	; 0x2c
 800186c:	193b      	adds	r3, r7, r4
 800186e:	0018      	movs	r0, r3
 8001870:	2334      	movs	r3, #52	; 0x34
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f004 fad7 	bl	8005e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187a:	2318      	movs	r3, #24
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	0018      	movs	r0, r3
 8001880:	2314      	movs	r3, #20
 8001882:	001a      	movs	r2, r3
 8001884:	2100      	movs	r1, #0
 8001886:	f004 facf 	bl	8005e28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188a:	003b      	movs	r3, r7
 800188c:	0018      	movs	r0, r3
 800188e:	2318      	movs	r3, #24
 8001890:	001a      	movs	r2, r3
 8001892:	2100      	movs	r1, #0
 8001894:	f004 fac8 	bl	8005e28 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <SystemClock_Config+0xec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <SystemClock_Config+0xf0>)
 800189e:	401a      	ands	r2, r3
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <SystemClock_Config+0xec>)
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	0109      	lsls	r1, r1, #4
 80018a6:	430a      	orrs	r2, r1
 80018a8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80018aa:	0021      	movs	r1, r4
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	220a      	movs	r2, #10
 80018b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2210      	movs	r2, #16
 80018bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2201      	movs	r2, #1
 80018c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2202      	movs	r2, #2
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	02d2      	lsls	r2, r2, #11
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	03d2      	lsls	r2, r2, #15
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	0018      	movs	r0, r3
 80018e4:	f001 fc6a 	bl	80031bc <HAL_RCC_OscConfig>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80018ec:	f000 f85c 	bl	80019a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	2118      	movs	r1, #24
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	220f      	movs	r2, #15
 80018f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2203      	movs	r2, #3
 80018fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2101      	movs	r1, #1
 8001914:	0018      	movs	r0, r3
 8001916:	f001 ffd1 	bl	80038bc <HAL_RCC_ClockConfig>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800191e:	f000 f843 	bl	80019a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPTIM1;
 8001922:	003b      	movs	r3, r7
 8001924:	2282      	movs	r2, #130	; 0x82
 8001926:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001928:	003b      	movs	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800192e:	003b      	movs	r3, r7
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	02d2      	lsls	r2, r2, #11
 8001934:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001936:	003b      	movs	r3, r7
 8001938:	0018      	movs	r0, r3
 800193a:	f002 f9df 	bl	8003cfc <HAL_RCCEx_PeriphCLKConfig>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001942:	f000 f831 	bl	80019a8 <Error_Handler>
  }
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b019      	add	sp, #100	; 0x64
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40007000 	.word	0x40007000
 8001954:	ffffe7ff 	.word	0xffffe7ff

08001958 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	statemachine_uart();
 8001960:	f000 f91e 	bl	8001ba0 <statemachine_uart>
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	__NOP();
 8001974:	46c0      	nop			; (mov r8, r8)
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_LPTIM_AutoReloadMatchCallback+0x20>)
 800198a:	0018      	movs	r0, r3
 800198c:	f001 fa0e 	bl	8002dac <HAL_LPTIM_Counter_Stop_IT>
	flag_lptim_interrupt = FLAG_TRUE;
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	46bd      	mov	sp, r7
 800199a:	b002      	add	sp, #8
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	200000f4 	.word	0x200000f4
 80019a4:	20000098 	.word	0x20000098

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ae:	e7fe      	b.n	80019ae <Error_Handler+0x6>

080019b0 <statemachine_process>:

uint8_t statemachine_process_state = STANDBY_STATE;


void statemachine_process ()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	switch(statemachine_process_state)
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <statemachine_process+0x3c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d813      	bhi.n	80019e4 <statemachine_process+0x34>
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <statemachine_process+0x40>)
 80019c0:	18d3      	adds	r3, r2, r3
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	469f      	mov	pc, r3
	{

	case STANDBY_STATE:
		statemachine_standby_state();
 80019c6:	f000 f815 	bl	80019f4 <statemachine_standby_state>
		break;
 80019ca:	e00c      	b.n	80019e6 <statemachine_process+0x36>

	case INIT_STATE:
		statemachine_init_state();
 80019cc:	f000 f820 	bl	8001a10 <statemachine_init_state>
		break;
 80019d0:	e009      	b.n	80019e6 <statemachine_process+0x36>

	case SET_STATE:
		statemachine_set_state();
 80019d2:	f000 f83b 	bl	8001a4c <statemachine_set_state>
		break;
 80019d6:	e006      	b.n	80019e6 <statemachine_process+0x36>

	case STANDARD_STATE:
		statemachine_standard_state();
 80019d8:	f000 f868 	bl	8001aac <statemachine_standard_state>
		break;
 80019dc:	e003      	b.n	80019e6 <statemachine_process+0x36>

	case CONTROLLED_STATE:
		statemachine_controlled_state();
 80019de:	f000 f899 	bl	8001b14 <statemachine_controlled_state>
		break;
 80019e2:	e000      	b.n	80019e6 <statemachine_process+0x36>

	default:
		break;
 80019e4:	46c0      	nop			; (mov r8, r8)
	}
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000b0 	.word	0x200000b0
 80019f0:	08006014 	.word	0x08006014

080019f4 <statemachine_standby_state>:



void statemachine_standby_state(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	reset_all_pwm();
 80019f8:	f7ff fcb2 	bl	8001360 <reset_all_pwm>
	stop_timers();
 80019fc:	f7ff fcc4 	bl	8001388 <stop_timers>
	statemachine_process_state = INIT_STATE;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <statemachine_standby_state+0x18>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000b0 	.word	0x200000b0

08001a10 <statemachine_init_state>:


void statemachine_init_state(){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <statemachine_init_state+0x2c>)
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <statemachine_init_state+0x30>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f002 ff02 	bl	8004824 <HAL_UART_Receive_IT>
	flag_controlbyte_receive_started = FLAG_TRUE;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <statemachine_init_state+0x34>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
	start_timers();
 8001a26:	f7ff fc5b 	bl	80012e0 <start_timers>
	reset_all_pwm();
 8001a2a:	f7ff fc99 	bl	8001360 <reset_all_pwm>
	statemachine_process_state = SET_STATE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <statemachine_init_state+0x38>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	701a      	strb	r2, [r3, #0]
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	200000e0 	.word	0x200000e0
 8001a40:	200001e8 	.word	0x200001e8
 8001a44:	20000099 	.word	0x20000099
 8001a48:	200000b0 	.word	0x200000b0

08001a4c <statemachine_set_state>:


void statemachine_set_state(){
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af04      	add	r7, sp, #16
	set_pwm(min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val, min_pwm_val);
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	001c      	movs	r4, r3
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	001d      	movs	r5, r3
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	001e      	movs	r6, r3
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	001a      	movs	r2, r3
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	0019      	movs	r1, r3
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <statemachine_set_state+0x58>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	9303      	str	r3, [sp, #12]
 8001a82:	9002      	str	r0, [sp, #8]
 8001a84:	9101      	str	r1, [sp, #4]
 8001a86:	9200      	str	r2, [sp, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0032      	movs	r2, r6
 8001a8c:	0029      	movs	r1, r5
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff fcae 	bl	80013f0 <set_pwm>
	statemachine_process_state = STANDARD_STATE;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <statemachine_set_state+0x5c>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b003      	add	sp, #12
 8001aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	0800600a 	.word	0x0800600a
 8001aa8:	200000b0 	.word	0x200000b0

08001aac <statemachine_standard_state>:


void statemachine_standard_state(){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(humidity >= max_humidity_allowed){
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <statemachine_standard_state+0x50>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <statemachine_standard_state+0x54>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1c19      	adds	r1, r3, #0
 8001aba:	1c10      	adds	r0, r2, #0
 8001abc:	f7fe fbe0 	bl	8000280 <__aeabi_fcmpge>
 8001ac0:	1e03      	subs	r3, r0, #0
 8001ac2:	d003      	beq.n	8001acc <statemachine_standard_state+0x20>
		statemachine_process_state = CONTROLLED_STATE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <statemachine_standard_state+0x58>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	701a      	strb	r2, [r3, #0]
		switch_direction();
		flag_lptim_interrupt = FLAG_FALSE;
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
		statemachine_process_state = SET_STATE;
	}
}
 8001aca:	e013      	b.n	8001af4 <statemachine_standard_state+0x48>
	else if(flag_lptim_interrupt == FLAG_TRUE){
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <statemachine_standard_state+0x5c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00f      	beq.n	8001af4 <statemachine_standard_state+0x48>
		switch_direction();
 8001ad4:	f7ff fcba 	bl	800144c <switch_direction>
		flag_lptim_interrupt = FLAG_FALSE;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <statemachine_standard_state+0x5c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <statemachine_standard_state+0x60>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	001a      	movs	r2, r3
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <statemachine_standard_state+0x64>)
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f001 f8e9 	bl	8002cc0 <HAL_LPTIM_Counter_Start_IT>
		statemachine_process_state = SET_STATE;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <statemachine_standard_state+0x58>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	200000ac 	.word	0x200000ac
 8001b00:	20000124 	.word	0x20000124
 8001b04:	200000b0 	.word	0x200000b0
 8001b08:	20000098 	.word	0x20000098
 8001b0c:	08006008 	.word	0x08006008
 8001b10:	200000f4 	.word	0x200000f4

08001b14 <statemachine_controlled_state>:


void statemachine_controlled_state(){
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0

	uint16_t new_dutycycle = pi_controller(actual_humidity);
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <statemachine_controlled_state+0x70>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1c18      	adds	r0, r3, #0
 8001b20:	f7fe fc02 	bl	8000328 <__aeabi_f2uiz>
 8001b24:	0003      	movs	r3, r0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	1dbc      	adds	r4, r7, #6
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7ff fb00 	bl	8001130 <pi_controller>
 8001b30:	0003      	movs	r3, r0
 8001b32:	8023      	strh	r3, [r4, #0]
	adjust_pwm_value(new_dutycycle);
 8001b34:	1dbb      	adds	r3, r7, #6
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fbb5 	bl	80012a8 <adjust_pwm_value>
	if(flag_lptim_interrupt == FLAG_TRUE){
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <statemachine_controlled_state+0x74>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00c      	beq.n	8001b60 <statemachine_controlled_state+0x4c>
		switch_direction();
 8001b46:	f7ff fc81 	bl	800144c <switch_direction>
		flag_lptim_interrupt = FLAG_FALSE;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <statemachine_controlled_state+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Start_IT(&hlptim1, lptim_period);
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <statemachine_controlled_state+0x78>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	001a      	movs	r2, r3
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <statemachine_controlled_state+0x7c>)
 8001b58:	0011      	movs	r1, r2
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f001 f8b0 	bl	8002cc0 <HAL_LPTIM_Counter_Start_IT>

	}
	if(humidity <= max_humidity_allowed){
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <statemachine_controlled_state+0x80>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <statemachine_controlled_state+0x84>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1c19      	adds	r1, r3, #0
 8001b6a:	1c10      	adds	r0, r2, #0
 8001b6c:	f7fe fb74 	bl	8000258 <__aeabi_fcmple>
 8001b70:	1e03      	subs	r3, r0, #0
 8001b72:	d100      	bne.n	8001b76 <statemachine_controlled_state+0x62>
		statemachine_process_state = STANDARD_STATE;
	}

}
 8001b74:	e002      	b.n	8001b7c <statemachine_controlled_state+0x68>
		statemachine_process_state = STANDARD_STATE;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <statemachine_controlled_state+0x88>)
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b003      	add	sp, #12
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	200000a0 	.word	0x200000a0
 8001b88:	20000098 	.word	0x20000098
 8001b8c:	08006008 	.word	0x08006008
 8001b90:	200000f4 	.word	0x200000f4
 8001b94:	200000ac 	.word	0x200000ac
 8001b98:	20000124 	.word	0x20000124
 8001b9c:	200000b0 	.word	0x200000b0

08001ba0 <statemachine_uart>:
uint8_t get_payload_lenght(uint8_t *buffer_knx_address);



void statemachine_uart()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	switch(statemachine_uart_state)
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <statemachine_uart+0x3c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d813      	bhi.n	8001bd4 <statemachine_uart+0x34>
 8001bac:	009a      	lsls	r2, r3, #2
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <statemachine_uart+0x40>)
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	469f      	mov	pc, r3
	{

	case CONTROLBYTE_STATE:
		statemachine_controlbyte_state();
 8001bb6:	f000 f815 	bl	8001be4 <statemachine_controlbyte_state>
		break;
 8001bba:	e00c      	b.n	8001bd6 <statemachine_uart+0x36>

	case ADDRESS_STATE:
		statemachine_address_state();
 8001bbc:	f000 f846 	bl	8001c4c <statemachine_address_state>
		break;
 8001bc0:	e009      	b.n	8001bd6 <statemachine_uart+0x36>

	case PAYLOAD_STATE:
		statemachine_payload_state();
 8001bc2:	f000 f865 	bl	8001c90 <statemachine_payload_state>
		break;
 8001bc6:	e006      	b.n	8001bd6 <statemachine_uart+0x36>

	case CHECKSUM_STATE:
		statemachine_checksum_state();
 8001bc8:	f000 f89a 	bl	8001d00 <statemachine_checksum_state>
		break;
 8001bcc:	e003      	b.n	8001bd6 <statemachine_uart+0x36>

	case ACK_STATE:
		statemachine_ack_state();
 8001bce:	f000 f8b9 	bl	8001d44 <statemachine_ack_state>
		break;
 8001bd2:	e000      	b.n	8001bd6 <statemachine_uart+0x36>

	default:
		break;
 8001bd4:	46c0      	nop			; (mov r8, r8)
	}
}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200000b2 	.word	0x200000b2
 8001be0:	08006028 	.word	0x08006028

08001be4 <statemachine_controlbyte_state>:

void statemachine_controlbyte_state(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	//einmaliger start uart am anfang des progammes nicht vergessen
	if(flag_controlbyte_receive_started == FLAG_FALSE && flag_data_processed == FLAG_TRUE){
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <statemachine_controlbyte_state+0x54>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4053      	eors	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <statemachine_controlbyte_state+0x2c>
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <statemachine_controlbyte_state+0x58>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <statemachine_controlbyte_state+0x2c>
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001bfe:	4910      	ldr	r1, [pc, #64]	; (8001c40 <statemachine_controlbyte_state+0x5c>)
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <statemachine_controlbyte_state+0x60>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	0018      	movs	r0, r3
 8001c06:	f002 fe0d 	bl	8004824 <HAL_UART_Receive_IT>
		flag_controlbyte_receive_started = FLAG_TRUE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <statemachine_controlbyte_state+0x54>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
	}
	//auf knx message prüfen
	if(is_knx_controlbyte(knx_controlbyte)){
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <statemachine_controlbyte_state+0x5c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fcc9 	bl	80015ac <is_knx_controlbyte>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d003      	beq.n	8001c26 <statemachine_controlbyte_state+0x42>
		statemachine_uart_state = ADDRESS_STATE;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <statemachine_controlbyte_state+0x64>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
	}
	else{
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
	}
}
 8001c24:	e005      	b.n	8001c32 <statemachine_controlbyte_state+0x4e>
		HAL_UART_Receive_IT(&huart2, &knx_controlbyte, sizeof(knx_controlbyte));
 8001c26:	4906      	ldr	r1, [pc, #24]	; (8001c40 <statemachine_controlbyte_state+0x5c>)
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <statemachine_controlbyte_state+0x60>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f002 fdf9 	bl	8004824 <HAL_UART_Receive_IT>
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000099 	.word	0x20000099
 8001c3c:	2000009d 	.word	0x2000009d
 8001c40:	200000e0 	.word	0x200000e0
 8001c44:	200001e8 	.word	0x200001e8
 8001c48:	200000b2 	.word	0x200000b2

08001c4c <statemachine_address_state>:


//Richtiges controllbyte wurde empfangen
void statemachine_address_state(){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

	if (flag_address_receive_started == FLAG_FALSE){
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <statemachine_address_state+0x34>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4053      	eors	r3, r2
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <statemachine_address_state+0x26>
		HAL_UART_Receive_IT(&huart2, buffer_knx_address, sizeof(buffer_knx_address));
 8001c5e:	4909      	ldr	r1, [pc, #36]	; (8001c84 <statemachine_address_state+0x38>)
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <statemachine_address_state+0x3c>)
 8001c62:	2205      	movs	r2, #5
 8001c64:	0018      	movs	r0, r3
 8001c66:	f002 fddd 	bl	8004824 <HAL_UART_Receive_IT>
		flag_address_receive_started = FLAG_TRUE;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <statemachine_address_state+0x34>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = PAYLOAD_STATE;
	}

}
 8001c70:	e002      	b.n	8001c78 <statemachine_address_state+0x2c>
		statemachine_uart_state = PAYLOAD_STATE;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <statemachine_address_state+0x40>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	701a      	strb	r2, [r3, #0]
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	2000009a 	.word	0x2000009a
 8001c84:	200000ec 	.word	0x200000ec
 8001c88:	200001e8 	.word	0x200001e8
 8001c8c:	200000b2 	.word	0x200000b2

08001c90 <statemachine_payload_state>:

void statemachine_payload_state(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0

	payload_length = get_payload_length(buffer_knx_address);
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <statemachine_payload_state+0x58>)
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff fc9b 	bl	80015d2 <get_payload_length>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <statemachine_payload_state+0x5c>)
 8001ca2:	701a      	strb	r2, [r3, #0]

	if(flag_payload_receive_started == FLAG_FALSE){
 8001ca4:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <statemachine_payload_state+0x60>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4053      	eors	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <statemachine_payload_state+0x4a>
		buffer_knx_payload = malloc(sizeof(uint8_t) * payload_length);			//speicher nach auswertung freigeben
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <statemachine_payload_state+0x5c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f004 f8a2 	bl	8005e00 <malloc>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	001a      	movs	r2, r3
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <statemachine_payload_state+0x64>)
 8001cc2:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, buffer_knx_payload, sizeof(buffer_knx_payload));
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <statemachine_payload_state+0x64>)
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <statemachine_payload_state+0x68>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f002 fda9 	bl	8004824 <HAL_UART_Receive_IT>
		flag_payload_receive_started = FLAG_TRUE;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <statemachine_payload_state+0x60>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = CHECKSUM_STATE;
	}
}
 8001cd8:	e002      	b.n	8001ce0 <statemachine_payload_state+0x50>
		statemachine_uart_state = CHECKSUM_STATE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <statemachine_payload_state+0x6c>)
 8001cdc:	2203      	movs	r2, #3
 8001cde:	701a      	strb	r2, [r3, #0]
}
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	200000ec 	.word	0x200000ec
 8001cec:	200000b1 	.word	0x200000b1
 8001cf0:	2000009b 	.word	0x2000009b
 8001cf4:	200000a4 	.word	0x200000a4
 8001cf8:	200001e8 	.word	0x200001e8
 8001cfc:	200000b2 	.word	0x200000b2

08001d00 <statemachine_checksum_state>:

void statemachine_checksum_state(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	if(flag_checksum_receive_started == FLAG_FALSE){
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <statemachine_checksum_state+0x34>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4053      	eors	r3, r2
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <statemachine_checksum_state+0x26>
		HAL_UART_Receive_IT(&huart2, &knx_checksum_byte, sizeof(knx_checksum_byte));
 8001d12:	4909      	ldr	r1, [pc, #36]	; (8001d38 <statemachine_checksum_state+0x38>)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <statemachine_checksum_state+0x3c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 fd83 	bl	8004824 <HAL_UART_Receive_IT>
		flag_checksum_receive_started = FLAG_TRUE;
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <statemachine_checksum_state+0x34>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
	}
	else{
		statemachine_uart_state = ACK_STATE;
	}
}
 8001d24:	e002      	b.n	8001d2c <statemachine_checksum_state+0x2c>
		statemachine_uart_state = ACK_STATE;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <statemachine_checksum_state+0x40>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	701a      	strb	r2, [r3, #0]
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	2000009c 	.word	0x2000009c
 8001d38:	200000ea 	.word	0x200000ea
 8001d3c:	200001e8 	.word	0x200001e8
 8001d40:	200000b2 	.word	0x200000b2

08001d44 <statemachine_ack_state>:

void statemachine_ack_state(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	if(check_interest(buffer_knx_address)){
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <statemachine_ack_state+0x48>)
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff fc8e 	bl	800166c <check_interest>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d00c      	beq.n	8001d6e <statemachine_ack_state+0x2a>
		HAL_UART_Transmit_IT(&huart2, &interested_byte, sizeof(interested_byte));
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <statemachine_ack_state+0x4c>)
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <statemachine_ack_state+0x50>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f002 fce4 	bl	8004728 <HAL_UART_Transmit_IT>
		flag_uart_reception_complete = FLAG_TRUE;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <statemachine_ack_state+0x54>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
		flag_data_processed = FLAG_FALSE;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <statemachine_ack_state+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e005      	b.n	8001d7a <statemachine_ack_state+0x36>
	}
	else{
		HAL_UART_Transmit_IT(&huart2, &not_interested_byte, sizeof(not_interested_byte));
 8001d6e:	490c      	ldr	r1, [pc, #48]	; (8001da0 <statemachine_ack_state+0x5c>)
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <statemachine_ack_state+0x50>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	0018      	movs	r0, r3
 8001d76:	f002 fcd7 	bl	8004728 <HAL_UART_Transmit_IT>
	}
	clear_flags();
 8001d7a:	f7ff fcb7 	bl	80016ec <clear_flags>
	statemachine_uart_state = CONTROLBYTE_STATE;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <statemachine_ack_state+0x60>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	200000ec 	.word	0x200000ec
 8001d90:	20000004 	.word	0x20000004
 8001d94:	200001e8 	.word	0x200001e8
 8001d98:	2000009e 	.word	0x2000009e
 8001d9c:	2000009d 	.word	0x2000009d
 8001da0:	20000005 	.word	0x20000005
 8001da4:	200000b2 	.word	0x200000b2

08001da8 <extract_data>:

void extract_data(void){
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	if(flag_uart_reception_complete == FLAG_TRUE){
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <extract_data+0x38>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00f      	beq.n	8001dd6 <extract_data+0x2e>
		// to do aus buffer_knx_payload feuchtigkeit extrahieren
		float humidity = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
		flag_data_processed = FLAG_TRUE;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <extract_data+0x3c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
		flag_uart_reception_complete = FLAG_FALSE;
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <extract_data+0x38>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
		actual_humidity = humidity;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <extract_data+0x40>)
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	601a      	str	r2, [r3, #0]
		free(buffer_knx_payload);
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <extract_data+0x44>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f004 f81f 	bl	8005e14 <free>
	  }
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	2000009e 	.word	0x2000009e
 8001de4:	2000009d 	.word	0x2000009d
 8001de8:	200000a0 	.word	0x200000a0
 8001dec:	200000a4 	.word	0x200000a4

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <HAL_MspInit+0x24>)
 8001df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_MspInit+0x24>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_MspInit+0x24>)
 8001e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_MspInit+0x24>)
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	0549      	lsls	r1, r1, #21
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 fb6a 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <LPTIM1_IRQHandler+0x14>)
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 ffe4 	bl	8002e1c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	200000f4 	.word	0x200000f4

08001e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <USART2_IRQHandler+0x14>)
 8001e66:	0018      	movs	r0, r3
 8001e68:	f002 fd42 	bl	80048f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	200001e8 	.word	0x200001e8

08001e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <_sbrk+0x5c>)
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <_sbrk+0x60>)
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e8c:	4b13      	ldr	r3, [pc, #76]	; (8001edc <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <_sbrk+0x64>)
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <_sbrk+0x68>)
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	18d3      	adds	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ea8:	f003 ff80 	bl	8005dac <__errno>
 8001eac:	0003      	movs	r3, r0
 8001eae:	220c      	movs	r2, #12
 8001eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	425b      	negs	r3, r3
 8001eb6:	e009      	b.n	8001ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	18d2      	adds	r2, r2, r3
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <_sbrk+0x64>)
 8001ec8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001eca:	68fb      	ldr	r3, [r7, #12]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b006      	add	sp, #24
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20002000 	.word	0x20002000
 8001ed8:	00000400 	.word	0x00000400
 8001edc:	200000b4 	.word	0x200000b4
 8001ee0:	20000278 	.word	0x20000278

08001ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	2310      	movs	r3, #16
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	0018      	movs	r0, r3
 8001efc:	2308      	movs	r3, #8
 8001efe:	001a      	movs	r2, r3
 8001f00:	2100      	movs	r1, #0
 8001f02:	f003 ff91 	bl	8005e28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f06:	003b      	movs	r3, r7
 8001f08:	0018      	movs	r0, r3
 8001f0a:	2310      	movs	r3, #16
 8001f0c:	001a      	movs	r2, r3
 8001f0e:	2100      	movs	r1, #0
 8001f10:	f003 ff8a 	bl	8005e28 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f14:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	05d2      	lsls	r2, r2, #23
 8001f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f1c:	4b32      	ldr	r3, [pc, #200]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f24:	2220      	movs	r2, #32
 8001f26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001f28:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f2a:	22fa      	movs	r2, #250	; 0xfa
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f002 f804 	bl	8003f4c <HAL_TIM_PWM_Init>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001f48:	f7ff fd2e 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f5a:	187a      	adds	r2, r7, r1
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f5e:	0011      	movs	r1, r2
 8001f60:	0018      	movs	r0, r3
 8001f62:	f002 fb35 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f6a:	f7ff fd1d 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6e:	003b      	movs	r3, r7
 8001f70:	2260      	movs	r2, #96	; 0x60
 8001f72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f74:	003b      	movs	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f7a:	003b      	movs	r3, r7
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f80:	003b      	movs	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f86:	0039      	movs	r1, r7
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f002 f8e7 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001f96:	f7ff fd07 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	0039      	movs	r1, r7
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f002 f8dd 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	1e03      	subs	r3, r0, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8001faa:	f7ff fcfd 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fae:	0039      	movs	r1, r7
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f002 f8d3 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001fbe:	f7ff fcf3 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fc2:	0039      	movs	r1, r7
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f002 f8c9 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001fd2:	f7ff fce9 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <MX_TIM2_Init+0xf8>)
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f90d 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	20000168 	.word	0x20000168

08001fec <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f003 ff13 	bl	8005e28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002002:	003b      	movs	r3, r7
 8002004:	0018      	movs	r0, r3
 8002006:	2310      	movs	r3, #16
 8002008:	001a      	movs	r2, r3
 800200a:	2100      	movs	r1, #0
 800200c:	f003 ff0c 	bl	8005e28 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002012:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <MX_TIM21_Init+0xd0>)
 8002014:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <MX_TIM21_Init+0xcc>)
 800201e:	2220      	movs	r2, #32
 8002020:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 4000;
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002024:	22fa      	movs	r2, #250	; 0xfa
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <MX_TIM21_Init+0xcc>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002032:	2200      	movs	r2, #0
 8002034:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002038:	0018      	movs	r0, r3
 800203a:	f001 ff87 	bl	8003f4c <HAL_TIM_PWM_Init>
 800203e:	1e03      	subs	r3, r0, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM21_Init+0x5a>
  {
    Error_Handler();
 8002042:	f7ff fcb1 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2110      	movs	r1, #16
 8002048:	187b      	adds	r3, r7, r1
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002054:	187a      	adds	r2, r7, r1
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002058:	0011      	movs	r1, r2
 800205a:	0018      	movs	r0, r3
 800205c:	f002 fab8 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM21_Init+0x7c>
  {
    Error_Handler();
 8002064:	f7ff fca0 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	003b      	movs	r3, r7
 800206a:	2260      	movs	r2, #96	; 0x60
 800206c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800206e:	003b      	movs	r3, r7
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002074:	003b      	movs	r3, r7
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207a:	003b      	movs	r3, r7
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002080:	0039      	movs	r1, r7
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002084:	2200      	movs	r2, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f002 f86a 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8002090:	f7ff fc8a 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002094:	0039      	movs	r1, r7
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_TIM21_Init+0xcc>)
 8002098:	2204      	movs	r2, #4
 800209a:	0018      	movs	r0, r3
 800209c:	f002 f860 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 80020a0:	1e03      	subs	r3, r0, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM21_Init+0xbc>
  {
    Error_Handler();
 80020a4:	f7ff fc80 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <MX_TIM21_Init+0xcc>)
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 f8a4 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b006      	add	sp, #24
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200001a8 	.word	0x200001a8
 80020bc:	40010800 	.word	0x40010800

080020c0 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c6:	2310      	movs	r3, #16
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	0018      	movs	r0, r3
 80020cc:	2308      	movs	r3, #8
 80020ce:	001a      	movs	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	f003 fea9 	bl	8005e28 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020d6:	003b      	movs	r3, r7
 80020d8:	0018      	movs	r0, r3
 80020da:	2310      	movs	r3, #16
 80020dc:	001a      	movs	r2, r3
 80020de:	2100      	movs	r1, #0
 80020e0:	f003 fea2 	bl	8005e28 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <MX_TIM22_Init+0xcc>)
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <MX_TIM22_Init+0xd0>)
 80020e8:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <MX_TIM22_Init+0xcc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020f0:	4b26      	ldr	r3, [pc, #152]	; (800218c <MX_TIM22_Init+0xcc>)
 80020f2:	2220      	movs	r2, #32
 80020f4:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 4000;
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_TIM22_Init+0xcc>)
 80020f8:	22fa      	movs	r2, #250	; 0xfa
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <MX_TIM22_Init+0xcc>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_TIM22_Init+0xcc>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM22_Init+0xcc>)
 800210c:	0018      	movs	r0, r3
 800210e:	f001 ff1d 	bl	8003f4c <HAL_TIM_PWM_Init>
 8002112:	1e03      	subs	r3, r0, #0
 8002114:	d001      	beq.n	800211a <MX_TIM22_Init+0x5a>
  {
    Error_Handler();
 8002116:	f7ff fc47 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2110      	movs	r1, #16
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002128:	187a      	adds	r2, r7, r1
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_TIM22_Init+0xcc>)
 800212c:	0011      	movs	r1, r2
 800212e:	0018      	movs	r0, r3
 8002130:	f002 fa4e 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002134:	1e03      	subs	r3, r0, #0
 8002136:	d001      	beq.n	800213c <MX_TIM22_Init+0x7c>
  {
    Error_Handler();
 8002138:	f7ff fc36 	bl	80019a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213c:	003b      	movs	r3, r7
 800213e:	2260      	movs	r2, #96	; 0x60
 8002140:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002142:	003b      	movs	r3, r7
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	003b      	movs	r3, r7
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214e:	003b      	movs	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002154:	0039      	movs	r1, r7
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <MX_TIM22_Init+0xcc>)
 8002158:	2200      	movs	r2, #0
 800215a:	0018      	movs	r0, r3
 800215c:	f002 f800 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8002160:	1e03      	subs	r3, r0, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 8002164:	f7ff fc20 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002168:	0039      	movs	r1, r7
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_TIM22_Init+0xcc>)
 800216c:	2204      	movs	r2, #4
 800216e:	0018      	movs	r0, r3
 8002170:	f001 fff6 	bl	8004160 <HAL_TIM_PWM_ConfigChannel>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d001      	beq.n	800217c <MX_TIM22_Init+0xbc>
  {
    Error_Handler();
 8002178:	f7ff fc16 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <MX_TIM22_Init+0xcc>)
 800217e:	0018      	movs	r0, r3
 8002180:	f000 f83a 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b006      	add	sp, #24
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000128 	.word	0x20000128
 8002190:	40011400 	.word	0x40011400

08002194 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	05db      	lsls	r3, r3, #23
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 80021b4:	e016      	b.n	80021e4 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM21)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_TIM_PWM_MspInit+0x5c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d106      	bne.n	80021ce <HAL_TIM_PWM_MspInit+0x3a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021c6:	2104      	movs	r1, #4
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021cc:	e00a      	b.n	80021e4 <HAL_TIM_PWM_MspInit+0x50>
  else if(tim_pwmHandle->Instance==TIM22)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_TIM_PWM_MspInit+0x60>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d105      	bne.n	80021e4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_TIM_PWM_MspInit+0x58>)
 80021de:	2120      	movs	r1, #32
 80021e0:	430a      	orrs	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40011400 	.word	0x40011400

080021f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	2314      	movs	r3, #20
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	0018      	movs	r0, r3
 8002206:	2314      	movs	r3, #20
 8002208:	001a      	movs	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	f003 fe0c 	bl	8005e28 <memset>
  if(timHandle->Instance==TIM2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	05db      	lsls	r3, r3, #23
 8002218:	429a      	cmp	r2, r3
 800221a:	d123      	bne.n	8002264 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 8002222:	2101      	movs	r1, #1
 8002224:	430a      	orrs	r2, r1
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002234:	2114      	movs	r1, #20
 8002236:	187b      	adds	r3, r7, r1
 8002238:	220f      	movs	r2, #15
 800223a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2202      	movs	r2, #2
 8002240:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	187b      	adds	r3, r7, r1
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800224e:	187b      	adds	r3, r7, r1
 8002250:	2202      	movs	r2, #2
 8002252:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	187a      	adds	r2, r7, r1
 8002256:	23a0      	movs	r3, #160	; 0xa0
 8002258:	05db      	lsls	r3, r3, #23
 800225a:	0011      	movs	r1, r2
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fafd 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8002262:	e050      	b.n	8002306 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM21)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_TIM_MspPostInit+0x11c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d123      	bne.n	80022b6 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 8002270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002272:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 8002274:	2102      	movs	r1, #2
 8002276:	430a      	orrs	r2, r1
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002286:	2114      	movs	r1, #20
 8002288:	187b      	adds	r3, r7, r1
 800228a:	22c0      	movs	r2, #192	; 0xc0
 800228c:	01d2      	lsls	r2, r2, #7
 800228e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	187b      	adds	r3, r7, r1
 8002292:	2202      	movs	r2, #2
 8002294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	2205      	movs	r2, #5
 80022a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_TIM_MspPostInit+0x120>)
 80022ac:	0019      	movs	r1, r3
 80022ae:	0010      	movs	r0, r2
 80022b0:	f000 fad4 	bl	800285c <HAL_GPIO_Init>
}
 80022b4:	e027      	b.n	8002306 <HAL_TIM_MspPostInit+0x10e>
  else if(timHandle->Instance==TIM22)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_TIM_MspPostInit+0x124>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d122      	bne.n	8002306 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_TIM_MspPostInit+0x118>)
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022d8:	2114      	movs	r1, #20
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	22c0      	movs	r2, #192	; 0xc0
 80022de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2202      	movs	r2, #2
 80022e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 80022f2:	187b      	adds	r3, r7, r1
 80022f4:	2205      	movs	r2, #5
 80022f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	187a      	adds	r2, r7, r1
 80022fa:	23a0      	movs	r3, #160	; 0xa0
 80022fc:	05db      	lsls	r3, r3, #23
 80022fe:	0011      	movs	r1, r2
 8002300:	0018      	movs	r0, r3
 8002302:	f000 faab 	bl	800285c <HAL_GPIO_Init>
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b00a      	add	sp, #40	; 0x28
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40021000 	.word	0x40021000
 8002314:	40010800 	.word	0x40010800
 8002318:	50000400 	.word	0x50000400
 800231c:	40011400 	.word	0x40011400

08002320 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART2_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800232c:	2296      	movs	r2, #150	; 0x96
 800232e:	01d2      	lsls	r2, r2, #7
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002364:	0018      	movs	r0, r3
 8002366:	f002 f98b 	bl	8004680 <HAL_UART_Init>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f7ff fb1b 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200001e8 	.word	0x200001e8
 800237c:	40004400 	.word	0x40004400

08002380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	230c      	movs	r3, #12
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	0018      	movs	r0, r3
 800238e:	2314      	movs	r3, #20
 8002390:	001a      	movs	r2, r3
 8002392:	2100      	movs	r1, #0
 8002394:	f003 fd48 	bl	8005e28 <memset>
  if(uartHandle->Instance==USART2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_UART_MspInit+0x90>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d132      	bne.n	8002408 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HAL_UART_MspInit+0x94>)
 80023a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a6:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_UART_MspInit+0x94>)
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	0289      	lsls	r1, r1, #10
 80023ac:	430a      	orrs	r2, r1
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_UART_MspInit+0x94>)
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_UART_MspInit+0x94>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	430a      	orrs	r2, r1
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_UART_MspInit+0x94>)
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c8:	210c      	movs	r1, #12
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	22c0      	movs	r2, #192	; 0xc0
 80023ce:	00d2      	lsls	r2, r2, #3
 80023d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2202      	movs	r2, #2
 80023d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	187b      	adds	r3, r7, r1
 80023e0:	2203      	movs	r2, #3
 80023e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2204      	movs	r2, #4
 80023e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ea:	187a      	adds	r2, r7, r1
 80023ec:	23a0      	movs	r3, #160	; 0xa0
 80023ee:	05db      	lsls	r3, r3, #23
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa32 	bl	800285c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	201c      	movs	r0, #28
 80023fe:	f000 f973 	bl	80026e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002402:	201c      	movs	r0, #28
 8002404:	f000 f985 	bl	8002712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b008      	add	sp, #32
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40004400 	.word	0x40004400
 8002414:	40021000 	.word	0x40021000

08002418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800241a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002442:	f7ff fd4f 	bl	8001ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f003 fcb7 	bl	8005db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244a:	f7ff f9f3 	bl	8001834 <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
   ldr   r0, =_estack
 8002450:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800245c:	080060b8 	.word	0x080060b8
  ldr r2, =_sbss
 8002460:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002464:	20000274 	.word	0x20000274

08002468 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_COMP_IRQHandler>
	...

0800246c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_Init+0x3c>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Init+0x3c>)
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	430a      	orrs	r2, r1
 8002482:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002484:	2000      	movs	r0, #0
 8002486:	f000 f811 	bl	80024ac <HAL_InitTick>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d003      	beq.n	8002496 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e001      	b.n	800249a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002496:	f7ff fcab 	bl	8001df0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_InitTick+0x5c>)
 80024b6:	681c      	ldr	r4, [r3, #0]
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_InitTick+0x60>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	0019      	movs	r1, r3
 80024be:	23fa      	movs	r3, #250	; 0xfa
 80024c0:	0098      	lsls	r0, r3, #2
 80024c2:	f7fd fe21 	bl	8000108 <__udivsi3>
 80024c6:	0003      	movs	r3, r0
 80024c8:	0019      	movs	r1, r3
 80024ca:	0020      	movs	r0, r4
 80024cc:	f7fd fe1c 	bl	8000108 <__udivsi3>
 80024d0:	0003      	movs	r3, r0
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 f92d 	bl	8002732 <HAL_SYSTICK_Config>
 80024d8:	1e03      	subs	r3, r0, #0
 80024da:	d001      	beq.n	80024e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00f      	b.n	8002500 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d80b      	bhi.n	80024fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	2301      	movs	r3, #1
 80024ea:	425b      	negs	r3, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f8fa 	bl	80026e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_InitTick+0x64>)
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b003      	add	sp, #12
 8002506:	bd90      	pop	{r4, r7, pc}
 8002508:	20000008 	.word	0x20000008
 800250c:	20000010 	.word	0x20000010
 8002510:	2000000c 	.word	0x2000000c

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x1c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	001a      	movs	r2, r3
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_IncTick+0x20>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	18d2      	adds	r2, r2, r3
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_IncTick+0x20>)
 8002526:	601a      	str	r2, [r3, #0]
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	20000010 	.word	0x20000010
 8002534:	2000026c 	.word	0x2000026c

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b02      	ldr	r3, [pc, #8]	; (8002548 <HAL_GetTick+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	2000026c 	.word	0x2000026c

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fff0 	bl	8002538 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3301      	adds	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_Delay+0x40>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	001a      	movs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	189b      	adds	r3, r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	f7ff ffe0 	bl	8002538 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000010 	.word	0x20000010

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	0002      	movs	r2, r0
 8002598:	1dfb      	adds	r3, r7, #7
 800259a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b7f      	cmp	r3, #127	; 0x7f
 80025a2:	d809      	bhi.n	80025b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	001a      	movs	r2, r3
 80025aa:	231f      	movs	r3, #31
 80025ac:	401a      	ands	r2, r3
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_EnableIRQ+0x30>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	4091      	lsls	r1, r2
 80025b4:	000a      	movs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
  }
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	0002      	movs	r2, r0
 80025cc:	6039      	str	r1, [r7, #0]
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	1dfb      	adds	r3, r7, #7
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b7f      	cmp	r3, #127	; 0x7f
 80025d8:	d828      	bhi.n	800262c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025da:	4a2f      	ldr	r2, [pc, #188]	; (8002698 <__NVIC_SetPriority+0xd4>)
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b25b      	sxtb	r3, r3
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	33c0      	adds	r3, #192	; 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	589b      	ldr	r3, [r3, r2]
 80025ea:	1dfa      	adds	r2, r7, #7
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	0011      	movs	r1, r2
 80025f0:	2203      	movs	r2, #3
 80025f2:	400a      	ands	r2, r1
 80025f4:	00d2      	lsls	r2, r2, #3
 80025f6:	21ff      	movs	r1, #255	; 0xff
 80025f8:	4091      	lsls	r1, r2
 80025fa:	000a      	movs	r2, r1
 80025fc:	43d2      	mvns	r2, r2
 80025fe:	401a      	ands	r2, r3
 8002600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	22ff      	movs	r2, #255	; 0xff
 8002608:	401a      	ands	r2, r3
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	0018      	movs	r0, r3
 8002610:	2303      	movs	r3, #3
 8002612:	4003      	ands	r3, r0
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002618:	481f      	ldr	r0, [pc, #124]	; (8002698 <__NVIC_SetPriority+0xd4>)
 800261a:	1dfb      	adds	r3, r7, #7
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b25b      	sxtb	r3, r3
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	430a      	orrs	r2, r1
 8002624:	33c0      	adds	r3, #192	; 0xc0
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800262a:	e031      	b.n	8002690 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <__NVIC_SetPriority+0xd8>)
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	0019      	movs	r1, r3
 8002634:	230f      	movs	r3, #15
 8002636:	400b      	ands	r3, r1
 8002638:	3b08      	subs	r3, #8
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3306      	adds	r3, #6
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	18d3      	adds	r3, r2, r3
 8002642:	3304      	adds	r3, #4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	1dfa      	adds	r2, r7, #7
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	0011      	movs	r1, r2
 800264c:	2203      	movs	r2, #3
 800264e:	400a      	ands	r2, r1
 8002650:	00d2      	lsls	r2, r2, #3
 8002652:	21ff      	movs	r1, #255	; 0xff
 8002654:	4091      	lsls	r1, r2
 8002656:	000a      	movs	r2, r1
 8002658:	43d2      	mvns	r2, r2
 800265a:	401a      	ands	r2, r3
 800265c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	401a      	ands	r2, r3
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	0018      	movs	r0, r3
 800266c:	2303      	movs	r3, #3
 800266e:	4003      	ands	r3, r0
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <__NVIC_SetPriority+0xd8>)
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	001c      	movs	r4, r3
 800267c:	230f      	movs	r3, #15
 800267e:	4023      	ands	r3, r4
 8002680:	3b08      	subs	r3, #8
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	430a      	orrs	r2, r1
 8002686:	3306      	adds	r3, #6
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	18c3      	adds	r3, r0, r3
 800268c:	3304      	adds	r3, #4
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b003      	add	sp, #12
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <SysTick_Config+0x40>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e010      	b.n	80026d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <SysTick_Config+0x44>)
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	3a01      	subs	r2, #1
 80026bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	2301      	movs	r3, #1
 80026c0:	425b      	negs	r3, r3
 80026c2:	2103      	movs	r1, #3
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff7d 	bl	80025c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <SysTick_Config+0x44>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SysTick_Config+0x44>)
 80026d2:	2207      	movs	r2, #7
 80026d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	00ffffff 	.word	0x00ffffff
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	210f      	movs	r1, #15
 80026f4:	187b      	adds	r3, r7, r1
 80026f6:	1c02      	adds	r2, r0, #0
 80026f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b25b      	sxtb	r3, r3
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff ff5d 	bl	80025c4 <__NVIC_SetPriority>
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	0002      	movs	r2, r0
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b25b      	sxtb	r3, r3
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ff33 	bl	8002590 <__NVIC_EnableIRQ>
}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff ffaf 	bl	80026a0 <SysTick_Config>
 8002742:	0003      	movs	r3, r0
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	230f      	movs	r3, #15
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2225      	movs	r2, #37	; 0x25
 8002760:	5c9b      	ldrb	r3, [r3, r2]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d008      	beq.n	800277a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2204      	movs	r2, #4
 800276c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2224      	movs	r2, #36	; 0x24
 8002772:	2100      	movs	r1, #0
 8002774:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e024      	b.n	80027c4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	210e      	movs	r1, #14
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2101      	movs	r1, #1
 8002796:	438a      	bics	r2, r1
 8002798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	221c      	movs	r2, #28
 80027a0:	401a      	ands	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2101      	movs	r1, #1
 80027a8:	4091      	lsls	r1, r2
 80027aa:	000a      	movs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2225      	movs	r2, #37	; 0x25
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2224      	movs	r2, #36	; 0x24
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

    return status;
 80027be:	230f      	movs	r3, #15
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d4:	230f      	movs	r3, #15
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2225      	movs	r2, #37	; 0x25
 80027e0:	5c9b      	ldrb	r3, [r3, r2]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2204      	movs	r2, #4
 80027ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ee:	230f      	movs	r3, #15
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e02a      	b.n	800284e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	210e      	movs	r1, #14
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	221c      	movs	r2, #28
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2101      	movs	r1, #1
 8002826:	4091      	lsls	r1, r2
 8002828:	000a      	movs	r2, r1
 800282a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2225      	movs	r2, #37	; 0x25
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2224      	movs	r2, #36	; 0x24
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	0010      	movs	r0, r2
 800284c:	4798      	blx	r3
    }
  }
  return status;
 800284e:	230f      	movs	r3, #15
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	781b      	ldrb	r3, [r3, #0]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b004      	add	sp, #16
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002872:	e149      	b.n	8002b08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4091      	lsls	r1, r2
 800287e:	000a      	movs	r2, r1
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d100      	bne.n	800288c <HAL_GPIO_Init+0x30>
 800288a:	e13a      	b.n	8002b02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	4013      	ands	r3, r2
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2203      	movs	r2, #3
 800289e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	409a      	lsls	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	43da      	mvns	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
 80028e0:	0013      	movs	r3, r2
 80028e2:	43da      	mvns	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	2201      	movs	r2, #1
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
 80028f8:	0013      	movs	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2203      	movs	r2, #3
 800290c:	4013      	ands	r3, r2
 800290e:	2b03      	cmp	r3, #3
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	43da      	mvns	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	409a      	lsls	r2, r3
 8002934:	0013      	movs	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	4013      	ands	r3, r2
 800294a:	2b02      	cmp	r3, #2
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	0092      	lsls	r2, r2, #2
 8002958:	58d3      	ldr	r3, [r2, r3]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2207      	movs	r2, #7
 8002960:	4013      	ands	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	409a      	lsls	r2, r3
 8002968:	0013      	movs	r3, r2
 800296a:	43da      	mvns	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2107      	movs	r1, #7
 800297a:	400b      	ands	r3, r1
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	6939      	ldr	r1, [r7, #16]
 8002994:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	43da      	mvns	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2203      	movs	r2, #3
 80029b4:	401a      	ands	r2, r3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	409a      	lsls	r2, r3
 80029bc:	0013      	movs	r3, r2
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	029b      	lsls	r3, r3, #10
 80029d2:	4013      	ands	r3, r2
 80029d4:	d100      	bne.n	80029d8 <HAL_GPIO_Init+0x17c>
 80029d6:	e094      	b.n	8002b02 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2c4>)
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_GPIO_Init+0x2c4>)
 80029de:	2101      	movs	r1, #1
 80029e0:	430a      	orrs	r2, r1
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e4:	4a4f      	ldr	r2, [pc, #316]	; (8002b24 <HAL_GPIO_Init+0x2c8>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3302      	adds	r3, #2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	589b      	ldr	r3, [r3, r2]
 80029f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2203      	movs	r2, #3
 80029f6:	4013      	ands	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	409a      	lsls	r2, r3
 80029fe:	0013      	movs	r3, r2
 8002a00:	43da      	mvns	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	23a0      	movs	r3, #160	; 0xa0
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d013      	beq.n	8002a3a <HAL_GPIO_Init+0x1de>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a44      	ldr	r2, [pc, #272]	; (8002b28 <HAL_GPIO_Init+0x2cc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00d      	beq.n	8002a36 <HAL_GPIO_Init+0x1da>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <HAL_GPIO_Init+0x2d0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <HAL_GPIO_Init+0x1d6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <HAL_GPIO_Init+0x2d4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <HAL_GPIO_Init+0x1d2>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x1e0>
 8002a2e:	2306      	movs	r3, #6
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x1e0>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x1e0>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x1e0>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	400a      	ands	r2, r1
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4935      	ldr	r1, [pc, #212]	; (8002b24 <HAL_GPIO_Init+0x2c8>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43da      	mvns	r2, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	025b      	lsls	r3, r3, #9
 8002a72:	4013      	ands	r3, r2
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	035b      	lsls	r3, r3, #13
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	039b      	lsls	r3, r3, #14
 8002af0:	4013      	ands	r3, r2
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_GPIO_Init+0x2d8>)
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	40da      	lsrs	r2, r3
 8002b10:	1e13      	subs	r3, r2, #0
 8002b12:	d000      	beq.n	8002b16 <HAL_GPIO_Init+0x2ba>
 8002b14:	e6ae      	b.n	8002874 <HAL_GPIO_Init+0x18>
  }
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b006      	add	sp, #24
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	50000800 	.word	0x50000800
 8002b30:	50001c00 	.word	0x50001c00
 8002b34:	40010400 	.word	0x40010400

08002b38 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	0008      	movs	r0, r1
 8002b42:	0011      	movs	r1, r2
 8002b44:	1cbb      	adds	r3, r7, #2
 8002b46:	1c02      	adds	r2, r0, #0
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	1c7b      	adds	r3, r7, #1
 8002b4c:	1c0a      	adds	r2, r1, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b50:	1c7b      	adds	r3, r7, #1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b58:	1cbb      	adds	r3, r7, #2
 8002b5a:	881a      	ldrh	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b62:	1cbb      	adds	r3, r7, #2
 8002b64:	881a      	ldrh	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b002      	add	sp, #8
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	1cbb      	adds	r3, r7, #2
 8002b7e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b86:	1cbb      	adds	r3, r7, #2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	041a      	lsls	r2, r3, #16
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	1cb9      	adds	r1, r7, #2
 8002b96:	8809      	ldrh	r1, [r1, #0]
 8002b98:	400b      	ands	r3, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e078      	b.n	8002cac <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	222e      	movs	r2, #46	; 0x2e
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	222d      	movs	r2, #45	; 0x2d
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fe0f 	bl	80017f4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	222e      	movs	r2, #46	; 0x2e
 8002bda:	2102      	movs	r1, #2
 8002bdc:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d103      	bne.n	8002c02 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	221e      	movs	r2, #30
 8002bfe:	4393      	bics	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4a2b      	ldr	r2, [pc, #172]	; (8002cb4 <HAL_LPTIM_Init+0x10c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_LPTIM_Init+0x110>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <HAL_LPTIM_Init+0x114>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002c24:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002c2a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002c30:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002c36:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d005      	beq.n	8002c6a <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	041b      	lsls	r3, r3, #16
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d107      	bne.n	8002c7a <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002c72:	4313      	orrs	r3, r2
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_LPTIM_Init+0x10c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00a      	beq.n	8002c9a <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002c8c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002c92:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	222e      	movs	r2, #46	; 0x2e
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b004      	add	sp, #16
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	0000ffff 	.word	0x0000ffff
 8002cb8:	ffff1f3f 	.word	0xffff1f3f
 8002cbc:	ff19f1fe 	.word	0xff19f1fe

08002cc0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	222e      	movs	r2, #46	; 0x2e
 8002cce:	2102      	movs	r1, #2
 8002cd0:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002cd2:	4b34      	ldr	r3, [pc, #208]	; (8002da4 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b33      	ldr	r3, [pc, #204]	; (8002da4 <HAL_LPTIM_Counter_Start_IT+0xe4>)
 8002cd8:	2180      	movs	r1, #128	; 0x80
 8002cda:	0589      	lsls	r1, r1, #22
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d00d      	beq.n	8002d04 <HAL_LPTIM_Counter_Start_IT+0x44>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	492a      	ldr	r1, [pc, #168]	; (8002da8 <HAL_LPTIM_Counter_Start_IT+0xe8>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2101      	movs	r1, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2210      	movs	r2, #16
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2110      	movs	r1, #16
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 f955 	bl	8002fd8 <LPTIM_WaitForFlag>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d101      	bne.n	8002d38 <HAL_LPTIM_Counter_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e031      	b.n	8002d9c <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f984 	bl	8003048 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f93c 	bl	8002fc0 <HAL_LPTIM_GetState>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d101      	bne.n	8002d52 <HAL_LPTIM_Counter_Start_IT+0x92>
  {
    return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e024      	b.n	8002d9c <HAL_LPTIM_Counter_Start_IT+0xdc>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	222e      	movs	r2, #46	; 0x2e
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40010400 	.word	0x40010400
 8002da8:	fffff1ff 	.word	0xfffff1ff

08002dac <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	222e      	movs	r2, #46	; 0x2e
 8002db8:	2102      	movs	r1, #2
 8002dba:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_LPTIM_Counter_Stop_IT+0x68>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_LPTIM_Counter_Stop_IT+0x68>)
 8002dc2:	4915      	ldr	r1, [pc, #84]	; (8002e18 <HAL_LPTIM_Counter_Stop_IT+0x6c>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f93c 	bl	8003048 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 f8f4 	bl	8002fc0 <HAL_LPTIM_GetState>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d101      	bne.n	8002de2 <HAL_LPTIM_Counter_Stop_IT+0x36>
  {
    return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e014      	b.n	8002e0c <HAL_LPTIM_Counter_Stop_IT+0x60>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2110      	movs	r1, #16
 8002dee:	438a      	bics	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	438a      	bics	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	222e      	movs	r2, #46	; 0x2e
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40010400 	.word	0x40010400
 8002e18:	dfffffff 	.word	0xdfffffff

08002e1c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10e      	bne.n	8002e50 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f888 	bl	8002f60 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d10e      	bne.n	8002e7c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2202      	movs	r2, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d107      	bne.n	8002e7c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2202      	movs	r2, #2
 8002e72:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fe fd82 	bl	8001980 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d10e      	bne.n	8002ea8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2204      	movs	r2, #4
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d107      	bne.n	8002ea8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 f864 	bl	8002f70 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2208      	movs	r2, #8
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d107      	bne.n	8002ed4 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f856 	bl	8002f80 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d10e      	bne.n	8002f00 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d107      	bne.n	8002f00 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f848 	bl	8002f90 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2220      	movs	r2, #32
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d10e      	bne.n	8002f2c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2220      	movs	r2, #32
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d107      	bne.n	8002f2c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2220      	movs	r2, #32
 8002f22:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 f83a 	bl	8002fa0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b40      	cmp	r3, #64	; 0x40
 8002f38:	d10e      	bne.n	8002f58 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d107      	bne.n	8002f58 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2240      	movs	r2, #64	; 0x40
 8002f4e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	0018      	movs	r0, r3
 8002f54:	f000 f82c 	bl	8002fb0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b002      	add	sp, #8
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	222e      	movs	r2, #46	; 0x2e
 8002fcc:	5c9b      	ldrb	r3, [r3, r2]
 8002fce:	b2db      	uxtb	r3, r3
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b002      	add	sp, #8
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <LPTIM_WaitForFlag+0x68>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4915      	ldr	r1, [pc, #84]	; (8003044 <LPTIM_WaitForFlag+0x6c>)
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fd f889 	bl	8000108 <__udivsi3>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	189b      	adds	r3, r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	3b01      	subs	r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2203      	movs	r2, #3
 800301a:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4013      	ands	r3, r2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d002      	beq.n	8003032 <LPTIM_WaitForFlag+0x5a>
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ea      	bne.n	8003008 <LPTIM_WaitForFlag+0x30>

  return result;
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	781b      	ldrb	r3, [r3, #0]
}
 8003038:	0018      	movs	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	b004      	add	sp, #16
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000008 	.word	0x20000008
 8003044:	00004e20 	.word	0x00004e20

08003048 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	001a      	movs	r2, r3
 800305c:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <LPTIM_Disable+0x168>)
 800305e:	429a      	cmp	r2, r3
 8003060:	d000      	beq.n	8003064 <LPTIM_Disable+0x1c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
      break;
    default:
      break;
 8003062:	e006      	b.n	8003072 <LPTIM_Disable+0x2a>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003064:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <LPTIM_Disable+0x16c>)
 8003066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003068:	23c0      	movs	r3, #192	; 0xc0
 800306a:	031b      	lsls	r3, r3, #12
 800306c:	4013      	ands	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]
      break;
 8003070:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	001a      	movs	r2, r3
 8003098:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <LPTIM_Disable+0x168>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d000      	beq.n	80030a0 <LPTIM_Disable+0x58>
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
      __HAL_RCC_LPTIM1_RELEASE_RESET();
      break;
    default:
      break;
 800309e:	e00d      	b.n	80030bc <LPTIM_Disable+0x74>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80030a0:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0609      	lsls	r1, r1, #24
 80030aa:	430a      	orrs	r2, r1
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030b4:	0052      	lsls	r2, r2, #1
 80030b6:	0852      	lsrs	r2, r2, #1
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80030ba:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <LPTIM_Disable+0x80>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d05c      	beq.n	8003182 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	001a      	movs	r2, r3
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <LPTIM_Disable+0x168>)
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d000      	beq.n	80030d6 <LPTIM_Disable+0x8e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80030d4:	e006      	b.n	80030e4 <LPTIM_Disable+0x9c>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030da:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <LPTIM_Disable+0x16c>)
 80030dc:	4936      	ldr	r1, [pc, #216]	; (80031b8 <LPTIM_Disable+0x170>)
 80030de:	400a      	ands	r2, r1
 80030e0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80030e2:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01b      	beq.n	8003122 <LPTIM_Disable+0xda>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2108      	movs	r1, #8
 8003106:	0018      	movs	r0, r3
 8003108:	f7ff ff66 	bl	8002fd8 <LPTIM_WaitForFlag>
 800310c:	0003      	movs	r3, r0
 800310e:	2b03      	cmp	r3, #3
 8003110:	d103      	bne.n	800311a <LPTIM_Disable+0xd2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	222e      	movs	r2, #46	; 0x2e
 8003116:	2103      	movs	r1, #3
 8003118:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2208      	movs	r2, #8
 8003120:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <LPTIM_Disable+0x118>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2101      	movs	r1, #1
 8003134:	430a      	orrs	r2, r1
 8003136:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2110      	movs	r1, #16
 8003144:	0018      	movs	r0, r3
 8003146:	f7ff ff47 	bl	8002fd8 <LPTIM_WaitForFlag>
 800314a:	0003      	movs	r3, r0
 800314c:	2b03      	cmp	r3, #3
 800314e:	d103      	bne.n	8003158 <LPTIM_Disable+0x110>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	222e      	movs	r2, #46	; 0x2e
 8003154:	2103      	movs	r1, #3
 8003156:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2210      	movs	r2, #16
 800315e:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	001a      	movs	r2, r3
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <LPTIM_Disable+0x168>)
 8003168:	429a      	cmp	r2, r3
 800316a:	d000      	beq.n	800316e <LPTIM_Disable+0x126>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
        break;
      default:
        break;
 800316c:	e00a      	b.n	8003184 <LPTIM_Disable+0x13c>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <LPTIM_Disable+0x16c>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <LPTIM_Disable+0x170>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <LPTIM_Disable+0x16c>)
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	430a      	orrs	r2, r1
 800317e:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003180:	e000      	b.n	8003184 <LPTIM_Disable+0x13c>
    }
  }
 8003182:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2101      	movs	r1, #1
 8003190:	438a      	bics	r2, r1
 8003192:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80031a4:	b662      	cpsie	i

  __enable_irq();
}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b008      	add	sp, #32
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40007c00 	.word	0x40007c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	fff3ffff 	.word	0xfff3ffff

080031bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b5b0      	push	{r4, r5, r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f000 fb70 	bl	80038b0 <HAL_RCC_OscConfig+0x6f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d0:	4bc9      	ldr	r3, [pc, #804]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	220c      	movs	r2, #12
 80031d6:	4013      	ands	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031da:	4bc7      	ldr	r3, [pc, #796]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	2380      	movs	r3, #128	; 0x80
 80031e0:	025b      	lsls	r3, r3, #9
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d100      	bne.n	80031f2 <HAL_RCC_OscConfig+0x36>
 80031f0:	e07d      	b.n	80032ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d007      	beq.n	8003208 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d112      	bne.n	8003224 <HAL_RCC_OscConfig+0x68>
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	025b      	lsls	r3, r3, #9
 8003204:	429a      	cmp	r2, r3
 8003206:	d10d      	bne.n	8003224 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	4bbb      	ldr	r3, [pc, #748]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	029b      	lsls	r3, r3, #10
 8003210:	4013      	ands	r3, r2
 8003212:	d100      	bne.n	8003216 <HAL_RCC_OscConfig+0x5a>
 8003214:	e06a      	b.n	80032ec <HAL_RCC_OscConfig+0x130>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d166      	bne.n	80032ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f000 fb46 	bl	80038b0 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	025b      	lsls	r3, r3, #9
 800322c:	429a      	cmp	r2, r3
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x84>
 8003230:	4bb1      	ldr	r3, [pc, #708]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4bb0      	ldr	r3, [pc, #704]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003236:	2180      	movs	r1, #128	; 0x80
 8003238:	0249      	lsls	r1, r1, #9
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e027      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	23a0      	movs	r3, #160	; 0xa0
 8003246:	02db      	lsls	r3, r3, #11
 8003248:	429a      	cmp	r2, r3
 800324a:	d10e      	bne.n	800326a <HAL_RCC_OscConfig+0xae>
 800324c:	4baa      	ldr	r3, [pc, #680]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4ba9      	ldr	r3, [pc, #676]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	02c9      	lsls	r1, r1, #11
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4ba7      	ldr	r3, [pc, #668]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4ba6      	ldr	r3, [pc, #664]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0249      	lsls	r1, r1, #9
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e012      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 800326a:	4ba3      	ldr	r3, [pc, #652]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4ba2      	ldr	r3, [pc, #648]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003270:	49a2      	ldr	r1, [pc, #648]	; (80034fc <HAL_RCC_OscConfig+0x340>)
 8003272:	400a      	ands	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	4ba0      	ldr	r3, [pc, #640]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	025b      	lsls	r3, r3, #9
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4b9c      	ldr	r3, [pc, #624]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b9b      	ldr	r3, [pc, #620]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800328a:	499d      	ldr	r1, [pc, #628]	; (8003500 <HAL_RCC_OscConfig+0x344>)
 800328c:	400a      	ands	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d014      	beq.n	80032c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7ff f94e 	bl	8002538 <HAL_GetTick>
 800329c:	0003      	movs	r3, r0
 800329e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a2:	f7ff f949 	bl	8002538 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e2fd      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b4:	4b90      	ldr	r3, [pc, #576]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	4013      	ands	r3, r2
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0xe6>
 80032c0:	e015      	b.n	80032ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7ff f939 	bl	8002538 <HAL_GetTick>
 80032c6:	0003      	movs	r3, r0
 80032c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032cc:	f7ff f934 	bl	8002538 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e2e8      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032de:	4b86      	ldr	r3, [pc, #536]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x110>
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_RCC_OscConfig+0x13e>
 80032f8:	e09a      	b.n	8003430 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	2220      	movs	r2, #32
 8003304:	4013      	ands	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003308:	4b7b      	ldr	r3, [pc, #492]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800330e:	2120      	movs	r1, #32
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	2220      	movs	r2, #32
 8003318:	4393      	bics	r3, r2
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b04      	cmp	r3, #4
 8003320:	d005      	beq.n	800332e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d13f      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d13c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2204      	movs	r2, #4
 8003334:	4013      	ands	r3, r2
 8003336:	d004      	beq.n	8003342 <HAL_RCC_OscConfig+0x186>
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e2b6      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a6f      	ldr	r2, [pc, #444]	; (8003504 <HAL_RCC_OscConfig+0x348>)
 8003348:	4013      	ands	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	021a      	lsls	r2, r3, #8
 8003352:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003358:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2209      	movs	r2, #9
 800335e:	4393      	bics	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800336a:	f000 fbef 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 800336e:	0001      	movs	r1, r0
 8003370:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	220f      	movs	r2, #15
 8003378:	4013      	ands	r3, r2
 800337a:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x34c>)
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	000a      	movs	r2, r1
 8003380:	40da      	lsrs	r2, r3
 8003382:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCC_OscConfig+0x350>)
 8003384:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x354>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2513      	movs	r5, #19
 800338c:	197c      	adds	r4, r7, r5
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff f88c 	bl	80024ac <HAL_InitTick>
 8003394:	0003      	movs	r3, r0
 8003396:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003398:	197b      	adds	r3, r7, r5
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d047      	beq.n	8003430 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80033a0:	2313      	movs	r3, #19
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	e283      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d027      	beq.n	80033fe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2209      	movs	r2, #9
 80033b4:	4393      	bics	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f8ba 	bl	8002538 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ca:	f7ff f8b5 	bl	8002538 <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e269      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033dc:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2204      	movs	r2, #4
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f1      	beq.n	80033ca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4a46      	ldr	r2, [pc, #280]	; (8003504 <HAL_RCC_OscConfig+0x348>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	021a      	lsls	r2, r3, #8
 80033f6:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	e018      	b.n	8003430 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b3d      	ldr	r3, [pc, #244]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003404:	2101      	movs	r1, #1
 8003406:	438a      	bics	r2, r1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7ff f895 	bl	8002538 <HAL_GetTick>
 800340e:	0003      	movs	r3, r0
 8003410:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003414:	f7ff f890 	bl	8002538 <HAL_GetTick>
 8003418:	0002      	movs	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e244      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	4013      	ands	r3, r2
 800342e:	d1f1      	bne.n	8003414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d100      	bne.n	800343c <HAL_RCC_OscConfig+0x280>
 800343a:	e0a2      	b.n	8003582 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d141      	bne.n	80034c6 <HAL_RCC_OscConfig+0x30a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003442:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4013      	ands	r3, r2
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x29e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e22a      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a2d      	ldr	r2, [pc, #180]	; (8003514 <HAL_RCC_OscConfig+0x358>)
 8003460:	4013      	ands	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	0a19      	lsrs	r1, r3, #8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	061a      	lsls	r2, r3, #24
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	0b5b      	lsrs	r3, r3, #13
 8003488:	3301      	adds	r3, #1
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	0212      	lsls	r2, r2, #8
 800348e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	210f      	movs	r1, #15
 8003498:	400b      	ands	r3, r1
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x34c>)
 800349c:	5ccb      	ldrb	r3, [r1, r3]
 800349e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCC_OscConfig+0x350>)
 80034a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x354>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2513      	movs	r5, #19
 80034aa:	197c      	adds	r4, r7, r5
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fe fffd 	bl	80024ac <HAL_InitTick>
 80034b2:	0003      	movs	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80034b6:	197b      	adds	r3, r7, r5
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d061      	beq.n	8003582 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80034be:	2313      	movs	r3, #19
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	e1f4      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03f      	beq.n	800354e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_OscConfig+0x33c>)
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	0049      	lsls	r1, r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7ff f82c 	bl	8002538 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034e4:	e018      	b.n	8003518 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e6:	f7ff f827 	bl	8002538 <HAL_GetTick>
 80034ea:	0002      	movs	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d911      	bls.n	8003518 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e1db      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
 80034f8:	40021000 	.word	0x40021000
 80034fc:	fffeffff 	.word	0xfffeffff
 8003500:	fffbffff 	.word	0xfffbffff
 8003504:	ffffe0ff 	.word	0xffffe0ff
 8003508:	0800603c 	.word	0x0800603c
 800350c:	20000008 	.word	0x20000008
 8003510:	2000000c 	.word	0x2000000c
 8003514:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003518:	4bca      	ldr	r3, [pc, #808]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d0e0      	beq.n	80034e6 <HAL_RCC_OscConfig+0x32a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003524:	4bc7      	ldr	r3, [pc, #796]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4ac7      	ldr	r2, [pc, #796]	; (8003848 <HAL_RCC_OscConfig+0x68c>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	4bc4      	ldr	r3, [pc, #784]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003538:	4bc2      	ldr	r3, [pc, #776]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	0a19      	lsrs	r1, r3, #8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	061a      	lsls	r2, r3, #24
 8003546:	4bbf      	ldr	r3, [pc, #764]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e019      	b.n	8003582 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800354e:	4bbd      	ldr	r3, [pc, #756]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4bbc      	ldr	r3, [pc, #752]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003554:	49bd      	ldr	r1, [pc, #756]	; (800384c <HAL_RCC_OscConfig+0x690>)
 8003556:	400a      	ands	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe ffed 	bl	8002538 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003564:	f7fe ffe8 	bl	8002538 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e19c      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003576:	4bb3      	ldr	r3, [pc, #716]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2208      	movs	r2, #8
 8003588:	4013      	ands	r3, r2
 800358a:	d036      	beq.n	80035fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003594:	4bab      	ldr	r3, [pc, #684]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003598:	4baa      	ldr	r3, [pc, #680]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800359a:	2101      	movs	r1, #1
 800359c:	430a      	orrs	r2, r1
 800359e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fe ffca 	bl	8002538 <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe ffc5 	bl	8002538 <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e179      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035bc:	4ba1      	ldr	r3, [pc, #644]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	2202      	movs	r2, #2
 80035c2:	4013      	ands	r3, r2
 80035c4:	d0f1      	beq.n	80035aa <HAL_RCC_OscConfig+0x3ee>
 80035c6:	e018      	b.n	80035fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80035ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035cc:	4b9d      	ldr	r3, [pc, #628]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	438a      	bics	r2, r1
 80035d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d4:	f7fe ffb0 	bl	8002538 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035de:	f7fe ffab 	bl	8002538 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e15f      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f0:	4b94      	ldr	r3, [pc, #592]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	2202      	movs	r2, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	d1f1      	bne.n	80035de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2204      	movs	r2, #4
 8003600:	4013      	ands	r3, r2
 8003602:	d100      	bne.n	8003606 <HAL_RCC_OscConfig+0x44a>
 8003604:	e0af      	b.n	8003766 <HAL_RCC_OscConfig+0x5aa>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003606:	2323      	movs	r3, #35	; 0x23
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	055b      	lsls	r3, r3, #21
 8003616:	4013      	ands	r3, r2
 8003618:	d10a      	bne.n	8003630 <HAL_RCC_OscConfig+0x474>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b8a      	ldr	r3, [pc, #552]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800361c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0549      	lsls	r1, r1, #21
 8003624:	430a      	orrs	r2, r1
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003628:	2323      	movs	r3, #35	; 0x23
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b87      	ldr	r3, [pc, #540]	; (8003850 <HAL_RCC_OscConfig+0x694>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4013      	ands	r3, r2
 800363a:	d11a      	bne.n	8003672 <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363c:	4b84      	ldr	r3, [pc, #528]	; (8003850 <HAL_RCC_OscConfig+0x694>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_RCC_OscConfig+0x694>)
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0049      	lsls	r1, r1, #1
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364a:	f7fe ff75 	bl	8002538 <HAL_GetTick>
 800364e:	0003      	movs	r3, r0
 8003650:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003654:	f7fe ff70 	bl	8002538 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e124      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b7a      	ldr	r3, [pc, #488]	; (8003850 <HAL_RCC_OscConfig+0x694>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4013      	ands	r3, r2
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x498>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	429a      	cmp	r2, r3
 800367c:	d107      	bne.n	800368e <HAL_RCC_OscConfig+0x4d2>
 800367e:	4b71      	ldr	r3, [pc, #452]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003684:	2180      	movs	r1, #128	; 0x80
 8003686:	0049      	lsls	r1, r1, #1
 8003688:	430a      	orrs	r2, r1
 800368a:	651a      	str	r2, [r3, #80]	; 0x50
 800368c:	e031      	b.n	80036f2 <HAL_RCC_OscConfig+0x536>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4f4>
 8003696:	4b6b      	ldr	r3, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800369a:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800369c:	496b      	ldr	r1, [pc, #428]	; (800384c <HAL_RCC_OscConfig+0x690>)
 800369e:	400a      	ands	r2, r1
 80036a0:	651a      	str	r2, [r3, #80]	; 0x50
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036a6:	4b67      	ldr	r3, [pc, #412]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036a8:	496a      	ldr	r1, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x698>)
 80036aa:	400a      	ands	r2, r1
 80036ac:	651a      	str	r2, [r3, #80]	; 0x50
 80036ae:	e020      	b.n	80036f2 <HAL_RCC_OscConfig+0x536>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	23a0      	movs	r3, #160	; 0xa0
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d10e      	bne.n	80036da <HAL_RCC_OscConfig+0x51e>
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c0:	4b60      	ldr	r3, [pc, #384]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	00c9      	lsls	r1, r1, #3
 80036c6:	430a      	orrs	r2, r1
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50
 80036ca:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ce:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	0049      	lsls	r1, r1, #1
 80036d4:	430a      	orrs	r2, r1
 80036d6:	651a      	str	r2, [r3, #80]	; 0x50
 80036d8:	e00b      	b.n	80036f2 <HAL_RCC_OscConfig+0x536>
 80036da:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036e0:	495a      	ldr	r1, [pc, #360]	; (800384c <HAL_RCC_OscConfig+0x690>)
 80036e2:	400a      	ands	r2, r1
 80036e4:	651a      	str	r2, [r3, #80]	; 0x50
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ea:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80036ec:	4959      	ldr	r1, [pc, #356]	; (8003854 <HAL_RCC_OscConfig+0x698>)
 80036ee:	400a      	ands	r2, r1
 80036f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <HAL_RCC_OscConfig+0x56a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7fe ff1d 	bl	8002538 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0x55c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fe ff18 	bl	8002538 <HAL_GetTick>
 8003708:	0002      	movs	r2, r0
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	4a52      	ldr	r2, [pc, #328]	; (8003858 <HAL_RCC_OscConfig+0x69c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x55c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e0cb      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003718:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800371a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4013      	ands	r3, r2
 8003722:	d0ef      	beq.n	8003704 <HAL_RCC_OscConfig+0x548>
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x594>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fe ff07 	bl	8002538 <HAL_GetTick>
 800372a:	0003      	movs	r3, r0
 800372c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800372e:	e009      	b.n	8003744 <HAL_RCC_OscConfig+0x588>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fe ff02 	bl	8002538 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	4a47      	ldr	r2, [pc, #284]	; (8003858 <HAL_RCC_OscConfig+0x69c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x588>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0b5      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003744:	4b3f      	ldr	r3, [pc, #252]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4013      	ands	r3, r2
 800374e:	d1ef      	bne.n	8003730 <HAL_RCC_OscConfig+0x574>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003750:	2323      	movs	r3, #35	; 0x23
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCC_OscConfig+0x5aa>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800375c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003760:	493e      	ldr	r1, [pc, #248]	; (800385c <HAL_RCC_OscConfig+0x6a0>)
 8003762:	400a      	ands	r2, r1
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d100      	bne.n	8003770 <HAL_RCC_OscConfig+0x5b4>
 800376e:	e09e      	b.n	80038ae <HAL_RCC_OscConfig+0x6f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d100      	bne.n	8003778 <HAL_RCC_OscConfig+0x5bc>
 8003776:	e077      	b.n	8003868 <HAL_RCC_OscConfig+0x6ac>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b02      	cmp	r3, #2
 800377e:	d145      	bne.n	800380c <HAL_RCC_OscConfig+0x650>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003786:	4936      	ldr	r1, [pc, #216]	; (8003860 <HAL_RCC_OscConfig+0x6a4>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe fed4 	bl	8002538 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fecf 	bl	8002538 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x5ec>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e083      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037a8:	4b26      	ldr	r3, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	049b      	lsls	r3, r3, #18
 80037b0:	4013      	ands	r3, r2
 80037b2:	d1f0      	bne.n	8003796 <HAL_RCC_OscConfig+0x5da>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x6a8>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	431a      	orrs	r2, r3
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	0449      	lsls	r1, r1, #17
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fea9 	bl	8002538 <HAL_GetTick>
 80037e6:	0003      	movs	r3, r0
 80037e8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x642>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fea4 	bl	8002538 <HAL_GetTick>
 80037f0:	0002      	movs	r2, r0
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x642>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e058      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	049b      	lsls	r3, r3, #18
 8003806:	4013      	ands	r3, r2
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x630>
 800380a:	e050      	b.n	80038ae <HAL_RCC_OscConfig+0x6f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003812:	4913      	ldr	r1, [pc, #76]	; (8003860 <HAL_RCC_OscConfig+0x6a4>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fe8e 	bl	8002538 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x678>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe fe89 	bl	8002538 <HAL_GetTick>
 8003826:	0002      	movs	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x678>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_OscConfig+0x688>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	049b      	lsls	r3, r3, #18
 800383c:	4013      	ands	r3, r2
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x666>
 8003840:	e035      	b.n	80038ae <HAL_RCC_OscConfig+0x6f2>
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	40021000 	.word	0x40021000
 8003848:	ffff1fff 	.word	0xffff1fff
 800384c:	fffffeff 	.word	0xfffffeff
 8003850:	40007000 	.word	0x40007000
 8003854:	fffffbff 	.word	0xfffffbff
 8003858:	00001388 	.word	0x00001388
 800385c:	efffffff 	.word	0xefffffff
 8003860:	feffffff 	.word	0xfeffffff
 8003864:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_RCC_OscConfig+0x6b8>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003874:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCC_OscConfig+0x6fc>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	025b      	lsls	r3, r3, #9
 8003880:	401a      	ands	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	429a      	cmp	r2, r3
 8003888:	d10f      	bne.n	80038aa <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	23f0      	movs	r3, #240	; 0xf0
 800388e:	039b      	lsls	r3, r3, #14
 8003890:	401a      	ands	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d107      	bne.n	80038aa <HAL_RCC_OscConfig+0x6ee>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	23c0      	movs	r3, #192	; 0xc0
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	401a      	ands	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d001      	beq.n	80038ae <HAL_RCC_OscConfig+0x6f2>
        {
          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_RCC_OscConfig+0x6f4>
        }
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	0018      	movs	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b00a      	add	sp, #40	; 0x28
 80038b6:	bdb0      	pop	{r4, r5, r7, pc}
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b5b0      	push	{r4, r5, r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e129      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b96      	ldr	r3, [pc, #600]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d91e      	bls.n	800391c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b93      	ldr	r3, [pc, #588]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	4b90      	ldr	r3, [pc, #576]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038f0:	f7fe fe22 	bl	8002538 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f8:	e009      	b.n	800390e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038fa:	f7fe fe1d 	bl	8002538 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	4a8a      	ldr	r2, [pc, #552]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e10a      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2202      	movs	r2, #2
 8003922:	4013      	ands	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003926:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	22f0      	movs	r2, #240	; 0xf0
 800392c:	4393      	bics	r3, r2
 800392e:	0019      	movs	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003936:	430a      	orrs	r2, r1
 8003938:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	d100      	bne.n	8003946 <HAL_RCC_ClockConfig+0x8a>
 8003944:	e089      	b.n	8003a5a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d107      	bne.n	800395e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800394e:	4b79      	ldr	r3, [pc, #484]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	029b      	lsls	r3, r3, #10
 8003956:	4013      	ands	r3, r2
 8003958:	d120      	bne.n	800399c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e0e2      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003966:	4b73      	ldr	r3, [pc, #460]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	049b      	lsls	r3, r3, #18
 800396e:	4013      	ands	r3, r2
 8003970:	d114      	bne.n	800399c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0d6      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d106      	bne.n	800398c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2204      	movs	r2, #4
 8003984:	4013      	ands	r3, r2
 8003986:	d109      	bne.n	800399c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cb      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4013      	ands	r3, r2
 8003996:	d101      	bne.n	800399c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0c3      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399c:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2203      	movs	r2, #3
 80039a2:	4393      	bics	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	4b62      	ldr	r3, [pc, #392]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fe fdc2 	bl	8002538 <HAL_GetTick>
 80039b4:	0003      	movs	r3, r0
 80039b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d111      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c0:	e009      	b.n	80039d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c2:	f7fe fdb9 	bl	8002538 <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0a6      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d6:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	220c      	movs	r2, #12
 80039dc:	4013      	ands	r3, r2
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d1ef      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x106>
 80039e2:	e03a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d111      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ec:	e009      	b.n	8003a02 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ee:	f7fe fda3 	bl	8002538 <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e090      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a02:	4b4c      	ldr	r3, [pc, #304]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	220c      	movs	r2, #12
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d1ef      	bne.n	80039ee <HAL_RCC_ClockConfig+0x132>
 8003a0e:	e024      	b.n	8003a5a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11b      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a18:	e009      	b.n	8003a2e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a1a:	f7fe fd8d 	bl	8002538 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	4a42      	ldr	r2, [pc, #264]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e07a      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	220c      	movs	r2, #12
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d1ef      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x15e>
 8003a3a:	e00e      	b.n	8003a5a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a3c:	f7fe fd7c 	bl	8002538 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	4a3a      	ldr	r2, [pc, #232]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e069      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a50:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	220c      	movs	r2, #12
 8003a56:	4013      	ands	r3, r2
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d21e      	bcs.n	8003aa6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4393      	bics	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a7a:	f7fe fd5d 	bl	8002538 <HAL_GetTick>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	e009      	b.n	8003a98 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe fd58 	bl	8002538 <HAL_GetTick>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <HAL_RCC_ClockConfig+0x274>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e045      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <HAL_RCC_ClockConfig+0x270>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d1ee      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4013      	ands	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x27c>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	4013      	ands	r3, r2
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ace:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_RCC_ClockConfig+0x280>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	00da      	lsls	r2, r3, #3
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae4:	f000 f832 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003ae8:	0001      	movs	r1, r0
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x278>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	220f      	movs	r2, #15
 8003af2:	4013      	ands	r3, r2
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_RCC_ClockConfig+0x284>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	000a      	movs	r2, r1
 8003afa:	40da      	lsrs	r2, r3
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_RCC_ClockConfig+0x288>)
 8003afe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_ClockConfig+0x28c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	250b      	movs	r5, #11
 8003b06:	197c      	adds	r4, r7, r5
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7fe fccf 	bl	80024ac <HAL_InitTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003b12:	197b      	adds	r3, r7, r5
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8003b1a:	230b      	movs	r3, #11
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b004      	add	sp, #16
 8003b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b2c:	40022000 	.word	0x40022000
 8003b30:	00001388 	.word	0x00001388
 8003b34:	40021000 	.word	0x40021000
 8003b38:	fffff8ff 	.word	0xfffff8ff
 8003b3c:	ffffc7ff 	.word	0xffffc7ff
 8003b40:	0800603c 	.word	0x0800603c
 8003b44:	20000008 	.word	0x20000008
 8003b48:	2000000c 	.word	0x2000000c

08003b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4e:	b08f      	sub	sp, #60	; 0x3c
 8003b50:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b52:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x130>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5a:	230c      	movs	r3, #12
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d00f      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x36>
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d010      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x3c>
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d000      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x20>
 8003b6a:	e073      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b6c:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x130>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2210      	movs	r2, #16
 8003b72:	4013      	ands	r3, r2
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x134>)
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003b7a:	e079      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b80:	e076      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003b84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b86:	e073      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	0c9a      	lsrs	r2, r3, #18
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	401a      	ands	r2, r3
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x140>)
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	0d9a      	lsrs	r2, r3, #22
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x130>)
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	4013      	ands	r3, r2
 8003bac:	d019      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	69b8      	ldr	r0, [r7, #24]
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	f7fc fb89 	bl	80002d4 <__aeabi_lmul>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	000c      	movs	r4, r1
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	0021      	movs	r1, r4
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f7fc fb5d 	bl	8000294 <__aeabi_uldivmod>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	000c      	movs	r4, r1
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
 8003be0:	e035      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x130>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2210      	movs	r2, #16
 8003be8:	4013      	ands	r3, r2
 8003bea:	d019      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x134>)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	68b8      	ldr	r0, [r7, #8]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	f7fc fb6a 	bl	80002d4 <__aeabi_lmul>
 8003c00:	0003      	movs	r3, r0
 8003c02:	000c      	movs	r4, r1
 8003c04:	0018      	movs	r0, r3
 8003c06:	0021      	movs	r1, r4
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f7fc fb3e 	bl	8000294 <__aeabi_uldivmod>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	000c      	movs	r4, r1
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1e:	e016      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	0018      	movs	r0, r3
 8003c24:	2300      	movs	r3, #0
 8003c26:	0019      	movs	r1, r3
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f7fc fb52 	bl	80002d4 <__aeabi_lmul>
 8003c30:	0003      	movs	r3, r0
 8003c32:	000c      	movs	r4, r1
 8003c34:	0018      	movs	r0, r3
 8003c36:	0021      	movs	r1, r4
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	001d      	movs	r5, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	001e      	movs	r6, r3
 8003c40:	002a      	movs	r2, r5
 8003c42:	0033      	movs	r3, r6
 8003c44:	f7fc fb26 	bl	8000294 <__aeabi_uldivmod>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	000c      	movs	r4, r1
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c52:	e00d      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x130>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0b5b      	lsrs	r3, r3, #13
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	3301      	adds	r3, #1
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	0212      	lsls	r2, r2, #8
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c6e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b00f      	add	sp, #60	; 0x3c
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	003d0900 	.word	0x003d0900
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200
 8003c8c:	08006054 	.word	0x08006054

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b02      	ldr	r3, [pc, #8]	; (8003ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	20000008 	.word	0x20000008

08003ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ca8:	f7ff fff2 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cac:	0001      	movs	r1, r0
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	40d9      	lsrs	r1, r3
 8003cbe:	000b      	movs	r3, r1
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	0800604c 	.word	0x0800604c

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffdc 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cd8:	0001      	movs	r1, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	0adb      	lsrs	r3, r3, #11
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	40d9      	lsrs	r1, r3
 8003cea:	000b      	movs	r3, r1
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	0800604c 	.word	0x0800604c

08003cfc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003d04:	2317      	movs	r3, #23
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2220      	movs	r2, #32
 8003d12:	4013      	ands	r3, r2
 8003d14:	d100      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003d16:	e0c3      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d18:	4b82      	ldr	r3, [pc, #520]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	055b      	lsls	r3, r3, #21
 8003d20:	4013      	ands	r3, r2
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d24:	4b7f      	ldr	r3, [pc, #508]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d28:	4b7e      	ldr	r3, [pc, #504]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	0549      	lsls	r1, r1, #21
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003d32:	2317      	movs	r3, #23
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	; 0x80
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	4013      	ands	r3, r2
 8003d44:	d11a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b78      	ldr	r3, [pc, #480]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4b77      	ldr	r3, [pc, #476]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	0049      	lsls	r1, r1, #1
 8003d50:	430a      	orrs	r2, r1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d54:	f7fe fbf0 	bl	8002538 <HAL_GetTick>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5e:	f7fe fbeb 	bl	8002538 <HAL_GetTick>
 8003d62:	0002      	movs	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	; 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0d4      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b6d      	ldr	r3, [pc, #436]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003d7c:	4b69      	ldr	r3, [pc, #420]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	23c0      	movs	r3, #192	; 0xc0
 8003d82:	039b      	lsls	r3, r3, #14
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	23c0      	movs	r3, #192	; 0xc0
 8003d8e:	039b      	lsls	r3, r3, #14
 8003d90:	4013      	ands	r3, r2
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	23c0      	movs	r3, #192	; 0xc0
 8003d9e:	029b      	lsls	r3, r3, #10
 8003da0:	401a      	ands	r2, r3
 8003da2:	23c0      	movs	r3, #192	; 0xc0
 8003da4:	029b      	lsls	r3, r3, #10
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10a      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003daa:	4b5e      	ldr	r3, [pc, #376]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	029b      	lsls	r3, r3, #10
 8003db2:	401a      	ands	r2, r3
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ac      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003dc0:	4b58      	ldr	r3, [pc, #352]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dc4:	23c0      	movs	r3, #192	; 0xc0
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	23c0      	movs	r3, #192	; 0xc0
 8003dd8:	029b      	lsls	r3, r3, #10
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d033      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2220      	movs	r2, #32
 8003de8:	4013      	ands	r3, r2
 8003dea:	d02e      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	4a4e      	ldr	r2, [pc, #312]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df6:	4b4b      	ldr	r3, [pc, #300]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0309      	lsls	r1, r1, #12
 8003e00:	430a      	orrs	r2, r1
 8003e02:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e04:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e08:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e0a:	4949      	ldr	r1, [pc, #292]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003e10:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d014      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e20:	f7fe fb8a 	bl	8002538 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e28:	e009      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe fb85 	bl	8002538 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a3f      	ldr	r2, [pc, #252]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e06d      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3e:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4013      	ands	r3, r2
 8003e48:	d0ef      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	23c0      	movs	r3, #192	; 0xc0
 8003e50:	029b      	lsls	r3, r3, #10
 8003e52:	401a      	ands	r2, r3
 8003e54:	23c0      	movs	r3, #192	; 0xc0
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d10c      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	0019      	movs	r1, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	23c0      	movs	r3, #192	; 0xc0
 8003e6c:	039b      	lsls	r3, r3, #14
 8003e6e:	401a      	ands	r2, r3
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	23c0      	movs	r3, #192	; 0xc0
 8003e80:	029b      	lsls	r3, r3, #10
 8003e82:	401a      	ands	r2, r3
 8003e84:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e86:	430a      	orrs	r2, r1
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d105      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e94:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	220c      	movs	r2, #12
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec8:	4b16      	ldr	r3, [pc, #88]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	0019      	movs	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	4013      	ands	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003f14:	430a      	orrs	r2, r1
 8003f16:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b006      	add	sp, #24
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	fffcffff 	.word	0xfffcffff
 8003f30:	fff7ffff 	.word	0xfff7ffff
 8003f34:	00001388 	.word	0x00001388
 8003f38:	ffcfffff 	.word	0xffcfffff
 8003f3c:	efffffff 	.word	0xefffffff
 8003f40:	fffff3ff 	.word	0xfffff3ff
 8003f44:	ffffcfff 	.word	0xffffcfff
 8003f48:	fff3ffff 	.word	0xfff3ffff

08003f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e032      	b.n	8003fc4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2239      	movs	r2, #57	; 0x39
 8003f62:	5c9b      	ldrb	r3, [r3, r2]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2238      	movs	r2, #56	; 0x38
 8003f6e:	2100      	movs	r1, #0
 8003f70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fe f90d 	bl	8002194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2239      	movs	r2, #57	; 0x39
 8003f7e:	2102      	movs	r1, #2
 8003f80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	0010      	movs	r0, r2
 8003f8e:	f000 f9a3 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	223e      	movs	r2, #62	; 0x3e
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223a      	movs	r2, #58	; 0x3a
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	223b      	movs	r2, #59	; 0x3b
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	223c      	movs	r2, #60	; 0x3c
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	223d      	movs	r2, #61	; 0x3d
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2239      	movs	r2, #57	; 0x39
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b002      	add	sp, #8
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HAL_TIM_PWM_Start+0x22>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	223a      	movs	r2, #58	; 0x3a
 8003fe0:	5c9b      	ldrb	r3, [r3, r2]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	1e5a      	subs	r2, r3, #1
 8003fe8:	4193      	sbcs	r3, r2
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	e01f      	b.n	800402e <HAL_TIM_PWM_Start+0x62>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d108      	bne.n	8004006 <HAL_TIM_PWM_Start+0x3a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223b      	movs	r2, #59	; 0x3b
 8003ff8:	5c9b      	ldrb	r3, [r3, r2]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	1e5a      	subs	r2, r3, #1
 8004000:	4193      	sbcs	r3, r2
 8004002:	b2db      	uxtb	r3, r3
 8004004:	e013      	b.n	800402e <HAL_TIM_PWM_Start+0x62>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d108      	bne.n	800401e <HAL_TIM_PWM_Start+0x52>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	223c      	movs	r2, #60	; 0x3c
 8004010:	5c9b      	ldrb	r3, [r3, r2]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	1e5a      	subs	r2, r3, #1
 8004018:	4193      	sbcs	r3, r2
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e007      	b.n	800402e <HAL_TIM_PWM_Start+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	223d      	movs	r2, #61	; 0x3d
 8004022:	5c9b      	ldrb	r3, [r3, r2]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	1e5a      	subs	r2, r3, #1
 800402a:	4193      	sbcs	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e04d      	b.n	80040d2 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <HAL_TIM_PWM_Start+0x7a>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	223a      	movs	r2, #58	; 0x3a
 8004040:	2102      	movs	r1, #2
 8004042:	5499      	strb	r1, [r3, r2]
 8004044:	e013      	b.n	800406e <HAL_TIM_PWM_Start+0xa2>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0x8a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	223b      	movs	r2, #59	; 0x3b
 8004050:	2102      	movs	r1, #2
 8004052:	5499      	strb	r1, [r3, r2]
 8004054:	e00b      	b.n	800406e <HAL_TIM_PWM_Start+0xa2>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0x9a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223c      	movs	r2, #60	; 0x3c
 8004060:	2102      	movs	r1, #2
 8004062:	5499      	strb	r1, [r3, r2]
 8004064:	e003      	b.n	800406e <HAL_TIM_PWM_Start+0xa2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	223d      	movs	r2, #61	; 0x3d
 800406a:	2102      	movs	r1, #2
 800406c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	2201      	movs	r2, #1
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fa86 	bl	8004588 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	05db      	lsls	r3, r3, #23
 8004084:	429a      	cmp	r2, r3
 8004086:	d009      	beq.n	800409c <HAL_TIM_PWM_Start+0xd0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_TIM_PWM_Start+0x110>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_PWM_Start+0xd0>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_TIM_PWM_Start+0x114>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2207      	movs	r2, #7
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d010      	beq.n	80040d0 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e007      	b.n	80040d0 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	40010800 	.word	0x40010800
 80040e0:	40011400 	.word	0x40011400

080040e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	2200      	movs	r2, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fa46 	bl	8004588 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIM_PWM_Stop+0x78>)
 8004104:	4013      	ands	r3, r2
 8004106:	d107      	bne.n	8004118 <HAL_TIM_PWM_Stop+0x34>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2101      	movs	r1, #1
 8004114:	438a      	bics	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d104      	bne.n	8004128 <HAL_TIM_PWM_Stop+0x44>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223a      	movs	r2, #58	; 0x3a
 8004122:	2101      	movs	r1, #1
 8004124:	5499      	strb	r1, [r3, r2]
 8004126:	e013      	b.n	8004150 <HAL_TIM_PWM_Stop+0x6c>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b04      	cmp	r3, #4
 800412c:	d104      	bne.n	8004138 <HAL_TIM_PWM_Stop+0x54>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	223b      	movs	r2, #59	; 0x3b
 8004132:	2101      	movs	r1, #1
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	e00b      	b.n	8004150 <HAL_TIM_PWM_Stop+0x6c>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b08      	cmp	r3, #8
 800413c:	d104      	bne.n	8004148 <HAL_TIM_PWM_Stop+0x64>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	223c      	movs	r2, #60	; 0x3c
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]
 8004146:	e003      	b.n	8004150 <HAL_TIM_PWM_Stop+0x6c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	223d      	movs	r2, #61	; 0x3d
 800414c:	2101      	movs	r1, #1
 800414e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	00001111 	.word	0x00001111

08004160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2317      	movs	r3, #23
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2238      	movs	r2, #56	; 0x38
 8004178:	5c9b      	ldrb	r3, [r3, r2]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x22>
 800417e:	2302      	movs	r3, #2
 8004180:	e0a3      	b.n	80042ca <HAL_TIM_PWM_ConfigChannel+0x16a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2238      	movs	r2, #56	; 0x38
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d029      	beq.n	80041e4 <HAL_TIM_PWM_ConfigChannel+0x84>
 8004190:	d802      	bhi.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x42>
 8004196:	e08c      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x152>
 8004198:	2b08      	cmp	r3, #8
 800419a:	d046      	beq.n	800422a <HAL_TIM_PWM_ConfigChannel+0xca>
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d065      	beq.n	800426c <HAL_TIM_PWM_ConfigChannel+0x10c>
 80041a0:	e087      	b.n	80042b2 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	0011      	movs	r1, r2
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 f8e8 	bl	8004380 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2108      	movs	r1, #8
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2104      	movs	r1, #4
 80041cc:	438a      	bics	r2, r1
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
      break;
 80041e2:	e06b      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 f903 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0109      	lsls	r1, r1, #4
 8004200:	430a      	orrs	r2, r1
 8004202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4931      	ldr	r1, [pc, #196]	; (80042d4 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004210:	400a      	ands	r2, r1
 8004212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6999      	ldr	r1, [r3, #24]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	619a      	str	r2, [r3, #24]
      break;
 8004228:	e048      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	0011      	movs	r1, r2
 8004232:	0018      	movs	r0, r3
 8004234:	f000 f922 	bl	800447c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2108      	movs	r1, #8
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2104      	movs	r1, #4
 8004254:	438a      	bics	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69d9      	ldr	r1, [r3, #28]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	61da      	str	r2, [r3, #28]
      break;
 800426a:	e027      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	0011      	movs	r1, r2
 8004274:	0018      	movs	r0, r3
 8004276:	f000 f941 	bl	80044fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	0109      	lsls	r1, r1, #4
 8004288:	430a      	orrs	r2, r1
 800428a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	490f      	ldr	r1, [pc, #60]	; (80042d4 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004298:	400a      	ands	r2, r1
 800429a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69d9      	ldr	r1, [r3, #28]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	61da      	str	r2, [r3, #28]
      break;
 80042b0:	e004      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 80042b2:	2317      	movs	r3, #23
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
      break;
 80042ba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2238      	movs	r2, #56	; 0x38
 80042c0:	2100      	movs	r1, #0
 80042c2:	5499      	strb	r1, [r3, r2]

  return status;
 80042c4:	2317      	movs	r3, #23
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	781b      	ldrb	r3, [r3, #0]
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b006      	add	sp, #24
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	fffffbff 	.word	0xfffffbff

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	05db      	lsls	r3, r3, #23
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x2a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <TIM_Base_SetConfig+0x9c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x2a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <TIM_Base_SetConfig+0xa0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2270      	movs	r2, #112	; 0x70
 8004306:	4393      	bics	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	05db      	lsls	r3, r3, #23
 800431a:	429a      	cmp	r2, r3
 800431c:	d007      	beq.n	800432e <TIM_Base_SetConfig+0x56>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <TIM_Base_SetConfig+0x9c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_Base_SetConfig+0x56>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a13      	ldr	r2, [pc, #76]	; (8004378 <TIM_Base_SetConfig+0xa0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d108      	bne.n	8004340 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4a12      	ldr	r2, [pc, #72]	; (800437c <TIM_Base_SetConfig+0xa4>)
 8004332:	4013      	ands	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2280      	movs	r2, #128	; 0x80
 8004344:	4393      	bics	r3, r2
 8004346:	001a      	movs	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	615a      	str	r2, [r3, #20]
}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40010800 	.word	0x40010800
 8004378:	40011400 	.word	0x40011400
 800437c:	fffffcff 	.word	0xfffffcff

08004380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	2201      	movs	r2, #1
 8004390:	4393      	bics	r3, r2
 8004392:	001a      	movs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2270      	movs	r2, #112	; 0x70
 80043ae:	4393      	bics	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2203      	movs	r2, #3
 80043b6:	4393      	bics	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2202      	movs	r2, #2
 80043c8:	4393      	bics	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	621a      	str	r2, [r3, #32]
}
 80043f0:	46c0      	nop			; (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b006      	add	sp, #24
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2210      	movs	r2, #16
 8004408:	4393      	bics	r3, r2
 800440a:	001a      	movs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a13      	ldr	r2, [pc, #76]	; (8004474 <TIM_OC2_SetConfig+0x7c>)
 8004426:	4013      	ands	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a12      	ldr	r2, [pc, #72]	; (8004478 <TIM_OC2_SetConfig+0x80>)
 800442e:	4013      	ands	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2220      	movs	r2, #32
 8004442:	4393      	bics	r3, r2
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	621a      	str	r2, [r3, #32]
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}
 8004474:	ffff8fff 	.word	0xffff8fff
 8004478:	fffffcff 	.word	0xfffffcff

0800447c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	4a1a      	ldr	r2, [pc, #104]	; (80044f4 <TIM_OC3_SetConfig+0x78>)
 800448c:	401a      	ands	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2270      	movs	r2, #112	; 0x70
 80044a8:	4393      	bics	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4393      	bics	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <TIM_OC3_SetConfig+0x7c>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	fffffeff 	.word	0xfffffeff
 80044f8:	fffffdff 	.word	0xfffffdff

080044fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <TIM_OC4_SetConfig+0x7c>)
 800450c:	401a      	ands	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a15      	ldr	r2, [pc, #84]	; (800457c <TIM_OC4_SetConfig+0x80>)
 8004528:	4013      	ands	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a14      	ldr	r2, [pc, #80]	; (8004580 <TIM_OC4_SetConfig+0x84>)
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <TIM_OC4_SetConfig+0x88>)
 8004544:	4013      	ands	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b006      	add	sp, #24
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	ffffefff 	.word	0xffffefff
 800457c:	ffff8fff 	.word	0xffff8fff
 8004580:	fffffcff 	.word	0xfffffcff
 8004584:	ffffdfff 	.word	0xffffdfff

08004588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	221f      	movs	r2, #31
 8004598:	4013      	ands	r3, r2
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	0013      	movs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	43d2      	mvns	r2, r2
 80045aa:	401a      	ands	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1a      	ldr	r2, [r3, #32]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	211f      	movs	r1, #31
 80045b8:	400b      	ands	r3, r1
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4099      	lsls	r1, r3
 80045be:	000b      	movs	r3, r1
 80045c0:	431a      	orrs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b006      	add	sp, #24
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2238      	movs	r2, #56	; 0x38
 80045de:	5c9b      	ldrb	r3, [r3, r2]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e042      	b.n	800466e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2238      	movs	r2, #56	; 0x38
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2239      	movs	r2, #57	; 0x39
 80045f4:	2102      	movs	r1, #2
 80045f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2270      	movs	r2, #112	; 0x70
 800460c:	4393      	bics	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	05db      	lsls	r3, r3, #23
 800462a:	429a      	cmp	r2, r3
 800462c:	d009      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a11      	ldr	r2, [pc, #68]	; (8004678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d004      	beq.n	8004642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d10c      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	4393      	bics	r3, r2
 8004648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2239      	movs	r2, #57	; 0x39
 8004660:	2101      	movs	r1, #1
 8004662:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2238      	movs	r2, #56	; 0x38
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b004      	add	sp, #16
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	40010800 	.word	0x40010800
 800467c:	40011400 	.word	0x40011400

08004680 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e044      	b.n	800471c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2274      	movs	r2, #116	; 0x74
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f7fd fe6b 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	438a      	bics	r2, r1
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f000 fbfa 	bl	8004ebc <UART_SetConfig>
 80046c8:	0003      	movs	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e024      	b.n	800471c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 fe4f 	bl	8005380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	490d      	ldr	r1, [pc, #52]	; (8004724 <HAL_UART_Init+0xa4>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	212a      	movs	r1, #42	; 0x2a
 80046fe:	438a      	bics	r2, r1
 8004700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2101      	movs	r1, #1
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 fee7 	bl	80054e8 <UART_CheckIdleState>
 800471a:	0003      	movs	r3, r0
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b002      	add	sp, #8
 8004722:	bd80      	pop	{r7, pc}
 8004724:	ffffb7ff 	.word	0xffffb7ff

08004728 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	1dbb      	adds	r3, r7, #6
 8004734:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473a:	2b20      	cmp	r3, #32
 800473c:	d000      	beq.n	8004740 <HAL_UART_Transmit_IT+0x18>
 800473e:	e068      	b.n	8004812 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_UART_Transmit_IT+0x26>
 8004746:	1dbb      	adds	r3, r7, #6
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e060      	b.n	8004814 <HAL_UART_Transmit_IT+0xec>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	429a      	cmp	r2, r3
 800475c:	d109      	bne.n	8004772 <HAL_UART_Transmit_IT+0x4a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2201      	movs	r2, #1
 800476a:	4013      	ands	r3, r2
 800476c:	d001      	beq.n	8004772 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e050      	b.n	8004814 <HAL_UART_Transmit_IT+0xec>
      }
    }

    __HAL_LOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2274      	movs	r2, #116	; 0x74
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_UART_Transmit_IT+0x58>
 800477c:	2302      	movs	r3, #2
 800477e:	e049      	b.n	8004814 <HAL_UART_Transmit_IT+0xec>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2274      	movs	r2, #116	; 0x74
 8004784:	2101      	movs	r1, #1
 8004786:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1dba      	adds	r2, r7, #6
 8004792:	2150      	movs	r1, #80	; 0x50
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1dba      	adds	r2, r7, #6
 800479c:	2152      	movs	r1, #82	; 0x52
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2280      	movs	r2, #128	; 0x80
 80047ac:	2100      	movs	r1, #0
 80047ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2221      	movs	r2, #33	; 0x21
 80047b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	015b      	lsls	r3, r3, #5
 80047be:	429a      	cmp	r2, r3
 80047c0:	d107      	bne.n	80047d2 <HAL_UART_Transmit_IT+0xaa>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <HAL_UART_Transmit_IT+0xf4>)
 80047ce:	669a      	str	r2, [r3, #104]	; 0x68
 80047d0:	e002      	b.n	80047d8 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a12      	ldr	r2, [pc, #72]	; (8004820 <HAL_UART_Transmit_IT+0xf8>)
 80047d6:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2274      	movs	r2, #116	; 0x74
 80047dc:	2100      	movs	r1, #0
 80047de:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e0:	f3ef 8310 	mrs	r3, PRIMASK
 80047e4:	613b      	str	r3, [r7, #16]
  return(result);
 80047e6:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	2301      	movs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f383 8810 	msr	PRIMASK, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2180      	movs	r1, #128	; 0x80
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f383 8810 	msr	PRIMASK, r3

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	0018      	movs	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	b008      	add	sp, #32
 800481a:	bd80      	pop	{r7, pc}
 800481c:	080059dd 	.word	0x080059dd
 8004820:	08005933 	.word	0x08005933

08004824 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	1dbb      	adds	r3, r7, #6
 8004830:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	2b20      	cmp	r3, #32
 8004838:	d153      	bne.n	80048e2 <HAL_UART_Receive_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_UART_Receive_IT+0x24>
 8004840:	1dbb      	adds	r3, r7, #6
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04b      	b.n	80048e4 <HAL_UART_Receive_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	2380      	movs	r3, #128	; 0x80
 8004852:	015b      	lsls	r3, r3, #5
 8004854:	429a      	cmp	r2, r3
 8004856:	d109      	bne.n	800486c <HAL_UART_Receive_IT+0x48>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2201      	movs	r2, #1
 8004864:	4013      	ands	r3, r2
 8004866:	d001      	beq.n	800486c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e03b      	b.n	80048e4 <HAL_UART_Receive_IT+0xc0>
      }
    }

    __HAL_LOCK(huart);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2274      	movs	r2, #116	; 0x74
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_UART_Receive_IT+0x56>
 8004876:	2302      	movs	r3, #2
 8004878:	e034      	b.n	80048e4 <HAL_UART_Receive_IT+0xc0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2274      	movs	r2, #116	; 0x74
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a17      	ldr	r2, [pc, #92]	; (80048ec <HAL_UART_Receive_IT+0xc8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01e      	beq.n	80048d0 <HAL_UART_Receive_IT+0xac>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	041b      	lsls	r3, r3, #16
 800489c:	4013      	ands	r3, r2
 800489e:	d017      	beq.n	80048d0 <HAL_UART_Receive_IT+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	613b      	str	r3, [r7, #16]
  return(result);
 80048a6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	2301      	movs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f383 8810 	msr	PRIMASK, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	04c9      	lsls	r1, r1, #19
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	f383 8810 	msr	PRIMASK, r3
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80048d0:	1dbb      	adds	r3, r7, #6
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 ff0b 	bl	80056f4 <UART_Start_Receive_IT>
 80048de:	0003      	movs	r3, r0
 80048e0:	e000      	b.n	80048e4 <HAL_UART_Receive_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 80048e2:	2302      	movs	r3, #2
  }
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b008      	add	sp, #32
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40004800 	.word	0x40004800

080048f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0aa      	sub	sp, #168	; 0xa8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	22a4      	movs	r2, #164	; 0xa4
 8004900:	18b9      	adds	r1, r7, r2
 8004902:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	21a0      	movs	r1, #160	; 0xa0
 800490c:	1879      	adds	r1, r7, r1
 800490e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	219c      	movs	r1, #156	; 0x9c
 8004918:	1879      	adds	r1, r7, r1
 800491a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800491c:	18bb      	adds	r3, r7, r2
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a99      	ldr	r2, [pc, #612]	; (8004b88 <HAL_UART_IRQHandler+0x298>)
 8004922:	4013      	ands	r3, r2
 8004924:	2298      	movs	r2, #152	; 0x98
 8004926:	18b9      	adds	r1, r7, r2
 8004928:	600b      	str	r3, [r1, #0]
  if (errorflags == 0U)
 800492a:	18bb      	adds	r3, r7, r2
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d116      	bne.n	8004960 <HAL_UART_IRQHandler+0x70>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004932:	23a4      	movs	r3, #164	; 0xa4
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	4013      	ands	r3, r2
 800493c:	d010      	beq.n	8004960 <HAL_UART_IRQHandler+0x70>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800493e:	23a0      	movs	r3, #160	; 0xa0
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2220      	movs	r2, #32
 8004946:	4013      	ands	r3, r2
 8004948:	d00a      	beq.n	8004960 <HAL_UART_IRQHandler+0x70>
    {
      if (huart->RxISR != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800494e:	2b00      	cmp	r3, #0
 8004950:	d100      	bne.n	8004954 <HAL_UART_IRQHandler+0x64>
 8004952:	e28e      	b.n	8004e72 <HAL_UART_IRQHandler+0x582>
      {
        huart->RxISR(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	0010      	movs	r0, r2
 800495c:	4798      	blx	r3
      }
      return;
 800495e:	e288      	b.n	8004e72 <HAL_UART_IRQHandler+0x582>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004960:	2398      	movs	r3, #152	; 0x98
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d100      	bne.n	800496c <HAL_UART_IRQHandler+0x7c>
 800496a:	e113      	b.n	8004b94 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800496c:	239c      	movs	r3, #156	; 0x9c
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	4013      	ands	r3, r2
 8004976:	d106      	bne.n	8004986 <HAL_UART_IRQHandler+0x96>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004978:	23a0      	movs	r3, #160	; 0xa0
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a83      	ldr	r2, [pc, #524]	; (8004b8c <HAL_UART_IRQHandler+0x29c>)
 8004980:	4013      	ands	r3, r2
 8004982:	d100      	bne.n	8004986 <HAL_UART_IRQHandler+0x96>
 8004984:	e106      	b.n	8004b94 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004986:	23a4      	movs	r3, #164	; 0xa4
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2201      	movs	r2, #1
 800498e:	4013      	ands	r3, r2
 8004990:	d012      	beq.n	80049b8 <HAL_UART_IRQHandler+0xc8>
 8004992:	23a0      	movs	r3, #160	; 0xa0
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d00b      	beq.n	80049b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2201      	movs	r2, #1
 80049a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2280      	movs	r2, #128	; 0x80
 80049ac:	589b      	ldr	r3, [r3, r2]
 80049ae:	2201      	movs	r2, #1
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2180      	movs	r1, #128	; 0x80
 80049b6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b8:	23a4      	movs	r3, #164	; 0xa4
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2202      	movs	r2, #2
 80049c0:	4013      	ands	r3, r2
 80049c2:	d011      	beq.n	80049e8 <HAL_UART_IRQHandler+0xf8>
 80049c4:	239c      	movs	r3, #156	; 0x9c
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2201      	movs	r2, #1
 80049cc:	4013      	ands	r3, r2
 80049ce:	d00b      	beq.n	80049e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2202      	movs	r2, #2
 80049d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2280      	movs	r2, #128	; 0x80
 80049dc:	589b      	ldr	r3, [r3, r2]
 80049de:	2204      	movs	r2, #4
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e8:	23a4      	movs	r3, #164	; 0xa4
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2204      	movs	r2, #4
 80049f0:	4013      	ands	r3, r2
 80049f2:	d011      	beq.n	8004a18 <HAL_UART_IRQHandler+0x128>
 80049f4:	239c      	movs	r3, #156	; 0x9c
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2204      	movs	r2, #4
 8004a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a18:	23a4      	movs	r3, #164	; 0xa4
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2208      	movs	r2, #8
 8004a20:	4013      	ands	r3, r2
 8004a22:	d017      	beq.n	8004a54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a24:	23a0      	movs	r3, #160	; 0xa0
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d105      	bne.n	8004a3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a30:	239c      	movs	r3, #156	; 0x9c
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2201      	movs	r2, #1
 8004a38:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a3a:	d00b      	beq.n	8004a54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2208      	movs	r2, #8
 8004a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2280      	movs	r2, #128	; 0x80
 8004a48:	589b      	ldr	r3, [r3, r2]
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a54:	23a4      	movs	r3, #164	; 0xa4
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_UART_IRQHandler+0x19a>
 8004a62:	23a0      	movs	r3, #160	; 0xa0
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	04db      	lsls	r3, r3, #19
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d00c      	beq.n	8004a8a <HAL_UART_IRQHandler+0x19a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2280      	movs	r2, #128	; 0x80
 8004a76:	0112      	lsls	r2, r2, #4
 8004a78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	589b      	ldr	r3, [r3, r2]
 8004a80:	2220      	movs	r2, #32
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	589b      	ldr	r3, [r3, r2]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d100      	bne.n	8004a96 <HAL_UART_IRQHandler+0x1a6>
 8004a94:	e1ef      	b.n	8004e76 <HAL_UART_IRQHandler+0x586>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a96:	23a4      	movs	r3, #164	; 0xa4
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1d0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004aa2:	23a0      	movs	r3, #160	; 0xa0
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d008      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1d0>
      {
        if (huart->RxISR != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x1d0>
        {
          huart->RxISR(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	0010      	movs	r0, r2
 8004abe:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	589b      	ldr	r3, [r3, r2]
 8004ac6:	2294      	movs	r2, #148	; 0x94
 8004ac8:	18ba      	adds	r2, r7, r2
 8004aca:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2240      	movs	r2, #64	; 0x40
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d005      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x1f6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ada:	2394      	movs	r3, #148	; 0x94
 8004adc:	18fb      	adds	r3, r7, r3
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2228      	movs	r2, #40	; 0x28
 8004ae2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae4:	d045      	beq.n	8004b72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 feaf 	bl	800584c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2240      	movs	r2, #64	; 0x40
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d135      	bne.n	8004b68 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afc:	f3ef 8310 	mrs	r3, PRIMASK
 8004b00:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b04:	2090      	movs	r0, #144	; 0x90
 8004b06:	183a      	adds	r2, r7, r0
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b10:	f383 8810 	msr	PRIMASK, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	438a      	bics	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	183b      	adds	r3, r7, r0
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b2c:	f383 8810 	msr	PRIMASK, r3

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d012      	beq.n	8004b5e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a14      	ldr	r2, [pc, #80]	; (8004b90 <HAL_UART_IRQHandler+0x2a0>)
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fd fe41 	bl	80027cc <HAL_DMA_Abort_IT>
 8004b4a:	1e03      	subs	r3, r0, #0
 8004b4c:	d01a      	beq.n	8004b84 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	0018      	movs	r0, r3
 8004b5a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5c:	e012      	b.n	8004b84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f000 f997 	bl	8004e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b66:	e00d      	b.n	8004b84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 f992 	bl	8004e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e008      	b.n	8004b84 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f98d 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b82:	e178      	b.n	8004e76 <HAL_UART_IRQHandler+0x586>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	46c0      	nop			; (mov r8, r8)
    return;
 8004b86:	e176      	b.n	8004e76 <HAL_UART_IRQHandler+0x586>
 8004b88:	0000080f 	.word	0x0000080f
 8004b8c:	04000120 	.word	0x04000120
 8004b90:	08005905 	.word	0x08005905

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d000      	beq.n	8004b9e <HAL_UART_IRQHandler+0x2ae>
 8004b9c:	e129      	b.n	8004df2 <HAL_UART_IRQHandler+0x502>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b9e:	23a4      	movs	r3, #164	; 0xa4
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d100      	bne.n	8004bac <HAL_UART_IRQHandler+0x2bc>
 8004baa:	e122      	b.n	8004df2 <HAL_UART_IRQHandler+0x502>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bac:	23a0      	movs	r3, #160	; 0xa0
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d100      	bne.n	8004bba <HAL_UART_IRQHandler+0x2ca>
 8004bb8:	e11b      	b.n	8004df2 <HAL_UART_IRQHandler+0x502>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2210      	movs	r2, #16
 8004bc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2240      	movs	r2, #64	; 0x40
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b40      	cmp	r3, #64	; 0x40
 8004bce:	d000      	beq.n	8004bd2 <HAL_UART_IRQHandler+0x2e2>
 8004bd0:	e097      	b.n	8004d02 <HAL_UART_IRQHandler+0x412>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	217e      	movs	r1, #126	; 0x7e
 8004bdc:	187b      	adds	r3, r7, r1
 8004bde:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d100      	bne.n	8004bea <HAL_UART_IRQHandler+0x2fa>
 8004be8:	e147      	b.n	8004e7a <HAL_UART_IRQHandler+0x58a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2258      	movs	r2, #88	; 0x58
 8004bee:	5a9b      	ldrh	r3, [r3, r2]
 8004bf0:	227e      	movs	r2, #126	; 0x7e
 8004bf2:	18ba      	adds	r2, r7, r2
 8004bf4:	8812      	ldrh	r2, [r2, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d300      	bcc.n	8004bfc <HAL_UART_IRQHandler+0x30c>
 8004bfa:	e13e      	b.n	8004e7a <HAL_UART_IRQHandler+0x58a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	227e      	movs	r2, #126	; 0x7e
 8004c00:	18ba      	adds	r2, r7, r2
 8004c02:	215a      	movs	r1, #90	; 0x5a
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2220      	movs	r2, #32
 8004c12:	4013      	ands	r3, r2
 8004c14:	d166      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x3f4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c20:	2301      	movs	r3, #1
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	f383 8810 	msr	PRIMASK, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4995      	ldr	r1, [pc, #596]	; (8004e8c <HAL_UART_IRQHandler+0x59c>)
 8004c36:	400a      	ands	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c44:	f3ef 8310 	mrs	r3, PRIMASK
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c4e:	2301      	movs	r3, #1
 8004c50:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c54:	f383 8810 	msr	PRIMASK, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2101      	movs	r1, #1
 8004c64:	438a      	bics	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c82:	f383 8810 	msr	PRIMASK, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2140      	movs	r1, #64	; 0x40
 8004c92:	438a      	bics	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	f383 8810 	msr	PRIMASK, r3

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cac:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cbc:	f383 8810 	msr	PRIMASK, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2110      	movs	r1, #16
 8004ccc:	438a      	bics	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd6:	f383 8810 	msr	PRIMASK, r3

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f7fd fd34 	bl	800274c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2258      	movs	r2, #88	; 0x58
 8004ce8:	5a9a      	ldrh	r2, [r3, r2]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	215a      	movs	r1, #90	; 0x5a
 8004cee:	5a5b      	ldrh	r3, [r3, r1]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	0011      	movs	r1, r2
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 f8d2 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d00:	e0bb      	b.n	8004e7a <HAL_UART_IRQHandler+0x58a>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2258      	movs	r2, #88	; 0x58
 8004d06:	5a99      	ldrh	r1, [r3, r2]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	225a      	movs	r2, #90	; 0x5a
 8004d0c:	5a9b      	ldrh	r3, [r3, r2]
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	238e      	movs	r3, #142	; 0x8e
 8004d12:	18fb      	adds	r3, r7, r3
 8004d14:	1a8a      	subs	r2, r1, r2
 8004d16:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	225a      	movs	r2, #90	; 0x5a
 8004d1c:	5a9b      	ldrh	r3, [r3, r2]
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d100      	bne.n	8004d26 <HAL_UART_IRQHandler+0x436>
 8004d24:	e0ab      	b.n	8004e7e <HAL_UART_IRQHandler+0x58e>
          && (nb_rx_data > 0U))
 8004d26:	238e      	movs	r3, #142	; 0x8e
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d100      	bne.n	8004d32 <HAL_UART_IRQHandler+0x442>
 8004d30:	e0a5      	b.n	8004e7e <HAL_UART_IRQHandler+0x58e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d38:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3a:	2088      	movs	r0, #136	; 0x88
 8004d3c:	183a      	adds	r2, r7, r0
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	2301      	movs	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f383 8810 	msr	PRIMASK, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	494e      	ldr	r1, [pc, #312]	; (8004e90 <HAL_UART_IRQHandler+0x5a0>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	183b      	adds	r3, r7, r0
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d66:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d6c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6e:	2084      	movs	r0, #132	; 0x84
 8004d70:	183a      	adds	r2, r7, r0
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	2301      	movs	r3, #1
 8004d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2101      	movs	r1, #1
 8004d8a:	438a      	bics	r2, r1
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	183b      	adds	r3, r7, r0
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	623b      	str	r3, [r7, #32]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	f383 8810 	msr	PRIMASK, r3

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db4:	2080      	movs	r0, #128	; 0x80
 8004db6:	183a      	adds	r2, r7, r0
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	2301      	movs	r3, #1
 8004dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	f383 8810 	msr	PRIMASK, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2110      	movs	r1, #16
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	f383 8810 	msr	PRIMASK, r3
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004de0:	238e      	movs	r3, #142	; 0x8e
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	0011      	movs	r1, r2
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 f85a 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004df0:	e045      	b.n	8004e7e <HAL_UART_IRQHandler+0x58e>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004df2:	23a4      	movs	r3, #164	; 0xa4
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	035b      	lsls	r3, r3, #13
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d010      	beq.n	8004e22 <HAL_UART_IRQHandler+0x532>
 8004e00:	239c      	movs	r3, #156	; 0x9c
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	03db      	lsls	r3, r3, #15
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2280      	movs	r2, #128	; 0x80
 8004e14:	0352      	lsls	r2, r2, #13
 8004e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 ffbe 	bl	8005d9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e20:	e030      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e22:	23a4      	movs	r3, #164	; 0xa4
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2280      	movs	r2, #128	; 0x80
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <HAL_UART_IRQHandler+0x55e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e2e:	23a0      	movs	r3, #160	; 0xa0
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	4013      	ands	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_UART_IRQHandler+0x55e>
  {
    if (huart->TxISR != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01f      	beq.n	8004e82 <HAL_UART_IRQHandler+0x592>
    {
      huart->TxISR(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	0010      	movs	r0, r2
 8004e4a:	4798      	blx	r3
    }
    return;
 8004e4c:	e019      	b.n	8004e82 <HAL_UART_IRQHandler+0x592>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e4e:	23a4      	movs	r3, #164	; 0xa4
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2240      	movs	r2, #64	; 0x40
 8004e56:	4013      	ands	r3, r2
 8004e58:	d014      	beq.n	8004e84 <HAL_UART_IRQHandler+0x594>
 8004e5a:	23a0      	movs	r3, #160	; 0xa0
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2240      	movs	r2, #64	; 0x40
 8004e62:	4013      	ands	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_UART_IRQHandler+0x594>
  {
    UART_EndTransmit_IT(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 fe11 	bl	8005a90 <UART_EndTransmit_IT>
    return;
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	e008      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
      return;
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	e006      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
    return;
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	e004      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
      return;
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	e002      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
      return;
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	e000      	b.n	8004e84 <HAL_UART_IRQHandler+0x594>
    return;
 8004e82:	46c0      	nop			; (mov r8, r8)
  }

}
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b02a      	add	sp, #168	; 0xa8
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	fffffeff 	.word	0xfffffeff
 8004e90:	fffffedf 	.word	0xfffffedf

08004e94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b002      	add	sp, #8
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	000a      	movs	r2, r1
 8004eae:	1cbb      	adds	r3, r7, #2
 8004eb0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b002      	add	sp, #8
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b08e      	sub	sp, #56	; 0x38
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ec4:	231a      	movs	r3, #26
 8004ec6:	2218      	movs	r2, #24
 8004ec8:	4694      	mov	ip, r2
 8004eca:	44bc      	add	ip, r7
 8004ecc:	4463      	add	r3, ip
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4aba      	ldr	r2, [pc, #744]	; (80051dc <UART_SetConfig+0x320>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4ab6      	ldr	r2, [pc, #728]	; (80051e0 <UART_SetConfig+0x324>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4ab0      	ldr	r2, [pc, #704]	; (80051e4 <UART_SetConfig+0x328>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4aab      	ldr	r2, [pc, #684]	; (80051e8 <UART_SetConfig+0x32c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4aa7      	ldr	r2, [pc, #668]	; (80051ec <UART_SetConfig+0x330>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d137      	bne.n	8004fc2 <UART_SetConfig+0x106>
 8004f52:	4ba7      	ldr	r3, [pc, #668]	; (80051f0 <UART_SetConfig+0x334>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	220c      	movs	r2, #12
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d018      	beq.n	8004f90 <UART_SetConfig+0xd4>
 8004f5e:	d802      	bhi.n	8004f66 <UART_SetConfig+0xaa>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <UART_SetConfig+0xb4>
 8004f64:	e024      	b.n	8004fb0 <UART_SetConfig+0xf4>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d00a      	beq.n	8004f80 <UART_SetConfig+0xc4>
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d018      	beq.n	8004fa0 <UART_SetConfig+0xe4>
 8004f6e:	e01f      	b.n	8004fb0 <UART_SetConfig+0xf4>
 8004f70:	231b      	movs	r3, #27
 8004f72:	2218      	movs	r2, #24
 8004f74:	4694      	mov	ip, r2
 8004f76:	44bc      	add	ip, r7
 8004f78:	4463      	add	r3, ip
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e06e      	b.n	800505e <UART_SetConfig+0x1a2>
 8004f80:	231b      	movs	r3, #27
 8004f82:	2218      	movs	r2, #24
 8004f84:	4694      	mov	ip, r2
 8004f86:	44bc      	add	ip, r7
 8004f88:	4463      	add	r3, ip
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e066      	b.n	800505e <UART_SetConfig+0x1a2>
 8004f90:	231b      	movs	r3, #27
 8004f92:	2218      	movs	r2, #24
 8004f94:	4694      	mov	ip, r2
 8004f96:	44bc      	add	ip, r7
 8004f98:	4463      	add	r3, ip
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	e05e      	b.n	800505e <UART_SetConfig+0x1a2>
 8004fa0:	231b      	movs	r3, #27
 8004fa2:	2218      	movs	r2, #24
 8004fa4:	4694      	mov	ip, r2
 8004fa6:	44bc      	add	ip, r7
 8004fa8:	4463      	add	r3, ip
 8004faa:	2208      	movs	r2, #8
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e056      	b.n	800505e <UART_SetConfig+0x1a2>
 8004fb0:	231b      	movs	r3, #27
 8004fb2:	2218      	movs	r2, #24
 8004fb4:	4694      	mov	ip, r2
 8004fb6:	44bc      	add	ip, r7
 8004fb8:	4463      	add	r3, ip
 8004fba:	2210      	movs	r2, #16
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	e04d      	b.n	800505e <UART_SetConfig+0x1a2>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a87      	ldr	r2, [pc, #540]	; (80051e4 <UART_SetConfig+0x328>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d141      	bne.n	8005050 <UART_SetConfig+0x194>
 8004fcc:	4b88      	ldr	r3, [pc, #544]	; (80051f0 <UART_SetConfig+0x334>)
 8004fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd0:	23c0      	movs	r3, #192	; 0xc0
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2280      	movs	r2, #128	; 0x80
 8004fd8:	00d2      	lsls	r2, r2, #3
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d01f      	beq.n	800501e <UART_SetConfig+0x162>
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	00d2      	lsls	r2, r2, #3
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d802      	bhi.n	8004fec <UART_SetConfig+0x130>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <UART_SetConfig+0x142>
 8004fea:	e028      	b.n	800503e <UART_SetConfig+0x182>
 8004fec:	2280      	movs	r2, #128	; 0x80
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00c      	beq.n	800500e <UART_SetConfig+0x152>
 8004ff4:	22c0      	movs	r2, #192	; 0xc0
 8004ff6:	0112      	lsls	r2, r2, #4
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <UART_SetConfig+0x172>
 8004ffc:	e01f      	b.n	800503e <UART_SetConfig+0x182>
 8004ffe:	231b      	movs	r3, #27
 8005000:	2218      	movs	r2, #24
 8005002:	4694      	mov	ip, r2
 8005004:	44bc      	add	ip, r7
 8005006:	4463      	add	r3, ip
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e027      	b.n	800505e <UART_SetConfig+0x1a2>
 800500e:	231b      	movs	r3, #27
 8005010:	2218      	movs	r2, #24
 8005012:	4694      	mov	ip, r2
 8005014:	44bc      	add	ip, r7
 8005016:	4463      	add	r3, ip
 8005018:	2202      	movs	r2, #2
 800501a:	701a      	strb	r2, [r3, #0]
 800501c:	e01f      	b.n	800505e <UART_SetConfig+0x1a2>
 800501e:	231b      	movs	r3, #27
 8005020:	2218      	movs	r2, #24
 8005022:	4694      	mov	ip, r2
 8005024:	44bc      	add	ip, r7
 8005026:	4463      	add	r3, ip
 8005028:	2204      	movs	r2, #4
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	e017      	b.n	800505e <UART_SetConfig+0x1a2>
 800502e:	231b      	movs	r3, #27
 8005030:	2218      	movs	r2, #24
 8005032:	4694      	mov	ip, r2
 8005034:	44bc      	add	ip, r7
 8005036:	4463      	add	r3, ip
 8005038:	2208      	movs	r2, #8
 800503a:	701a      	strb	r2, [r3, #0]
 800503c:	e00f      	b.n	800505e <UART_SetConfig+0x1a2>
 800503e:	231b      	movs	r3, #27
 8005040:	2218      	movs	r2, #24
 8005042:	4694      	mov	ip, r2
 8005044:	44bc      	add	ip, r7
 8005046:	4463      	add	r3, ip
 8005048:	2210      	movs	r2, #16
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	e006      	b.n	800505e <UART_SetConfig+0x1a2>
 8005050:	231b      	movs	r3, #27
 8005052:	2218      	movs	r2, #24
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2210      	movs	r2, #16
 800505c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a60      	ldr	r2, [pc, #384]	; (80051e4 <UART_SetConfig+0x328>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d000      	beq.n	800506a <UART_SetConfig+0x1ae>
 8005068:	e085      	b.n	8005176 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800506a:	231b      	movs	r3, #27
 800506c:	2218      	movs	r2, #24
 800506e:	4694      	mov	ip, r2
 8005070:	44bc      	add	ip, r7
 8005072:	4463      	add	r3, ip
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d00d      	beq.n	8005096 <UART_SetConfig+0x1da>
 800507a:	dc02      	bgt.n	8005082 <UART_SetConfig+0x1c6>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <UART_SetConfig+0x1d0>
 8005080:	e01d      	b.n	80050be <UART_SetConfig+0x202>
 8005082:	2b04      	cmp	r3, #4
 8005084:	d012      	beq.n	80050ac <UART_SetConfig+0x1f0>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d015      	beq.n	80050b6 <UART_SetConfig+0x1fa>
 800508a:	e018      	b.n	80050be <UART_SetConfig+0x202>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508c:	f7fe fe0a 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 8005090:	0003      	movs	r3, r0
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005094:	e01d      	b.n	80050d2 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005096:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <UART_SetConfig+0x334>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2210      	movs	r2, #16
 800509c:	4013      	ands	r3, r2
 800509e:	d002      	beq.n	80050a6 <UART_SetConfig+0x1ea>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050a0:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <UART_SetConfig+0x338>)
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050a4:	e015      	b.n	80050d2 <UART_SetConfig+0x216>
          pclk = (uint32_t) HSI_VALUE;
 80050a6:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <UART_SetConfig+0x33c>)
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050aa:	e012      	b.n	80050d2 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ac:	f7fe fd4e 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 80050b0:	0003      	movs	r3, r0
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050b4:	e00d      	b.n	80050d2 <UART_SetConfig+0x216>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050bc:	e009      	b.n	80050d2 <UART_SetConfig+0x216>
      default:
        pclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80050c2:	231a      	movs	r3, #26
 80050c4:	2218      	movs	r2, #24
 80050c6:	4694      	mov	ip, r2
 80050c8:	44bc      	add	ip, r7
 80050ca:	4463      	add	r3, ip
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
        break;
 80050d0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d100      	bne.n	80050da <UART_SetConfig+0x21e>
 80050d8:	e138      	b.n	800534c <UART_SetConfig+0x490>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	0013      	movs	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d305      	bcc.n	80050f6 <UART_SetConfig+0x23a>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d907      	bls.n	8005106 <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80050f6:	231a      	movs	r3, #26
 80050f8:	2218      	movs	r2, #24
 80050fa:	4694      	mov	ip, r2
 80050fc:	44bc      	add	ip, r7
 80050fe:	4463      	add	r3, ip
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e122      	b.n	800534c <UART_SetConfig+0x490>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	6939      	ldr	r1, [r7, #16]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	000b      	movs	r3, r1
 8005114:	0e1b      	lsrs	r3, r3, #24
 8005116:	0010      	movs	r0, r2
 8005118:	0205      	lsls	r5, r0, #8
 800511a:	431d      	orrs	r5, r3
 800511c:	000b      	movs	r3, r1
 800511e:	021c      	lsls	r4, r3, #8
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68b8      	ldr	r0, [r7, #8]
 800512e:	68f9      	ldr	r1, [r7, #12]
 8005130:	1900      	adds	r0, r0, r4
 8005132:	4169      	adcs	r1, r5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f7fb f8a7 	bl	8000294 <__aeabi_uldivmod>
 8005146:	0003      	movs	r3, r0
 8005148:	000c      	movs	r4, r1
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <UART_SetConfig+0x340>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d908      	bls.n	8005166 <UART_SetConfig+0x2aa>
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	4a2a      	ldr	r2, [pc, #168]	; (8005200 <UART_SetConfig+0x344>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d804      	bhi.n	8005166 <UART_SetConfig+0x2aa>
        {
          huart->Instance->BRR = usartdiv;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e0f2      	b.n	800534c <UART_SetConfig+0x490>
        }
        else
        {
          ret = HAL_ERROR;
 8005166:	231a      	movs	r3, #26
 8005168:	2218      	movs	r2, #24
 800516a:	4694      	mov	ip, r2
 800516c:	44bc      	add	ip, r7
 800516e:	4463      	add	r3, ip
 8005170:	2201      	movs	r2, #1
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e0ea      	b.n	800534c <UART_SetConfig+0x490>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	429a      	cmp	r2, r3
 8005180:	d000      	beq.n	8005184 <UART_SetConfig+0x2c8>
 8005182:	e08a      	b.n	800529a <UART_SetConfig+0x3de>
  {
    switch (clocksource)
 8005184:	231b      	movs	r3, #27
 8005186:	2218      	movs	r2, #24
 8005188:	4694      	mov	ip, r2
 800518a:	44bc      	add	ip, r7
 800518c:	4463      	add	r3, ip
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b08      	cmp	r3, #8
 8005192:	d839      	bhi.n	8005208 <UART_SetConfig+0x34c>
 8005194:	009a      	lsls	r2, r3, #2
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <UART_SetConfig+0x348>)
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519e:	f7fe fd81 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80051a2:	0003      	movs	r3, r0
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051a6:	e039      	b.n	800521c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a8:	f7fe fd92 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 80051ac:	0003      	movs	r3, r0
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051b0:	e034      	b.n	800521c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <UART_SetConfig+0x334>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2210      	movs	r2, #16
 80051b8:	4013      	ands	r3, r2
 80051ba:	d002      	beq.n	80051c2 <UART_SetConfig+0x306>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <UART_SetConfig+0x338>)
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051c0:	e02c      	b.n	800521c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80051c2:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <UART_SetConfig+0x33c>)
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051c6:	e029      	b.n	800521c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051c8:	f7fe fcc0 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 80051cc:	0003      	movs	r3, r0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d0:	e024      	b.n	800521c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051d8:	e020      	b.n	800521c <UART_SetConfig+0x360>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	efff69f3 	.word	0xefff69f3
 80051e0:	ffffcfff 	.word	0xffffcfff
 80051e4:	40004800 	.word	0x40004800
 80051e8:	fffff4ff 	.word	0xfffff4ff
 80051ec:	40004400 	.word	0x40004400
 80051f0:	40021000 	.word	0x40021000
 80051f4:	003d0900 	.word	0x003d0900
 80051f8:	00f42400 	.word	0x00f42400
 80051fc:	000002ff 	.word	0x000002ff
 8005200:	000fffff 	.word	0x000fffff
 8005204:	08006060 	.word	0x08006060
      default:
        pclk = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800520c:	231a      	movs	r3, #26
 800520e:	2218      	movs	r2, #24
 8005210:	4694      	mov	ip, r2
 8005212:	44bc      	add	ip, r7
 8005214:	4463      	add	r3, ip
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
        break;
 800521a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d100      	bne.n	8005224 <UART_SetConfig+0x368>
 8005222:	e093      	b.n	800534c <UART_SetConfig+0x490>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005226:	005a      	lsls	r2, r3, #1
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	085b      	lsrs	r3, r3, #1
 800522e:	18d2      	adds	r2, r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	0019      	movs	r1, r3
 8005236:	0010      	movs	r0, r2
 8005238:	f7fa ff66 	bl	8000108 <__udivsi3>
 800523c:	0003      	movs	r3, r0
 800523e:	b29b      	uxth	r3, r3
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	2b0f      	cmp	r3, #15
 8005246:	d920      	bls.n	800528a <UART_SetConfig+0x3ce>
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	4a48      	ldr	r2, [pc, #288]	; (800536c <UART_SetConfig+0x4b0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d81c      	bhi.n	800528a <UART_SetConfig+0x3ce>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	b29a      	uxth	r2, r3
 8005254:	200e      	movs	r0, #14
 8005256:	2418      	movs	r4, #24
 8005258:	193b      	adds	r3, r7, r4
 800525a:	181b      	adds	r3, r3, r0
 800525c:	210f      	movs	r1, #15
 800525e:	438a      	bics	r2, r1
 8005260:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	2207      	movs	r2, #7
 800526a:	4013      	ands	r3, r2
 800526c:	b299      	uxth	r1, r3
 800526e:	193b      	adds	r3, r7, r4
 8005270:	181b      	adds	r3, r3, r0
 8005272:	193a      	adds	r2, r7, r4
 8005274:	1812      	adds	r2, r2, r0
 8005276:	8812      	ldrh	r2, [r2, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	193a      	adds	r2, r7, r4
 8005282:	1812      	adds	r2, r2, r0
 8005284:	8812      	ldrh	r2, [r2, #0]
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	e060      	b.n	800534c <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 800528a:	231a      	movs	r3, #26
 800528c:	2218      	movs	r2, #24
 800528e:	4694      	mov	ip, r2
 8005290:	44bc      	add	ip, r7
 8005292:	4463      	add	r3, ip
 8005294:	2201      	movs	r2, #1
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e058      	b.n	800534c <UART_SetConfig+0x490>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529a:	231b      	movs	r3, #27
 800529c:	2218      	movs	r2, #24
 800529e:	4694      	mov	ip, r2
 80052a0:	44bc      	add	ip, r7
 80052a2:	4463      	add	r3, ip
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d822      	bhi.n	80052f0 <UART_SetConfig+0x434>
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	4b30      	ldr	r3, [pc, #192]	; (8005370 <UART_SetConfig+0x4b4>)
 80052ae:	18d3      	adds	r3, r2, r3
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe fcf6 	bl	8003ca4 <HAL_RCC_GetPCLK1Freq>
 80052b8:	0003      	movs	r3, r0
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052bc:	e022      	b.n	8005304 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052be:	f7fe fd07 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 80052c2:	0003      	movs	r3, r0
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052c6:	e01d      	b.n	8005304 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <UART_SetConfig+0x4b8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2210      	movs	r2, #16
 80052ce:	4013      	ands	r3, r2
 80052d0:	d002      	beq.n	80052d8 <UART_SetConfig+0x41c>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <UART_SetConfig+0x4bc>)
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052d6:	e015      	b.n	8005304 <UART_SetConfig+0x448>
          pclk = (uint32_t) HSI_VALUE;
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <UART_SetConfig+0x4c0>)
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052dc:	e012      	b.n	8005304 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052de:	f7fe fc35 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 80052e2:	0003      	movs	r3, r0
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e6:	e00d      	b.n	8005304 <UART_SetConfig+0x448>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ee:	e009      	b.n	8005304 <UART_SetConfig+0x448>
      default:
        pclk = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052f4:	231a      	movs	r3, #26
 80052f6:	2218      	movs	r2, #24
 80052f8:	4694      	mov	ip, r2
 80052fa:	44bc      	add	ip, r7
 80052fc:	4463      	add	r3, ip
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
        break;
 8005302:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d020      	beq.n	800534c <UART_SetConfig+0x490>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	085a      	lsrs	r2, r3, #1
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	18d2      	adds	r2, r2, r3
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0019      	movs	r1, r3
 800531a:	0010      	movs	r0, r2
 800531c:	f7fa fef4 	bl	8000108 <__udivsi3>
 8005320:	0003      	movs	r3, r0
 8005322:	b29b      	uxth	r3, r3
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d908      	bls.n	800533e <UART_SetConfig+0x482>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	4a0f      	ldr	r2, [pc, #60]	; (800536c <UART_SetConfig+0x4b0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d804      	bhi.n	800533e <UART_SetConfig+0x482>
      {
        huart->Instance->BRR = usartdiv;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e006      	b.n	800534c <UART_SetConfig+0x490>
      }
      else
      {
        ret = HAL_ERROR;
 800533e:	231a      	movs	r3, #26
 8005340:	2218      	movs	r2, #24
 8005342:	4694      	mov	ip, r2
 8005344:	44bc      	add	ip, r7
 8005346:	4463      	add	r3, ip
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2200      	movs	r2, #0
 8005350:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2200      	movs	r2, #0
 8005356:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005358:	231a      	movs	r3, #26
 800535a:	2218      	movs	r2, #24
 800535c:	4694      	mov	ip, r2
 800535e:	44bc      	add	ip, r7
 8005360:	4463      	add	r3, ip
 8005362:	781b      	ldrb	r3, [r3, #0]
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b00e      	add	sp, #56	; 0x38
 800536a:	bdb0      	pop	{r4, r5, r7, pc}
 800536c:	0000ffff 	.word	0x0000ffff
 8005370:	08006084 	.word	0x08006084
 8005374:	40021000 	.word	0x40021000
 8005378:	003d0900 	.word	0x003d0900
 800537c:	00f42400 	.word	0x00f42400

08005380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
 8005390:	d00b      	beq.n	80053aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a4a      	ldr	r2, [pc, #296]	; (80054c4 <UART_AdvFeatureConfig+0x144>)
 800539a:	4013      	ands	r3, r2
 800539c:	0019      	movs	r1, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2202      	movs	r2, #2
 80053b0:	4013      	ands	r3, r2
 80053b2:	d00b      	beq.n	80053cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4a43      	ldr	r2, [pc, #268]	; (80054c8 <UART_AdvFeatureConfig+0x148>)
 80053bc:	4013      	ands	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2204      	movs	r2, #4
 80053d2:	4013      	ands	r3, r2
 80053d4:	d00b      	beq.n	80053ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	4a3b      	ldr	r2, [pc, #236]	; (80054cc <UART_AdvFeatureConfig+0x14c>)
 80053de:	4013      	ands	r3, r2
 80053e0:	0019      	movs	r1, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	430a      	orrs	r2, r1
 80053ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2208      	movs	r2, #8
 80053f4:	4013      	ands	r3, r2
 80053f6:	d00b      	beq.n	8005410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4a34      	ldr	r2, [pc, #208]	; (80054d0 <UART_AdvFeatureConfig+0x150>)
 8005400:	4013      	ands	r3, r2
 8005402:	0019      	movs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2210      	movs	r2, #16
 8005416:	4013      	ands	r3, r2
 8005418:	d00b      	beq.n	8005432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4a2c      	ldr	r2, [pc, #176]	; (80054d4 <UART_AdvFeatureConfig+0x154>)
 8005422:	4013      	ands	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2220      	movs	r2, #32
 8005438:	4013      	ands	r3, r2
 800543a:	d00b      	beq.n	8005454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <UART_AdvFeatureConfig+0x158>)
 8005444:	4013      	ands	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2240      	movs	r2, #64	; 0x40
 800545a:	4013      	ands	r3, r2
 800545c:	d01d      	beq.n	800549a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a1d      	ldr	r2, [pc, #116]	; (80054dc <UART_AdvFeatureConfig+0x15c>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	035b      	lsls	r3, r3, #13
 800547e:	429a      	cmp	r2, r3
 8005480:	d10b      	bne.n	800549a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <UART_AdvFeatureConfig+0x160>)
 800548a:	4013      	ands	r3, r2
 800548c:	0019      	movs	r1, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2280      	movs	r2, #128	; 0x80
 80054a0:	4013      	ands	r3, r2
 80054a2:	d00b      	beq.n	80054bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <UART_AdvFeatureConfig+0x164>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	0019      	movs	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	fffdffff 	.word	0xfffdffff
 80054c8:	fffeffff 	.word	0xfffeffff
 80054cc:	fffbffff 	.word	0xfffbffff
 80054d0:	ffff7fff 	.word	0xffff7fff
 80054d4:	ffffefff 	.word	0xffffefff
 80054d8:	ffffdfff 	.word	0xffffdfff
 80054dc:	ffefffff 	.word	0xffefffff
 80054e0:	ff9fffff 	.word	0xff9fffff
 80054e4:	fff7ffff 	.word	0xfff7ffff

080054e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	2100      	movs	r1, #0
 80054f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054f8:	f7fd f81e 	bl	8002538 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2208      	movs	r2, #8
 8005508:	4013      	ands	r3, r2
 800550a:	2b08      	cmp	r3, #8
 800550c:	d10d      	bne.n	800552a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	2380      	movs	r3, #128	; 0x80
 8005512:	0399      	lsls	r1, r3, #14
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <UART_CheckIdleState+0x90>)
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	0013      	movs	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	f000 f82d 	bl	800557c <UART_WaitOnFlagUntilTimeout>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d001      	beq.n	800552a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e022      	b.n	8005570 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2204      	movs	r2, #4
 8005532:	4013      	ands	r3, r2
 8005534:	2b04      	cmp	r3, #4
 8005536:	d10d      	bne.n	8005554 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	03d9      	lsls	r1, r3, #15
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <UART_CheckIdleState+0x90>)
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	0013      	movs	r3, r2
 8005546:	2200      	movs	r2, #0
 8005548:	f000 f818 	bl	800557c <UART_WaitOnFlagUntilTimeout>
 800554c:	1e03      	subs	r3, r0, #0
 800554e:	d001      	beq.n	8005554 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e00d      	b.n	8005570 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2220      	movs	r2, #32
 8005558:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2274      	movs	r2, #116	; 0x74
 800556a:	2100      	movs	r1, #0
 800556c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b004      	add	sp, #16
 8005576:	bd80      	pop	{r7, pc}
 8005578:	01ffffff 	.word	0x01ffffff

0800557c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b094      	sub	sp, #80	; 0x50
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	1dfb      	adds	r3, r7, #7
 800558a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558c:	e09b      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005590:	3301      	adds	r3, #1
 8005592:	d100      	bne.n	8005596 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005594:	e097      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fc ffcf 	bl	8002538 <HAL_GetTick>
 800559a:	0002      	movs	r2, r0
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <UART_WaitOnFlagUntilTimeout+0x30>
 80055a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d139      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0xa4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b4:	647b      	str	r3, [r7, #68]	; 0x44
 80055b6:	2301      	movs	r3, #1
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	f383 8810 	msr	PRIMASK, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4949      	ldr	r1, [pc, #292]	; (80056f0 <UART_WaitOnFlagUntilTimeout+0x174>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	633b      	str	r3, [r7, #48]	; 0x30
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055da:	f3ef 8310 	mrs	r3, PRIMASK
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80055e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	643b      	str	r3, [r7, #64]	; 0x40
 80055e4:	2301      	movs	r3, #1
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	f383 8810 	msr	PRIMASK, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2101      	movs	r1, #1
 80055fa:	438a      	bics	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2274      	movs	r2, #116	; 0x74
 8005618:	2100      	movs	r1, #0
 800561a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e063      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2204      	movs	r2, #4
 8005628:	4013      	ands	r3, r2
 800562a:	d04c      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	401a      	ands	r2, r3
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	429a      	cmp	r2, r3
 800563e:	d142      	bne.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2280      	movs	r2, #128	; 0x80
 8005646:	0112      	lsls	r2, r2, #4
 8005648:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564a:	f3ef 8310 	mrs	r3, PRIMASK
 800564e:	613b      	str	r3, [r7, #16]
  return(result);
 8005650:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005654:	2301      	movs	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f383 8810 	msr	PRIMASK, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4921      	ldr	r1, [pc, #132]	; (80056f0 <UART_WaitOnFlagUntilTimeout+0x174>)
 800566a:	400a      	ands	r2, r1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	61fb      	str	r3, [r7, #28]
  return(result);
 800567e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
 8005682:	2301      	movs	r3, #1
 8005684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	f383 8810 	msr	PRIMASK, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	438a      	bics	r2, r1
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	2120      	movs	r1, #32
 80056b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2274      	movs	r2, #116	; 0x74
 80056be:	2100      	movs	r1, #0
 80056c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e010      	b.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	425a      	negs	r2, r3
 80056d6:	4153      	adcs	r3, r2
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	001a      	movs	r2, r3
 80056dc:	1dfb      	adds	r3, r7, #7
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d100      	bne.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x16a>
 80056e4:	e753      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	0018      	movs	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	b014      	add	sp, #80	; 0x50
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	fffffe5f 	.word	0xfffffe5f

080056f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08c      	sub	sp, #48	; 0x30
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	1dbb      	adds	r3, r7, #6
 8005700:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1dba      	adds	r2, r7, #6
 800570c:	2158      	movs	r1, #88	; 0x58
 800570e:	8812      	ldrh	r2, [r2, #0]
 8005710:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1dba      	adds	r2, r7, #6
 8005716:	215a      	movs	r1, #90	; 0x5a
 8005718:	8812      	ldrh	r2, [r2, #0]
 800571a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	015b      	lsls	r3, r3, #5
 800572a:	429a      	cmp	r2, r3
 800572c:	d10d      	bne.n	800574a <UART_Start_Receive_IT+0x56>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <UART_Start_Receive_IT+0x4c>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	225c      	movs	r2, #92	; 0x5c
 800573a:	4941      	ldr	r1, [pc, #260]	; (8005840 <UART_Start_Receive_IT+0x14c>)
 800573c:	5299      	strh	r1, [r3, r2]
 800573e:	e02e      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	225c      	movs	r2, #92	; 0x5c
 8005744:	21ff      	movs	r1, #255	; 0xff
 8005746:	5299      	strh	r1, [r3, r2]
 8005748:	e029      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <UART_Start_Receive_IT+0x7a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <UART_Start_Receive_IT+0x70>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	225c      	movs	r2, #92	; 0x5c
 800575e:	21ff      	movs	r1, #255	; 0xff
 8005760:	5299      	strh	r1, [r3, r2]
 8005762:	e01c      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	225c      	movs	r2, #92	; 0x5c
 8005768:	217f      	movs	r1, #127	; 0x7f
 800576a:	5299      	strh	r1, [r3, r2]
 800576c:	e017      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	2380      	movs	r3, #128	; 0x80
 8005774:	055b      	lsls	r3, r3, #21
 8005776:	429a      	cmp	r2, r3
 8005778:	d10d      	bne.n	8005796 <UART_Start_Receive_IT+0xa2>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <UART_Start_Receive_IT+0x98>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	225c      	movs	r2, #92	; 0x5c
 8005786:	217f      	movs	r1, #127	; 0x7f
 8005788:	5299      	strh	r1, [r3, r2]
 800578a:	e008      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	225c      	movs	r2, #92	; 0x5c
 8005790:	213f      	movs	r1, #63	; 0x3f
 8005792:	5299      	strh	r1, [r3, r2]
 8005794:	e003      	b.n	800579e <UART_Start_Receive_IT+0xaa>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	225c      	movs	r2, #92	; 0x5c
 800579a:	2100      	movs	r1, #0
 800579c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	2100      	movs	r1, #0
 80057a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2222      	movs	r2, #34	; 0x22
 80057aa:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ac:	f3ef 8310 	mrs	r3, PRIMASK
 80057b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80057b2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b6:	2301      	movs	r3, #1
 80057b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f383 8810 	msr	PRIMASK, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2101      	movs	r1, #1
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	f383 8810 	msr	PRIMASK, r3

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	015b      	lsls	r3, r3, #5
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d107      	bne.n	80057f6 <UART_Start_Receive_IT+0x102>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a14      	ldr	r2, [pc, #80]	; (8005844 <UART_Start_Receive_IT+0x150>)
 80057f2:	665a      	str	r2, [r3, #100]	; 0x64
 80057f4:	e002      	b.n	80057fc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4a13      	ldr	r2, [pc, #76]	; (8005848 <UART_Start_Receive_IT+0x154>)
 80057fa:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2274      	movs	r2, #116	; 0x74
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005804:	f3ef 8310 	mrs	r3, PRIMASK
 8005808:	613b      	str	r3, [r7, #16]
  return(result);
 800580a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
 800580e:	2301      	movs	r3, #1
 8005810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f383 8810 	msr	PRIMASK, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2190      	movs	r1, #144	; 0x90
 8005824:	0049      	lsls	r1, r1, #1
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f383 8810 	msr	PRIMASK, r3
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b00c      	add	sp, #48	; 0x30
 800583c:	bd80      	pop	{r7, pc}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	000001ff 	.word	0x000001ff
 8005844:	08005c41 	.word	0x08005c41
 8005848:	08005ae5 	.word	0x08005ae5

0800584c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005854:	f3ef 8310 	mrs	r3, PRIMASK
 8005858:	617b      	str	r3, [r7, #20]
  return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	2301      	movs	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f383 8810 	msr	PRIMASK, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4923      	ldr	r1, [pc, #140]	; (8005900 <UART_EndRxTransfer+0xb4>)
 8005874:	400a      	ands	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587a:	61fb      	str	r3, [r7, #28]
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005882:	f3ef 8310 	mrs	r3, PRIMASK
 8005886:	623b      	str	r3, [r7, #32]
  return(result);
 8005888:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	633b      	str	r3, [r7, #48]	; 0x30
 800588c:	2301      	movs	r3, #1
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	f383 8810 	msr	PRIMASK, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2101      	movs	r1, #1
 80058a2:	438a      	bics	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	f383 8810 	msr	PRIMASK, r3

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d116      	bne.n	80058e6 <UART_EndRxTransfer+0x9a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80058be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c2:	2301      	movs	r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f383 8810 	msr	PRIMASK, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2110      	movs	r1, #16
 80058d8:	438a      	bics	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f383 8810 	msr	PRIMASK, r3
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058f8:	46c0      	nop			; (mov r8, r8)
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b00e      	add	sp, #56	; 0x38
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	fffffedf 	.word	0xfffffedf

08005904 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005910:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	225a      	movs	r2, #90	; 0x5a
 8005916:	2100      	movs	r1, #0
 8005918:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2252      	movs	r2, #82	; 0x52
 800591e:	2100      	movs	r1, #0
 8005920:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	0018      	movs	r0, r3
 8005926:	f7ff fab5 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	46bd      	mov	sp, r7
 800592e:	b004      	add	sp, #16
 8005930:	bd80      	pop	{r7, pc}

08005932 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b08a      	sub	sp, #40	; 0x28
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	2b21      	cmp	r3, #33	; 0x21
 8005940:	d148      	bne.n	80059d4 <UART_TxISR_8BIT+0xa2>
  {
    if (huart->TxXferCount == 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2252      	movs	r2, #82	; 0x52
 8005946:	5a9b      	ldrh	r3, [r3, r2]
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d12e      	bne.n	80059ac <UART_TxISR_8BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	60bb      	str	r3, [r7, #8]
  return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
 8005958:	2301      	movs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f383 8810 	msr	PRIMASK, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2180      	movs	r1, #128	; 0x80
 800596e:	438a      	bics	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800597c:	f3ef 8310 	mrs	r3, PRIMASK
 8005980:	617b      	str	r3, [r7, #20]
  return(result);
 8005982:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f383 8810 	msr	PRIMASK, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2140      	movs	r1, #64	; 0x40
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80059aa:	e013      	b.n	80059d4 <UART_TxISR_8BIT+0xa2>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2252      	movs	r2, #82	; 0x52
 80059c6:	5a9b      	ldrh	r3, [r3, r2]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b299      	uxth	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2252      	movs	r2, #82	; 0x52
 80059d2:	5299      	strh	r1, [r3, r2]
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b00a      	add	sp, #40	; 0x28
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059e8:	2b21      	cmp	r3, #33	; 0x21
 80059ea:	d14d      	bne.n	8005a88 <UART_TxISR_16BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2252      	movs	r2, #82	; 0x52
 80059f0:	5a9b      	ldrh	r3, [r3, r2]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d12e      	bne.n	8005a56 <UART_TxISR_16BIT+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f8:	f3ef 8310 	mrs	r3, PRIMASK
 80059fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a02:	2301      	movs	r3, #1
 8005a04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f383 8810 	msr	PRIMASK, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2180      	movs	r1, #128	; 0x80
 8005a18:	438a      	bics	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a26:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a2c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	2301      	movs	r3, #1
 8005a32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f383 8810 	msr	PRIMASK, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2140      	movs	r1, #64	; 0x40
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f383 8810 	msr	PRIMASK, r3
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005a54:	e018      	b.n	8005a88 <UART_TxISR_16BIT+0xac>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	001a      	movs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	05d2      	lsls	r2, r2, #23
 8005a68:	0dd2      	lsrs	r2, r2, #23
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2252      	movs	r2, #82	; 0x52
 8005a7a:	5a9b      	ldrh	r3, [r3, r2]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b299      	uxth	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2252      	movs	r2, #82	; 0x52
 8005a86:	5299      	strh	r1, [r3, r2]
}
 8005a88:	46c0      	nop			; (mov r8, r8)
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b00c      	add	sp, #48	; 0x30
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a98:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2140      	movs	r1, #64	; 0x40
 8005ab8:	438a      	bics	r2, r1
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f383 8810 	msr	PRIMASK, r3

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7fb ff49 	bl	800196c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b006      	add	sp, #24
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b090      	sub	sp, #64	; 0x40
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005aec:	233e      	movs	r3, #62	; 0x3e
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	215c      	movs	r1, #92	; 0x5c
 8005af4:	5a52      	ldrh	r2, [r2, r1]
 8005af6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afc:	2b22      	cmp	r3, #34	; 0x22
 8005afe:	d000      	beq.n	8005b02 <UART_RxISR_8BIT+0x1e>
 8005b00:	e090      	b.n	8005c24 <UART_RxISR_8BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b08:	213c      	movs	r1, #60	; 0x3c
 8005b0a:	187b      	adds	r3, r7, r1
 8005b0c:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	233e      	movs	r3, #62	; 0x3e
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b2d9      	uxtb	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	400a      	ands	r2, r1
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	225a      	movs	r2, #90	; 0x5a
 8005b34:	5a9b      	ldrh	r3, [r3, r2]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b299      	uxth	r1, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	225a      	movs	r2, #90	; 0x5a
 8005b40:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	225a      	movs	r2, #90	; 0x5a
 8005b46:	5a9b      	ldrh	r3, [r3, r2]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d172      	bne.n	8005c34 <UART_RxISR_8BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b52:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b54:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b58:	2301      	movs	r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f383 8810 	msr	PRIMASK, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4933      	ldr	r1, [pc, #204]	; (8005c3c <UART_RxISR_8BIT+0x158>)
 8005b6e:	400a      	ands	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	623b      	str	r3, [r7, #32]
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	2301      	movs	r3, #1
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	f383 8810 	msr	PRIMASK, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	438a      	bics	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba6:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d12d      	bne.n	8005c1a <UART_RxISR_8BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005bce:	2301      	movs	r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f383 8810 	msr	PRIMASK, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2110      	movs	r1, #16
 8005be4:	438a      	bics	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d103      	bne.n	8005c08 <UART_RxISR_8BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2210      	movs	r2, #16
 8005c06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2258      	movs	r2, #88	; 0x58
 8005c0c:	5a9a      	ldrh	r2, [r3, r2]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0011      	movs	r1, r2
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff f946 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c18:	e00c      	b.n	8005c34 <UART_RxISR_8BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fb fe9b 	bl	8001958 <HAL_UART_RxCpltCallback>
}
 8005c22:	e007      	b.n	8005c34 <UART_RxISR_8BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2108      	movs	r1, #8
 8005c30:	430a      	orrs	r2, r1
 8005c32:	619a      	str	r2, [r3, #24]
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b010      	add	sp, #64	; 0x40
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	fffffedf 	.word	0xfffffedf

08005c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b090      	sub	sp, #64	; 0x40
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c48:	233e      	movs	r3, #62	; 0x3e
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	215c      	movs	r1, #92	; 0x5c
 8005c50:	5a52      	ldrh	r2, [r2, r1]
 8005c52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c58:	2b22      	cmp	r3, #34	; 0x22
 8005c5a:	d000      	beq.n	8005c5e <UART_RxISR_16BIT+0x1e>
 8005c5c:	e090      	b.n	8005d80 <UART_RxISR_16BIT+0x140>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c64:	213c      	movs	r1, #60	; 0x3c
 8005c66:	187b      	adds	r3, r7, r1
 8005c68:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c70:	187b      	adds	r3, r7, r1
 8005c72:	223e      	movs	r2, #62	; 0x3e
 8005c74:	18ba      	adds	r2, r7, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	8812      	ldrh	r2, [r2, #0]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c86:	1c9a      	adds	r2, r3, #2
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	225a      	movs	r2, #90	; 0x5a
 8005c90:	5a9b      	ldrh	r3, [r3, r2]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b299      	uxth	r1, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	225a      	movs	r2, #90	; 0x5a
 8005c9c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	225a      	movs	r2, #90	; 0x5a
 8005ca2:	5a9b      	ldrh	r3, [r3, r2]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d172      	bne.n	8005d90 <UART_RxISR_16BIT+0x150>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb0:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f383 8810 	msr	PRIMASK, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4933      	ldr	r1, [pc, #204]	; (8005d98 <UART_RxISR_16BIT+0x158>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cdc:	623b      	str	r3, [r7, #32]
  return(result);
 8005cde:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	f383 8810 	msr	PRIMASK, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	438a      	bics	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	f383 8810 	msr	PRIMASK, r3

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d12d      	bne.n	8005d76 <UART_RxISR_16BIT+0x136>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d20:	f3ef 8310 	mrs	r3, PRIMASK
 8005d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d26:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f383 8810 	msr	PRIMASK, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2110      	movs	r1, #16
 8005d40:	438a      	bics	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f383 8810 	msr	PRIMASK, r3

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	2210      	movs	r2, #16
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d103      	bne.n	8005d64 <UART_RxISR_16BIT+0x124>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2210      	movs	r2, #16
 8005d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2258      	movs	r2, #88	; 0x58
 8005d68:	5a9a      	ldrh	r2, [r3, r2]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	0011      	movs	r1, r2
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f7ff f898 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d74:	e00c      	b.n	8005d90 <UART_RxISR_16BIT+0x150>
        HAL_UART_RxCpltCallback(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f7fb fded 	bl	8001958 <HAL_UART_RxCpltCallback>
}
 8005d7e:	e007      	b.n	8005d90 <UART_RxISR_16BIT+0x150>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2108      	movs	r1, #8
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b010      	add	sp, #64	; 0x40
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	fffffedf 	.word	0xfffffedf

08005d9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}

08005dac <__errno>:
 8005dac:	4b01      	ldr	r3, [pc, #4]	; (8005db4 <__errno+0x8>)
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	4770      	bx	lr
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	20000014 	.word	0x20000014

08005db8 <__libc_init_array>:
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	2600      	movs	r6, #0
 8005dbc:	4d0c      	ldr	r5, [pc, #48]	; (8005df0 <__libc_init_array+0x38>)
 8005dbe:	4c0d      	ldr	r4, [pc, #52]	; (8005df4 <__libc_init_array+0x3c>)
 8005dc0:	1b64      	subs	r4, r4, r5
 8005dc2:	10a4      	asrs	r4, r4, #2
 8005dc4:	42a6      	cmp	r6, r4
 8005dc6:	d109      	bne.n	8005ddc <__libc_init_array+0x24>
 8005dc8:	2600      	movs	r6, #0
 8005dca:	f000 f8f1 	bl	8005fb0 <_init>
 8005dce:	4d0a      	ldr	r5, [pc, #40]	; (8005df8 <__libc_init_array+0x40>)
 8005dd0:	4c0a      	ldr	r4, [pc, #40]	; (8005dfc <__libc_init_array+0x44>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	42a6      	cmp	r6, r4
 8005dd8:	d105      	bne.n	8005de6 <__libc_init_array+0x2e>
 8005dda:	bd70      	pop	{r4, r5, r6, pc}
 8005ddc:	00b3      	lsls	r3, r6, #2
 8005dde:	58eb      	ldr	r3, [r5, r3]
 8005de0:	4798      	blx	r3
 8005de2:	3601      	adds	r6, #1
 8005de4:	e7ee      	b.n	8005dc4 <__libc_init_array+0xc>
 8005de6:	00b3      	lsls	r3, r6, #2
 8005de8:	58eb      	ldr	r3, [r5, r3]
 8005dea:	4798      	blx	r3
 8005dec:	3601      	adds	r6, #1
 8005dee:	e7f2      	b.n	8005dd6 <__libc_init_array+0x1e>
 8005df0:	080060b0 	.word	0x080060b0
 8005df4:	080060b0 	.word	0x080060b0
 8005df8:	080060b0 	.word	0x080060b0
 8005dfc:	080060b4 	.word	0x080060b4

08005e00 <malloc>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4b03      	ldr	r3, [pc, #12]	; (8005e10 <malloc+0x10>)
 8005e04:	0001      	movs	r1, r0
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	f000 f860 	bl	8005ecc <_malloc_r>
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	20000014 	.word	0x20000014

08005e14 <free>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	4b03      	ldr	r3, [pc, #12]	; (8005e24 <free+0x10>)
 8005e18:	0001      	movs	r1, r0
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f000 f80c 	bl	8005e38 <_free_r>
 8005e20:	bd10      	pop	{r4, pc}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	20000014 	.word	0x20000014

08005e28 <memset>:
 8005e28:	0003      	movs	r3, r0
 8005e2a:	1812      	adds	r2, r2, r0
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d100      	bne.n	8005e32 <memset+0xa>
 8005e30:	4770      	bx	lr
 8005e32:	7019      	strb	r1, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	e7f9      	b.n	8005e2c <memset+0x4>

08005e38 <_free_r>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	0005      	movs	r5, r0
 8005e3c:	2900      	cmp	r1, #0
 8005e3e:	d010      	beq.n	8005e62 <_free_r+0x2a>
 8005e40:	1f0c      	subs	r4, r1, #4
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	da00      	bge.n	8005e4a <_free_r+0x12>
 8005e48:	18e4      	adds	r4, r4, r3
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	f000 f8ae 	bl	8005fac <__malloc_lock>
 8005e50:	4a1d      	ldr	r2, [pc, #116]	; (8005ec8 <_free_r+0x90>)
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <_free_r+0x2c>
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	6014      	str	r4, [r2, #0]
 8005e5c:	0028      	movs	r0, r5
 8005e5e:	f000 f8a6 	bl	8005fae <__malloc_unlock>
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	d909      	bls.n	8005e7c <_free_r+0x44>
 8005e68:	6821      	ldr	r1, [r4, #0]
 8005e6a:	1860      	adds	r0, r4, r1
 8005e6c:	4283      	cmp	r3, r0
 8005e6e:	d1f3      	bne.n	8005e58 <_free_r+0x20>
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	1841      	adds	r1, r0, r1
 8005e76:	6021      	str	r1, [r4, #0]
 8005e78:	e7ee      	b.n	8005e58 <_free_r+0x20>
 8005e7a:	0013      	movs	r3, r2
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	d001      	beq.n	8005e86 <_free_r+0x4e>
 8005e82:	42a2      	cmp	r2, r4
 8005e84:	d9f9      	bls.n	8005e7a <_free_r+0x42>
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	1858      	adds	r0, r3, r1
 8005e8a:	42a0      	cmp	r0, r4
 8005e8c:	d10b      	bne.n	8005ea6 <_free_r+0x6e>
 8005e8e:	6820      	ldr	r0, [r4, #0]
 8005e90:	1809      	adds	r1, r1, r0
 8005e92:	1858      	adds	r0, r3, r1
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	4282      	cmp	r2, r0
 8005e98:	d1e0      	bne.n	8005e5c <_free_r+0x24>
 8005e9a:	6810      	ldr	r0, [r2, #0]
 8005e9c:	6852      	ldr	r2, [r2, #4]
 8005e9e:	1841      	adds	r1, r0, r1
 8005ea0:	6019      	str	r1, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	e7da      	b.n	8005e5c <_free_r+0x24>
 8005ea6:	42a0      	cmp	r0, r4
 8005ea8:	d902      	bls.n	8005eb0 <_free_r+0x78>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	e7d5      	b.n	8005e5c <_free_r+0x24>
 8005eb0:	6821      	ldr	r1, [r4, #0]
 8005eb2:	1860      	adds	r0, r4, r1
 8005eb4:	4282      	cmp	r2, r0
 8005eb6:	d103      	bne.n	8005ec0 <_free_r+0x88>
 8005eb8:	6810      	ldr	r0, [r2, #0]
 8005eba:	6852      	ldr	r2, [r2, #4]
 8005ebc:	1841      	adds	r1, r0, r1
 8005ebe:	6021      	str	r1, [r4, #0]
 8005ec0:	6062      	str	r2, [r4, #4]
 8005ec2:	605c      	str	r4, [r3, #4]
 8005ec4:	e7ca      	b.n	8005e5c <_free_r+0x24>
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	200000b8 	.word	0x200000b8

08005ecc <_malloc_r>:
 8005ecc:	2303      	movs	r3, #3
 8005ece:	b570      	push	{r4, r5, r6, lr}
 8005ed0:	1ccd      	adds	r5, r1, #3
 8005ed2:	439d      	bics	r5, r3
 8005ed4:	3508      	adds	r5, #8
 8005ed6:	0006      	movs	r6, r0
 8005ed8:	2d0c      	cmp	r5, #12
 8005eda:	d21e      	bcs.n	8005f1a <_malloc_r+0x4e>
 8005edc:	250c      	movs	r5, #12
 8005ede:	42a9      	cmp	r1, r5
 8005ee0:	d81d      	bhi.n	8005f1e <_malloc_r+0x52>
 8005ee2:	0030      	movs	r0, r6
 8005ee4:	f000 f862 	bl	8005fac <__malloc_lock>
 8005ee8:	4a25      	ldr	r2, [pc, #148]	; (8005f80 <_malloc_r+0xb4>)
 8005eea:	6814      	ldr	r4, [r2, #0]
 8005eec:	0021      	movs	r1, r4
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	d119      	bne.n	8005f26 <_malloc_r+0x5a>
 8005ef2:	4c24      	ldr	r4, [pc, #144]	; (8005f84 <_malloc_r+0xb8>)
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d103      	bne.n	8005f02 <_malloc_r+0x36>
 8005efa:	0030      	movs	r0, r6
 8005efc:	f000 f844 	bl	8005f88 <_sbrk_r>
 8005f00:	6020      	str	r0, [r4, #0]
 8005f02:	0029      	movs	r1, r5
 8005f04:	0030      	movs	r0, r6
 8005f06:	f000 f83f 	bl	8005f88 <_sbrk_r>
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	d12b      	bne.n	8005f66 <_malloc_r+0x9a>
 8005f0e:	230c      	movs	r3, #12
 8005f10:	0030      	movs	r0, r6
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f000 f84b 	bl	8005fae <__malloc_unlock>
 8005f18:	e003      	b.n	8005f22 <_malloc_r+0x56>
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	dadf      	bge.n	8005ede <_malloc_r+0x12>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	2000      	movs	r0, #0
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
 8005f26:	680b      	ldr	r3, [r1, #0]
 8005f28:	1b5b      	subs	r3, r3, r5
 8005f2a:	d419      	bmi.n	8005f60 <_malloc_r+0x94>
 8005f2c:	2b0b      	cmp	r3, #11
 8005f2e:	d903      	bls.n	8005f38 <_malloc_r+0x6c>
 8005f30:	600b      	str	r3, [r1, #0]
 8005f32:	18cc      	adds	r4, r1, r3
 8005f34:	6025      	str	r5, [r4, #0]
 8005f36:	e003      	b.n	8005f40 <_malloc_r+0x74>
 8005f38:	684b      	ldr	r3, [r1, #4]
 8005f3a:	428c      	cmp	r4, r1
 8005f3c:	d10d      	bne.n	8005f5a <_malloc_r+0x8e>
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	0030      	movs	r0, r6
 8005f42:	f000 f834 	bl	8005fae <__malloc_unlock>
 8005f46:	0020      	movs	r0, r4
 8005f48:	2207      	movs	r2, #7
 8005f4a:	300b      	adds	r0, #11
 8005f4c:	1d23      	adds	r3, r4, #4
 8005f4e:	4390      	bics	r0, r2
 8005f50:	1ac3      	subs	r3, r0, r3
 8005f52:	d0e7      	beq.n	8005f24 <_malloc_r+0x58>
 8005f54:	425a      	negs	r2, r3
 8005f56:	50e2      	str	r2, [r4, r3]
 8005f58:	e7e4      	b.n	8005f24 <_malloc_r+0x58>
 8005f5a:	6063      	str	r3, [r4, #4]
 8005f5c:	000c      	movs	r4, r1
 8005f5e:	e7ef      	b.n	8005f40 <_malloc_r+0x74>
 8005f60:	000c      	movs	r4, r1
 8005f62:	6849      	ldr	r1, [r1, #4]
 8005f64:	e7c3      	b.n	8005eee <_malloc_r+0x22>
 8005f66:	2303      	movs	r3, #3
 8005f68:	1cc4      	adds	r4, r0, #3
 8005f6a:	439c      	bics	r4, r3
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d0e1      	beq.n	8005f34 <_malloc_r+0x68>
 8005f70:	1a21      	subs	r1, r4, r0
 8005f72:	0030      	movs	r0, r6
 8005f74:	f000 f808 	bl	8005f88 <_sbrk_r>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d1db      	bne.n	8005f34 <_malloc_r+0x68>
 8005f7c:	e7c7      	b.n	8005f0e <_malloc_r+0x42>
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	200000b8 	.word	0x200000b8
 8005f84:	200000bc 	.word	0x200000bc

08005f88 <_sbrk_r>:
 8005f88:	2300      	movs	r3, #0
 8005f8a:	b570      	push	{r4, r5, r6, lr}
 8005f8c:	4c06      	ldr	r4, [pc, #24]	; (8005fa8 <_sbrk_r+0x20>)
 8005f8e:	0005      	movs	r5, r0
 8005f90:	0008      	movs	r0, r1
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	f7fb ff70 	bl	8001e78 <_sbrk>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d103      	bne.n	8005fa4 <_sbrk_r+0x1c>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d000      	beq.n	8005fa4 <_sbrk_r+0x1c>
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	20000270 	.word	0x20000270

08005fac <__malloc_lock>:
 8005fac:	4770      	bx	lr

08005fae <__malloc_unlock>:
 8005fae:	4770      	bx	lr

08005fb0 <_init>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr

08005fbc <_fini>:
 8005fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc2:	bc08      	pop	{r3}
 8005fc4:	469e      	mov	lr, r3
 8005fc6:	4770      	bx	lr
