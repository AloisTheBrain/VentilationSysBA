
MotorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  08003208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08003208  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c34b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ef  00000000  00000000  0002c37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a30  00000000  00000000  0002e868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c6d  00000000  00000000  0002f298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a473  00000000  00000000  00042f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007adc3  00000000  00000000  0004d378  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c813b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b0  00000000  00000000  000c81b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003168 	.word	0x08003168

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003168 	.word	0x08003168

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8b1 	bl	8000438 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ac 	bl	8000438 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzdi2>:
 8000438:	b510      	push	{r4, lr}
 800043a:	2900      	cmp	r1, #0
 800043c:	d103      	bne.n	8000446 <__clzdi2+0xe>
 800043e:	f000 f807 	bl	8000450 <__clzsi2>
 8000442:	3020      	adds	r0, #32
 8000444:	e002      	b.n	800044c <__clzdi2+0x14>
 8000446:	1c08      	adds	r0, r1, #0
 8000448:	f000 f802 	bl	8000450 <__clzsi2>
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__clzsi2>:
 8000450:	211c      	movs	r1, #28
 8000452:	2301      	movs	r3, #1
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	4298      	cmp	r0, r3
 8000458:	d301      	bcc.n	800045e <__clzsi2+0xe>
 800045a:	0c00      	lsrs	r0, r0, #16
 800045c:	3910      	subs	r1, #16
 800045e:	0a1b      	lsrs	r3, r3, #8
 8000460:	4298      	cmp	r0, r3
 8000462:	d301      	bcc.n	8000468 <__clzsi2+0x18>
 8000464:	0a00      	lsrs	r0, r0, #8
 8000466:	3908      	subs	r1, #8
 8000468:	091b      	lsrs	r3, r3, #4
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0x22>
 800046e:	0900      	lsrs	r0, r0, #4
 8000470:	3904      	subs	r1, #4
 8000472:	a202      	add	r2, pc, #8	; (adr r2, 800047c <__clzsi2+0x2c>)
 8000474:	5c10      	ldrb	r0, [r2, r0]
 8000476:	1840      	adds	r0, r0, r1
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	02020304 	.word	0x02020304
 8000480:	01010101 	.word	0x01010101
	...

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	; 0x24
 8000490:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f002 fe5b 	bl	8003158 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b29      	ldr	r3, [pc, #164]	; (800054c <MX_GPIO_Init+0xc0>)
 80004a8:	2104      	movs	r1, #4
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b27      	ldr	r3, [pc, #156]	; (800054c <MX_GPIO_Init+0xc0>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2204      	movs	r2, #4
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <MX_GPIO_Init+0xc0>)
 80004bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004be:	4b23      	ldr	r3, [pc, #140]	; (800054c <MX_GPIO_Init+0xc0>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	430a      	orrs	r2, r1
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <MX_GPIO_Init+0xc0>)
 80004c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <MX_GPIO_Init+0xc0>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004de:	4b1b      	ldr	r3, [pc, #108]	; (800054c <MX_GPIO_Init+0xc0>)
 80004e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2200      	movs	r2, #0
 80004f0:	2120      	movs	r1, #32
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fcee 	bl	8000ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	0192      	lsls	r2, r2, #6
 80004fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2284      	movs	r2, #132	; 0x84
 8000504:	0392      	lsls	r2, r2, #14
 8000506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800050e:	193b      	adds	r3, r7, r4
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <MX_GPIO_Init+0xc4>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fb67 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2220      	movs	r2, #32
 8000520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	187b      	adds	r3, r7, r1
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000534:	187a      	adds	r2, r7, r1
 8000536:	23a0      	movs	r3, #160	; 0xa0
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	0011      	movs	r1, r2
 800053c:	0018      	movs	r0, r3
 800053e:	f000 fb53 	bl	8000be8 <HAL_GPIO_Init>

}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b009      	add	sp, #36	; 0x24
 8000548:	bd90      	pop	{r4, r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	40021000 	.word	0x40021000
 8000550:	50000800 	.word	0x50000800

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fa21 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f815 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f7ff ff93 	bl	800048c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000566:	f000 f8ad 	bl	80006c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800056a:	f000 f97b 	bl	8000864 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <main+0x34>)
 8000570:	2100      	movs	r1, #0
 8000572:	0018      	movs	r0, r3
 8000574:	f001 fca0 	bl	8001eb8 <HAL_TIM_PWM_Start>
  int pulse_width = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
    /* USER CODE BEGIN 3 */




	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 250);
 800057c:	4b02      	ldr	r3, [pc, #8]	; (8000588 <main+0x34>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	22fa      	movs	r2, #250	; 0xfa
 8000582:	635a      	str	r2, [r3, #52]	; 0x34
 8000584:	e7fa      	b.n	800057c <main+0x28>
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000028 	.word	0x20000028

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b09d      	sub	sp, #116	; 0x74
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	2438      	movs	r4, #56	; 0x38
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2338      	movs	r3, #56	; 0x38
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 fddb 	bl	8003158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	2324      	movs	r3, #36	; 0x24
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2314      	movs	r3, #20
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f002 fdd3 	bl	8003158 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2324      	movs	r3, #36	; 0x24
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 fdcc 	bl	8003158 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a24      	ldr	r2, [pc, #144]	; (8000658 <SystemClock_Config+0xcc>)
 80005c6:	401a      	ands	r2, r3
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <SystemClock_Config+0xc8>)
 80005ca:	2180      	movs	r1, #128	; 0x80
 80005cc:	0109      	lsls	r1, r1, #4
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2202      	movs	r2, #2
 80005d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2210      	movs	r2, #16
 80005e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fc8e 	bl	8000f10 <HAL_RCC_OscConfig>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005f8:	f000 f830 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	2124      	movs	r1, #36	; 0x24
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	220f      	movs	r2, #15
 8000602:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2201      	movs	r2, #1
 8000608:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2100      	movs	r1, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f83d 	bl	80016a0 <HAL_RCC_ClockConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800062a:	f000 f817 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800062e:	003b      	movs	r3, r7
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000634:	003b      	movs	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063a:	003b      	movs	r3, r7
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fa4f 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000646:	f000 f809 	bl	800065c <Error_Handler>
  }
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b01d      	add	sp, #116	; 0x74
 8000650:	bd90      	pop	{r4, r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40007000 	.word	0x40007000
 8000658:	ffffe7ff 	.word	0xffffe7ff

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000662:	e7fe      	b.n	8000662 <Error_Handler+0x6>

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <HAL_MspInit+0x24>)
 800066a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x24>)
 800066e:	2101      	movs	r1, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <HAL_MspInit+0x24>)
 8000676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000678:	4b03      	ldr	r3, [pc, #12]	; (8000688 <HAL_MspInit+0x24>)
 800067a:	2180      	movs	r1, #128	; 0x80
 800067c:	0549      	lsls	r1, r1, #21
 800067e:	430a      	orrs	r2, r1
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f9ca 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	2318      	movs	r3, #24
 80006cc:	18fb      	adds	r3, r7, r3
 80006ce:	0018      	movs	r0, r3
 80006d0:	2310      	movs	r3, #16
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 fd3f 	bl	8003158 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006da:	2310      	movs	r3, #16
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0018      	movs	r0, r3
 80006e0:	2308      	movs	r3, #8
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 fd37 	bl	8003158 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	003b      	movs	r3, r7
 80006ec:	0018      	movs	r0, r3
 80006ee:	2310      	movs	r3, #16
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 fd30 	bl	8003158 <memset>

  htim2.Instance = TIM2;
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_TIM2_Init+0xf8>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	05d2      	lsls	r2, r2, #23
 80006fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_TIM2_Init+0xf8>)
 8000702:	2204      	movs	r2, #4
 8000704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_TIM2_Init+0xf8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_TIM2_Init+0xf8>)
 800070e:	22fa      	movs	r2, #250	; 0xfa
 8000710:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_TIM2_Init+0xf8>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_TIM2_Init+0xf8>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_TIM2_Init+0xf8>)
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fb41 	bl	8001da8 <HAL_TIM_Base_Init>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800072a:	f7ff ff97 	bl	800065c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072e:	2118      	movs	r1, #24
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	0152      	lsls	r2, r2, #5
 8000736:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000738:	187a      	adds	r2, r7, r1
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_TIM2_Init+0xf8>)
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fd02 	bl	8002148 <HAL_TIM_ConfigClockSource>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000748:	f7ff ff88 	bl	800065c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM2_Init+0xf8>)
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fb6a 	bl	8001e28 <HAL_TIM_PWM_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000758:	f7ff ff80 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2110      	movs	r1, #16
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	187a      	adds	r2, r7, r1
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_TIM2_Init+0xf8>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 ffc9 	bl	8002708 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800077a:	f7ff ff6f 	bl	800065c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	003b      	movs	r3, r7
 8000780:	2260      	movs	r2, #96	; 0x60
 8000782:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	003b      	movs	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	003b      	movs	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000796:	0039      	movs	r1, r7
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_TIM2_Init+0xf8>)
 800079a:	2200      	movs	r2, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fc17 	bl	8001fd0 <HAL_TIM_PWM_ConfigChannel>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80007a6:	f7ff ff59 	bl	800065c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <MX_TIM2_Init+0xf8>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 f81d 	bl	80007ec <HAL_TIM_MspPostInit>

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b00a      	add	sp, #40	; 0x28
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000028 	.word	0x20000028

080007c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d105      	bne.n	80007e0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <HAL_TIM_Base_MspInit+0x28>)
 80007d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_TIM_Base_MspInit+0x28>)
 80007da:	2101      	movs	r1, #1
 80007dc:	430a      	orrs	r2, r1
 80007de:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b002      	add	sp, #8
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	230c      	movs	r3, #12
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	0018      	movs	r0, r3
 80007fa:	2314      	movs	r3, #20
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f002 fcaa 	bl	8003158 <memset>
  if(timHandle->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	429a      	cmp	r2, r3
 800080e:	d122      	bne.n	8000856 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_TIM_MspPostInit+0x74>)
 8000812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_TIM_MspPostInit+0x74>)
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_TIM_MspPostInit+0x74>)
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	2201      	movs	r2, #1
 8000822:	4013      	ands	r3, r2
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000828:	210c      	movs	r1, #12
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	187a      	adds	r2, r7, r1
 800084a:	23a0      	movs	r3, #160	; 0xa0
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f9c9 	bl	8000be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b008      	add	sp, #32
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	22e1      	movs	r2, #225	; 0xe1
 8000872:	0252      	lsls	r2, r2, #9
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 ff85 	bl	80027b8 <HAL_UART_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f7ff fed3 	bl	800065c <Error_Handler>
  }

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000068 	.word	0x20000068
 80008c0:	40004400 	.word	0x40004400

080008c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	230c      	movs	r3, #12
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fc3e 	bl	8003158 <memset>
  if(uartHandle->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a18      	ldr	r2, [pc, #96]	; (8000944 <HAL_UART_MspInit+0x80>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d129      	bne.n	800093a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0289      	lsls	r1, r1, #10
 80008f0:	430a      	orrs	r2, r1
 80008f2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x84>)
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	2201      	movs	r2, #1
 8000906:	4013      	ands	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800090c:	210c      	movs	r1, #12
 800090e:	187b      	adds	r3, r7, r1
 8000910:	220c      	movs	r2, #12
 8000912:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2202      	movs	r2, #2
 8000918:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2203      	movs	r2, #3
 8000924:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2204      	movs	r2, #4
 800092a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	187a      	adds	r2, r7, r1
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f957 	bl	8000be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	b008      	add	sp, #32
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40004400 	.word	0x40004400
 8000948:	40021000 	.word	0x40021000

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000976:	f7ff fea0 	bl	80006ba <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 fbc9 	bl	8003110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fde9 	bl	8000554 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200000f0 	.word	0x200000f0

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Init+0x3c>)
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f811 	bl	80009e0 <HAL_InitTick>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d003      	beq.n	80009ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e001      	b.n	80009ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ca:	f7ff fe4b 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	; 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb87 	bl	8000108 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb82 	bl	8000108 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f8e1 	bl	8000bce <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8be 	bl	8000ba4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000ec 	.word	0x200000ec

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	; (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	200000ec 	.word	0x200000ec

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	0002      	movs	r2, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b7f      	cmp	r3, #127	; 0x7f
 8000a94:	d828      	bhi.n	8000ae8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a96:	4a2f      	ldr	r2, [pc, #188]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000a98:	1dfb      	adds	r3, r7, #7
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	33c0      	adds	r3, #192	; 0xc0
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	589b      	ldr	r3, [r3, r2]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	481f      	ldr	r0, [pc, #124]	; (8000b54 <__NVIC_SetPriority+0xd4>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	33c0      	adds	r3, #192	; 0xc0
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae6:	e031      	b.n	8000b4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	0019      	movs	r1, r3
 8000af0:	230f      	movs	r3, #15
 8000af2:	400b      	ands	r3, r1
 8000af4:	3b08      	subs	r3, #8
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001c      	movs	r4, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	4023      	ands	r3, r4
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	430a      	orrs	r2, r1
 8000b42:	3306      	adds	r3, #6
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	18c3      	adds	r3, r0, r3
 8000b48:	3304      	adds	r3, #4
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <SysTick_Config+0x40>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d901      	bls.n	8000b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e010      	b.n	8000b94 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <SysTick_Config+0x44>)
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	3a01      	subs	r2, #1
 8000b78:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	425b      	negs	r3, r3
 8000b7e:	2103      	movs	r1, #3
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff ff7d 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SysTick_Config+0x44>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x44>)
 8000b8e:	2207      	movs	r2, #7
 8000b90:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	00ffffff 	.word	0x00ffffff
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	210f      	movs	r1, #15
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ffbf 	bl	8000b5c <SysTick_Config>
 8000bde:	0003      	movs	r3, r0
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bfe:	e14f      	b.n	8000ea0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x30>
 8000c16:	e140      	b.n	8000e9a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d005      	beq.n	8000c30 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d130      	bne.n	8000c92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	43da      	mvns	r2, r3
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d017      	beq.n	8000cce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d123      	bne.n	8000d22 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	58d3      	ldr	r3, [r2, r3]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2207      	movs	r2, #7
 8000cec:	4013      	ands	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2107      	movs	r1, #7
 8000d06:	400b      	ands	r3, r1
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	409a      	lsls	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2203      	movs	r2, #3
 8000d40:	401a      	ands	r2, r3
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	029b      	lsls	r3, r3, #10
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d100      	bne.n	8000d64 <HAL_GPIO_Init+0x17c>
 8000d62:	e09a      	b.n	8000e9a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d64:	4b54      	ldr	r3, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d68:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d70:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	589b      	ldr	r3, [r3, r2]
 8000d7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2203      	movs	r2, #3
 8000d82:	4013      	ands	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	220f      	movs	r2, #15
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0x1ea>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a47      	ldr	r2, [pc, #284]	; (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x1e6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a46      	ldr	r2, [pc, #280]	; (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a45      	ldr	r2, [pc, #276]	; (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1de>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a44      	ldr	r2, [pc, #272]	; (8000ecc <HAL_GPIO_Init+0x2e4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1da>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x1ec>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2103      	movs	r1, #3
 8000dd8:	400a      	ands	r2, r1
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de4:	4935      	ldr	r1, [pc, #212]	; (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43da      	mvns	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	4013      	ands	r3, r2
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685a      	ldr	r2, [r3, #4]
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	035b      	lsls	r3, r3, #13
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	039b      	lsls	r3, r3, #14
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_GPIO_Init+0x2e8>)
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	40da      	lsrs	r2, r3
 8000ea8:	1e13      	subs	r3, r2, #0
 8000eaa:	d000      	beq.n	8000eae <HAL_GPIO_Init+0x2c6>
 8000eac:	e6a8      	b.n	8000c00 <HAL_GPIO_Init+0x18>
  }
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b006      	add	sp, #24
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	50000400 	.word	0x50000400
 8000ec4:	50000800 	.word	0x50000800
 8000ec8:	50000c00 	.word	0x50000c00
 8000ecc:	50001c00 	.word	0x50001c00
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	0008      	movs	r0, r1
 8000ede:	0011      	movs	r1, r2
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	1c02      	adds	r2, r0, #0
 8000ee4:	801a      	strh	r2, [r3, #0]
 8000ee6:	1c7b      	adds	r3, r7, #1
 8000ee8:	1c0a      	adds	r2, r1, #0
 8000eea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eec:	1c7b      	adds	r3, r7, #1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef4:	1cbb      	adds	r3, r7, #2
 8000ef6:	881a      	ldrh	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000efc:	e003      	b.n	8000f06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000efe:	1cbb      	adds	r3, r7, #2
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f000 fbb4 	bl	800168c <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f24:	4bc3      	ldr	r3, [pc, #780]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	220c      	movs	r2, #12
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f2e:	4bc1      	ldr	r3, [pc, #772]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	025b      	lsls	r3, r3, #9
 8000f36:	4013      	ands	r3, r2
 8000f38:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4013      	ands	r3, r2
 8000f42:	d100      	bne.n	8000f46 <HAL_RCC_OscConfig+0x36>
 8000f44:	e07e      	b.n	8001044 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d007      	beq.n	8000f5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	d112      	bne.n	8000f78 <HAL_RCC_OscConfig+0x68>
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	025b      	lsls	r3, r3, #9
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d10d      	bne.n	8000f78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	4bb5      	ldr	r3, [pc, #724]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	029b      	lsls	r3, r3, #10
 8000f64:	4013      	ands	r3, r2
 8000f66:	d100      	bne.n	8000f6a <HAL_RCC_OscConfig+0x5a>
 8000f68:	e06b      	b.n	8001042 <HAL_RCC_OscConfig+0x132>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d167      	bne.n	8001042 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	f000 fb8a 	bl	800168c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	025b      	lsls	r3, r3, #9
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d107      	bne.n	8000f94 <HAL_RCC_OscConfig+0x84>
 8000f84:	4bab      	ldr	r3, [pc, #684]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4baa      	ldr	r3, [pc, #680]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e027      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	23a0      	movs	r3, #160	; 0xa0
 8000f9a:	02db      	lsls	r3, r3, #11
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d10e      	bne.n	8000fbe <HAL_RCC_OscConfig+0xae>
 8000fa0:	4ba4      	ldr	r3, [pc, #656]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4ba3      	ldr	r3, [pc, #652]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	02c9      	lsls	r1, r1, #11
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	4ba1      	ldr	r3, [pc, #644]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4ba0      	ldr	r3, [pc, #640]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0249      	lsls	r1, r1, #9
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e012      	b.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
 8000fbe:	4b9d      	ldr	r3, [pc, #628]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fc4:	499c      	ldr	r1, [pc, #624]	; (8001238 <HAL_RCC_OscConfig+0x328>)
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	4b9a      	ldr	r3, [pc, #616]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	025b      	lsls	r3, r3, #9
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4b96      	ldr	r3, [pc, #600]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8000fde:	4997      	ldr	r1, [pc, #604]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d015      	beq.n	8001018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fd3e 	bl	8000a6c <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ff4:	e009      	b.n	800100a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fd39 	bl	8000a6c <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d902      	bls.n	800100a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	f000 fb41 	bl	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800100a:	4b8a      	ldr	r3, [pc, #552]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	029b      	lsls	r3, r3, #10
 8001012:	4013      	ands	r3, r2
 8001014:	d0ef      	beq.n	8000ff6 <HAL_RCC_OscConfig+0xe6>
 8001016:	e015      	b.n	8001044 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fd28 	bl	8000a6c <HAL_GetTick>
 800101c:	0003      	movs	r3, r0
 800101e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fd23 	bl	8000a6c <HAL_GetTick>
 8001026:	0002      	movs	r2, r0
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e32b      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001034:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	029b      	lsls	r3, r3, #10
 800103c:	4013      	ands	r3, r2
 800103e:	d1f0      	bne.n	8001022 <HAL_RCC_OscConfig+0x112>
 8001040:	e000      	b.n	8001044 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001042:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_RCC_OscConfig+0x140>
 800104e:	e08c      	b.n	800116a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	2b04      	cmp	r3, #4
 800105a:	d005      	beq.n	8001068 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2b0c      	cmp	r3, #12
 8001060:	d13f      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1d2>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d13c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001068:	4b72      	ldr	r3, [pc, #456]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2204      	movs	r2, #4
 800106e:	4013      	ands	r3, r2
 8001070:	d004      	beq.n	800107c <HAL_RCC_OscConfig+0x16c>
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e307      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a6f      	ldr	r2, [pc, #444]	; (8001240 <HAL_RCC_OscConfig+0x330>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	021a      	lsls	r2, r3, #8
 800108c:	4b69      	ldr	r3, [pc, #420]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2209      	movs	r2, #9
 8001098:	4393      	bics	r3, r2
 800109a:	0019      	movs	r1, r3
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010a4:	f000 fc44 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80010a8:	0001      	movs	r1, r0
 80010aa:	4b62      	ldr	r3, [pc, #392]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	220f      	movs	r2, #15
 80010b2:	4013      	ands	r3, r2
 80010b4:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_RCC_OscConfig+0x334>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	000a      	movs	r2, r1
 80010ba:	40da      	lsrs	r2, r3
 80010bc:	4b62      	ldr	r3, [pc, #392]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 80010be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <HAL_RCC_OscConfig+0x33c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2513      	movs	r5, #19
 80010c6:	197c      	adds	r4, r7, r5
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff fc89 	bl	80009e0 <HAL_InitTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80010d2:	197b      	adds	r3, r7, r5
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d047      	beq.n	800116a <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80010da:	2313      	movs	r3, #19
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	e2d4      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d027      	beq.n	8001138 <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010e8:	4b52      	ldr	r3, [pc, #328]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2209      	movs	r2, #9
 80010ee:	4393      	bics	r3, r2
 80010f0:	0019      	movs	r1, r3
 80010f2:	4b50      	ldr	r3, [pc, #320]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fcb7 	bl	8000a6c <HAL_GetTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fcb2 	bl	8000a6c <HAL_GetTick>
 8001108:	0002      	movs	r2, r0
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e2ba      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001116:	4b47      	ldr	r3, [pc, #284]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	d0f1      	beq.n	8001104 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_RCC_OscConfig+0x330>)
 8001126:	4013      	ands	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	021a      	lsls	r2, r3, #8
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	e018      	b.n	800116a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001138:	4b3e      	ldr	r3, [pc, #248]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800113e:	2101      	movs	r1, #1
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc92 	bl	8000a6c <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114e:	f7ff fc8d 	bl	8000a6c <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e295      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001160:	4b34      	ldr	r3, [pc, #208]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2204      	movs	r2, #4
 8001166:	4013      	ands	r3, r2
 8001168:	d1f1      	bne.n	800114e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	4013      	ands	r3, r2
 8001172:	d100      	bne.n	8001176 <HAL_RCC_OscConfig+0x266>
 8001174:	e0a3      	b.n	80012be <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d141      	bne.n	8001200 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x284>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e27b      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x340>)
 800119a:	4013      	ands	r3, r2
 800119c:	0019      	movs	r1, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	0a19      	lsrs	r1, r3, #8
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	061a      	lsls	r2, r3, #24
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80011b8:	430a      	orrs	r2, r1
 80011ba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	0b5b      	lsrs	r3, r3, #13
 80011c2:	3301      	adds	r3, #1
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0212      	lsls	r2, r2, #8
 80011c8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	210f      	movs	r1, #15
 80011d2:	400b      	ands	r3, r1
 80011d4:	491b      	ldr	r1, [pc, #108]	; (8001244 <HAL_RCC_OscConfig+0x334>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 80011dc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_RCC_OscConfig+0x33c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2513      	movs	r5, #19
 80011e4:	197c      	adds	r4, r7, r5
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fbfa 	bl	80009e0 <HAL_InitTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d062      	beq.n	80012be <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80011f8:	2313      	movs	r3, #19
 80011fa:	18fb      	adds	r3, r7, r3
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	e245      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d040      	beq.n	800128a <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_RCC_OscConfig+0x324>)
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0049      	lsls	r1, r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001216:	f7ff fc29 	bl	8000a6c <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800121e:	e019      	b.n	8001254 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001220:	f7ff fc24 	bl	8000a6c <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d912      	bls.n	8001254 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e22c      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	40021000 	.word	0x40021000
 8001238:	fffeffff 	.word	0xfffeffff
 800123c:	fffbffff 	.word	0xfffbffff
 8001240:	ffffe0ff 	.word	0xffffe0ff
 8001244:	08003180 	.word	0x08003180
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004
 8001250:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001254:	4bc6      	ldr	r3, [pc, #792]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d0df      	beq.n	8001220 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001260:	4bc3      	ldr	r3, [pc, #780]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4ac3      	ldr	r2, [pc, #780]	; (8001574 <HAL_RCC_OscConfig+0x664>)
 8001266:	4013      	ands	r3, r2
 8001268:	0019      	movs	r1, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126e:	4bc0      	ldr	r3, [pc, #768]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001270:	430a      	orrs	r2, r1
 8001272:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001274:	4bbe      	ldr	r3, [pc, #760]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	0a19      	lsrs	r1, r3, #8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	061a      	lsls	r2, r3, #24
 8001282:	4bbb      	ldr	r3, [pc, #748]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001284:	430a      	orrs	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	e019      	b.n	80012be <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800128a:	4bb9      	ldr	r3, [pc, #740]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4bb8      	ldr	r3, [pc, #736]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001290:	49b9      	ldr	r1, [pc, #740]	; (8001578 <HAL_RCC_OscConfig+0x668>)
 8001292:	400a      	ands	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fbe9 	bl	8000a6c <HAL_GetTick>
 800129a:	0003      	movs	r3, r0
 800129c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a0:	f7ff fbe4 	bl	8000a6c <HAL_GetTick>
 80012a4:	0002      	movs	r2, r0
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1ec      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b2:	4baf      	ldr	r3, [pc, #700]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2208      	movs	r2, #8
 80012c4:	4013      	ands	r3, r2
 80012c6:	d036      	beq.n	8001336 <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d019      	beq.n	8001304 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d0:	4ba7      	ldr	r3, [pc, #668]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80012d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d4:	4ba6      	ldr	r3, [pc, #664]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fbc6 	bl	8000a6c <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fbc1 	bl	8000a6c <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e1c9      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f8:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80012fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d0f1      	beq.n	80012e6 <HAL_RCC_OscConfig+0x3d6>
 8001302:	e018      	b.n	8001336 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b9a      	ldr	r3, [pc, #616]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800130a:	2101      	movs	r1, #1
 800130c:	438a      	bics	r2, r1
 800130e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001310:	f7ff fbac 	bl	8000a6c <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fba7 	bl	8000a6c <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1af      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800132c:	4b90      	ldr	r3, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800132e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001330:	2202      	movs	r2, #2
 8001332:	4013      	ands	r3, r2
 8001334:	d1f1      	bne.n	800131a <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2204      	movs	r2, #4
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x432>
 8001340:	e0af      	b.n	80014a2 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001342:	2327      	movs	r3, #39	; 0x27
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800134c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	055b      	lsls	r3, r3, #21
 8001352:	4013      	ands	r3, r2
 8001354:	d10a      	bne.n	800136c <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b86      	ldr	r3, [pc, #536]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800135a:	4b85      	ldr	r3, [pc, #532]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	0549      	lsls	r1, r1, #21
 8001360:	430a      	orrs	r2, r1
 8001362:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001364:	2327      	movs	r3, #39	; 0x27
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136c:	4b83      	ldr	r3, [pc, #524]	; (800157c <HAL_RCC_OscConfig+0x66c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4013      	ands	r3, r2
 8001376:	d11a      	bne.n	80013ae <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001378:	4b80      	ldr	r3, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x66c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b7f      	ldr	r3, [pc, #508]	; (800157c <HAL_RCC_OscConfig+0x66c>)
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	0049      	lsls	r1, r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb71 	bl	8000a6c <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001390:	f7ff fb6c 	bl	8000a6c <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e174      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x66c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_OscConfig+0x4ba>
 80013ba:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0049      	lsls	r1, r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	651a      	str	r2, [r3, #80]	; 0x50
 80013c8:	e031      	b.n	800142e <HAL_RCC_OscConfig+0x51e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x4dc>
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013d8:	4967      	ldr	r1, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x668>)
 80013da:	400a      	ands	r2, r1
 80013dc:	651a      	str	r2, [r3, #80]	; 0x50
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4b63      	ldr	r3, [pc, #396]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013e4:	4966      	ldr	r1, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x670>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50
 80013ea:	e020      	b.n	800142e <HAL_RCC_OscConfig+0x51e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	23a0      	movs	r3, #160	; 0xa0
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d10e      	bne.n	8001416 <HAL_RCC_OscConfig+0x506>
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013fc:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	00c9      	lsls	r1, r1, #3
 8001402:	430a      	orrs	r2, r1
 8001404:	651a      	str	r2, [r3, #80]	; 0x50
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800140a:	4b59      	ldr	r3, [pc, #356]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0049      	lsls	r1, r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	651a      	str	r2, [r3, #80]	; 0x50
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x51e>
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800141a:	4b55      	ldr	r3, [pc, #340]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800141c:	4956      	ldr	r1, [pc, #344]	; (8001578 <HAL_RCC_OscConfig+0x668>)
 800141e:	400a      	ands	r2, r1
 8001420:	651a      	str	r2, [r3, #80]	; 0x50
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001426:	4b52      	ldr	r3, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001428:	4955      	ldr	r1, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x670>)
 800142a:	400a      	ands	r2, r1
 800142c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d015      	beq.n	8001462 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fb19 	bl	8000a6c <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800143e:	e009      	b.n	8001454 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f7ff fb14 	bl	8000a6c <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_RCC_OscConfig+0x674>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e11b      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4013      	ands	r3, r2
 800145e:	d0ef      	beq.n	8001440 <HAL_RCC_OscConfig+0x530>
 8001460:	e014      	b.n	800148c <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fb03 	bl	8000a6c <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800146a:	e009      	b.n	8001480 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fafe 	bl	8000a6c <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	4a43      	ldr	r2, [pc, #268]	; (8001584 <HAL_RCC_OscConfig+0x674>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e105      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001480:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4013      	ands	r3, r2
 800148a:	d1ef      	bne.n	800146c <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800148c:	2327      	movs	r3, #39	; 0x27
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d105      	bne.n	80014a2 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800149c:	493a      	ldr	r1, [pc, #232]	; (8001588 <HAL_RCC_OscConfig+0x678>)
 800149e:	400a      	ands	r2, r1
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2220      	movs	r2, #32
 80014a8:	4013      	ands	r3, r2
 80014aa:	d049      	beq.n	8001540 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d026      	beq.n	8001502 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014b4:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <HAL_RCC_OscConfig+0x67c>)
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <HAL_RCC_OscConfig+0x67c>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0189      	lsls	r1, r1, #6
 80014d6:	430a      	orrs	r2, r1
 80014d8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fac7 	bl	8000a6c <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e4:	f7ff fac2 	bl	8000a6c <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0ca      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0f1      	beq.n	80014e4 <HAL_RCC_OscConfig+0x5d4>
 8001500:	e01e      	b.n	8001540 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_RCC_OscConfig+0x67c>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_RCC_OscConfig+0x67c>)
 8001514:	491e      	ldr	r1, [pc, #120]	; (8001590 <HAL_RCC_OscConfig+0x680>)
 8001516:	400a      	ands	r2, r1
 8001518:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff faa7 	bl	8000a6c <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001524:	f7ff faa2 	bl	8000a6c <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e0aa      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d1f1      	bne.n	8001524 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	2b00      	cmp	r3, #0
 8001546:	d100      	bne.n	800154a <HAL_RCC_OscConfig+0x63a>
 8001548:	e09f      	b.n	800168a <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	2b0c      	cmp	r3, #12
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x642>
 8001550:	e078      	b.n	8001644 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001556:	2b02      	cmp	r3, #2
 8001558:	d159      	bne.n	800160e <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_RCC_OscConfig+0x660>)
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <HAL_RCC_OscConfig+0x684>)
 8001562:	400a      	ands	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fa81 	bl	8000a6c <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x69a>
 8001570:	40021000 	.word	0x40021000
 8001574:	ffff1fff 	.word	0xffff1fff
 8001578:	fffffeff 	.word	0xfffffeff
 800157c:	40007000 	.word	0x40007000
 8001580:	fffffbff 	.word	0xfffffbff
 8001584:	00001388 	.word	0x00001388
 8001588:	efffffff 	.word	0xefffffff
 800158c:	40010000 	.word	0x40010000
 8001590:	ffffdfff 	.word	0xffffdfff
 8001594:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fa68 	bl	8000a6c <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e070      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015aa:	4b3a      	ldr	r3, [pc, #232]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	4a37      	ldr	r2, [pc, #220]	; (8001698 <HAL_RCC_OscConfig+0x788>)
 80015bc:	4013      	ands	r3, r2
 80015be:	0019      	movs	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	431a      	orrs	r2, r3
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	0449      	lsls	r1, r1, #17
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fa42 	bl	8000a6c <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fa3d 	bl	8000a6c <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e045      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	049b      	lsls	r3, r3, #18
 8001608:	4013      	ands	r3, r2
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x6de>
 800160c:	e03d      	b.n	800168a <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 8001614:	4921      	ldr	r1, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x78c>)
 8001616:	400a      	ands	r2, r1
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fa27 	bl	8000a6c <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001624:	f7ff fa22 	bl	8000a6c <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e02a      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	049b      	lsls	r3, r3, #18
 800163e:	4013      	ands	r3, r2
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x714>
 8001642:	e022      	b.n	800168a <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001650:	4b10      	ldr	r3, [pc, #64]	; (8001694 <HAL_RCC_OscConfig+0x784>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	401a      	ands	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	429a      	cmp	r2, r3
 8001664:	d10f      	bne.n	8001686 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	23f0      	movs	r3, #240	; 0xf0
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d107      	bne.n	8001686 <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	23c0      	movs	r3, #192	; 0xc0
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b00a      	add	sp, #40	; 0x28
 8001692:	bdb0      	pop	{r4, r5, r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	ff02ffff 	.word	0xff02ffff
 800169c:	feffffff 	.word	0xfeffffff

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e129      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b4:	4b96      	ldr	r3, [pc, #600]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d91e      	bls.n	8001700 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c2:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4393      	bics	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	4b90      	ldr	r3, [pc, #576]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d4:	f7ff f9ca 	bl	8000a6c <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff f9c5 	bl	8000a6c <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a8a      	ldr	r2, [pc, #552]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e10a      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b87      	ldr	r3, [pc, #540]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d009      	beq.n	800171e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170a:	4b83      	ldr	r3, [pc, #524]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	22f0      	movs	r2, #240	; 0xf0
 8001710:	4393      	bics	r3, r2
 8001712:	0019      	movs	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 800171a:	430a      	orrs	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_ClockConfig+0x8a>
 8001728:	e089      	b.n	800183e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001732:	4b79      	ldr	r3, [pc, #484]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	029b      	lsls	r3, r3, #10
 800173a:	4013      	ands	r3, r2
 800173c:	d120      	bne.n	8001780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0e2      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800174a:	4b73      	ldr	r3, [pc, #460]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	049b      	lsls	r3, r3, #18
 8001752:	4013      	ands	r3, r2
 8001754:	d114      	bne.n	8001780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0d6      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d106      	bne.n	8001770 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001762:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d109      	bne.n	8001780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cb      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001770:	4b69      	ldr	r3, [pc, #420]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0c3      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001780:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2203      	movs	r2, #3
 8001786:	4393      	bics	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff f96a 	bl	8000a6c <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d111      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	e009      	b.n	80017ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a6:	f7ff f961 	bl	8000a6c <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0a6      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ba:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	220c      	movs	r2, #12
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_ClockConfig+0x106>
 80017c6:	e03a      	b.n	800183e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d2:	f7ff f94b 	bl	8000a6c <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e090      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e6:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	220c      	movs	r2, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x132>
 80017f2:	e024      	b.n	800183e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d11b      	bne.n	8001834 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7ff f935 	bl	8000a6c <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a42      	ldr	r2, [pc, #264]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e07a      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	220c      	movs	r2, #12
 8001818:	4013      	ands	r3, r2
 800181a:	2b04      	cmp	r3, #4
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_ClockConfig+0x15e>
 800181e:	e00e      	b.n	800183e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff f924 	bl	8000a6c <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a3a      	ldr	r2, [pc, #232]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e069      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2201      	movs	r2, #1
 8001844:	4013      	ands	r3, r2
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d21e      	bcs.n	800188a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4393      	bics	r3, r2
 8001854:	0019      	movs	r1, r3
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800185e:	f7ff f905 	bl	8000a6c <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	e009      	b.n	800187c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001868:	f7ff f900 	bl	8000a6c <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_RCC_ClockConfig+0x274>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e045      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_ClockConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2204      	movs	r2, #4
 8001890:	4013      	ands	r3, r2
 8001892:	d009      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x27c>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2208      	movs	r2, #8
 80018ae:	4013      	ands	r3, r2
 80018b0:	d00a      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_RCC_ClockConfig+0x280>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00da      	lsls	r2, r3, #3
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c8:	f000 f832 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018cc:	0001      	movs	r1, r0
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x278>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	220f      	movs	r2, #15
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x284>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	000a      	movs	r2, r1
 80018de:	40da      	lsrs	r2, r3
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_ClockConfig+0x288>)
 80018e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_RCC_ClockConfig+0x28c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	250b      	movs	r5, #11
 80018ea:	197c      	adds	r4, r7, r5
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff f877 	bl	80009e0 <HAL_InitTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018f6:	197b      	adds	r3, r7, r5
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 80018fe:	230b      	movs	r3, #11
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	e000      	b.n	8001908 <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b004      	add	sp, #16
 800190e:	bdb0      	pop	{r4, r5, r7, pc}
 8001910:	40022000 	.word	0x40022000
 8001914:	00001388 	.word	0x00001388
 8001918:	40021000 	.word	0x40021000
 800191c:	fffff8ff 	.word	0xfffff8ff
 8001920:	ffffc7ff 	.word	0xffffc7ff
 8001924:	08003180 	.word	0x08003180
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	b08f      	sub	sp, #60	; 0x3c
 8001934:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x130>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193e:	230c      	movs	r3, #12
 8001940:	4013      	ands	r3, r2
 8001942:	2b08      	cmp	r3, #8
 8001944:	d00f      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x36>
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d010      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x3c>
 800194a:	2b04      	cmp	r3, #4
 800194c:	d000      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x20>
 800194e:	e073      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001950:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x130>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2210      	movs	r2, #16
 8001956:	4013      	ands	r3, r2
 8001958:	d002      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800195a:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x134>)
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800195e:	e079      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001964:	e076      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800196a:	e073      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	0c9a      	lsrs	r2, r3, #18
 8001970:	230f      	movs	r3, #15
 8001972:	401a      	ands	r2, r3
 8001974:	4b3e      	ldr	r3, [pc, #248]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x140>)
 8001976:	5c9b      	ldrb	r3, [r3, r2]
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197c:	0d9a      	lsrs	r2, r3, #22
 800197e:	2303      	movs	r3, #3
 8001980:	4013      	ands	r3, r2
 8001982:	3301      	adds	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x130>)
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	4013      	ands	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	4a34      	ldr	r2, [pc, #208]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x13c>)
 800199c:	2300      	movs	r3, #0
 800199e:	69b8      	ldr	r0, [r7, #24]
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	f7fe fc5d 	bl	8000260 <__aeabi_lmul>
 80019a6:	0003      	movs	r3, r0
 80019a8:	000c      	movs	r4, r1
 80019aa:	0018      	movs	r0, r3
 80019ac:	0021      	movs	r1, r4
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f7fe fc31 	bl	8000220 <__aeabi_uldivmod>
 80019be:	0003      	movs	r3, r0
 80019c0:	000c      	movs	r4, r1
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	e035      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x130>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2210      	movs	r2, #16
 80019cc:	4013      	ands	r3, r2
 80019ce:	d019      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x134>)
 80019da:	2300      	movs	r3, #0
 80019dc:	68b8      	ldr	r0, [r7, #8]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	f7fe fc3e 	bl	8000260 <__aeabi_lmul>
 80019e4:	0003      	movs	r3, r0
 80019e6:	000c      	movs	r4, r1
 80019e8:	0018      	movs	r0, r3
 80019ea:	0021      	movs	r1, r4
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f7fe fc12 	bl	8000220 <__aeabi_uldivmod>
 80019fc:	0003      	movs	r3, r0
 80019fe:	000c      	movs	r4, r1
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
 8001a02:	e016      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	0018      	movs	r0, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f7fe fc26 	bl	8000260 <__aeabi_lmul>
 8001a14:	0003      	movs	r3, r0
 8001a16:	000c      	movs	r4, r1
 8001a18:	0018      	movs	r0, r3
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	001d      	movs	r5, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	001e      	movs	r6, r3
 8001a24:	002a      	movs	r2, r5
 8001a26:	0033      	movs	r3, r6
 8001a28:	f7fe fbfa 	bl	8000220 <__aeabi_uldivmod>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	000c      	movs	r4, r1
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a36:	e00d      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x130>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0b5b      	lsrs	r3, r3, #13
 8001a3e:	2207      	movs	r2, #7
 8001a40:	4013      	ands	r3, r2
 8001a42:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	3301      	adds	r3, #1
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b00f      	add	sp, #60	; 0x3c
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40021000 	.word	0x40021000
 8001a64:	003d0900 	.word	0x003d0900
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200
 8001a70:	08003198 	.word	0x08003198

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	0001      	movs	r1, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	2207      	movs	r2, #7
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	000b      	movs	r3, r1
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08003190 	.word	0x08003190

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab8:	f7ff ffdc 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001abc:	0001      	movs	r1, r0
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	000b      	movs	r3, r1
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08003190 	.word	0x08003190

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001ae8:	2317      	movs	r3, #23
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2220      	movs	r2, #32
 8001af6:	4013      	ands	r3, r2
 8001af8:	d106      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4013      	ands	r3, r2
 8001b04:	d100      	bne.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b06:	e0d9      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b08:	4b9c      	ldr	r3, [pc, #624]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	055b      	lsls	r3, r3, #21
 8001b10:	4013      	ands	r3, r2
 8001b12:	d10a      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	4b99      	ldr	r3, [pc, #612]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b18:	4b98      	ldr	r3, [pc, #608]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0549      	lsls	r1, r1, #21
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001b22:	2317      	movs	r3, #23
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2a:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	d11a      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b36:	4b92      	ldr	r3, [pc, #584]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	0049      	lsls	r1, r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b44:	f7fe ff92 	bl	8000a6c <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7fe ff8d 	bl	8000a6c <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e108      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b87      	ldr	r3, [pc, #540]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b6c:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	039b      	lsls	r3, r3, #14
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	23c0      	movs	r3, #192	; 0xc0
 8001b7e:	039b      	lsls	r3, r3, #14
 8001b80:	4013      	ands	r3, r2
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d107      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	039b      	lsls	r3, r3, #14
 8001b90:	4013      	ands	r3, r2
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	23c0      	movs	r3, #192	; 0xc0
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	23c0      	movs	r3, #192	; 0xc0
 8001ba4:	029b      	lsls	r3, r3, #10
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d10a      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	029b      	lsls	r3, r3, #10
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0d8      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001bc0:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001bc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bc4:	23c0      	movs	r3, #192	; 0xc0
 8001bc6:	029b      	lsls	r3, r3, #10
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d049      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	23c0      	movs	r3, #192	; 0xc0
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d004      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2220      	movs	r2, #32
 8001be8:	4013      	ands	r3, r2
 8001bea:	d10d      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	23c0      	movs	r3, #192	; 0xc0
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d034      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	d02e      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001c08:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	; (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c12:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c16:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	0309      	lsls	r1, r1, #12
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c20:	4b56      	ldr	r3, [pc, #344]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c24:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c26:	4958      	ldr	r1, [pc, #352]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d014      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ff16 	bl	8000a6c <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c44:	e009      	b.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7fe ff11 	bl	8000a6c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e08b      	b.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c5a:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0ef      	beq.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	401a      	ands	r2, r3
 8001c70:	23c0      	movs	r3, #192	; 0xc0
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10c      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001c78:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a44      	ldr	r2, [pc, #272]	; (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	23c0      	movs	r3, #192	; 0xc0
 8001c88:	039b      	lsls	r3, r3, #14
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	23c0      	movs	r3, #192	; 0xc0
 8001c9c:	029b      	lsls	r3, r3, #10
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cb6:	4937      	ldr	r1, [pc, #220]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d009      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	2203      	movs	r2, #3
 8001ccc:	4393      	bics	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	220c      	movs	r2, #12
 8001cea:	4393      	bics	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d009      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a24      	ldr	r2, [pc, #144]	; (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d009      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	0019      	movs	r1, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d30:	430a      	orrs	r2, r1
 8001d32:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a17      	ldr	r2, [pc, #92]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2280      	movs	r2, #128	; 0x80
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	0019      	movs	r1, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b006      	add	sp, #24
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40007000 	.word	0x40007000
 8001d84:	fffcffff 	.word	0xfffcffff
 8001d88:	fff7ffff 	.word	0xfff7ffff
 8001d8c:	00001388 	.word	0x00001388
 8001d90:	ffcfffff 	.word	0xffcfffff
 8001d94:	efffffff 	.word	0xefffffff
 8001d98:	fffff3ff 	.word	0xfffff3ff
 8001d9c:	ffffcfff 	.word	0xffffcfff
 8001da0:	fbffffff 	.word	0xfbffffff
 8001da4:	fff3ffff 	.word	0xfff3ffff

08001da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e032      	b.n	8001e20 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2239      	movs	r2, #57	; 0x39
 8001dbe:	5c9b      	ldrb	r3, [r3, r2]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2238      	movs	r2, #56	; 0x38
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7fe fcf5 	bl	80007c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2239      	movs	r2, #57	; 0x39
 8001dda:	2102      	movs	r1, #2
 8001ddc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	0019      	movs	r1, r3
 8001de8:	0010      	movs	r0, r2
 8001dea:	f000 fa77 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223e      	movs	r2, #62	; 0x3e
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	223a      	movs	r2, #58	; 0x3a
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	223b      	movs	r2, #59	; 0x3b
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	223c      	movs	r2, #60	; 0x3c
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	223d      	movs	r2, #61	; 0x3d
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2239      	movs	r2, #57	; 0x39
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e032      	b.n	8001ea0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2239      	movs	r2, #57	; 0x39
 8001e3e:	5c9b      	ldrb	r3, [r3, r2]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2238      	movs	r2, #56	; 0x38
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f000 f829 	bl	8001ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2239      	movs	r2, #57	; 0x39
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	0019      	movs	r1, r3
 8001e68:	0010      	movs	r0, r2
 8001e6a:	f000 fa37 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	223e      	movs	r2, #62	; 0x3e
 8001e72:	2101      	movs	r1, #1
 8001e74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	223a      	movs	r2, #58	; 0x3a
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	5499      	strb	r1, [r3, r2]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	223b      	movs	r2, #59	; 0x3b
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	223c      	movs	r2, #60	; 0x3c
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	223d      	movs	r2, #61	; 0x3d
 8001e92:	2101      	movs	r1, #1
 8001e94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2239      	movs	r2, #57	; 0x39
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b002      	add	sp, #8
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001eb0:	46c0      	nop			; (mov r8, r8)
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b002      	add	sp, #8
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d108      	bne.n	8001eda <HAL_TIM_PWM_Start+0x22>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	223a      	movs	r2, #58	; 0x3a
 8001ecc:	5c9b      	ldrb	r3, [r3, r2]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	4193      	sbcs	r3, r2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e01f      	b.n	8001f1a <HAL_TIM_PWM_Start+0x62>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d108      	bne.n	8001ef2 <HAL_TIM_PWM_Start+0x3a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	223b      	movs	r2, #59	; 0x3b
 8001ee4:	5c9b      	ldrb	r3, [r3, r2]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	4193      	sbcs	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	e013      	b.n	8001f1a <HAL_TIM_PWM_Start+0x62>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d108      	bne.n	8001f0a <HAL_TIM_PWM_Start+0x52>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	223c      	movs	r2, #60	; 0x3c
 8001efc:	5c9b      	ldrb	r3, [r3, r2]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	4193      	sbcs	r3, r2
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e007      	b.n	8001f1a <HAL_TIM_PWM_Start+0x62>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	223d      	movs	r2, #61	; 0x3d
 8001f0e:	5c9b      	ldrb	r3, [r3, r2]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	1e5a      	subs	r2, r3, #1
 8001f16:	4193      	sbcs	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e04d      	b.n	8001fbe <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d104      	bne.n	8001f32 <HAL_TIM_PWM_Start+0x7a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	223a      	movs	r2, #58	; 0x3a
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	5499      	strb	r1, [r3, r2]
 8001f30:	e013      	b.n	8001f5a <HAL_TIM_PWM_Start+0xa2>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d104      	bne.n	8001f42 <HAL_TIM_PWM_Start+0x8a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	223b      	movs	r2, #59	; 0x3b
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	5499      	strb	r1, [r3, r2]
 8001f40:	e00b      	b.n	8001f5a <HAL_TIM_PWM_Start+0xa2>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d104      	bne.n	8001f52 <HAL_TIM_PWM_Start+0x9a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	223c      	movs	r2, #60	; 0x3c
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	5499      	strb	r1, [r3, r2]
 8001f50:	e003      	b.n	8001f5a <HAL_TIM_PWM_Start+0xa2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	223d      	movs	r2, #61	; 0x3d
 8001f56:	2102      	movs	r1, #2
 8001f58:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 fbac 	bl	80026c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	05db      	lsls	r3, r3, #23
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d009      	beq.n	8001f88 <HAL_TIM_PWM_Start+0xd0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_TIM_PWM_Start+0x110>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d004      	beq.n	8001f88 <HAL_TIM_PWM_Start+0xd0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_TIM_PWM_Start+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2207      	movs	r2, #7
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d010      	beq.n	8001fbc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001faa:	e007      	b.n	8001fbc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40011400 	.word	0x40011400

08001fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2317      	movs	r3, #23
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2238      	movs	r2, #56	; 0x38
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e0a3      	b.n	800213a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2238      	movs	r2, #56	; 0x38
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d029      	beq.n	8002054 <HAL_TIM_PWM_ConfigChannel+0x84>
 8002000:	d802      	bhi.n	8002008 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <HAL_TIM_PWM_ConfigChannel+0x42>
 8002006:	e08c      	b.n	8002122 <HAL_TIM_PWM_ConfigChannel+0x152>
 8002008:	2b08      	cmp	r3, #8
 800200a:	d046      	beq.n	800209a <HAL_TIM_PWM_ConfigChannel+0xca>
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d065      	beq.n	80020dc <HAL_TIM_PWM_ConfigChannel+0x10c>
 8002010:	e087      	b.n	8002122 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	0011      	movs	r1, r2
 800201a:	0018      	movs	r0, r3
 800201c:	f000 f9b2 	bl	8002384 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2108      	movs	r1, #8
 800202c:	430a      	orrs	r2, r1
 800202e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2104      	movs	r1, #4
 800203c:	438a      	bics	r2, r1
 800203e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6999      	ldr	r1, [r3, #24]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	619a      	str	r2, [r3, #24]
      break;
 8002052:	e06b      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f000 f9cd 	bl	80023fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0109      	lsls	r1, r1, #4
 8002070:	430a      	orrs	r2, r1
 8002072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699a      	ldr	r2, [r3, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4931      	ldr	r1, [pc, #196]	; (8002144 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8002080:	400a      	ands	r2, r1
 8002082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6999      	ldr	r1, [r3, #24]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	021a      	lsls	r2, r3, #8
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	619a      	str	r2, [r3, #24]
      break;
 8002098:	e048      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	0011      	movs	r1, r2
 80020a2:	0018      	movs	r0, r3
 80020a4:	f000 f9ec 	bl	8002480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2108      	movs	r1, #8
 80020b4:	430a      	orrs	r2, r1
 80020b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2104      	movs	r1, #4
 80020c4:	438a      	bics	r2, r1
 80020c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69d9      	ldr	r1, [r3, #28]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
      break;
 80020da:	e027      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	0011      	movs	r1, r2
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fa0b 	bl	8002500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0109      	lsls	r1, r1, #4
 80020f8:	430a      	orrs	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69da      	ldr	r2, [r3, #28]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	490f      	ldr	r1, [pc, #60]	; (8002144 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8002108:	400a      	ands	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69d9      	ldr	r1, [r3, #28]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	021a      	lsls	r2, r3, #8
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	61da      	str	r2, [r3, #28]
      break;
 8002120:	e004      	b.n	800212c <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8002122:	2317      	movs	r3, #23
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]
      break;
 800212a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2238      	movs	r2, #56	; 0x38
 8002130:	2100      	movs	r1, #0
 8002132:	5499      	strb	r1, [r3, r2]

  return status;
 8002134:	2317      	movs	r3, #23
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b006      	add	sp, #24
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	fffffbff 	.word	0xfffffbff

08002148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002152:	230f      	movs	r3, #15
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2238      	movs	r2, #56	; 0x38
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_TIM_ConfigClockSource+0x20>
 8002164:	2302      	movs	r3, #2
 8002166:	e0b2      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x186>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2238      	movs	r2, #56	; 0x38
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2239      	movs	r2, #57	; 0x39
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2277      	movs	r2, #119	; 0x77
 8002184:	4393      	bics	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a53      	ldr	r2, [pc, #332]	; (80022d8 <HAL_TIM_ConfigClockSource+0x190>)
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b40      	cmp	r3, #64	; 0x40
 800219e:	d100      	bne.n	80021a2 <HAL_TIM_ConfigClockSource+0x5a>
 80021a0:	e06b      	b.n	800227a <HAL_TIM_ConfigClockSource+0x132>
 80021a2:	d80e      	bhi.n	80021c2 <HAL_TIM_ConfigClockSource+0x7a>
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d100      	bne.n	80021aa <HAL_TIM_ConfigClockSource+0x62>
 80021a8:	e077      	b.n	800229a <HAL_TIM_ConfigClockSource+0x152>
 80021aa:	d803      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x6c>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <HAL_TIM_ConfigClockSource+0x6a>
 80021b0:	e073      	b.n	800229a <HAL_TIM_ConfigClockSource+0x152>
 80021b2:	e07b      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x164>
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d100      	bne.n	80021ba <HAL_TIM_ConfigClockSource+0x72>
 80021b8:	e06f      	b.n	800229a <HAL_TIM_ConfigClockSource+0x152>
 80021ba:	2b30      	cmp	r3, #48	; 0x30
 80021bc:	d100      	bne.n	80021c0 <HAL_TIM_ConfigClockSource+0x78>
 80021be:	e06c      	b.n	800229a <HAL_TIM_ConfigClockSource+0x152>
 80021c0:	e074      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x164>
 80021c2:	2b70      	cmp	r3, #112	; 0x70
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_ConfigClockSource+0x9c>
 80021c6:	d804      	bhi.n	80021d2 <HAL_TIM_ConfigClockSource+0x8a>
 80021c8:	2b50      	cmp	r3, #80	; 0x50
 80021ca:	d036      	beq.n	800223a <HAL_TIM_ConfigClockSource+0xf2>
 80021cc:	2b60      	cmp	r3, #96	; 0x60
 80021ce:	d044      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x112>
 80021d0:	e06c      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x164>
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	0152      	lsls	r2, r2, #5
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d06d      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x16e>
 80021da:	2280      	movs	r2, #128	; 0x80
 80021dc:	0192      	lsls	r2, r2, #6
 80021de:	4293      	cmp	r3, r2
 80021e0:	d017      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0xca>
 80021e2:	e063      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6899      	ldr	r1, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f000 fa44 	bl	8002680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2277      	movs	r2, #119	; 0x77
 8002204:	4313      	orrs	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
      break;
 8002210:	e052      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f000 fa2d 	bl	8002680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	01c9      	lsls	r1, r1, #7
 8002234:	430a      	orrs	r2, r1
 8002236:	609a      	str	r2, [r3, #8]
      break;
 8002238:	e03e      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	001a      	movs	r2, r3
 8002248:	f000 f9a0 	bl	800258c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2150      	movs	r1, #80	; 0x50
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f9fa 	bl	800264c <TIM_ITRx_SetConfig>
      break;
 8002258:	e02e      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	001a      	movs	r2, r3
 8002268:	f000 f9be 	bl	80025e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2160      	movs	r1, #96	; 0x60
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f9ea 	bl	800264c <TIM_ITRx_SetConfig>
      break;
 8002278:	e01e      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	001a      	movs	r2, r3
 8002288:	f000 f980 	bl	800258c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f9da 	bl	800264c <TIM_ITRx_SetConfig>
      break;
 8002298:	e00e      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	0019      	movs	r1, r3
 80022a4:	0010      	movs	r0, r2
 80022a6:	f000 f9d1 	bl	800264c <TIM_ITRx_SetConfig>
      break;
 80022aa:	e005      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2201      	movs	r2, #1
 80022b2:	701a      	strb	r2, [r3, #0]
      break;
 80022b4:	e000      	b.n	80022b8 <HAL_TIM_ConfigClockSource+0x170>
      break;
 80022b6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2239      	movs	r2, #57	; 0x39
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]

  return status;
 80022c8:	230f      	movs	r3, #15
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	ffff00ff 	.word	0xffff00ff

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0x2a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <TIM_Base_SetConfig+0x9c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0x2a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <TIM_Base_SetConfig+0xa0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2270      	movs	r2, #112	; 0x70
 800230a:	4393      	bics	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	429a      	cmp	r2, r3
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x56>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <TIM_Base_SetConfig+0x9c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x56>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <TIM_Base_SetConfig+0xa0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d108      	bne.n	8002344 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <TIM_Base_SetConfig+0xa4>)
 8002336:	4013      	ands	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	4393      	bics	r3, r2
 800234a:	001a      	movs	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	615a      	str	r2, [r3, #20]
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b004      	add	sp, #16
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010800 	.word	0x40010800
 800237c:	40011400 	.word	0x40011400
 8002380:	fffffcff 	.word	0xfffffcff

08002384 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	2201      	movs	r2, #1
 8002394:	4393      	bics	r3, r2
 8002396:	001a      	movs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2270      	movs	r2, #112	; 0x70
 80023b2:	4393      	bics	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2203      	movs	r2, #3
 80023ba:	4393      	bics	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2202      	movs	r2, #2
 80023cc:	4393      	bics	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	621a      	str	r2, [r3, #32]
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b006      	add	sp, #24
 80023fa:	bd80      	pop	{r7, pc}

080023fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	2210      	movs	r2, #16
 800240c:	4393      	bics	r3, r2
 800240e:	001a      	movs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a13      	ldr	r2, [pc, #76]	; (8002478 <TIM_OC2_SetConfig+0x7c>)
 800242a:	4013      	ands	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <TIM_OC2_SetConfig+0x80>)
 8002432:	4013      	ands	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2220      	movs	r2, #32
 8002446:	4393      	bics	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	621a      	str	r2, [r3, #32]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b006      	add	sp, #24
 8002476:	bd80      	pop	{r7, pc}
 8002478:	ffff8fff 	.word	0xffff8fff
 800247c:	fffffcff 	.word	0xfffffcff

08002480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a1a      	ldr	r2, [pc, #104]	; (80024f8 <TIM_OC3_SetConfig+0x78>)
 8002490:	401a      	ands	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2270      	movs	r2, #112	; 0x70
 80024ac:	4393      	bics	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2203      	movs	r2, #3
 80024b4:	4393      	bics	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <TIM_OC3_SetConfig+0x7c>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	621a      	str	r2, [r3, #32]
}
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b006      	add	sp, #24
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	fffffeff 	.word	0xfffffeff
 80024fc:	fffffdff 	.word	0xfffffdff

08002500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <TIM_OC4_SetConfig+0x7c>)
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <TIM_OC4_SetConfig+0x80>)
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <TIM_OC4_SetConfig+0x84>)
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <TIM_OC4_SetConfig+0x88>)
 8002548:	4013      	ands	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	031b      	lsls	r3, r3, #12
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b006      	add	sp, #24
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	ffffefff 	.word	0xffffefff
 8002580:	ffff8fff 	.word	0xffff8fff
 8002584:	fffffcff 	.word	0xfffffcff
 8002588:	ffffdfff 	.word	0xffffdfff

0800258c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	2201      	movs	r2, #1
 80025a4:	4393      	bics	r3, r2
 80025a6:	001a      	movs	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	22f0      	movs	r2, #240	; 0xf0
 80025b6:	4393      	bics	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	220a      	movs	r2, #10
 80025c8:	4393      	bics	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b006      	add	sp, #24
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	2210      	movs	r2, #16
 80025fa:	4393      	bics	r3, r2
 80025fc:	001a      	movs	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <TIM_TI2_ConfigInputStage+0x60>)
 8002612:	4013      	ands	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	031b      	lsls	r3, r3, #12
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	22a0      	movs	r2, #160	; 0xa0
 8002624:	4393      	bics	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46bd      	mov	sp, r7
 8002642:	b006      	add	sp, #24
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	ffff0fff 	.word	0xffff0fff

0800264c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2270      	movs	r2, #112	; 0x70
 8002660:	4393      	bics	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	2207      	movs	r2, #7
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b004      	add	sp, #16
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <TIM_ETR_SetConfig+0x3c>)
 8002698:	4013      	ands	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	021a      	lsls	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	ffff00ff 	.word	0xffff00ff

080026c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	221f      	movs	r2, #31
 80026d0:	4013      	ands	r3, r2
 80026d2:	2201      	movs	r2, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	43d2      	mvns	r2, r2
 80026e2:	401a      	ands	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	211f      	movs	r1, #31
 80026f0:	400b      	ands	r3, r1
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4099      	lsls	r1, r3
 80026f6:	000b      	movs	r3, r1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b006      	add	sp, #24
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2238      	movs	r2, #56	; 0x38
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800271c:	2302      	movs	r3, #2
 800271e:	e042      	b.n	80027a6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2238      	movs	r2, #56	; 0x38
 8002724:	2101      	movs	r1, #1
 8002726:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2239      	movs	r2, #57	; 0x39
 800272c:	2102      	movs	r1, #2
 800272e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2270      	movs	r2, #112	; 0x70
 8002744:	4393      	bics	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	429a      	cmp	r2, r3
 8002764:	d009      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2280      	movs	r2, #128	; 0x80
 800277e:	4393      	bics	r3, r2
 8002780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2239      	movs	r2, #57	; 0x39
 8002798:	2101      	movs	r1, #1
 800279a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2238      	movs	r2, #56	; 0x38
 80027a0:	2100      	movs	r1, #0
 80027a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	40010800 	.word	0x40010800
 80027b4:	40011400 	.word	0x40011400

080027b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e044      	b.n	8002854 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2274      	movs	r2, #116	; 0x74
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7fe f871 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2224      	movs	r2, #36	; 0x24
 80027e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2101      	movs	r1, #1
 80027f4:	438a      	bics	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 f830 	bl	8002860 <UART_SetConfig>
 8002800:	0003      	movs	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e024      	b.n	8002854 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fac1 	bl	8002d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	490d      	ldr	r1, [pc, #52]	; (800285c <HAL_UART_Init+0xa4>)
 8002826:	400a      	ands	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	212a      	movs	r1, #42	; 0x2a
 8002836:	438a      	bics	r2, r1
 8002838:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f000 fb59 	bl	8002f04 <UART_CheckIdleState>
 8002852:	0003      	movs	r3, r0
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	ffffb7ff 	.word	0xffffb7ff

08002860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b08e      	sub	sp, #56	; 0x38
 8002864:	af00      	add	r7, sp, #0
 8002866:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002868:	231a      	movs	r3, #26
 800286a:	2218      	movs	r2, #24
 800286c:	4694      	mov	ip, r2
 800286e:	44bc      	add	ip, r7
 8002870:	4463      	add	r3, ip
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	431a      	orrs	r2, r3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	431a      	orrs	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4313      	orrs	r3, r2
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4aca      	ldr	r2, [pc, #808]	; (8002bc0 <UART_SetConfig+0x360>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4ac6      	ldr	r2, [pc, #792]	; (8002bc4 <UART_SetConfig+0x364>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	0019      	movs	r1, r3
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4ac0      	ldr	r2, [pc, #768]	; (8002bc8 <UART_SetConfig+0x368>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028d2:	4313      	orrs	r3, r2
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4abb      	ldr	r2, [pc, #748]	; (8002bcc <UART_SetConfig+0x36c>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4ab7      	ldr	r2, [pc, #732]	; (8002bd0 <UART_SetConfig+0x370>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d134      	bne.n	8002960 <UART_SetConfig+0x100>
 80028f6:	4bb7      	ldr	r3, [pc, #732]	; (8002bd4 <UART_SetConfig+0x374>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	2203      	movs	r2, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d015      	beq.n	800292e <UART_SetConfig+0xce>
 8002902:	d304      	bcc.n	800290e <UART_SetConfig+0xae>
 8002904:	2b02      	cmp	r3, #2
 8002906:	d00a      	beq.n	800291e <UART_SetConfig+0xbe>
 8002908:	2b03      	cmp	r3, #3
 800290a:	d018      	beq.n	800293e <UART_SetConfig+0xde>
 800290c:	e01f      	b.n	800294e <UART_SetConfig+0xee>
 800290e:	231b      	movs	r3, #27
 8002910:	2218      	movs	r2, #24
 8002912:	4694      	mov	ip, r2
 8002914:	44bc      	add	ip, r7
 8002916:	4463      	add	r3, ip
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
 800291c:	e0ab      	b.n	8002a76 <UART_SetConfig+0x216>
 800291e:	231b      	movs	r3, #27
 8002920:	2218      	movs	r2, #24
 8002922:	4694      	mov	ip, r2
 8002924:	44bc      	add	ip, r7
 8002926:	4463      	add	r3, ip
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e0a3      	b.n	8002a76 <UART_SetConfig+0x216>
 800292e:	231b      	movs	r3, #27
 8002930:	2218      	movs	r2, #24
 8002932:	4694      	mov	ip, r2
 8002934:	44bc      	add	ip, r7
 8002936:	4463      	add	r3, ip
 8002938:	2204      	movs	r2, #4
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e09b      	b.n	8002a76 <UART_SetConfig+0x216>
 800293e:	231b      	movs	r3, #27
 8002940:	2218      	movs	r2, #24
 8002942:	4694      	mov	ip, r2
 8002944:	44bc      	add	ip, r7
 8002946:	4463      	add	r3, ip
 8002948:	2208      	movs	r2, #8
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e093      	b.n	8002a76 <UART_SetConfig+0x216>
 800294e:	231b      	movs	r3, #27
 8002950:	2218      	movs	r2, #24
 8002952:	4694      	mov	ip, r2
 8002954:	44bc      	add	ip, r7
 8002956:	4463      	add	r3, ip
 8002958:	2210      	movs	r2, #16
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	e08a      	b.n	8002a76 <UART_SetConfig+0x216>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a9c      	ldr	r2, [pc, #624]	; (8002bd8 <UART_SetConfig+0x378>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d137      	bne.n	80029da <UART_SetConfig+0x17a>
 800296a:	4b9a      	ldr	r3, [pc, #616]	; (8002bd4 <UART_SetConfig+0x374>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	220c      	movs	r2, #12
 8002970:	4013      	ands	r3, r2
 8002972:	2b04      	cmp	r3, #4
 8002974:	d018      	beq.n	80029a8 <UART_SetConfig+0x148>
 8002976:	d802      	bhi.n	800297e <UART_SetConfig+0x11e>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <UART_SetConfig+0x128>
 800297c:	e024      	b.n	80029c8 <UART_SetConfig+0x168>
 800297e:	2b08      	cmp	r3, #8
 8002980:	d00a      	beq.n	8002998 <UART_SetConfig+0x138>
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d018      	beq.n	80029b8 <UART_SetConfig+0x158>
 8002986:	e01f      	b.n	80029c8 <UART_SetConfig+0x168>
 8002988:	231b      	movs	r3, #27
 800298a:	2218      	movs	r2, #24
 800298c:	4694      	mov	ip, r2
 800298e:	44bc      	add	ip, r7
 8002990:	4463      	add	r3, ip
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	e06e      	b.n	8002a76 <UART_SetConfig+0x216>
 8002998:	231b      	movs	r3, #27
 800299a:	2218      	movs	r2, #24
 800299c:	4694      	mov	ip, r2
 800299e:	44bc      	add	ip, r7
 80029a0:	4463      	add	r3, ip
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e066      	b.n	8002a76 <UART_SetConfig+0x216>
 80029a8:	231b      	movs	r3, #27
 80029aa:	2218      	movs	r2, #24
 80029ac:	4694      	mov	ip, r2
 80029ae:	44bc      	add	ip, r7
 80029b0:	4463      	add	r3, ip
 80029b2:	2204      	movs	r2, #4
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e05e      	b.n	8002a76 <UART_SetConfig+0x216>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	4694      	mov	ip, r2
 80029be:	44bc      	add	ip, r7
 80029c0:	4463      	add	r3, ip
 80029c2:	2208      	movs	r2, #8
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e056      	b.n	8002a76 <UART_SetConfig+0x216>
 80029c8:	231b      	movs	r3, #27
 80029ca:	2218      	movs	r2, #24
 80029cc:	4694      	mov	ip, r2
 80029ce:	44bc      	add	ip, r7
 80029d0:	4463      	add	r3, ip
 80029d2:	2210      	movs	r2, #16
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	e04d      	b.n	8002a76 <UART_SetConfig+0x216>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7a      	ldr	r2, [pc, #488]	; (8002bc8 <UART_SetConfig+0x368>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d141      	bne.n	8002a68 <UART_SetConfig+0x208>
 80029e4:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <UART_SetConfig+0x374>)
 80029e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e8:	23c0      	movs	r3, #192	; 0xc0
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	4013      	ands	r3, r2
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	00d2      	lsls	r2, r2, #3
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01f      	beq.n	8002a36 <UART_SetConfig+0x1d6>
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	00d2      	lsls	r2, r2, #3
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d802      	bhi.n	8002a04 <UART_SetConfig+0x1a4>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <UART_SetConfig+0x1b6>
 8002a02:	e028      	b.n	8002a56 <UART_SetConfig+0x1f6>
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00c      	beq.n	8002a26 <UART_SetConfig+0x1c6>
 8002a0c:	22c0      	movs	r2, #192	; 0xc0
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <UART_SetConfig+0x1e6>
 8002a14:	e01f      	b.n	8002a56 <UART_SetConfig+0x1f6>
 8002a16:	231b      	movs	r3, #27
 8002a18:	2218      	movs	r2, #24
 8002a1a:	4694      	mov	ip, r2
 8002a1c:	44bc      	add	ip, r7
 8002a1e:	4463      	add	r3, ip
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e027      	b.n	8002a76 <UART_SetConfig+0x216>
 8002a26:	231b      	movs	r3, #27
 8002a28:	2218      	movs	r2, #24
 8002a2a:	4694      	mov	ip, r2
 8002a2c:	44bc      	add	ip, r7
 8002a2e:	4463      	add	r3, ip
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e01f      	b.n	8002a76 <UART_SetConfig+0x216>
 8002a36:	231b      	movs	r3, #27
 8002a38:	2218      	movs	r2, #24
 8002a3a:	4694      	mov	ip, r2
 8002a3c:	44bc      	add	ip, r7
 8002a3e:	4463      	add	r3, ip
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e017      	b.n	8002a76 <UART_SetConfig+0x216>
 8002a46:	231b      	movs	r3, #27
 8002a48:	2218      	movs	r2, #24
 8002a4a:	4694      	mov	ip, r2
 8002a4c:	44bc      	add	ip, r7
 8002a4e:	4463      	add	r3, ip
 8002a50:	2208      	movs	r2, #8
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e00f      	b.n	8002a76 <UART_SetConfig+0x216>
 8002a56:	231b      	movs	r3, #27
 8002a58:	2218      	movs	r2, #24
 8002a5a:	4694      	mov	ip, r2
 8002a5c:	44bc      	add	ip, r7
 8002a5e:	4463      	add	r3, ip
 8002a60:	2210      	movs	r2, #16
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	e006      	b.n	8002a76 <UART_SetConfig+0x216>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	44bc      	add	ip, r7
 8002a70:	4463      	add	r3, ip
 8002a72:	2210      	movs	r2, #16
 8002a74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a53      	ldr	r2, [pc, #332]	; (8002bc8 <UART_SetConfig+0x368>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d000      	beq.n	8002a82 <UART_SetConfig+0x222>
 8002a80:	e085      	b.n	8002b8e <UART_SetConfig+0x32e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a82:	231b      	movs	r3, #27
 8002a84:	2218      	movs	r2, #24
 8002a86:	4694      	mov	ip, r2
 8002a88:	44bc      	add	ip, r7
 8002a8a:	4463      	add	r3, ip
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d00d      	beq.n	8002aae <UART_SetConfig+0x24e>
 8002a92:	dc02      	bgt.n	8002a9a <UART_SetConfig+0x23a>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <UART_SetConfig+0x244>
 8002a98:	e01d      	b.n	8002ad6 <UART_SetConfig+0x276>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d012      	beq.n	8002ac4 <UART_SetConfig+0x264>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d015      	beq.n	8002ace <UART_SetConfig+0x26e>
 8002aa2:	e018      	b.n	8002ad6 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aa4:	f7fe fff0 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aac:	e01d      	b.n	8002aea <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <UART_SetConfig+0x374>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d002      	beq.n	8002abe <UART_SetConfig+0x25e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ab8:	4b48      	ldr	r3, [pc, #288]	; (8002bdc <UART_SetConfig+0x37c>)
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002abc:	e015      	b.n	8002aea <UART_SetConfig+0x28a>
          pclk = (uint32_t) HSI_VALUE;
 8002abe:	4b48      	ldr	r3, [pc, #288]	; (8002be0 <UART_SetConfig+0x380>)
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac2:	e012      	b.n	8002aea <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac4:	f7fe ff34 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002acc:	e00d      	b.n	8002aea <UART_SetConfig+0x28a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad4:	e009      	b.n	8002aea <UART_SetConfig+0x28a>
      default:
        pclk = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ada:	231a      	movs	r3, #26
 8002adc:	2218      	movs	r2, #24
 8002ade:	4694      	mov	ip, r2
 8002ae0:	44bc      	add	ip, r7
 8002ae2:	4463      	add	r3, ip
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
        break;
 8002ae8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d100      	bne.n	8002af2 <UART_SetConfig+0x292>
 8002af0:	e139      	b.n	8002d66 <UART_SetConfig+0x506>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	0013      	movs	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d305      	bcc.n	8002b0e <UART_SetConfig+0x2ae>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d907      	bls.n	8002b1e <UART_SetConfig+0x2be>
      {
        ret = HAL_ERROR;
 8002b0e:	231a      	movs	r3, #26
 8002b10:	2218      	movs	r2, #24
 8002b12:	4694      	mov	ip, r2
 8002b14:	44bc      	add	ip, r7
 8002b16:	4463      	add	r3, ip
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e123      	b.n	8002d66 <UART_SetConfig+0x506>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	6939      	ldr	r1, [r7, #16]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	000b      	movs	r3, r1
 8002b2c:	0e1b      	lsrs	r3, r3, #24
 8002b2e:	0010      	movs	r0, r2
 8002b30:	0205      	lsls	r5, r0, #8
 8002b32:	431d      	orrs	r5, r3
 8002b34:	000b      	movs	r3, r1
 8002b36:	021c      	lsls	r4, r3, #8
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	68f9      	ldr	r1, [r7, #12]
 8002b48:	1900      	adds	r0, r0, r4
 8002b4a:	4169      	adcs	r1, r5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f7fd fb61 	bl	8000220 <__aeabi_uldivmod>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	000c      	movs	r4, r1
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <UART_SetConfig+0x384>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d908      	bls.n	8002b7e <UART_SetConfig+0x31e>
 8002b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <UART_SetConfig+0x388>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d804      	bhi.n	8002b7e <UART_SetConfig+0x31e>
        {
          huart->Instance->BRR = usartdiv;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e0f3      	b.n	8002d66 <UART_SetConfig+0x506>
        }
        else
        {
          ret = HAL_ERROR;
 8002b7e:	231a      	movs	r3, #26
 8002b80:	2218      	movs	r2, #24
 8002b82:	4694      	mov	ip, r2
 8002b84:	44bc      	add	ip, r7
 8002b86:	4463      	add	r3, ip
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e0eb      	b.n	8002d66 <UART_SetConfig+0x506>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d000      	beq.n	8002b9c <UART_SetConfig+0x33c>
 8002b9a:	e08b      	b.n	8002cb4 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8002b9c:	231b      	movs	r3, #27
 8002b9e:	2218      	movs	r2, #24
 8002ba0:	4694      	mov	ip, r2
 8002ba2:	44bc      	add	ip, r7
 8002ba4:	4463      	add	r3, ip
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d83a      	bhi.n	8002c22 <UART_SetConfig+0x3c2>
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <UART_SetConfig+0x38c>)
 8002bb0:	18d3      	adds	r3, r2, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb6:	f7fe ff67 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bbe:	e03a      	b.n	8002c36 <UART_SetConfig+0x3d6>
 8002bc0:	efff69f3 	.word	0xefff69f3
 8002bc4:	ffffcfff 	.word	0xffffcfff
 8002bc8:	40004800 	.word	0x40004800
 8002bcc:	fffff4ff 	.word	0xfffff4ff
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40004400 	.word	0x40004400
 8002bdc:	003d0900 	.word	0x003d0900
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	000002ff 	.word	0x000002ff
 8002be8:	000fffff 	.word	0x000fffff
 8002bec:	080031a4 	.word	0x080031a4
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7fe ff60 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf8:	e01d      	b.n	8002c36 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <UART_SetConfig+0x528>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	4013      	ands	r3, r2
 8002c02:	d002      	beq.n	8002c0a <UART_SetConfig+0x3aa>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <UART_SetConfig+0x52c>)
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c08:	e015      	b.n	8002c36 <UART_SetConfig+0x3d6>
          pclk = (uint32_t) HSI_VALUE;
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <UART_SetConfig+0x530>)
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e012      	b.n	8002c36 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c10:	f7fe fe8e 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 8002c14:	0003      	movs	r3, r0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c18:	e00d      	b.n	8002c36 <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c1a:	2380      	movs	r3, #128	; 0x80
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c20:	e009      	b.n	8002c36 <UART_SetConfig+0x3d6>
      default:
        pclk = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c26:	231a      	movs	r3, #26
 8002c28:	2218      	movs	r2, #24
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	44bc      	add	ip, r7
 8002c2e:	4463      	add	r3, ip
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
        break;
 8002c34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d100      	bne.n	8002c3e <UART_SetConfig+0x3de>
 8002c3c:	e093      	b.n	8002d66 <UART_SetConfig+0x506>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c40:	005a      	lsls	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	085b      	lsrs	r3, r3, #1
 8002c48:	18d2      	adds	r2, r2, r3
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0019      	movs	r1, r3
 8002c50:	0010      	movs	r0, r2
 8002c52:	f7fd fa59 	bl	8000108 <__udivsi3>
 8002c56:	0003      	movs	r3, r0
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d920      	bls.n	8002ca4 <UART_SetConfig+0x444>
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	4a4b      	ldr	r2, [pc, #300]	; (8002d94 <UART_SetConfig+0x534>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d81c      	bhi.n	8002ca4 <UART_SetConfig+0x444>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	200e      	movs	r0, #14
 8002c70:	2418      	movs	r4, #24
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	181b      	adds	r3, r3, r0
 8002c76:	210f      	movs	r1, #15
 8002c78:	438a      	bics	r2, r1
 8002c7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2207      	movs	r2, #7
 8002c84:	4013      	ands	r3, r2
 8002c86:	b299      	uxth	r1, r3
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	181b      	adds	r3, r3, r0
 8002c8c:	193a      	adds	r2, r7, r4
 8002c8e:	1812      	adds	r2, r2, r0
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	193a      	adds	r2, r7, r4
 8002c9c:	1812      	adds	r2, r2, r0
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	e060      	b.n	8002d66 <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8002ca4:	231a      	movs	r3, #26
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e058      	b.n	8002d66 <UART_SetConfig+0x506>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cb4:	231b      	movs	r3, #27
 8002cb6:	2218      	movs	r2, #24
 8002cb8:	4694      	mov	ip, r2
 8002cba:	44bc      	add	ip, r7
 8002cbc:	4463      	add	r3, ip
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d822      	bhi.n	8002d0a <UART_SetConfig+0x4aa>
 8002cc4:	009a      	lsls	r2, r3, #2
 8002cc6:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <UART_SetConfig+0x538>)
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cce:	f7fe fedb 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cd6:	e022      	b.n	8002d1e <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7fe feec 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce0:	e01d      	b.n	8002d1e <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <UART_SetConfig+0x528>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d002      	beq.n	8002cf2 <UART_SetConfig+0x492>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <UART_SetConfig+0x52c>)
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002cf0:	e015      	b.n	8002d1e <UART_SetConfig+0x4be>
          pclk = (uint32_t) HSI_VALUE;
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <UART_SetConfig+0x530>)
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf6:	e012      	b.n	8002d1e <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cf8:	f7fe fe1a 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d00:	e00d      	b.n	8002d1e <UART_SetConfig+0x4be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d08:	e009      	b.n	8002d1e <UART_SetConfig+0x4be>
      default:
        pclk = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d0e:	231a      	movs	r3, #26
 8002d10:	2218      	movs	r2, #24
 8002d12:	4694      	mov	ip, r2
 8002d14:	44bc      	add	ip, r7
 8002d16:	4463      	add	r3, ip
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
        break;
 8002d1c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <UART_SetConfig+0x506>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	085a      	lsrs	r2, r3, #1
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	18d2      	adds	r2, r2, r3
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0019      	movs	r1, r3
 8002d34:	0010      	movs	r0, r2
 8002d36:	f7fd f9e7 	bl	8000108 <__udivsi3>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d908      	bls.n	8002d58 <UART_SetConfig+0x4f8>
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <UART_SetConfig+0x534>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d804      	bhi.n	8002d58 <UART_SetConfig+0x4f8>
      {
        huart->Instance->BRR = usartdiv;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e006      	b.n	8002d66 <UART_SetConfig+0x506>
      }
      else
      {
        ret = HAL_ERROR;
 8002d58:	231a      	movs	r3, #26
 8002d5a:	2218      	movs	r2, #24
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	44bc      	add	ip, r7
 8002d60:	4463      	add	r3, ip
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d72:	231a      	movs	r3, #26
 8002d74:	2218      	movs	r2, #24
 8002d76:	4694      	mov	ip, r2
 8002d78:	44bc      	add	ip, r7
 8002d7a:	4463      	add	r3, ip
 8002d7c:	781b      	ldrb	r3, [r3, #0]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b00e      	add	sp, #56	; 0x38
 8002d84:	bdb0      	pop	{r4, r5, r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	003d0900 	.word	0x003d0900
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	0000ffff 	.word	0x0000ffff
 8002d98:	080031c8 	.word	0x080031c8

08002d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <UART_AdvFeatureConfig+0x144>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	0019      	movs	r1, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a43      	ldr	r2, [pc, #268]	; (8002ee4 <UART_AdvFeatureConfig+0x148>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2204      	movs	r2, #4
 8002dee:	4013      	ands	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a3b      	ldr	r2, [pc, #236]	; (8002ee8 <UART_AdvFeatureConfig+0x14c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2208      	movs	r2, #8
 8002e10:	4013      	ands	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <UART_AdvFeatureConfig+0x150>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2210      	movs	r2, #16
 8002e32:	4013      	ands	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <UART_AdvFeatureConfig+0x154>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2220      	movs	r2, #32
 8002e54:	4013      	ands	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <UART_AdvFeatureConfig+0x158>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4013      	ands	r3, r2
 8002e78:	d01d      	beq.n	8002eb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <UART_AdvFeatureConfig+0x15c>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	035b      	lsls	r3, r3, #13
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d10b      	bne.n	8002eb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <UART_AdvFeatureConfig+0x160>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2280      	movs	r2, #128	; 0x80
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a0e      	ldr	r2, [pc, #56]	; (8002f00 <UART_AdvFeatureConfig+0x164>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	0019      	movs	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
  }
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b002      	add	sp, #8
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	fffdffff 	.word	0xfffdffff
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	fffbffff 	.word	0xfffbffff
 8002eec:	ffff7fff 	.word	0xffff7fff
 8002ef0:	ffffefff 	.word	0xffffefff
 8002ef4:	ffffdfff 	.word	0xffffdfff
 8002ef8:	ffefffff 	.word	0xffefffff
 8002efc:	ff9fffff 	.word	0xff9fffff
 8002f00:	fff7ffff 	.word	0xfff7ffff

08002f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	2100      	movs	r1, #0
 8002f12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f14:	f7fd fdaa 	bl	8000a6c <HAL_GetTick>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2208      	movs	r2, #8
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d10d      	bne.n	8002f46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	0399      	lsls	r1, r3, #14
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <UART_CheckIdleState+0x90>)
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	0013      	movs	r3, r2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f000 f82d 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e022      	b.n	8002f8c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d10d      	bne.n	8002f70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	03d9      	lsls	r1, r3, #15
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <UART_CheckIdleState+0x90>)
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	0013      	movs	r3, r2
 8002f62:	2200      	movs	r2, #0
 8002f64:	f000 f818 	bl	8002f98 <UART_WaitOnFlagUntilTimeout>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e00d      	b.n	8002f8c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2274      	movs	r2, #116	; 0x74
 8002f86:	2100      	movs	r1, #0
 8002f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b004      	add	sp, #16
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	01ffffff 	.word	0x01ffffff

08002f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b094      	sub	sp, #80	; 0x50
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa8:	e09b      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	3301      	adds	r3, #1
 8002fae:	d100      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fb0:	e097      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fd fd5b 	bl	8000a6c <HAL_GetTick>
 8002fb6:	0002      	movs	r2, r0
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d139      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	f383 8810 	msr	PRIMASK, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4949      	ldr	r1, [pc, #292]	; (800310c <UART_WaitOnFlagUntilTimeout+0x174>)
 8002fe8:	400a      	ands	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
 8002ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8003000:	2301      	movs	r3, #1
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	f383 8810 	msr	PRIMASK, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	438a      	bics	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003020:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2274      	movs	r2, #116	; 0x74
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e063      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d04c      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	401a      	ands	r2, r3
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	429a      	cmp	r2, r3
 800305a:	d142      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	613b      	str	r3, [r7, #16]
  return(result);
 800306c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f383 8810 	msr	PRIMASK, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4921      	ldr	r1, [pc, #132]	; (800310c <UART_WaitOnFlagUntilTimeout+0x174>)
 8003086:	400a      	ands	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003094:	f3ef 8310 	mrs	r3, PRIMASK
 8003098:	61fb      	str	r3, [r7, #28]
  return(result);
 800309a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
 800309e:	2301      	movs	r3, #1
 80030a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f383 8810 	msr	PRIMASK, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2101      	movs	r1, #1
 80030b4:	438a      	bics	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	2120      	movs	r1, #32
 80030d4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2274      	movs	r2, #116	; 0x74
 80030da:	2100      	movs	r1, #0
 80030dc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e010      	b.n	8003104 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	425a      	negs	r2, r3
 80030f2:	4153      	adcs	r3, r2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	001a      	movs	r2, r3
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d100      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0x16a>
 8003100:	e753      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b014      	add	sp, #80	; 0x50
 800310a:	bd80      	pop	{r7, pc}
 800310c:	fffffe5f 	.word	0xfffffe5f

08003110 <__libc_init_array>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	2600      	movs	r6, #0
 8003114:	4d0c      	ldr	r5, [pc, #48]	; (8003148 <__libc_init_array+0x38>)
 8003116:	4c0d      	ldr	r4, [pc, #52]	; (800314c <__libc_init_array+0x3c>)
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	42a6      	cmp	r6, r4
 800311e:	d109      	bne.n	8003134 <__libc_init_array+0x24>
 8003120:	2600      	movs	r6, #0
 8003122:	f000 f821 	bl	8003168 <_init>
 8003126:	4d0a      	ldr	r5, [pc, #40]	; (8003150 <__libc_init_array+0x40>)
 8003128:	4c0a      	ldr	r4, [pc, #40]	; (8003154 <__libc_init_array+0x44>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	42a6      	cmp	r6, r4
 8003130:	d105      	bne.n	800313e <__libc_init_array+0x2e>
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	00b3      	lsls	r3, r6, #2
 8003136:	58eb      	ldr	r3, [r5, r3]
 8003138:	4798      	blx	r3
 800313a:	3601      	adds	r6, #1
 800313c:	e7ee      	b.n	800311c <__libc_init_array+0xc>
 800313e:	00b3      	lsls	r3, r6, #2
 8003140:	58eb      	ldr	r3, [r5, r3]
 8003142:	4798      	blx	r3
 8003144:	3601      	adds	r6, #1
 8003146:	e7f2      	b.n	800312e <__libc_init_array+0x1e>
 8003148:	080031f4 	.word	0x080031f4
 800314c:	080031f4 	.word	0x080031f4
 8003150:	080031f4 	.word	0x080031f4
 8003154:	080031f8 	.word	0x080031f8

08003158 <memset>:
 8003158:	0003      	movs	r3, r0
 800315a:	1812      	adds	r2, r2, r0
 800315c:	4293      	cmp	r3, r2
 800315e:	d100      	bne.n	8003162 <memset+0xa>
 8003160:	4770      	bx	lr
 8003162:	7019      	strb	r1, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	e7f9      	b.n	800315c <memset+0x4>

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
